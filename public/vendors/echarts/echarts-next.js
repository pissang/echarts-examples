
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['exports'], factory);
    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {
        // CommonJS
        factory(exports);
    } else {
        // Browser globals
        factory((root.echarts = {}));
    }
}(typeof self !== 'undefined' ? self : this, function (exports, b) {
let __defineProperty = Object.defineProperty;
let __export = (target, all) => {
  __defineProperty(target, "__esModule", {
    value: true
  });
  for (let name in all)
    __defineProperty(target, name, {
      get: all[name],
      enumerable: true
    });
};

// src/config.ts
let dev;
if (typeof window !== "undefined") {
  dev = window.__DEV__;
} else if (typeof global !== "undefined") {
  dev = global.__DEV__;
}
if (typeof dev === "undefined") {
  dev = true;
}
const __DEV__ = dev;

// node_modules/zrender/src/core/env.ts
class Browser {
  constructor() {
    this.firefox = false;
    this.ie = false;
    this.edge = false;
    this.weChat = false;
  }
}
class Env {
  constructor() {
    this.browser = new Browser();
    this.node = false;
    this.wxa = false;
    this.worker = false;
    this.canvasSupported = false;
    this.svgSupported = false;
    this.touchEventsSupported = false;
    this.pointerEventsSupported = false;
    this.domSupported = false;
  }
}
const env4 = new Env();
if (typeof wx === "object" && typeof wx.getSystemInfoSync === "function") {
  env4.wxa = true;
  env4.canvasSupported = true;
  env4.touchEventsSupported = true;
} else if (typeof document === "undefined" && typeof self !== "undefined") {
  env4.worker = true;
  env4.canvasSupported = true;
} else if (typeof navigator === "undefined") {
  env4.node = true;
  env4.canvasSupported = true;
  env4.svgSupported = true;
} else {
  detect(navigator.userAgent, env4);
}
function detect(ua, env20) {
  const browser = env20.browser;
  const firefox = ua.match(/Firefox\/([\d.]+)/);
  const ie = ua.match(/MSIE\s([\d.]+)/) || ua.match(/Trident\/.+?rv:(([\d.]+))/);
  const edge = ua.match(/Edge\/([\d.]+)/);
  const weChat = /micromessenger/i.test(ua);
  if (firefox) {
    browser.firefox = true;
    browser.version = firefox[1];
  }
  if (ie) {
    browser.ie = true;
    browser.version = ie[1];
  }
  if (edge) {
    browser.edge = true;
    browser.version = edge[1];
  }
  if (weChat) {
    browser.weChat = true;
  }
  env20.canvasSupported = !!document.createElement("canvas").getContext;
  env20.svgSupported = typeof SVGRect !== "undefined";
  env20.touchEventsSupported = "ontouchstart" in window && !browser.ie && !browser.edge;
  env20.pointerEventsSupported = "onpointerdown" in window && (browser.edge || browser.ie && +browser.version >= 11);
  env20.domSupported = typeof document !== "undefined";
}
const env_default = env4;

// node_modules/zrender/src/core/util.ts
const util_exports = {};
__export(util_exports, {
  $override: () => $override2,
  HashMap: () => HashMap,
  assert: () => assert,
  bind: () => bind,
  clone: () => clone2,
  concatArray: () => concatArray,
  createCanvas: () => createCanvas,
  createHashMap: () => createHashMap,
  createObject: () => createObject,
  curry: () => curry,
  defaults: () => defaults,
  each: () => each,
  eqNaN: () => eqNaN,
  extend: () => extend,
  filter: () => filter,
  find: () => find,
  guid: () => guid,
  hasOwn: () => hasOwn,
  indexOf: () => indexOf,
  inherits: () => inherits,
  isArray: () => isArray,
  isArrayLike: () => isArrayLike,
  isBuiltInObject: () => isBuiltInObject,
  isDom: () => isDom,
  isFunction: () => isFunction,
  isGradientObject: () => isGradientObject,
  isObject: () => isObject,
  isPatternObject: () => isPatternObject,
  isPrimitive: () => isPrimitive,
  isString: () => isString,
  isTypedArray: () => isTypedArray,
  keys: () => keys,
  logError: () => logError,
  map: () => map2,
  merge: () => merge,
  mergeAll: () => mergeAll,
  mixin: () => mixin,
  noop: () => noop,
  normalizeCssArray: () => normalizeCssArray,
  reduce: () => reduce,
  retrieve: () => retrieve,
  retrieve2: () => retrieve2,
  retrieve3: () => retrieve3,
  setAsPrimitive: () => setAsPrimitive,
  slice: () => slice,
  trim: () => trim
});
const BUILTIN_OBJECT = {
  "[object Function]": true,
  "[object RegExp]": true,
  "[object Date]": true,
  "[object Error]": true,
  "[object CanvasGradient]": true,
  "[object CanvasPattern]": true,
  "[object Image]": true,
  "[object Canvas]": true
};
const TYPED_ARRAY = {
  "[object Int8Array]": true,
  "[object Uint8Array]": true,
  "[object Uint8ClampedArray]": true,
  "[object Int16Array]": true,
  "[object Uint16Array]": true,
  "[object Int32Array]": true,
  "[object Uint32Array]": true,
  "[object Float32Array]": true,
  "[object Float64Array]": true
};
const objToString = Object.prototype.toString;
const arrayProto = Array.prototype;
const nativeForEach = arrayProto.forEach;
const nativeFilter = arrayProto.filter;
const nativeSlice = arrayProto.slice;
const nativeMap = arrayProto.map;
const ctorFunction = function() {
}.constructor;
const protoFunction = ctorFunction ? ctorFunction.prototype : null;
const methods2 = {};
function $override2(name, fn) {
  methods2[name] = fn;
}
let idStart = 2311;
function guid() {
  return idStart++;
}
function logError(...args) {
  if (typeof console !== "undefined") {
    console.error.apply(args);
  }
}
function clone2(source) {
  if (source == null || typeof source !== "object") {
    return source;
  }
  let result = source;
  const typeStr = objToString.call(source);
  if (typeStr === "[object Array]") {
    if (!isPrimitive(source)) {
      result = [];
      for (let i = 0, len2 = source.length; i < len2; i++) {
        result[i] = clone2(source[i]);
      }
    }
  } else if (TYPED_ARRAY[typeStr]) {
    if (!isPrimitive(source)) {
      const Ctor = source.constructor;
      if (Ctor.from) {
        result = Ctor.from(source);
      } else {
        result = new Ctor(source.length);
        for (let i = 0, len2 = source.length; i < len2; i++) {
          result[i] = clone2(source[i]);
        }
      }
    }
  } else if (!BUILTIN_OBJECT[typeStr] && !isPrimitive(source) && !isDom(source)) {
    result = {};
    for (let key in source) {
      if (source.hasOwnProperty(key)) {
        result[key] = clone2(source[key]);
      }
    }
  }
  return result;
}
function merge(target, source, overwrite) {
  if (!isObject(source) || !isObject(target)) {
    return overwrite ? clone2(source) : target;
  }
  for (let key in source) {
    if (source.hasOwnProperty(key)) {
      const targetProp = target[key];
      const sourceProp = source[key];
      if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuiltInObject(sourceProp) && !isBuiltInObject(targetProp) && !isPrimitive(sourceProp) && !isPrimitive(targetProp)) {
        merge(targetProp, sourceProp, overwrite);
      } else if (overwrite || !(key in target)) {
        target[key] = clone2(source[key]);
      }
    }
  }
  return target;
}
function mergeAll(targetAndSources, overwrite) {
  let result = targetAndSources[0];
  for (let i = 1, len2 = targetAndSources.length; i < len2; i++) {
    result = merge(result, targetAndSources[i], overwrite);
  }
  return result;
}
function extend(target, source) {
  if (Object.assign) {
    Object.assign(target, source);
  } else {
    for (let key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
}
function defaults(target, source, overlay) {
  const keysArr = keys(source);
  for (let i = 0; i < keysArr.length; i++) {
    let key = keysArr[i];
    if (overlay ? source[key] != null : target[key] == null) {
      target[key] = source[key];
    }
  }
  return target;
}
const createCanvas = function() {
  return methods2.createCanvas();
};
methods2.createCanvas = function() {
  return document.createElement("canvas");
};
function indexOf(array, value) {
  if (array) {
    if (array.indexOf) {
      return array.indexOf(value);
    }
    for (let i = 0, len2 = array.length; i < len2; i++) {
      if (array[i] === value) {
        return i;
      }
    }
  }
  return -1;
}
function inherits(clazz7, baseClazz) {
  const clazzPrototype = clazz7.prototype;
  function F() {
  }
  F.prototype = baseClazz.prototype;
  clazz7.prototype = new F();
  for (let prop in clazzPrototype) {
    if (clazzPrototype.hasOwnProperty(prop)) {
      clazz7.prototype[prop] = clazzPrototype[prop];
    }
  }
  clazz7.prototype.constructor = clazz7;
  clazz7.superClass = baseClazz;
}
function mixin(target, source, override) {
  target = "prototype" in target ? target.prototype : target;
  source = "prototype" in source ? source.prototype : source;
  if (Object.getOwnPropertyNames) {
    const keyList = Object.getOwnPropertyNames(source);
    for (let i = 0; i < keyList.length; i++) {
      const key = keyList[i];
      if (key !== "constructor") {
        if (override ? source[key] != null : target[key] == null) {
          target[key] = source[key];
        }
      }
    }
  } else {
    defaults(target, source, override);
  }
}
function isArrayLike(data) {
  if (!data) {
    return false;
  }
  if (typeof data === "string") {
    return false;
  }
  return typeof data.length === "number";
}
function each(arr, cb, context) {
  if (!(arr && cb)) {
    return;
  }
  if (arr.forEach && arr.forEach === nativeForEach) {
    arr.forEach(cb, context);
  } else if (arr.length === +arr.length) {
    for (let i = 0, len2 = arr.length; i < len2; i++) {
      cb.call(context, arr[i], i, arr);
    }
  } else {
    for (let key in arr) {
      if (arr.hasOwnProperty(key)) {
        cb.call(context, arr[key], key, arr);
      }
    }
  }
}
function map2(arr, cb, context) {
  if (!arr) {
    return [];
  }
  if (!cb) {
    return slice(arr);
  }
  if (arr.map && arr.map === nativeMap) {
    return arr.map(cb, context);
  } else {
    const result = [];
    for (let i = 0, len2 = arr.length; i < len2; i++) {
      result.push(cb.call(context, arr[i], i, arr));
    }
    return result;
  }
}
function reduce(arr, cb, memo, context) {
  if (!(arr && cb)) {
    return;
  }
  for (let i = 0, len2 = arr.length; i < len2; i++) {
    memo = cb.call(context, memo, arr[i], i, arr);
  }
  return memo;
}
function filter(arr, cb, context) {
  if (!arr) {
    return [];
  }
  if (!cb) {
    return slice(arr);
  }
  if (arr.filter && arr.filter === nativeFilter) {
    return arr.filter(cb, context);
  } else {
    const result = [];
    for (let i = 0, len2 = arr.length; i < len2; i++) {
      if (cb.call(context, arr[i], i, arr)) {
        result.push(arr[i]);
      }
    }
    return result;
  }
}
function find(arr, cb, context) {
  if (!(arr && cb)) {
    return;
  }
  for (let i = 0, len2 = arr.length; i < len2; i++) {
    if (cb.call(context, arr[i], i, arr)) {
      return arr[i];
    }
  }
}
function keys(obj) {
  if (!obj) {
    return [];
  }
  if (Object.keys) {
    return Object.keys(obj);
  }
  let keyList = [];
  for (let key in obj) {
    if (obj.hasOwnProperty(key)) {
      keyList.push(key);
    }
  }
  return keyList;
}
function bindPolyfill(func, context, ...args) {
  return function() {
    return func.apply(context, args.concat(nativeSlice.call(arguments)));
  };
}
const bind = protoFunction && isFunction(protoFunction.bind) ? protoFunction.call.bind(protoFunction.bind) : bindPolyfill;
function curry(func, ...args) {
  return function() {
    return func.apply(this, args.concat(nativeSlice.call(arguments)));
  };
}
function isArray(value) {
  if (Array.isArray) {
    return Array.isArray(value);
  }
  return objToString.call(value) === "[object Array]";
}
function isFunction(value) {
  return typeof value === "function";
}
function isString(value) {
  return typeof value === "string";
}
function isObject(value) {
  const type = typeof value;
  return type === "function" || !!value && type === "object";
}
function isBuiltInObject(value) {
  return !!BUILTIN_OBJECT[objToString.call(value)];
}
function isTypedArray(value) {
  return !!TYPED_ARRAY[objToString.call(value)];
}
function isDom(value) {
  return typeof value === "object" && typeof value.nodeType === "number" && typeof value.ownerDocument === "object";
}
function isGradientObject(value) {
  return value.colorStops != null;
}
function isPatternObject(value) {
  return value.image != null;
}
function eqNaN(value) {
  return value !== value;
}
function retrieve(...args) {
  for (let i = 0, len2 = args.length; i < len2; i++) {
    if (args[i] != null) {
      return args[i];
    }
  }
}
function retrieve2(value0, value1) {
  return value0 != null ? value0 : value1;
}
function retrieve3(value0, value1, value2) {
  return value0 != null ? value0 : value1 != null ? value1 : value2;
}
function slice(arr, ...args) {
  return nativeSlice.apply(arr, args);
}
function normalizeCssArray(val) {
  if (typeof val === "number") {
    return [val, val, val, val];
  }
  const len2 = val.length;
  if (len2 === 2) {
    return [val[0], val[1], val[0], val[1]];
  } else if (len2 === 3) {
    return [val[0], val[1], val[2], val[1]];
  }
  return val;
}
function assert(condition, message) {
  if (!condition) {
    throw new Error(message);
  }
}
function trim(str) {
  if (str == null) {
    return null;
  } else if (typeof str.trim === "function") {
    return str.trim();
  } else {
    return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  }
}
const primitiveKey = "__ec_primitive__";
function setAsPrimitive(obj) {
  obj[primitiveKey] = true;
}
function isPrimitive(obj) {
  return obj[primitiveKey];
}
class HashMap {
  constructor(obj) {
    this.data = {};
    const isArr = isArray(obj);
    this.data = {};
    const thisMap = this;
    obj instanceof HashMap ? obj.each(visit) : obj && each(obj, visit);
    function visit(value, key) {
      isArr ? thisMap.set(value, key) : thisMap.set(key, value);
    }
  }
  get(key) {
    return this.data.hasOwnProperty(key) ? this.data[key] : null;
  }
  set(key, value) {
    return this.data[key] = value;
  }
  each(cb, context) {
    for (let key in this.data) {
      if (this.data.hasOwnProperty(key)) {
        cb.call(context, this.data[key], key);
      }
    }
  }
  keys() {
    return keys(this.data);
  }
  removeKey(key) {
    delete this.data[key];
  }
}
function createHashMap(obj) {
  return new HashMap(obj);
}
function concatArray(a, b) {
  const newArray = new a.constructor(a.length + b.length);
  for (let i = 0; i < a.length; i++) {
    newArray[i] = a[i];
  }
  const offset = a.length;
  for (let i = 0; i < b.length; i++) {
    newArray[i + offset] = b[i];
  }
  return newArray;
}
function createObject(proto2, properties) {
  let obj;
  if (Object.create) {
    obj = Object.create(proto2);
  } else {
    const StyleCtor = function() {
    };
    StyleCtor.prototype = proto2;
    obj = new StyleCtor();
  }
  if (properties) {
    extend(obj, properties);
  }
  return obj;
}
function hasOwn(own, prop) {
  return own.hasOwnProperty(prop);
}
function noop() {
}

// node_modules/zrender/src/core/vector.ts
const vector_exports = {};
__export(vector_exports, {
  add: () => add,
  applyTransform: () => applyTransform,
  clone: () => clone3,
  copy: () => copy2,
  create: () => create2,
  dist: () => dist,
  distSquare: () => distSquare,
  distance: () => distance,
  distanceSquare: () => distanceSquare,
  div: () => div,
  dot: () => dot,
  len: () => len,
  lenSquare: () => lenSquare,
  length: () => length,
  lengthSquare: () => lengthSquare,
  lerp: () => lerp,
  max: () => max3,
  min: () => min3,
  mul: () => mul2,
  negate: () => negate,
  normalize: () => normalize,
  scale: () => scale2,
  scaleAndAdd: () => scaleAndAdd,
  set: () => set,
  sub: () => sub
});
function create2(x, y) {
  if (x == null) {
    x = 0;
  }
  if (y == null) {
    y = 0;
  }
  return [x, y];
}
function copy2(out2, v4) {
  out2[0] = v4[0];
  out2[1] = v4[1];
  return out2;
}
function clone3(v4) {
  return [v4[0], v4[1]];
}
function set(out2, a, b) {
  out2[0] = a;
  out2[1] = b;
  return out2;
}
function add(out2, v12, v22) {
  out2[0] = v12[0] + v22[0];
  out2[1] = v12[1] + v22[1];
  return out2;
}
function scaleAndAdd(out2, v12, v22, a) {
  out2[0] = v12[0] + v22[0] * a;
  out2[1] = v12[1] + v22[1] * a;
  return out2;
}
function sub(out2, v12, v22) {
  out2[0] = v12[0] - v22[0];
  out2[1] = v12[1] - v22[1];
  return out2;
}
function len(v4) {
  return Math.sqrt(lenSquare(v4));
}
const length = len;
function lenSquare(v4) {
  return v4[0] * v4[0] + v4[1] * v4[1];
}
const lengthSquare = lenSquare;
function mul2(out2, v12, v22) {
  out2[0] = v12[0] * v22[0];
  out2[1] = v12[1] * v22[1];
  return out2;
}
function div(out2, v12, v22) {
  out2[0] = v12[0] / v22[0];
  out2[1] = v12[1] / v22[1];
  return out2;
}
function dot(v12, v22) {
  return v12[0] * v22[0] + v12[1] * v22[1];
}
function scale2(out2, v4, s) {
  out2[0] = v4[0] * s;
  out2[1] = v4[1] * s;
  return out2;
}
function normalize(out2, v4) {
  const d = len(v4);
  if (d === 0) {
    out2[0] = 0;
    out2[1] = 0;
  } else {
    out2[0] = v4[0] / d;
    out2[1] = v4[1] / d;
  }
  return out2;
}
function distance(v12, v22) {
  return Math.sqrt((v12[0] - v22[0]) * (v12[0] - v22[0]) + (v12[1] - v22[1]) * (v12[1] - v22[1]));
}
const dist = distance;
function distanceSquare(v12, v22) {
  return (v12[0] - v22[0]) * (v12[0] - v22[0]) + (v12[1] - v22[1]) * (v12[1] - v22[1]);
}
const distSquare = distanceSquare;
function negate(out2, v4) {
  out2[0] = -v4[0];
  out2[1] = -v4[1];
  return out2;
}
function lerp(out2, v12, v22, t) {
  out2[0] = v12[0] + t * (v22[0] - v12[0]);
  out2[1] = v12[1] + t * (v22[1] - v12[1]);
  return out2;
}
function applyTransform(out2, v4, m2) {
  const x = v4[0];
  const y = v4[1];
  out2[0] = m2[0] * x + m2[2] * y + m2[4];
  out2[1] = m2[1] * x + m2[3] * y + m2[5];
  return out2;
}
function min3(out2, v12, v22) {
  out2[0] = Math.min(v12[0], v22[0]);
  out2[1] = Math.min(v12[1], v22[1]);
  return out2;
}
function max3(out2, v12, v22) {
  out2[0] = Math.max(v12[0], v22[0]);
  out2[1] = Math.max(v12[1], v22[1]);
  return out2;
}

// node_modules/zrender/src/mixin/Draggable.ts
class Param {
  constructor(target, e) {
    this.target = target;
    this.topTarget = e && e.topTarget;
  }
}
class Draggable2 {
  constructor(handler) {
    this.handler = handler;
    handler.on("mousedown", this._dragStart, this);
    handler.on("mousemove", this._drag, this);
    handler.on("mouseup", this._dragEnd, this);
  }
  _dragStart(e) {
    let draggingTarget = e.target;
    while (draggingTarget && !draggingTarget.draggable) {
      draggingTarget = draggingTarget.parent;
    }
    if (draggingTarget) {
      this._draggingTarget = draggingTarget;
      draggingTarget.dragging = true;
      this._x = e.offsetX;
      this._y = e.offsetY;
      this.handler.dispatchToElement(new Param(draggingTarget, e), "dragstart", e.event);
    }
  }
  _drag(e) {
    const draggingTarget = this._draggingTarget;
    if (draggingTarget) {
      const x = e.offsetX;
      const y = e.offsetY;
      const dx = x - this._x;
      const dy = y - this._y;
      this._x = x;
      this._y = y;
      draggingTarget.drift(dx, dy, e);
      this.handler.dispatchToElement(new Param(draggingTarget, e), "drag", e.event);
      const dropTarget = this.handler.findHover(x, y, draggingTarget).target;
      const lastDropTarget = this._dropTarget;
      this._dropTarget = dropTarget;
      if (draggingTarget !== dropTarget) {
        if (lastDropTarget && dropTarget !== lastDropTarget) {
          this.handler.dispatchToElement(new Param(lastDropTarget, e), "dragleave", e.event);
        }
        if (dropTarget && dropTarget !== lastDropTarget) {
          this.handler.dispatchToElement(new Param(dropTarget, e), "dragenter", e.event);
        }
      }
    }
  }
  _dragEnd(e) {
    const draggingTarget = this._draggingTarget;
    if (draggingTarget) {
      draggingTarget.dragging = false;
    }
    this.handler.dispatchToElement(new Param(draggingTarget, e), "dragend", e.event);
    if (this._dropTarget) {
      this.handler.dispatchToElement(new Param(this._dropTarget, e), "drop", e.event);
    }
    this._draggingTarget = null;
    this._dropTarget = null;
  }
}

// node_modules/zrender/src/core/Eventful.ts
class Eventful2 {
  constructor(eventProcessors) {
    if (eventProcessors) {
      this._$eventProcessor = eventProcessors;
    }
  }
  on(event3, query, handler, context) {
    if (!this._$handlers) {
      this._$handlers = {};
    }
    const _h = this._$handlers;
    if (typeof query === "function") {
      context = handler;
      handler = query;
      query = null;
    }
    if (!handler || !event3) {
      return this;
    }
    const eventProcessor = this._$eventProcessor;
    if (query != null && eventProcessor && eventProcessor.normalizeQuery) {
      query = eventProcessor.normalizeQuery(query);
    }
    if (!_h[event3]) {
      _h[event3] = [];
    }
    for (let i = 0; i < _h[event3].length; i++) {
      if (_h[event3][i].h === handler) {
        return this;
      }
    }
    const wrap = {
      h: handler,
      query,
      ctx: context || this,
      callAtLast: handler.zrEventfulCallAtLast
    };
    const lastIndex = _h[event3].length - 1;
    const lastWrap = _h[event3][lastIndex];
    lastWrap && lastWrap.callAtLast ? _h[event3].splice(lastIndex, 0, wrap) : _h[event3].push(wrap);
    return this;
  }
  isSilent(eventName) {
    const _h = this._$handlers;
    return !_h || !_h[eventName] || !_h[eventName].length;
  }
  off(eventType, handler) {
    const _h = this._$handlers;
    if (!_h) {
      return this;
    }
    if (!eventType) {
      this._$handlers = {};
      return this;
    }
    if (handler) {
      if (_h[eventType]) {
        const newList = [];
        for (let i = 0, l = _h[eventType].length; i < l; i++) {
          if (_h[eventType][i].h !== handler) {
            newList.push(_h[eventType][i]);
          }
        }
        _h[eventType] = newList;
      }
      if (_h[eventType] && _h[eventType].length === 0) {
        delete _h[eventType];
      }
    } else {
      delete _h[eventType];
    }
    return this;
  }
  trigger(eventType, ...args) {
    if (!this._$handlers) {
      return this;
    }
    const _h = this._$handlers[eventType];
    const eventProcessor = this._$eventProcessor;
    if (_h) {
      const argLen = args.length;
      const len2 = _h.length;
      for (let i = 0; i < len2; i++) {
        const hItem = _h[i];
        if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(eventType, hItem.query)) {
          i++;
          continue;
        }
        switch (argLen) {
          case 0:
            hItem.h.call(hItem.ctx);
            break;
          case 1:
            hItem.h.call(hItem.ctx, args[0]);
            break;
          case 2:
            hItem.h.call(hItem.ctx, args[0], args[1]);
            break;
          default:
            hItem.h.apply(hItem.ctx, args);
            break;
        }
      }
    }
    eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(eventType);
    return this;
  }
  triggerWithContext(type) {
    if (!this._$handlers) {
      return this;
    }
    const _h = this._$handlers[type];
    const eventProcessor = this._$eventProcessor;
    if (_h) {
      const args = arguments;
      const argLen = args.length;
      const ctx = args[argLen - 1];
      const len2 = _h.length;
      for (let i = 0; i < len2; ) {
        const hItem = _h[i];
        if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) {
          i++;
          continue;
        }
        switch (argLen) {
          case 0:
            hItem.h.call(ctx);
            break;
          case 1:
            hItem.h.call(ctx, args[0]);
            break;
          case 2:
            hItem.h.call(ctx, args[0], args[1]);
            break;
          default:
            hItem.h.apply(ctx, args.slice(1, argLen - 1));
            break;
        }
      }
    }
    eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);
    return this;
  }
}

// node_modules/zrender/src/core/fourPointsTransform.ts
const LN2 = Math.log(2);
function determinant(rows, rank, rowStart, rowMask, colMask, detCache) {
  const cacheKey = rowMask + "-" + colMask;
  const fullRank = rows.length;
  if (detCache.hasOwnProperty(cacheKey)) {
    return detCache[cacheKey];
  }
  if (rank === 1) {
    const colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);
    return rows[rowStart][colStart];
  }
  const subRowMask = rowMask | 1 << rowStart;
  let subRowStart = rowStart + 1;
  while (rowMask & 1 << subRowStart) {
    subRowStart++;
  }
  let sum2 = 0;
  for (let j = 0, colLocalIdx = 0; j < fullRank; j++) {
    const colTag = 1 << j;
    if (!(colTag & colMask)) {
      sum2 += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);
      colLocalIdx++;
    }
  }
  detCache[cacheKey] = sum2;
  return sum2;
}
function buildTransformer(src, dest) {
  const mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];
  const detCache = {};
  const det = determinant(mA, 8, 0, 0, 0, detCache);
  if (det === 0) {
    return;
  }
  const vh = [];
  for (let i = 0; i < 8; i++) {
    for (let j = 0; j < 8; j++) {
      vh[j] == null && (vh[j] = 0);
      vh[j] += ((i + j) % 2 ? -1 : 1) * determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];
    }
  }
  return function(out2, srcPointX, srcPointY) {
    const pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;
    out2[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;
    out2[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;
  };
}

// node_modules/zrender/src/core/dom.ts
const EVENT_SAVED_PROP = "___zrEVENTSAVED";
const _calcOut = [];
function transformLocalCoord(out2, elFrom, elTarget, inX, inY) {
  return transformCoordWithViewport(_calcOut, elFrom, inX, inY, true) && transformCoordWithViewport(out2, elTarget, _calcOut[0], _calcOut[1]);
}
function transformCoordWithViewport(out2, el, inX, inY, inverse) {
  if (el.getBoundingClientRect && env_default.domSupported && !isCanvasEl(el)) {
    const saved = el[EVENT_SAVED_PROP] || (el[EVENT_SAVED_PROP] = {});
    const markers = prepareCoordMarkers(el, saved);
    const transformer = preparePointerTransformer(markers, saved, inverse);
    if (transformer) {
      transformer(out2, inX, inY);
      return true;
    }
  }
  return false;
}
function prepareCoordMarkers(el, saved) {
  let markers = saved.markers;
  if (markers) {
    return markers;
  }
  markers = saved.markers = [];
  const propLR = ["left", "right"];
  const propTB = ["top", "bottom"];
  for (let i = 0; i < 4; i++) {
    const marker = document.createElement("div");
    const stl = marker.style;
    const idxLR = i % 2;
    const idxTB = (i >> 1) % 2;
    stl.cssText = ["position: absolute", "visibility: hidden", "padding: 0", "margin: 0", "border-width: 0", "user-select: none", "width:0", "height:0", propLR[idxLR] + ":0", propTB[idxTB] + ":0", propLR[1 - idxLR] + ":auto", propTB[1 - idxTB] + ":auto", ""].join("!important;");
    el.appendChild(marker);
    markers.push(marker);
  }
  return markers;
}
function preparePointerTransformer(markers, saved, inverse) {
  const transformerName = inverse ? "invTrans" : "trans";
  const transformer = saved[transformerName];
  const oldSrcCoords = saved.srcCoords;
  const srcCoords = [];
  const destCoords = [];
  let oldCoordTheSame = true;
  for (let i = 0; i < 4; i++) {
    const rect = markers[i].getBoundingClientRect();
    const ii = 2 * i;
    const x = rect.left;
    const y = rect.top;
    srcCoords.push(x, y);
    oldCoordTheSame = oldCoordTheSame && oldSrcCoords && x === oldSrcCoords[ii] && y === oldSrcCoords[ii + 1];
    destCoords.push(markers[i].offsetLeft, markers[i].offsetTop);
  }
  return oldCoordTheSame && transformer ? transformer : (saved.srcCoords = srcCoords, saved[transformerName] = inverse ? buildTransformer(destCoords, srcCoords) : buildTransformer(srcCoords, destCoords));
}
function isCanvasEl(el) {
  return el.nodeName.toUpperCase() === "CANVAS";
}

// node_modules/zrender/src/core/event.ts
const isDomLevel2 = typeof window !== "undefined" && !!window.addEventListener;
const MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
const _calcOut2 = [];
function clientToLocal(el, e, out2, calculate) {
  out2 = out2 || {};
  if (calculate || !env_default.canvasSupported) {
    calculateZrXY(el, e, out2);
  } else if (env_default.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
    out2.zrX = e.layerX;
    out2.zrY = e.layerY;
  } else if (e.offsetX != null) {
    out2.zrX = e.offsetX;
    out2.zrY = e.offsetY;
  } else {
    calculateZrXY(el, e, out2);
  }
  return out2;
}
function calculateZrXY(el, e, out2) {
  if (env_default.domSupported && el.getBoundingClientRect) {
    const ex = e.clientX;
    const ey = e.clientY;
    if (isCanvasEl(el)) {
      const box2 = el.getBoundingClientRect();
      out2.zrX = ex - box2.left;
      out2.zrY = ey - box2.top;
      return;
    } else {
      if (transformCoordWithViewport(_calcOut2, el, ex, ey)) {
        out2.zrX = _calcOut2[0];
        out2.zrY = _calcOut2[1];
        return;
      }
    }
  }
  out2.zrX = out2.zrY = 0;
}
function getNativeEvent(e) {
  return e || window.event;
}
function normalizeEvent(el, e, calculate) {
  e = getNativeEvent(e);
  if (e.zrX != null) {
    return e;
  }
  const eventType = e.type;
  const isTouch = eventType && eventType.indexOf("touch") >= 0;
  if (!isTouch) {
    clientToLocal(el, e, e, calculate);
    const wheelDelta = getWheelDeltaMayPolyfill(e);
    e.zrDelta = wheelDelta ? wheelDelta / 120 : -(e.detail || 0) / 3;
  } else {
    const touch = eventType !== "touchend" ? e.targetTouches[0] : e.changedTouches[0];
    touch && clientToLocal(el, touch, e, calculate);
  }
  const button = e.button;
  if (e.which == null && button !== void 0 && MOUSE_EVENT_REG.test(e.type)) {
    e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
  }
  return e;
}
function getWheelDeltaMayPolyfill(e) {
  const rawWheelDelta = e.wheelDelta;
  if (rawWheelDelta) {
    return rawWheelDelta;
  }
  const deltaX = e.deltaX;
  const deltaY = e.deltaY;
  if (deltaX == null || deltaY == null) {
    return rawWheelDelta;
  }
  const delta = deltaY !== 0 ? Math.abs(deltaY) : Math.abs(deltaX);
  const sign = deltaY > 0 ? -1 : deltaY < 0 ? 1 : deltaX > 0 ? -1 : 1;
  return 3 * delta * sign;
}
function addEventListener(el, name, handler, opt) {
  if (isDomLevel2) {
    el.addEventListener(name, handler, opt);
  } else {
    el.attachEvent("on" + name, handler);
  }
}
function removeEventListener(el, name, handler, opt) {
  if (isDomLevel2) {
    el.removeEventListener(name, handler);
  } else {
    el.detachEvent("on" + name, handler);
  }
}
const stop = isDomLevel2 ? function(e) {
  e.preventDefault();
  e.stopPropagation();
  e.cancelBubble = true;
} : function(e) {
  e.returnValue = false;
  e.cancelBubble = true;
};
function isMiddleOrRightButtonOnMouseUpDown(e) {
  return e.which === 2 || e.which === 3;
}

// node_modules/zrender/src/core/GestureMgr.ts
class GestureMgr2 {
  constructor() {
    this._track = [];
  }
  recognize(event3, target, root) {
    this._doTrack(event3, target, root);
    return this._recognize(event3);
  }
  clear() {
    this._track.length = 0;
    return this;
  }
  _doTrack(event3, target, root) {
    const touches = event3.touches;
    if (!touches) {
      return;
    }
    const trackItem = {
      points: [],
      touches: [],
      target,
      event: event3
    };
    for (let i = 0, len2 = touches.length; i < len2; i++) {
      const touch = touches[i];
      const pos = clientToLocal(root, touch, {});
      trackItem.points.push([pos.zrX, pos.zrY]);
      trackItem.touches.push(touch);
    }
    this._track.push(trackItem);
  }
  _recognize(event3) {
    for (let eventName in recognizers) {
      if (recognizers.hasOwnProperty(eventName)) {
        const gestureInfo = recognizers[eventName](this._track, event3);
        if (gestureInfo) {
          return gestureInfo;
        }
      }
    }
  }
}
function dist2(pointPair) {
  const dx = pointPair[1][0] - pointPair[0][0];
  const dy = pointPair[1][1] - pointPair[0][1];
  return Math.sqrt(dx * dx + dy * dy);
}
function center(pointPair) {
  return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
}
const recognizers = {
  pinch: function(tracks, event3) {
    const trackLen = tracks.length;
    if (!trackLen) {
      return;
    }
    const pinchEnd = (tracks[trackLen - 1] || {}).points;
    const pinchPre = (tracks[trackLen - 2] || {}).points || pinchEnd;
    if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
      let pinchScale = dist2(pinchEnd) / dist2(pinchPre);
      !isFinite(pinchScale) && (pinchScale = 1);
      event3.pinchScale = pinchScale;
      const pinchCenter = center(pinchEnd);
      event3.pinchX = pinchCenter[0];
      event3.pinchY = pinchCenter[1];
      return {
        type: "pinch",
        target: tracks[0].target,
        event: event3
      };
    }
  }
};

// node_modules/zrender/src/Handler.ts
const SILENT = "silent";
function makeEventPacket(eveType, targetInfo, event3) {
  return {
    type: eveType,
    event: event3,
    target: targetInfo.target,
    topTarget: targetInfo.topTarget,
    cancelBubble: false,
    offsetX: event3.zrX,
    offsetY: event3.zrY,
    gestureEvent: event3.gestureEvent,
    pinchX: event3.pinchX,
    pinchY: event3.pinchY,
    pinchScale: event3.pinchScale,
    wheelDelta: event3.zrDelta,
    zrByTouch: event3.zrByTouch,
    which: event3.which,
    stop: stopEvent
  };
}
function stopEvent() {
  stop(this.event);
}
class EmptyProxy extends Eventful2 {
  constructor() {
    super(...arguments);
    this.handler = null;
  }
  dispose() {
  }
  setCursor() {
  }
}
class HoveredResult {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
}
const handlerNames = ["click", "dblclick", "mousewheel", "mouseout", "mouseup", "mousedown", "mousemove", "contextmenu"];
class Handler extends Eventful2 {
  constructor(storage2, painter, proxy, painterRoot) {
    super();
    this._hovered = new HoveredResult(0, 0);
    this.storage = storage2;
    this.painter = painter;
    this.painterRoot = painterRoot;
    proxy = proxy || new EmptyProxy();
    this.proxy = null;
    this.setHandlerProxy(proxy);
    this._draggingMgr = new Draggable2(this);
  }
  setHandlerProxy(proxy) {
    if (this.proxy) {
      this.proxy.dispose();
    }
    if (proxy) {
      each(handlerNames, function(name) {
        proxy.on && proxy.on(name, this[name], this);
      }, this);
      proxy.handler = this;
    }
    this.proxy = proxy;
  }
  mousemove(event3) {
    const x = event3.zrX;
    const y = event3.zrY;
    const isOutside = isOutsideBoundary(this, x, y);
    let lastHovered = this._hovered;
    let lastHoveredTarget = lastHovered.target;
    if (lastHoveredTarget && !lastHoveredTarget.__zr) {
      lastHovered = this.findHover(lastHovered.x, lastHovered.y);
      lastHoveredTarget = lastHovered.target;
    }
    const hovered = this._hovered = isOutside ? new HoveredResult(x, y) : this.findHover(x, y);
    const hoveredTarget = hovered.target;
    const proxy = this.proxy;
    proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : "default");
    if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) {
      this.dispatchToElement(lastHovered, "mouseout", event3);
    }
    this.dispatchToElement(hovered, "mousemove", event3);
    if (hoveredTarget && hoveredTarget !== lastHoveredTarget) {
      this.dispatchToElement(hovered, "mouseover", event3);
    }
  }
  mouseout(event3) {
    const eventControl = event3.zrEventControl;
    const zrIsToLocalDOM = event3.zrIsToLocalDOM;
    if (eventControl !== "only_globalout") {
      this.dispatchToElement(this._hovered, "mouseout", event3);
    }
    if (eventControl !== "no_globalout") {
      !zrIsToLocalDOM && this.trigger("globalout", {
        type: "globalout",
        event: event3
      });
    }
  }
  resize() {
    this._hovered = new HoveredResult(0, 0);
  }
  dispatch(eventName, eventArgs) {
    const handler = this[eventName];
    handler && handler.call(this, eventArgs);
  }
  dispose() {
    this.proxy.dispose();
    this.storage = null;
    this.proxy = null;
    this.painter = null;
  }
  setCursorStyle(cursorStyle) {
    const proxy = this.proxy;
    proxy.setCursor && proxy.setCursor(cursorStyle);
  }
  dispatchToElement(targetInfo, eventName, event3) {
    targetInfo = targetInfo || {};
    let el = targetInfo.target;
    if (el && el.silent) {
      return;
    }
    const eventKey = "on" + eventName;
    const eventPacket = makeEventPacket(eventName, targetInfo, event3);
    while (el) {
      el[eventKey] && (eventPacket.cancelBubble = !!el[eventKey].call(el, eventPacket));
      el.trigger(eventName, eventPacket);
      el = el.__hostTarget ? el.__hostTarget : el.parent;
      if (eventPacket.cancelBubble) {
        break;
      }
    }
    if (!eventPacket.cancelBubble) {
      this.trigger(eventName, eventPacket);
      if (this.painter && this.painter.eachOtherLayer) {
        this.painter.eachOtherLayer(function(layer) {
          if (typeof layer[eventKey] === "function") {
            layer[eventKey].call(layer, eventPacket);
          }
          if (layer.trigger) {
            layer.trigger(eventName, eventPacket);
          }
        });
      }
    }
  }
  findHover(x, y, exclude) {
    const list = this.storage.getDisplayList();
    const out2 = new HoveredResult(x, y);
    for (let i = list.length - 1; i >= 0; i--) {
      let hoverCheckResult;
      if (list[i] !== exclude && !list[i].ignore && (hoverCheckResult = isHover(list[i], x, y))) {
        !out2.topTarget && (out2.topTarget = list[i]);
        if (hoverCheckResult !== SILENT) {
          out2.target = list[i];
          break;
        }
      }
    }
    return out2;
  }
  processGesture(event3, stage) {
    if (!this._gestureMgr) {
      this._gestureMgr = new GestureMgr2();
    }
    const gestureMgr = this._gestureMgr;
    stage === "start" && gestureMgr.clear();
    const gestureInfo = gestureMgr.recognize(event3, this.findHover(event3.zrX, event3.zrY, null).target, this.proxy.dom);
    stage === "end" && gestureMgr.clear();
    if (gestureInfo) {
      const type = gestureInfo.type;
      event3.gestureEvent = type;
      let res = new HoveredResult();
      res.target = gestureInfo.target;
      this.dispatchToElement(res, type, gestureInfo.event);
    }
  }
}
each(["click", "mousedown", "mouseup", "mousewheel", "dblclick", "contextmenu"], function(name) {
  Handler.prototype[name] = function(event3) {
    const x = event3.zrX;
    const y = event3.zrY;
    const isOutside = isOutsideBoundary(this, x, y);
    let hovered;
    let hoveredTarget;
    if (name !== "mouseup" || !isOutside) {
      hovered = this.findHover(x, y);
      hoveredTarget = hovered.target;
    }
    if (name === "mousedown") {
      this._downEl = hoveredTarget;
      this._downPoint = [event3.zrX, event3.zrY];
      this._upEl = hoveredTarget;
    } else if (name === "mouseup") {
      this._upEl = hoveredTarget;
    } else if (name === "click") {
      if (this._downEl !== this._upEl || !this._downPoint || dist(this._downPoint, [event3.zrX, event3.zrY]) > 4) {
        return;
      }
      this._downPoint = null;
    }
    this.dispatchToElement(hovered, name, event3);
  };
});
function isHover(displayable, x, y) {
  if (displayable[displayable.rectHover ? "rectContain" : "contain"](x, y)) {
    let el = displayable;
    let isSilent;
    while (el) {
      let clipPath = el.getClipPath();
      if (clipPath && !clipPath.contain(x, y)) {
        return false;
      }
      if (el.silent) {
        isSilent = true;
      }
      const hostEl = el.__hostTarget;
      el = hostEl ? hostEl : el.parent;
    }
    return isSilent ? SILENT : true;
  }
  return false;
}
function isOutsideBoundary(handlerInstance, x, y) {
  const painter = handlerInstance.painter;
  return x < 0 || x > painter.getWidth() || y < 0 || y > painter.getHeight();
}
const Handler_default = Handler;

// node_modules/zrender/src/core/timsort.ts
const DEFAULT_MIN_MERGE = 32;
const DEFAULT_MIN_GALLOPING = 7;
const DEFAULT_TMP_STORAGE_LENGTH = 256;
function minRunLength(n) {
  var r = 0;
  while (n >= DEFAULT_MIN_MERGE) {
    r |= n & 1;
    n >>= 1;
  }
  return n + r;
}
function makeAscendingRun(array, lo, hi, compare2) {
  var runHi = lo + 1;
  if (runHi === hi) {
    return 1;
  }
  if (compare2(array[runHi++], array[lo]) < 0) {
    while (runHi < hi && compare2(array[runHi], array[runHi - 1]) < 0) {
      runHi++;
    }
    reverseRun(array, lo, runHi);
  } else {
    while (runHi < hi && compare2(array[runHi], array[runHi - 1]) >= 0) {
      runHi++;
    }
  }
  return runHi - lo;
}
function reverseRun(array, lo, hi) {
  hi--;
  while (lo < hi) {
    var t = array[lo];
    array[lo++] = array[hi];
    array[hi--] = t;
  }
}
function binaryInsertionSort(array, lo, hi, start2, compare2) {
  if (start2 === lo) {
    start2++;
  }
  for (; start2 < hi; start2++) {
    var pivot = array[start2];
    var left = lo;
    var right = start2;
    var mid;
    while (left < right) {
      mid = left + right >>> 1;
      if (compare2(pivot, array[mid]) < 0) {
        right = mid;
      } else {
        left = mid + 1;
      }
    }
    var n = start2 - left;
    switch (n) {
      case 3:
        array[left + 3] = array[left + 2];
      case 2:
        array[left + 2] = array[left + 1];
      case 1:
        array[left + 1] = array[left];
        break;
      default:
        while (n > 0) {
          array[left + n] = array[left + n - 1];
          n--;
        }
    }
    array[left] = pivot;
  }
}
function gallopLeft(value, array, start2, length2, hint, compare2) {
  var lastOffset = 0;
  var maxOffset = 0;
  var offset = 1;
  if (compare2(value, array[start2 + hint]) > 0) {
    maxOffset = length2 - hint;
    while (offset < maxOffset && compare2(value, array[start2 + hint + offset]) > 0) {
      lastOffset = offset;
      offset = (offset << 1) + 1;
      if (offset <= 0) {
        offset = maxOffset;
      }
    }
    if (offset > maxOffset) {
      offset = maxOffset;
    }
    lastOffset += hint;
    offset += hint;
  } else {
    maxOffset = hint + 1;
    while (offset < maxOffset && compare2(value, array[start2 + hint - offset]) <= 0) {
      lastOffset = offset;
      offset = (offset << 1) + 1;
      if (offset <= 0) {
        offset = maxOffset;
      }
    }
    if (offset > maxOffset) {
      offset = maxOffset;
    }
    var tmp = lastOffset;
    lastOffset = hint - offset;
    offset = hint - tmp;
  }
  lastOffset++;
  while (lastOffset < offset) {
    var m2 = lastOffset + (offset - lastOffset >>> 1);
    if (compare2(value, array[start2 + m2]) > 0) {
      lastOffset = m2 + 1;
    } else {
      offset = m2;
    }
  }
  return offset;
}
function gallopRight(value, array, start2, length2, hint, compare2) {
  var lastOffset = 0;
  var maxOffset = 0;
  var offset = 1;
  if (compare2(value, array[start2 + hint]) < 0) {
    maxOffset = hint + 1;
    while (offset < maxOffset && compare2(value, array[start2 + hint - offset]) < 0) {
      lastOffset = offset;
      offset = (offset << 1) + 1;
      if (offset <= 0) {
        offset = maxOffset;
      }
    }
    if (offset > maxOffset) {
      offset = maxOffset;
    }
    var tmp = lastOffset;
    lastOffset = hint - offset;
    offset = hint - tmp;
  } else {
    maxOffset = length2 - hint;
    while (offset < maxOffset && compare2(value, array[start2 + hint + offset]) >= 0) {
      lastOffset = offset;
      offset = (offset << 1) + 1;
      if (offset <= 0) {
        offset = maxOffset;
      }
    }
    if (offset > maxOffset) {
      offset = maxOffset;
    }
    lastOffset += hint;
    offset += hint;
  }
  lastOffset++;
  while (lastOffset < offset) {
    var m2 = lastOffset + (offset - lastOffset >>> 1);
    if (compare2(value, array[start2 + m2]) < 0) {
      offset = m2;
    } else {
      lastOffset = m2 + 1;
    }
  }
  return offset;
}
function TimSort(array, compare2) {
  let minGallop = DEFAULT_MIN_GALLOPING;
  let length2 = 0;
  let tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
  let stackLength = 0;
  let runStart;
  let runLength;
  let stackSize = 0;
  length2 = array.length;
  if (length2 < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
    tmpStorageLength = length2 >>> 1;
  }
  var tmp = [];
  stackLength = length2 < 120 ? 5 : length2 < 1542 ? 10 : length2 < 119151 ? 19 : 40;
  runStart = [];
  runLength = [];
  function pushRun(_runStart, _runLength) {
    runStart[stackSize] = _runStart;
    runLength[stackSize] = _runLength;
    stackSize += 1;
  }
  function mergeRuns() {
    while (stackSize > 1) {
      var n = stackSize - 2;
      if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
        if (runLength[n - 1] < runLength[n + 1]) {
          n--;
        }
      } else if (runLength[n] > runLength[n + 1]) {
        break;
      }
      mergeAt(n);
    }
  }
  function forceMergeRuns() {
    while (stackSize > 1) {
      var n = stackSize - 2;
      if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
        n--;
      }
      mergeAt(n);
    }
  }
  function mergeAt(i) {
    var start1 = runStart[i];
    var length1 = runLength[i];
    var start2 = runStart[i + 1];
    var length22 = runLength[i + 1];
    runLength[i] = length1 + length22;
    if (i === stackSize - 3) {
      runStart[i + 1] = runStart[i + 2];
      runLength[i + 1] = runLength[i + 2];
    }
    stackSize--;
    var k = gallopRight(array[start2], array, start1, length1, 0, compare2);
    start1 += k;
    length1 -= k;
    if (length1 === 0) {
      return;
    }
    length22 = gallopLeft(array[start1 + length1 - 1], array, start2, length22, length22 - 1, compare2);
    if (length22 === 0) {
      return;
    }
    if (length1 <= length22) {
      mergeLow(start1, length1, start2, length22);
    } else {
      mergeHigh(start1, length1, start2, length22);
    }
  }
  function mergeLow(start1, length1, start2, length22) {
    var i = 0;
    for (i = 0; i < length1; i++) {
      tmp[i] = array[start1 + i];
    }
    var cursor1 = 0;
    var cursor2 = start2;
    var dest = start1;
    array[dest++] = array[cursor2++];
    if (--length22 === 0) {
      for (i = 0; i < length1; i++) {
        array[dest + i] = tmp[cursor1 + i];
      }
      return;
    }
    if (length1 === 1) {
      for (i = 0; i < length22; i++) {
        array[dest + i] = array[cursor2 + i];
      }
      array[dest + length22] = tmp[cursor1];
      return;
    }
    var _minGallop = minGallop;
    var count1;
    var count2;
    var exit;
    while (1) {
      count1 = 0;
      count2 = 0;
      exit = false;
      do {
        if (compare2(array[cursor2], tmp[cursor1]) < 0) {
          array[dest++] = array[cursor2++];
          count2++;
          count1 = 0;
          if (--length22 === 0) {
            exit = true;
            break;
          }
        } else {
          array[dest++] = tmp[cursor1++];
          count1++;
          count2 = 0;
          if (--length1 === 1) {
            exit = true;
            break;
          }
        }
      } while ((count1 | count2) < _minGallop);
      if (exit) {
        break;
      }
      do {
        count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare2);
        if (count1 !== 0) {
          for (i = 0; i < count1; i++) {
            array[dest + i] = tmp[cursor1 + i];
          }
          dest += count1;
          cursor1 += count1;
          length1 -= count1;
          if (length1 <= 1) {
            exit = true;
            break;
          }
        }
        array[dest++] = array[cursor2++];
        if (--length22 === 0) {
          exit = true;
          break;
        }
        count2 = gallopLeft(tmp[cursor1], array, cursor2, length22, 0, compare2);
        if (count2 !== 0) {
          for (i = 0; i < count2; i++) {
            array[dest + i] = array[cursor2 + i];
          }
          dest += count2;
          cursor2 += count2;
          length22 -= count2;
          if (length22 === 0) {
            exit = true;
            break;
          }
        }
        array[dest++] = tmp[cursor1++];
        if (--length1 === 1) {
          exit = true;
          break;
        }
        _minGallop--;
      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
      if (exit) {
        break;
      }
      if (_minGallop < 0) {
        _minGallop = 0;
      }
      _minGallop += 2;
    }
    minGallop = _minGallop;
    minGallop < 1 && (minGallop = 1);
    if (length1 === 1) {
      for (i = 0; i < length22; i++) {
        array[dest + i] = array[cursor2 + i];
      }
      array[dest + length22] = tmp[cursor1];
    } else if (length1 === 0) {
      throw new Error();
    } else {
      for (i = 0; i < length1; i++) {
        array[dest + i] = tmp[cursor1 + i];
      }
    }
  }
  function mergeHigh(start1, length1, start2, length22) {
    var i = 0;
    for (i = 0; i < length22; i++) {
      tmp[i] = array[start2 + i];
    }
    var cursor1 = start1 + length1 - 1;
    var cursor2 = length22 - 1;
    var dest = start2 + length22 - 1;
    var customCursor = 0;
    var customDest = 0;
    array[dest--] = array[cursor1--];
    if (--length1 === 0) {
      customCursor = dest - (length22 - 1);
      for (i = 0; i < length22; i++) {
        array[customCursor + i] = tmp[i];
      }
      return;
    }
    if (length22 === 1) {
      dest -= length1;
      cursor1 -= length1;
      customDest = dest + 1;
      customCursor = cursor1 + 1;
      for (i = length1 - 1; i >= 0; i--) {
        array[customDest + i] = array[customCursor + i];
      }
      array[dest] = tmp[cursor2];
      return;
    }
    var _minGallop = minGallop;
    while (true) {
      var count1 = 0;
      var count2 = 0;
      var exit = false;
      do {
        if (compare2(tmp[cursor2], array[cursor1]) < 0) {
          array[dest--] = array[cursor1--];
          count1++;
          count2 = 0;
          if (--length1 === 0) {
            exit = true;
            break;
          }
        } else {
          array[dest--] = tmp[cursor2--];
          count2++;
          count1 = 0;
          if (--length22 === 1) {
            exit = true;
            break;
          }
        }
      } while ((count1 | count2) < _minGallop);
      if (exit) {
        break;
      }
      do {
        count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare2);
        if (count1 !== 0) {
          dest -= count1;
          cursor1 -= count1;
          length1 -= count1;
          customDest = dest + 1;
          customCursor = cursor1 + 1;
          for (i = count1 - 1; i >= 0; i--) {
            array[customDest + i] = array[customCursor + i];
          }
          if (length1 === 0) {
            exit = true;
            break;
          }
        }
        array[dest--] = tmp[cursor2--];
        if (--length22 === 1) {
          exit = true;
          break;
        }
        count2 = length22 - gallopLeft(array[cursor1], tmp, 0, length22, length22 - 1, compare2);
        if (count2 !== 0) {
          dest -= count2;
          cursor2 -= count2;
          length22 -= count2;
          customDest = dest + 1;
          customCursor = cursor2 + 1;
          for (i = 0; i < count2; i++) {
            array[customDest + i] = tmp[customCursor + i];
          }
          if (length22 <= 1) {
            exit = true;
            break;
          }
        }
        array[dest--] = array[cursor1--];
        if (--length1 === 0) {
          exit = true;
          break;
        }
        _minGallop--;
      } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
      if (exit) {
        break;
      }
      if (_minGallop < 0) {
        _minGallop = 0;
      }
      _minGallop += 2;
    }
    minGallop = _minGallop;
    if (minGallop < 1) {
      minGallop = 1;
    }
    if (length22 === 1) {
      dest -= length1;
      cursor1 -= length1;
      customDest = dest + 1;
      customCursor = cursor1 + 1;
      for (i = length1 - 1; i >= 0; i--) {
        array[customDest + i] = array[customCursor + i];
      }
      array[dest] = tmp[cursor2];
    } else if (length22 === 0) {
      throw new Error();
    } else {
      customCursor = dest - (length22 - 1);
      for (i = 0; i < length22; i++) {
        array[customCursor + i] = tmp[i];
      }
    }
  }
  return {
    mergeRuns,
    forceMergeRuns,
    pushRun
  };
}
function sort(array, compare2, lo, hi) {
  if (!lo) {
    lo = 0;
  }
  if (!hi) {
    hi = array.length;
  }
  var remaining = hi - lo;
  if (remaining < 2) {
    return;
  }
  var runLength = 0;
  if (remaining < DEFAULT_MIN_MERGE) {
    runLength = makeAscendingRun(array, lo, hi, compare2);
    binaryInsertionSort(array, lo, hi, lo + runLength, compare2);
    return;
  }
  var ts = TimSort(array, compare2);
  var minRun = minRunLength(remaining);
  do {
    runLength = makeAscendingRun(array, lo, hi, compare2);
    if (runLength < minRun) {
      var force = remaining;
      if (force > minRun) {
        force = minRun;
      }
      binaryInsertionSort(array, lo, lo + force, lo + runLength, compare2);
      runLength = force;
    }
    ts.pushRun(lo, runLength);
    ts.mergeRuns();
    remaining -= runLength;
    lo += runLength;
  } while (remaining !== 0);
  ts.forceMergeRuns();
}

// node_modules/zrender/src/Storage.ts
let invalidZErrorLogged = false;
function logInvalidZError() {
  if (invalidZErrorLogged) {
    return;
  }
  invalidZErrorLogged = true;
  console.warn("z / z2 / zlevel of displayable is invalid, which may cause unexpected errors");
}
function shapeCompareFunc(a, b) {
  if (a.zlevel === b.zlevel) {
    if (a.z === b.z) {
      return a.z2 - b.z2;
    }
    return a.z - b.z;
  }
  return a.zlevel - b.zlevel;
}
class Storage3 {
  constructor() {
    this._roots = [];
    this._displayList = [];
    this._displayListLen = 0;
    this.displayableSortFunc = shapeCompareFunc;
  }
  traverse(cb, context) {
    for (let i = 0; i < this._roots.length; i++) {
      this._roots[i].traverse(cb, context);
    }
  }
  getDisplayList(update, includeIgnore) {
    includeIgnore = includeIgnore || false;
    const displayList = this._displayList;
    if (update || !displayList.length) {
      this.updateDisplayList(includeIgnore);
    }
    return displayList;
  }
  updateDisplayList(includeIgnore) {
    this._displayListLen = 0;
    const roots2 = this._roots;
    const displayList = this._displayList;
    for (let i = 0, len2 = roots2.length; i < len2; i++) {
      this._updateAndAddDisplayable(roots2[i], null, includeIgnore);
    }
    displayList.length = this._displayListLen;
    env_default.canvasSupported && sort(displayList, shapeCompareFunc);
  }
  _updateAndAddDisplayable(el, clipPaths, includeIgnore) {
    if (el.ignore && !includeIgnore) {
      return;
    }
    el.beforeUpdate();
    if (el.__dirty) {
      el.update();
    }
    el.afterUpdate();
    const userSetClipPath = el.getClipPath();
    if (userSetClipPath) {
      if (clipPaths) {
        clipPaths = clipPaths.slice();
      } else {
        clipPaths = [];
      }
      let currentClipPath = userSetClipPath;
      let parentClipPath = el;
      while (currentClipPath) {
        currentClipPath.parent = parentClipPath;
        currentClipPath.updateTransform();
        clipPaths.push(currentClipPath);
        parentClipPath = currentClipPath;
        currentClipPath = currentClipPath.getClipPath();
      }
    }
    if (el.childrenRef) {
      const children = el.childrenRef();
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (el.__dirty) {
          child.markRedraw();
        }
        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
      }
      el.__dirty = 0;
    } else {
      const disp = el;
      if (clipPaths && clipPaths.length) {
        disp.__clipPaths = clipPaths;
      } else if (disp.__clipPaths && disp.__clipPaths.length > 0) {
        disp.__clipPaths = [];
      }
      if (isNaN(disp.z)) {
        logInvalidZError();
        disp.z = 0;
      }
      if (isNaN(disp.z2)) {
        logInvalidZError();
        disp.z2 = 0;
      }
      if (isNaN(disp.zlevel)) {
        logInvalidZError();
        disp.zlevel = 0;
      }
      this._displayList[this._displayListLen++] = disp;
    }
    const textGuide = el.getTextGuideLine();
    if (textGuide) {
      this._updateAndAddDisplayable(textGuide, clipPaths, includeIgnore);
    }
    const textEl = el.getTextContent();
    if (textEl) {
      this._updateAndAddDisplayable(textEl, clipPaths, includeIgnore);
    }
  }
  addRoot(el) {
    if (el.__zr && el.__zr.storage === this) {
      return;
    }
    this._roots.push(el);
  }
  delRoot(el) {
    if (el instanceof Array) {
      for (let i = 0, l = el.length; i < l; i++) {
        this.delRoot(el[i]);
      }
      return;
    }
    const idx = indexOf(this._roots, el);
    if (idx >= 0) {
      this._roots.splice(idx, 1);
    }
  }
  delAllRoots() {
    this._roots = [];
    this._displayList = [];
    this._displayListLen = 0;
    return;
  }
  getRoots() {
    return this._roots;
  }
  dispose() {
    this._displayList = null;
    this._roots = null;
  }
}

// node_modules/zrender/src/animation/requestAnimationFrame.ts
let requestAnimationFrame2;
if (typeof window !== "undefined") {
  requestAnimationFrame2 = window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame;
} else {
  requestAnimationFrame2 = function(func) {
    return setTimeout(func, 16);
  };
}
const requestAnimationFrame_default = requestAnimationFrame2;

// node_modules/zrender/src/animation/easing.ts
const easing4 = {
  linear(k) {
    return k;
  },
  quadraticIn(k) {
    return k * k;
  },
  quadraticOut(k) {
    return k * (2 - k);
  },
  quadraticInOut(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k;
    }
    return -0.5 * (--k * (k - 2) - 1);
  },
  cubicIn(k) {
    return k * k * k;
  },
  cubicOut(k) {
    return --k * k * k + 1;
  },
  cubicInOut(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k * k;
    }
    return 0.5 * ((k -= 2) * k * k + 2);
  },
  quarticIn(k) {
    return k * k * k * k;
  },
  quarticOut(k) {
    return 1 - --k * k * k * k;
  },
  quarticInOut(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k * k * k;
    }
    return -0.5 * ((k -= 2) * k * k * k - 2);
  },
  quinticIn(k) {
    return k * k * k * k * k;
  },
  quinticOut(k) {
    return --k * k * k * k * k + 1;
  },
  quinticInOut(k) {
    if ((k *= 2) < 1) {
      return 0.5 * k * k * k * k * k;
    }
    return 0.5 * ((k -= 2) * k * k * k * k + 2);
  },
  sinusoidalIn(k) {
    return 1 - Math.cos(k * Math.PI / 2);
  },
  sinusoidalOut(k) {
    return Math.sin(k * Math.PI / 2);
  },
  sinusoidalInOut(k) {
    return 0.5 * (1 - Math.cos(Math.PI * k));
  },
  exponentialIn(k) {
    return k === 0 ? 0 : Math.pow(1024, k - 1);
  },
  exponentialOut(k) {
    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
  },
  exponentialInOut(k) {
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if ((k *= 2) < 1) {
      return 0.5 * Math.pow(1024, k - 1);
    }
    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
  },
  circularIn(k) {
    return 1 - Math.sqrt(1 - k * k);
  },
  circularOut(k) {
    return Math.sqrt(1 - --k * k);
  },
  circularInOut(k) {
    if ((k *= 2) < 1) {
      return -0.5 * (Math.sqrt(1 - k * k) - 1);
    }
    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
  },
  elasticIn(k) {
    let s;
    let a = 0.1;
    let p = 0.4;
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if (!a || a < 1) {
      a = 1;
      s = p / 4;
    } else {
      s = p * Math.asin(1 / a) / (2 * Math.PI);
    }
    return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
  },
  elasticOut(k) {
    let s;
    let a = 0.1;
    let p = 0.4;
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if (!a || a < 1) {
      a = 1;
      s = p / 4;
    } else {
      s = p * Math.asin(1 / a) / (2 * Math.PI);
    }
    return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
  },
  elasticInOut(k) {
    let s;
    let a = 0.1;
    let p = 0.4;
    if (k === 0) {
      return 0;
    }
    if (k === 1) {
      return 1;
    }
    if (!a || a < 1) {
      a = 1;
      s = p / 4;
    } else {
      s = p * Math.asin(1 / a) / (2 * Math.PI);
    }
    if ((k *= 2) < 1) {
      return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
    }
    return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
  },
  backIn(k) {
    let s = 1.70158;
    return k * k * ((s + 1) * k - s);
  },
  backOut(k) {
    let s = 1.70158;
    return --k * k * ((s + 1) * k + s) + 1;
  },
  backInOut(k) {
    let s = 1.70158 * 1.525;
    if ((k *= 2) < 1) {
      return 0.5 * (k * k * ((s + 1) * k - s));
    }
    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
  },
  bounceIn(k) {
    return 1 - easing4.bounceOut(1 - k);
  },
  bounceOut(k) {
    if (k < 1 / 2.75) {
      return 7.5625 * k * k;
    } else if (k < 2 / 2.75) {
      return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
    } else if (k < 2.5 / 2.75) {
      return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
    } else {
      return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
    }
  },
  bounceInOut(k) {
    if (k < 0.5) {
      return easing4.bounceIn(k * 2) * 0.5;
    }
    return easing4.bounceOut(k * 2 - 1) * 0.5 + 0.5;
  }
};
const easing_default = easing4;

// node_modules/zrender/src/animation/Clip.ts
class Clip4 {
  constructor(opts) {
    this._initialized = false;
    this._startTime = 0;
    this._pausedTime = 0;
    this._paused = false;
    this._life = opts.life || 1000;
    this._delay = opts.delay || 0;
    this.loop = opts.loop == null ? false : opts.loop;
    this.gap = opts.gap || 0;
    this.easing = opts.easing || "linear";
    this.onframe = opts.onframe;
    this.ondestroy = opts.ondestroy;
    this.onrestart = opts.onrestart;
  }
  step(globalTime, deltaTime) {
    if (!this._initialized) {
      this._startTime = globalTime + this._delay;
      this._initialized = true;
    }
    if (this._paused) {
      this._pausedTime += deltaTime;
      return;
    }
    let percent = (globalTime - this._startTime - this._pausedTime) / this._life;
    if (percent < 0) {
      percent = 0;
    }
    percent = Math.min(percent, 1);
    const easing7 = this.easing;
    const easingFunc = typeof easing7 === "string" ? easing_default[easing7] : easing7;
    const schedule = typeof easingFunc === "function" ? easingFunc(percent) : percent;
    this.onframe && this.onframe(schedule);
    if (percent === 1) {
      if (this.loop) {
        this._restart(globalTime);
        this.onrestart && this.onrestart();
      } else {
        return true;
      }
    }
    return false;
  }
  _restart(globalTime) {
    const remainder = (globalTime - this._startTime - this._pausedTime) % this._life;
    this._startTime = globalTime - remainder + this.gap;
    this._pausedTime = 0;
  }
  pause() {
    this._paused = true;
  }
  resume() {
    this._paused = false;
  }
}

// node_modules/zrender/src/core/LRU.ts
class Entry {
  constructor(val) {
    this.value = val;
  }
}
class LinkedList {
  constructor() {
    this._len = 0;
  }
  insert(val) {
    const entry = new Entry(val);
    this.insertEntry(entry);
    return entry;
  }
  insertEntry(entry) {
    if (!this.head) {
      this.head = this.tail = entry;
    } else {
      this.tail.next = entry;
      entry.prev = this.tail;
      entry.next = null;
      this.tail = entry;
    }
    this._len++;
  }
  remove(entry) {
    const prev = entry.prev;
    const next = entry.next;
    if (prev) {
      prev.next = next;
    } else {
      this.head = next;
    }
    if (next) {
      next.prev = prev;
    } else {
      this.tail = prev;
    }
    entry.next = entry.prev = null;
    this._len--;
  }
  len() {
    return this._len;
  }
  clear() {
    this.head = this.tail = null;
    this._len = 0;
  }
}
class LRU2 {
  constructor(maxSize) {
    this._list = new LinkedList();
    this._maxSize = 10;
    this._map = {};
    this._maxSize = maxSize;
  }
  put(key, value) {
    const list = this._list;
    const map3 = this._map;
    let removed = null;
    if (map3[key] == null) {
      const len2 = list.len();
      let entry = this._lastRemovedEntry;
      if (len2 >= this._maxSize && len2 > 0) {
        const leastUsedEntry = list.head;
        list.remove(leastUsedEntry);
        delete map3[leastUsedEntry.key];
        removed = leastUsedEntry.value;
        this._lastRemovedEntry = leastUsedEntry;
      }
      if (entry) {
        entry.value = value;
      } else {
        entry = new Entry(value);
      }
      entry.key = key;
      list.insertEntry(entry);
      map3[key] = entry;
    }
    return removed;
  }
  get(key) {
    const entry = this._map[key];
    const list = this._list;
    if (entry != null) {
      if (entry !== list.tail) {
        list.remove(entry);
        list.insertEntry(entry);
      }
      return entry.value;
    }
  }
  clear() {
    this._list.clear();
    this._map = {};
  }
  len() {
    return this._list.len();
  }
}

// node_modules/zrender/src/tool/color.ts
const color_exports = {};
__export(color_exports, {
  fastLerp: () => fastLerp,
  fastMapToColor: () => fastMapToColor,
  lerp: () => lerp2,
  lift: () => lift,
  lum: () => lum,
  mapToColor: () => mapToColor,
  modifyAlpha: () => modifyAlpha,
  modifyHSL: () => modifyHSL,
  parse: () => parse,
  random: () => random,
  stringify: () => stringify,
  toHex: () => toHex
});
const kCSSColorTable = {
  transparent: [0, 0, 0, 0],
  aliceblue: [240, 248, 255, 1],
  antiquewhite: [250, 235, 215, 1],
  aqua: [0, 255, 255, 1],
  aquamarine: [127, 255, 212, 1],
  azure: [240, 255, 255, 1],
  beige: [245, 245, 220, 1],
  bisque: [255, 228, 196, 1],
  black: [0, 0, 0, 1],
  blanchedalmond: [255, 235, 205, 1],
  blue: [0, 0, 255, 1],
  blueviolet: [138, 43, 226, 1],
  brown: [165, 42, 42, 1],
  burlywood: [222, 184, 135, 1],
  cadetblue: [95, 158, 160, 1],
  chartreuse: [127, 255, 0, 1],
  chocolate: [210, 105, 30, 1],
  coral: [255, 127, 80, 1],
  cornflowerblue: [100, 149, 237, 1],
  cornsilk: [255, 248, 220, 1],
  crimson: [220, 20, 60, 1],
  cyan: [0, 255, 255, 1],
  darkblue: [0, 0, 139, 1],
  darkcyan: [0, 139, 139, 1],
  darkgoldenrod: [184, 134, 11, 1],
  darkgray: [169, 169, 169, 1],
  darkgreen: [0, 100, 0, 1],
  darkgrey: [169, 169, 169, 1],
  darkkhaki: [189, 183, 107, 1],
  darkmagenta: [139, 0, 139, 1],
  darkolivegreen: [85, 107, 47, 1],
  darkorange: [255, 140, 0, 1],
  darkorchid: [153, 50, 204, 1],
  darkred: [139, 0, 0, 1],
  darksalmon: [233, 150, 122, 1],
  darkseagreen: [143, 188, 143, 1],
  darkslateblue: [72, 61, 139, 1],
  darkslategray: [47, 79, 79, 1],
  darkslategrey: [47, 79, 79, 1],
  darkturquoise: [0, 206, 209, 1],
  darkviolet: [148, 0, 211, 1],
  deeppink: [255, 20, 147, 1],
  deepskyblue: [0, 191, 255, 1],
  dimgray: [105, 105, 105, 1],
  dimgrey: [105, 105, 105, 1],
  dodgerblue: [30, 144, 255, 1],
  firebrick: [178, 34, 34, 1],
  floralwhite: [255, 250, 240, 1],
  forestgreen: [34, 139, 34, 1],
  fuchsia: [255, 0, 255, 1],
  gainsboro: [220, 220, 220, 1],
  ghostwhite: [248, 248, 255, 1],
  gold: [255, 215, 0, 1],
  goldenrod: [218, 165, 32, 1],
  gray: [128, 128, 128, 1],
  green: [0, 128, 0, 1],
  greenyellow: [173, 255, 47, 1],
  grey: [128, 128, 128, 1],
  honeydew: [240, 255, 240, 1],
  hotpink: [255, 105, 180, 1],
  indianred: [205, 92, 92, 1],
  indigo: [75, 0, 130, 1],
  ivory: [255, 255, 240, 1],
  khaki: [240, 230, 140, 1],
  lavender: [230, 230, 250, 1],
  lavenderblush: [255, 240, 245, 1],
  lawngreen: [124, 252, 0, 1],
  lemonchiffon: [255, 250, 205, 1],
  lightblue: [173, 216, 230, 1],
  lightcoral: [240, 128, 128, 1],
  lightcyan: [224, 255, 255, 1],
  lightgoldenrodyellow: [250, 250, 210, 1],
  lightgray: [211, 211, 211, 1],
  lightgreen: [144, 238, 144, 1],
  lightgrey: [211, 211, 211, 1],
  lightpink: [255, 182, 193, 1],
  lightsalmon: [255, 160, 122, 1],
  lightseagreen: [32, 178, 170, 1],
  lightskyblue: [135, 206, 250, 1],
  lightslategray: [119, 136, 153, 1],
  lightslategrey: [119, 136, 153, 1],
  lightsteelblue: [176, 196, 222, 1],
  lightyellow: [255, 255, 224, 1],
  lime: [0, 255, 0, 1],
  limegreen: [50, 205, 50, 1],
  linen: [250, 240, 230, 1],
  magenta: [255, 0, 255, 1],
  maroon: [128, 0, 0, 1],
  mediumaquamarine: [102, 205, 170, 1],
  mediumblue: [0, 0, 205, 1],
  mediumorchid: [186, 85, 211, 1],
  mediumpurple: [147, 112, 219, 1],
  mediumseagreen: [60, 179, 113, 1],
  mediumslateblue: [123, 104, 238, 1],
  mediumspringgreen: [0, 250, 154, 1],
  mediumturquoise: [72, 209, 204, 1],
  mediumvioletred: [199, 21, 133, 1],
  midnightblue: [25, 25, 112, 1],
  mintcream: [245, 255, 250, 1],
  mistyrose: [255, 228, 225, 1],
  moccasin: [255, 228, 181, 1],
  navajowhite: [255, 222, 173, 1],
  navy: [0, 0, 128, 1],
  oldlace: [253, 245, 230, 1],
  olive: [128, 128, 0, 1],
  olivedrab: [107, 142, 35, 1],
  orange: [255, 165, 0, 1],
  orangered: [255, 69, 0, 1],
  orchid: [218, 112, 214, 1],
  palegoldenrod: [238, 232, 170, 1],
  palegreen: [152, 251, 152, 1],
  paleturquoise: [175, 238, 238, 1],
  palevioletred: [219, 112, 147, 1],
  papayawhip: [255, 239, 213, 1],
  peachpuff: [255, 218, 185, 1],
  peru: [205, 133, 63, 1],
  pink: [255, 192, 203, 1],
  plum: [221, 160, 221, 1],
  powderblue: [176, 224, 230, 1],
  purple: [128, 0, 128, 1],
  red: [255, 0, 0, 1],
  rosybrown: [188, 143, 143, 1],
  royalblue: [65, 105, 225, 1],
  saddlebrown: [139, 69, 19, 1],
  salmon: [250, 128, 114, 1],
  sandybrown: [244, 164, 96, 1],
  seagreen: [46, 139, 87, 1],
  seashell: [255, 245, 238, 1],
  sienna: [160, 82, 45, 1],
  silver: [192, 192, 192, 1],
  skyblue: [135, 206, 235, 1],
  slateblue: [106, 90, 205, 1],
  slategray: [112, 128, 144, 1],
  slategrey: [112, 128, 144, 1],
  snow: [255, 250, 250, 1],
  springgreen: [0, 255, 127, 1],
  steelblue: [70, 130, 180, 1],
  tan: [210, 180, 140, 1],
  teal: [0, 128, 128, 1],
  thistle: [216, 191, 216, 1],
  tomato: [255, 99, 71, 1],
  turquoise: [64, 224, 208, 1],
  violet: [238, 130, 238, 1],
  wheat: [245, 222, 179, 1],
  white: [255, 255, 255, 1],
  whitesmoke: [245, 245, 245, 1],
  yellow: [255, 255, 0, 1],
  yellowgreen: [154, 205, 50, 1]
};
function clampCssByte(i) {
  i = Math.round(i);
  return i < 0 ? 0 : i > 255 ? 255 : i;
}
function clampCssAngle(i) {
  i = Math.round(i);
  return i < 0 ? 0 : i > 360 ? 360 : i;
}
function clampCssFloat(f) {
  return f < 0 ? 0 : f > 1 ? 1 : f;
}
function parseCssInt(val) {
  let str = val;
  if (str.length && str.charAt(str.length - 1) === "%") {
    return clampCssByte(parseFloat(str) / 100 * 255);
  }
  return clampCssByte(parseInt(str, 10));
}
function parseCssFloat(val) {
  let str = val;
  if (str.length && str.charAt(str.length - 1) === "%") {
    return clampCssFloat(parseFloat(str) / 100);
  }
  return clampCssFloat(parseFloat(str));
}
function cssHueToRgb(m1, m2, h) {
  if (h < 0) {
    h += 1;
  } else if (h > 1) {
    h -= 1;
  }
  if (h * 6 < 1) {
    return m1 + (m2 - m1) * h * 6;
  }
  if (h * 2 < 1) {
    return m2;
  }
  if (h * 3 < 2) {
    return m1 + (m2 - m1) * (2 / 3 - h) * 6;
  }
  return m1;
}
function lerpNumber(a, b, p) {
  return a + (b - a) * p;
}
function setRgba(out2, r, g, b, a) {
  out2[0] = r;
  out2[1] = g;
  out2[2] = b;
  out2[3] = a;
  return out2;
}
function copyRgba(out2, a) {
  out2[0] = a[0];
  out2[1] = a[1];
  out2[2] = a[2];
  out2[3] = a[3];
  return out2;
}
const colorCache = new LRU2(20);
let lastRemovedArr = null;
function putToCache(colorStr, rgbaArr) {
  if (lastRemovedArr) {
    copyRgba(lastRemovedArr, rgbaArr);
  }
  lastRemovedArr = colorCache.put(colorStr, lastRemovedArr || rgbaArr.slice());
}
function parse(colorStr, rgbaArr) {
  if (!colorStr) {
    return;
  }
  rgbaArr = rgbaArr || [];
  let cached = colorCache.get(colorStr);
  if (cached) {
    return copyRgba(rgbaArr, cached);
  }
  colorStr = colorStr + "";
  let str = colorStr.replace(/ /g, "").toLowerCase();
  if (str in kCSSColorTable) {
    copyRgba(rgbaArr, kCSSColorTable[str]);
    putToCache(colorStr, rgbaArr);
    return rgbaArr;
  }
  if (str.charAt(0) === "#") {
    if (str.length === 4) {
      let iv = parseInt(str.substr(1), 16);
      if (!(iv >= 0 && iv <= 4095)) {
        setRgba(rgbaArr, 0, 0, 0, 1);
        return;
      }
      setRgba(rgbaArr, (iv & 3840) >> 4 | (iv & 3840) >> 8, iv & 240 | (iv & 240) >> 4, iv & 15 | (iv & 15) << 4, 1);
      putToCache(colorStr, rgbaArr);
      return rgbaArr;
    } else if (str.length === 7) {
      const iv = parseInt(str.substr(1), 16);
      if (!(iv >= 0 && iv <= 16777215)) {
        setRgba(rgbaArr, 0, 0, 0, 1);
        return;
      }
      setRgba(rgbaArr, (iv & 16711680) >> 16, (iv & 65280) >> 8, iv & 255, 1);
      putToCache(colorStr, rgbaArr);
      return rgbaArr;
    }
    return;
  }
  let op = str.indexOf("(");
  let ep = str.indexOf(")");
  if (op !== -1 && ep + 1 === str.length) {
    let fname = str.substr(0, op);
    let params = str.substr(op + 1, ep - (op + 1)).split(",");
    let alpha = 1;
    switch (fname) {
      case "rgba":
        if (params.length !== 4) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return;
        }
        alpha = parseCssFloat(params.pop());
      case "rgb":
        if (params.length !== 3) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return;
        }
        setRgba(rgbaArr, parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      case "hsla":
        if (params.length !== 4) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return;
        }
        params[3] = parseCssFloat(params[3]);
        hsla2rgba(params, rgbaArr);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      case "hsl":
        if (params.length !== 3) {
          setRgba(rgbaArr, 0, 0, 0, 1);
          return;
        }
        hsla2rgba(params, rgbaArr);
        putToCache(colorStr, rgbaArr);
        return rgbaArr;
      default:
        return;
    }
  }
  setRgba(rgbaArr, 0, 0, 0, 1);
  return;
}
function hsla2rgba(hsla, rgba) {
  const h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360;
  const s = parseCssFloat(hsla[1]);
  const l = parseCssFloat(hsla[2]);
  const m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
  const m1 = l * 2 - m2;
  rgba = rgba || [];
  setRgba(rgba, clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);
  if (hsla.length === 4) {
    rgba[3] = hsla[3];
  }
  return rgba;
}
function rgba2hsla(rgba) {
  if (!rgba) {
    return;
  }
  const R = rgba[0] / 255;
  const G = rgba[1] / 255;
  const B = rgba[2] / 255;
  const vMin = Math.min(R, G, B);
  const vMax = Math.max(R, G, B);
  const delta = vMax - vMin;
  const L = (vMax + vMin) / 2;
  let H;
  let S;
  if (delta === 0) {
    H = 0;
    S = 0;
  } else {
    if (L < 0.5) {
      S = delta / (vMax + vMin);
    } else {
      S = delta / (2 - vMax - vMin);
    }
    const deltaR = ((vMax - R) / 6 + delta / 2) / delta;
    const deltaG = ((vMax - G) / 6 + delta / 2) / delta;
    const deltaB = ((vMax - B) / 6 + delta / 2) / delta;
    if (R === vMax) {
      H = deltaB - deltaG;
    } else if (G === vMax) {
      H = 1 / 3 + deltaR - deltaB;
    } else if (B === vMax) {
      H = 2 / 3 + deltaG - deltaR;
    }
    if (H < 0) {
      H += 1;
    }
    if (H > 1) {
      H -= 1;
    }
  }
  const hsla = [H * 360, S, L];
  if (rgba[3] != null) {
    hsla.push(rgba[3]);
  }
  return hsla;
}
function lift(color8, level) {
  const colorArr = parse(color8);
  if (colorArr) {
    for (let i = 0; i < 3; i++) {
      if (level < 0) {
        colorArr[i] = colorArr[i] * (1 - level) | 0;
      } else {
        colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
      }
      if (colorArr[i] > 255) {
        colorArr[i] = 255;
      } else if (colorArr[i] < 0) {
        colorArr[i] = 0;
      }
    }
    return stringify(colorArr, colorArr.length === 4 ? "rgba" : "rgb");
  }
}
function toHex(color8) {
  const colorArr = parse(color8);
  if (colorArr) {
    return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
  }
}
function fastLerp(normalizedValue, colors, out2) {
  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
    return;
  }
  out2 = out2 || [];
  const value = normalizedValue * (colors.length - 1);
  const leftIndex = Math.floor(value);
  const rightIndex = Math.ceil(value);
  const leftColor = colors[leftIndex];
  const rightColor = colors[rightIndex];
  const dv = value - leftIndex;
  out2[0] = clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv));
  out2[1] = clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv));
  out2[2] = clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv));
  out2[3] = clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv));
  return out2;
}
const fastMapToColor = fastLerp;
function lerp2(normalizedValue, colors, fullOutput) {
  if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
    return;
  }
  const value = normalizedValue * (colors.length - 1);
  const leftIndex = Math.floor(value);
  const rightIndex = Math.ceil(value);
  const leftColor = parse(colors[leftIndex]);
  const rightColor = parse(colors[rightIndex]);
  const dv = value - leftIndex;
  const color8 = stringify([clampCssByte(lerpNumber(leftColor[0], rightColor[0], dv)), clampCssByte(lerpNumber(leftColor[1], rightColor[1], dv)), clampCssByte(lerpNumber(leftColor[2], rightColor[2], dv)), clampCssFloat(lerpNumber(leftColor[3], rightColor[3], dv))], "rgba");
  return fullOutput ? {
    color: color8,
    leftIndex,
    rightIndex,
    value
  } : color8;
}
const mapToColor = lerp2;
function modifyHSL(color8, h, s, l) {
  let colorArr = parse(color8);
  if (color8) {
    colorArr = rgba2hsla(colorArr);
    h != null && (colorArr[0] = clampCssAngle(h));
    s != null && (colorArr[1] = parseCssFloat(s));
    l != null && (colorArr[2] = parseCssFloat(l));
    return stringify(hsla2rgba(colorArr), "rgba");
  }
}
function modifyAlpha(color8, alpha) {
  const colorArr = parse(color8);
  if (colorArr && alpha != null) {
    colorArr[3] = clampCssFloat(alpha);
    return stringify(colorArr, "rgba");
  }
}
function stringify(arrColor, type) {
  if (!arrColor || !arrColor.length) {
    return;
  }
  let colorStr = arrColor[0] + "," + arrColor[1] + "," + arrColor[2];
  if (type === "rgba" || type === "hsva" || type === "hsla") {
    colorStr += "," + arrColor[3];
  }
  return type + "(" + colorStr + ")";
}
function lum(color8, backgroundLum) {
  const arr = parse(color8);
  return arr ? (0.299 * arr[0] + 0.587 * arr[1] + 0.114 * arr[2]) * arr[3] / 255 + (1 - arr[3]) * backgroundLum : 0;
}
function random() {
  let r = Math.round(Math.random() * 255);
  let g = Math.round(Math.random() * 255);
  let b = Math.round(Math.random() * 255);
  return "rgb(" + r + "," + g + "," + b + ")";
}

// node_modules/zrender/src/animation/Animator.ts
const arraySlice = Array.prototype.slice;
function interpolateNumber(p0, p1, percent) {
  return (p1 - p0) * percent + p0;
}
function step(p0, p1, percent) {
  return percent > 0.5 ? p1 : p0;
}
function interpolate1DArray(out2, p0, p1, percent) {
  const len2 = p0.length;
  for (let i = 0; i < len2; i++) {
    out2[i] = interpolateNumber(p0[i], p1[i], percent);
  }
}
function interpolate2DArray(out2, p0, p1, percent) {
  const len2 = p0.length;
  const len22 = len2 && p0[0].length;
  for (let i = 0; i < len2; i++) {
    if (!out2[i]) {
      out2[i] = [];
    }
    for (let j = 0; j < len22; j++) {
      out2[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
    }
  }
}
function add1DArray(out2, p0, p1, sign) {
  const len2 = p0.length;
  for (let i = 0; i < len2; i++) {
    out2[i] = p0[i] + p1[i] * sign;
  }
  return out2;
}
function add2DArray(out2, p0, p1, sign) {
  const len2 = p0.length;
  const len22 = len2 && p0[0].length;
  for (let i = 0; i < len2; i++) {
    if (!out2[i]) {
      out2[i] = [];
    }
    for (let j = 0; j < len22; j++) {
      out2[i][j] = p0[i][j] + p1[i][j] * sign;
    }
  }
  return out2;
}
function fillArray(val0, val1, arrDim) {
  let arr0 = val0;
  let arr1 = val1;
  if (!arr0.push || !arr1.push) {
    return;
  }
  const arr0Len = arr0.length;
  const arr1Len = arr1.length;
  if (arr0Len !== arr1Len) {
    const isPreviousLarger = arr0Len > arr1Len;
    if (isPreviousLarger) {
      arr0.length = arr1Len;
    } else {
      for (let i = arr0Len; i < arr1Len; i++) {
        arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
      }
    }
  }
  const len2 = arr0[0] && arr0[0].length;
  for (let i = 0; i < arr0.length; i++) {
    if (arrDim === 1) {
      if (isNaN(arr0[i])) {
        arr0[i] = arr1[i];
      }
    } else {
      for (let j = 0; j < len2; j++) {
        if (isNaN(arr0[i][j])) {
          arr0[i][j] = arr1[i][j];
        }
      }
    }
  }
}
function is1DArraySame(arr0, arr1) {
  const len2 = arr0.length;
  if (len2 !== arr1.length) {
    return false;
  }
  for (let i = 0; i < len2; i++) {
    if (arr0[i] !== arr1[i]) {
      return false;
    }
  }
  return true;
}
function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
  const v0 = (p2 - p0) * 0.5;
  const v12 = (p3 - p1) * 0.5;
  return (2 * (p1 - p2) + v0 + v12) * t3 + (-3 * (p1 - p2) - 2 * v0 - v12) * t2 + v0 * t + p1;
}
function catmullRomInterpolate1DArray(out2, p0, p1, p2, p3, t, t2, t3) {
  const len2 = p0.length;
  for (let i = 0; i < len2; i++) {
    out2[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
  }
}
function catmullRomInterpolate2DArray(out2, p0, p1, p2, p3, t, t2, t3) {
  const len2 = p0.length;
  const len22 = p0[0].length;
  for (let i = 0; i < len2; i++) {
    if (!out2[i]) {
      out2[1] = [];
    }
    for (let j = 0; j < len22; j++) {
      out2[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
    }
  }
}
function cloneValue(value) {
  if (isArrayLike(value)) {
    const len2 = value.length;
    if (isArrayLike(value[0])) {
      const ret = [];
      for (let i = 0; i < len2; i++) {
        ret.push(arraySlice.call(value[i]));
      }
      return ret;
    }
    return arraySlice.call(value);
  }
  return value;
}
function rgba2String(rgba) {
  rgba[0] = Math.floor(rgba[0]);
  rgba[1] = Math.floor(rgba[1]);
  rgba[2] = Math.floor(rgba[2]);
  return "rgba(" + rgba.join(",") + ")";
}
function guessArrayDim(value) {
  return isArrayLike(value && value[0]) ? 2 : 1;
}
let tmpRgba = [0, 0, 0, 0];
class Track {
  constructor(propName) {
    this.keyframes = [];
    this.maxTime = 0;
    this.arrDim = 0;
    this.interpolable = true;
    this._needsSort = false;
    this._isAllValueEqual = true;
    this._lastFrame = 0;
    this._lastFramePercent = 0;
    this.propName = propName;
  }
  isFinished() {
    return this._finished;
  }
  setFinished() {
    this._finished = true;
  }
  needsAnimate() {
    return !this._isAllValueEqual && this.keyframes.length >= 2 && this.interpolable;
  }
  getAdditiveTrack() {
    return this._additiveTrack;
  }
  addKeyframe(time, value) {
    if (time >= this.maxTime) {
      this.maxTime = time;
    } else {
      this._needsSort = true;
    }
    let keyframes = this.keyframes;
    let len2 = keyframes.length;
    if (this.interpolable) {
      if (isArrayLike(value)) {
        let arrayDim = guessArrayDim(value);
        if (len2 > 0 && this.arrDim !== arrayDim) {
          this.interpolable = false;
          return;
        }
        if (arrayDim === 1 && typeof value[0] !== "number" || arrayDim === 2 && typeof value[0][0] !== "number") {
          this.interpolable = false;
          return;
        }
        if (len2 > 0) {
          let lastFrame = keyframes[len2 - 1];
          if (this._isAllValueEqual) {
            if (arrayDim === 1) {
              if (!is1DArraySame(value, lastFrame.value)) {
                this._isAllValueEqual = false;
              }
            } else {
              this._isAllValueEqual = false;
            }
          }
        }
        this.arrDim = arrayDim;
      } else {
        if (this.arrDim > 0) {
          this.interpolable = false;
          return;
        }
        if (typeof value === "string") {
          const colorArray = parse(value);
          if (colorArray) {
            value = colorArray;
            this.isValueColor = true;
          } else {
            this.interpolable = false;
          }
        } else if (typeof value !== "number") {
          this.interpolable = false;
          return;
        }
        if (this._isAllValueEqual && len2 > 0) {
          let lastFrame = keyframes[len2 - 1];
          if (this.isValueColor && !is1DArraySame(lastFrame.value, value)) {
            this._isAllValueEqual = false;
          } else if (lastFrame.value !== value) {
            this._isAllValueEqual = false;
          }
        }
      }
    }
    const kf = {
      time,
      value,
      percent: 0
    };
    this.keyframes.push(kf);
    return kf;
  }
  prepare(additiveTrack) {
    let kfs = this.keyframes;
    if (this._needsSort) {
      kfs.sort(function(a, b) {
        return a.time - b.time;
      });
    }
    const arrDim = this.arrDim;
    const kfsLen = kfs.length;
    const lastKf = kfs[kfsLen - 1];
    for (let i = 0; i < kfsLen; i++) {
      kfs[i].percent = kfs[i].time / this.maxTime;
      if (arrDim > 0 && i !== kfsLen - 1) {
        fillArray(kfs[i].value, lastKf.value, arrDim);
      }
    }
    if (additiveTrack && this.interpolable && arrDim === additiveTrack.arrDim && this.isValueColor === additiveTrack.isValueColor && !additiveTrack._finished) {
      this._additiveTrack = additiveTrack;
      const startValue = kfs[0].value;
      for (let i = 0; i < kfsLen; i++) {
        if (arrDim === 0) {
          if (this.isValueColor) {
            kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);
          } else {
            kfs[i].additiveValue = kfs[i].value - startValue;
          }
        } else if (arrDim === 1) {
          kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);
        } else if (arrDim === 2) {
          kfs[i].additiveValue = add2DArray([], kfs[i].value, startValue, -1);
        }
      }
    }
  }
  step(target, percent) {
    if (this._finished) {
      return;
    }
    if (this._additiveTrack && this._additiveTrack._finished) {
      this._additiveTrack = null;
    }
    const isAdditive = this._additiveTrack != null;
    const valueKey = isAdditive ? "additiveValue" : "value";
    const keyframes = this.keyframes;
    const kfsNum = this.keyframes.length;
    const propName = this.propName;
    const arrDim = this.arrDim;
    const isValueColor = this.isValueColor;
    let frameIdx;
    if (percent < 0) {
      frameIdx = 0;
    } else if (percent < this._lastFramePercent) {
      const start2 = Math.min(this._lastFrame + 1, kfsNum - 1);
      for (frameIdx = start2; frameIdx >= 0; frameIdx--) {
        if (keyframes[frameIdx].percent <= percent) {
          break;
        }
      }
      frameIdx = Math.min(frameIdx, kfsNum - 2);
    } else {
      for (frameIdx = this._lastFrame; frameIdx < kfsNum; frameIdx++) {
        if (keyframes[frameIdx].percent > percent) {
          break;
        }
      }
      frameIdx = Math.min(frameIdx - 1, kfsNum - 2);
    }
    let nextFrame = keyframes[frameIdx + 1];
    let frame = keyframes[frameIdx];
    if (!(frame && nextFrame)) {
      return;
    }
    this._lastFrame = frameIdx;
    this._lastFramePercent = percent;
    const range = nextFrame.percent - frame.percent;
    if (range === 0) {
      return;
    }
    const w = (percent - frame.percent) / range;
    let targetArr = isAdditive ? this._additiveValue : isValueColor ? tmpRgba : target[propName];
    if ((arrDim > 0 || isValueColor) && !targetArr) {
      targetArr = this._additiveValue = [];
    }
    if (this.useSpline) {
      const p1 = keyframes[frameIdx][valueKey];
      const p0 = keyframes[frameIdx === 0 ? frameIdx : frameIdx - 1][valueKey];
      const p2 = keyframes[frameIdx > kfsNum - 2 ? kfsNum - 1 : frameIdx + 1][valueKey];
      const p3 = keyframes[frameIdx > kfsNum - 3 ? kfsNum - 1 : frameIdx + 2][valueKey];
      if (arrDim > 0) {
        arrDim === 1 ? catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w) : catmullRomInterpolate2DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);
      } else if (isValueColor) {
        catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);
        if (!isAdditive) {
          target[propName] = rgba2String(targetArr);
        }
      } else {
        let value;
        if (!this.interpolable) {
          value = p2;
        } else {
          value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
        }
        if (isAdditive) {
          this._additiveValue = value;
        } else {
          target[propName] = value;
        }
      }
    } else {
      if (arrDim > 0) {
        arrDim === 1 ? interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w) : interpolate2DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);
      } else if (isValueColor) {
        interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);
        if (!isAdditive) {
          target[propName] = rgba2String(targetArr);
        }
      } else {
        let value;
        if (!this.interpolable) {
          value = step(frame[valueKey], nextFrame[valueKey], w);
        } else {
          value = interpolateNumber(frame[valueKey], nextFrame[valueKey], w);
        }
        if (isAdditive) {
          this._additiveValue = value;
        } else {
          target[propName] = value;
        }
      }
    }
    if (isAdditive) {
      this._addToTarget(target);
    }
  }
  _addToTarget(target) {
    const arrDim = this.arrDim;
    const propName = this.propName;
    if (arrDim === 0) {
      if (this.isValueColor) {
        parse(target[propName], tmpRgba);
        add1DArray(tmpRgba, tmpRgba, this._additiveValue, 1);
        target[propName] = rgba2String(tmpRgba);
      } else {
        target[propName] = target[propName] + this._additiveValue;
      }
    } else if (arrDim === 1) {
      add1DArray(target[propName], target[propName], this._additiveValue, 1);
    } else if (arrDim === 2) {
      add2DArray(target[propName], target[propName], this._additiveValue, 1);
    }
  }
}
class Animator2 {
  constructor(target, loop, additiveTo) {
    this._tracks = {};
    this._trackKeys = [];
    this._delay = 0;
    this._maxTime = 0;
    this._paused = false;
    this._started = 0;
    this._doneList = [];
    this._onframeList = [];
    this._clip = null;
    this._target = target;
    this._loop = loop;
    if (loop) {
      logError("Can' use additive animation on looped animation.");
      return;
    }
    this._additiveAnimator = additiveTo;
  }
  getTarget() {
    return this._target;
  }
  changeTarget(target) {
    this._target = target;
  }
  when(time, props) {
    return this.whenWithKeys(time, props, keys(props));
  }
  whenWithKeys(time, props, propNames) {
    const tracks = this._tracks;
    for (let i = 0; i < propNames.length; i++) {
      const propName = propNames[i];
      let track = tracks[propName];
      if (!track) {
        track = tracks[propName] = new Track(propName);
        let initialValue;
        const additiveTrack = this._additiveAnimator && this._additiveAnimator.getTrack(propName);
        if (additiveTrack) {
          const lastFinalKf = additiveTrack.keyframes[additiveTrack.keyframes.length - 1];
          initialValue = lastFinalKf && lastFinalKf.value;
          if (additiveTrack.isValueColor && initialValue) {
            initialValue = rgba2String(initialValue);
          }
        } else {
          initialValue = this._target[propName];
        }
        if (initialValue == null) {
          continue;
        }
        if (time !== 0) {
          track.addKeyframe(0, cloneValue(initialValue));
        }
        this._trackKeys.push(propName);
      }
      track.addKeyframe(time, cloneValue(props[propName]));
    }
    this._maxTime = Math.max(this._maxTime, time);
    return this;
  }
  during(callback) {
    this._onframeList.push(callback);
    return this;
  }
  pause() {
    this._clip.pause();
    this._paused = true;
  }
  resume() {
    this._clip.resume();
    this._paused = false;
  }
  isPaused() {
    return !!this._paused;
  }
  _doneCallback() {
    this._tracks = null;
    this._clip = null;
    const doneList = this._doneList;
    const len2 = doneList.length;
    for (let i = 0; i < len2; i++) {
      doneList[i].call(this);
    }
  }
  start(easing7, forceAnimate) {
    if (this._started > 0) {
      return;
    }
    this._started = 1;
    const self2 = this;
    let tracks = [];
    for (let i = 0; i < this._trackKeys.length; i++) {
      const propName = this._trackKeys[i];
      const track = this._tracks[propName];
      const additiveTrack = this._additiveAnimator && this._additiveAnimator.getTrack(propName);
      const kfs = track.keyframes;
      track.prepare(additiveTrack);
      if (track.needsAnimate()) {
        tracks.push(track);
      } else if (!track.interpolable) {
        const lastKf = kfs[kfs.length - 1];
        if (lastKf) {
          self2._target[track.propName] = lastKf.value;
        }
      }
    }
    if (tracks.length || forceAnimate) {
      const clip2 = new Clip4({
        life: this._maxTime,
        loop: this._loop,
        delay: this._delay,
        onframe(percent) {
          self2._started = 2;
          if (self2._additiveAnimator && !self2._additiveAnimator._clip) {
            self2._additiveAnimator = null;
          }
          for (let i = 0; i < tracks.length; i++) {
            tracks[i].step(self2._target, percent);
          }
          for (let i = 0; i < self2._onframeList.length; i++) {
            self2._onframeList[i](self2._target, percent);
          }
        },
        ondestroy() {
          for (let i = 0; i < tracks.length; i++) {
            tracks[i].setFinished();
          }
          self2._doneCallback();
        }
      });
      this._clip = clip2;
      if (this.animation) {
        this.animation.addClip(clip2);
      }
      if (easing7 && easing7 !== "spline") {
        clip2.easing = easing7;
      }
    } else {
      this._doneCallback();
    }
    return this;
  }
  stop(forwardToLast) {
    if (!this._clip) {
      return;
    }
    const clip2 = this._clip;
    const animation = this.animation;
    if (forwardToLast) {
      clip2.onframe(1);
    }
    if (animation) {
      animation.removeClip(clip2);
    }
    this._clip = null;
  }
  delay(time) {
    this._delay = time;
    return this;
  }
  done(cb) {
    if (cb) {
      this._doneList.push(cb);
    }
    return this;
  }
  getClip() {
    return this._clip;
  }
  getTrack(propName) {
    return this._tracks[propName];
  }
  stopTracks(propNames, forwardToLast) {
    if (!propNames.length || !this._clip) {
      return true;
    }
    const tracks = this._tracks;
    const tracksKeys = this._trackKeys;
    for (let i = 0; i < propNames.length; i++) {
      const track = tracks[propNames[i]];
      if (track) {
        if (forwardToLast) {
          track.step(this._target, 1);
        } else if (this._started === 1) {
          track.step(this._target, 0);
        }
        track.setFinished();
      }
    }
    let allAborted = true;
    for (let i = 0; i < tracksKeys.length; i++) {
      if (!tracks[tracksKeys[i]].isFinished()) {
        allAborted = false;
        break;
      }
    }
    if (allAborted && this.animation) {
      this.animation.removeClip(this._clip);
      this._clip = null;
    }
    return allAborted;
  }
  saveFinalToTarget(target, trackKeys) {
    if (!target) {
      return;
    }
    trackKeys = trackKeys || this._trackKeys;
    for (let i = 0; i < trackKeys.length; i++) {
      const propName = trackKeys[i];
      const track = this._tracks[propName];
      if (!track || track.isFinished()) {
        continue;
      }
      const kfs = track.keyframes;
      const lastKf = kfs[kfs.length - 1];
      if (lastKf) {
        let val = cloneValue(lastKf.value);
        if (track.isValueColor) {
          val = rgba2String(val);
        }
        target[propName] = val;
      }
    }
  }
  __changeFinalValue(finalProps, trackKeys) {
    trackKeys = trackKeys || keys(finalProps);
    for (let i = 0; i < trackKeys.length; i++) {
      const propName = trackKeys[i];
      const track = this._tracks[propName];
      if (!track) {
        continue;
      }
      const kfs = track.keyframes;
      if (kfs.length > 1) {
        const lastKf = kfs.pop();
        track.addKeyframe(lastKf.time, finalProps[propName]);
        track.prepare(track.getAdditiveTrack());
      }
    }
  }
}

// node_modules/zrender/src/animation/Animation.ts
class Animation extends Eventful2 {
  constructor(opts) {
    super();
    this._running = false;
    this._time = 0;
    this._pausedTime = 0;
    this._pauseStart = 0;
    this._paused = false;
    opts = opts || {};
    this.stage = opts.stage || {};
    this.onframe = opts.onframe || function() {
    };
  }
  addClip(clip2) {
    if (clip2.animation) {
      this.removeClip(clip2);
    }
    if (!this._clipsHead) {
      this._clipsHead = this._clipsTail = clip2;
    } else {
      this._clipsTail.next = clip2;
      clip2.prev = this._clipsTail;
      clip2.next = null;
      this._clipsTail = clip2;
    }
    clip2.animation = this;
  }
  addAnimator(animator) {
    animator.animation = this;
    const clip2 = animator.getClip();
    if (clip2) {
      this.addClip(clip2);
    }
  }
  removeClip(clip2) {
    if (!clip2.animation) {
      return;
    }
    const prev = clip2.prev;
    const next = clip2.next;
    if (prev) {
      prev.next = next;
    } else {
      this._clipsHead = next;
    }
    if (next) {
      next.prev = prev;
    } else {
      this._clipsTail = prev;
    }
    clip2.next = clip2.prev = clip2.animation = null;
  }
  removeAnimator(animator) {
    const clip2 = animator.getClip();
    if (clip2) {
      this.removeClip(clip2);
    }
    animator.animation = null;
  }
  update() {
    const time = new Date().getTime() - this._pausedTime;
    const delta = time - this._time;
    let clip2 = this._clipsHead;
    while (clip2) {
      const nextClip = clip2.next;
      let finished = clip2.step(time, delta);
      if (finished) {
        clip2.ondestroy && clip2.ondestroy();
        this.removeClip(clip2);
        clip2 = nextClip;
      } else {
        clip2 = nextClip;
      }
    }
    this._time = time;
    this.onframe(delta);
    this.trigger("frame", delta);
    if (this.stage.update) {
      this.stage.update();
    }
  }
  _startLoop() {
    const self2 = this;
    this._running = true;
    function step2() {
      if (self2._running) {
        requestAnimationFrame_default(step2);
        !self2._paused && self2.update();
      }
    }
    requestAnimationFrame_default(step2);
  }
  start() {
    if (this._running) {
      return;
    }
    this._time = new Date().getTime();
    this._pausedTime = 0;
    this._startLoop();
  }
  stop() {
    this._running = false;
  }
  pause() {
    if (!this._paused) {
      this._pauseStart = new Date().getTime();
      this._paused = true;
    }
  }
  resume() {
    if (this._paused) {
      this._pausedTime += new Date().getTime() - this._pauseStart;
      this._paused = false;
    }
  }
  clear() {
    let clip2 = this._clipsHead;
    while (clip2) {
      let nextClip = clip2.next;
      clip2.prev = clip2.next = clip2.animation = null;
      clip2 = nextClip;
    }
    this._clipsHead = this._clipsTail = null;
  }
  isFinished() {
    return this._clipsHead == null;
  }
  animate(target, options) {
    options = options || {};
    const animator = new Animator2(target, options.loop);
    this.addAnimator(animator);
    return animator;
  }
}

// node_modules/zrender/src/dom/HandlerProxy.ts
const TOUCH_CLICK_DELAY = 300;
const globalEventSupported = env_default.domSupported;
const localNativeListenerNames = function() {
  const mouseHandlerNames = ["click", "dblclick", "mousewheel", "wheel", "mouseout", "mouseup", "mousedown", "mousemove", "contextmenu"];
  const touchHandlerNames = ["touchstart", "touchend", "touchmove"];
  const pointerEventNameMap = {
    pointerdown: 1,
    pointerup: 1,
    pointermove: 1,
    pointerout: 1
  };
  const pointerHandlerNames = map2(mouseHandlerNames, function(name) {
    const nm = name.replace("mouse", "pointer");
    return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;
  });
  return {
    mouse: mouseHandlerNames,
    touch: touchHandlerNames,
    pointer: pointerHandlerNames
  };
}();
const globalNativeListenerNames = {
  mouse: ["mousemove", "mouseup"],
  pointer: ["pointermove", "pointerup"]
};
let wheelEventSupported = false;
function isPointerFromTouch(event3) {
  const pointerType = event3.pointerType;
  return pointerType === "pen" || pointerType === "touch";
}
function setTouchTimer(scope) {
  scope.touching = true;
  if (scope.touchTimer != null) {
    clearTimeout(scope.touchTimer);
    scope.touchTimer = null;
  }
  scope.touchTimer = setTimeout(function() {
    scope.touching = false;
    scope.touchTimer = null;
  }, 700);
}
function markTouch(event3) {
  event3 && (event3.zrByTouch = true);
}
function normalizeGlobalEvent(instance, event3) {
  return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event3), true);
}
function isLocalEl(instance, el) {
  let elTmp = el;
  let isLocal = false;
  while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {
    elTmp = elTmp.parentNode;
  }
  return isLocal;
}
class FakeGlobalEvent {
  constructor(instance, event3) {
    this.stopPropagation = noop;
    this.stopImmediatePropagation = noop;
    this.preventDefault = noop;
    this.type = event3.type;
    this.target = this.currentTarget = instance.dom;
    this.pointerType = event3.pointerType;
    this.clientX = event3.clientX;
    this.clientY = event3.clientY;
  }
}
const localDOMHandlers = {
  mousedown(event3) {
    event3 = normalizeEvent(this.dom, event3);
    this.__mayPointerCapture = [event3.zrX, event3.zrY];
    this.trigger("mousedown", event3);
  },
  mousemove(event3) {
    event3 = normalizeEvent(this.dom, event3);
    const downPoint = this.__mayPointerCapture;
    if (downPoint && (event3.zrX !== downPoint[0] || event3.zrY !== downPoint[1])) {
      this.__togglePointerCapture(true);
    }
    this.trigger("mousemove", event3);
  },
  mouseup(event3) {
    event3 = normalizeEvent(this.dom, event3);
    this.__togglePointerCapture(false);
    this.trigger("mouseup", event3);
  },
  mouseout(event3) {
    event3 = normalizeEvent(this.dom, event3);
    if (this.__pointerCapturing) {
      event3.zrEventControl = "no_globalout";
    }
    const element = event3.toElement || event3.relatedTarget;
    event3.zrIsToLocalDOM = isLocalEl(this, element);
    this.trigger("mouseout", event3);
  },
  wheel(event3) {
    wheelEventSupported = true;
    event3 = normalizeEvent(this.dom, event3);
    this.trigger("mousewheel", event3);
  },
  mousewheel(event3) {
    if (wheelEventSupported) {
      return;
    }
    event3 = normalizeEvent(this.dom, event3);
    this.trigger("mousewheel", event3);
  },
  touchstart(event3) {
    event3 = normalizeEvent(this.dom, event3);
    markTouch(event3);
    this.__lastTouchMoment = new Date();
    this.handler.processGesture(event3, "start");
    localDOMHandlers.mousemove.call(this, event3);
    localDOMHandlers.mousedown.call(this, event3);
  },
  touchmove(event3) {
    event3 = normalizeEvent(this.dom, event3);
    markTouch(event3);
    this.handler.processGesture(event3, "change");
    localDOMHandlers.mousemove.call(this, event3);
  },
  touchend(event3) {
    event3 = normalizeEvent(this.dom, event3);
    markTouch(event3);
    this.handler.processGesture(event3, "end");
    localDOMHandlers.mouseup.call(this, event3);
    if (+new Date() - +this.__lastTouchMoment < TOUCH_CLICK_DELAY) {
      localDOMHandlers.click.call(this, event3);
    }
  },
  pointerdown(event3) {
    localDOMHandlers.mousedown.call(this, event3);
  },
  pointermove(event3) {
    if (!isPointerFromTouch(event3)) {
      localDOMHandlers.mousemove.call(this, event3);
    }
  },
  pointerup(event3) {
    localDOMHandlers.mouseup.call(this, event3);
  },
  pointerout(event3) {
    if (!isPointerFromTouch(event3)) {
      localDOMHandlers.mouseout.call(this, event3);
    }
  }
};
each(["click", "dblclick", "contextmenu"], function(name) {
  localDOMHandlers[name] = function(event3) {
    event3 = normalizeEvent(this.dom, event3);
    this.trigger(name, event3);
  };
});
const globalDOMHandlers = {
  pointermove: function(event3) {
    if (!isPointerFromTouch(event3)) {
      globalDOMHandlers.mousemove.call(this, event3);
    }
  },
  pointerup: function(event3) {
    globalDOMHandlers.mouseup.call(this, event3);
  },
  mousemove: function(event3) {
    this.trigger("mousemove", event3);
  },
  mouseup: function(event3) {
    const pointerCaptureReleasing = this.__pointerCapturing;
    this.__togglePointerCapture(false);
    this.trigger("mouseup", event3);
    if (pointerCaptureReleasing) {
      event3.zrEventControl = "only_globalout";
      this.trigger("mouseout", event3);
    }
  }
};
function mountLocalDOMEventListeners(instance, scope) {
  const domHandlers = scope.domHandlers;
  if (env_default.pointerEventsSupported) {
    each(localNativeListenerNames.pointer, function(nativeEventName) {
      mountSingleDOMEventListener(scope, nativeEventName, function(event3) {
        domHandlers[nativeEventName].call(instance, event3);
      });
    });
  } else {
    if (env_default.touchEventsSupported) {
      each(localNativeListenerNames.touch, function(nativeEventName) {
        mountSingleDOMEventListener(scope, nativeEventName, function(event3) {
          domHandlers[nativeEventName].call(instance, event3);
          setTouchTimer(scope);
        });
      });
    }
    each(localNativeListenerNames.mouse, function(nativeEventName) {
      mountSingleDOMEventListener(scope, nativeEventName, function(event3) {
        event3 = getNativeEvent(event3);
        if (!scope.touching) {
          domHandlers[nativeEventName].call(instance, event3);
        }
      });
    });
  }
}
function mountGlobalDOMEventListeners(instance, scope) {
  if (env_default.pointerEventsSupported) {
    each(globalNativeListenerNames.pointer, mount);
  } else if (!env_default.touchEventsSupported) {
    each(globalNativeListenerNames.mouse, mount);
  }
  function mount(nativeEventName) {
    function nativeEventListener(event3) {
      event3 = getNativeEvent(event3);
      if (!isLocalEl(instance, event3.target)) {
        event3 = normalizeGlobalEvent(instance, event3);
        scope.domHandlers[nativeEventName].call(instance, event3);
      }
    }
    mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {
      capture: true
    });
  }
}
function mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {
  scope.mounted[nativeEventName] = listener;
  scope.listenerOpts[nativeEventName] = opt;
  addEventListener(scope.domTarget, nativeEventName, listener, opt);
}
function unmountDOMEventListeners(scope) {
  const mounted = scope.mounted;
  for (let nativeEventName in mounted) {
    if (mounted.hasOwnProperty(nativeEventName)) {
      removeEventListener(scope.domTarget, nativeEventName, mounted[nativeEventName], scope.listenerOpts[nativeEventName]);
    }
  }
  scope.mounted = {};
}
class DOMHandlerScope {
  constructor(domTarget, domHandlers) {
    this.mounted = {};
    this.listenerOpts = {};
    this.touching = false;
    this.domTarget = domTarget;
    this.domHandlers = domHandlers;
  }
}
class HandlerDomProxy2 extends Eventful2 {
  constructor(dom2, painterRoot) {
    super();
    this.__pointerCapturing = false;
    this.dom = dom2;
    this.painterRoot = painterRoot;
    this.__localHandlerScope = new DOMHandlerScope(dom2, localDOMHandlers);
    if (globalEventSupported) {
      this.__globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);
    }
    mountLocalDOMEventListeners(this, this.__localHandlerScope);
  }
  dispose() {
    unmountDOMEventListeners(this.__localHandlerScope);
    if (globalEventSupported) {
      unmountDOMEventListeners(this.__globalHandlerScope);
    }
  }
  setCursor(cursorStyle) {
    this.dom.style && (this.dom.style.cursor = cursorStyle || "default");
  }
  __togglePointerCapture(isPointerCapturing) {
    this.__mayPointerCapture = null;
    if (globalEventSupported && +this.__pointerCapturing ^ +isPointerCapturing) {
      this.__pointerCapturing = isPointerCapturing;
      const globalHandlerScope = this.__globalHandlerScope;
      isPointerCapturing ? mountGlobalDOMEventListeners(this, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);
    }
  }
}

// node_modules/zrender/src/core/matrix.ts
const matrix_exports = {};
__export(matrix_exports, {
  clone: () => clone,
  copy: () => copy,
  create: () => create,
  identity: () => identity,
  invert: () => invert,
  mul: () => mul,
  rotate: () => rotate,
  scale: () => scale,
  translate: () => translate
});
function create() {
  return [1, 0, 0, 1, 0, 0];
}
function identity(out2) {
  out2[0] = 1;
  out2[1] = 0;
  out2[2] = 0;
  out2[3] = 1;
  out2[4] = 0;
  out2[5] = 0;
  return out2;
}
function copy(out2, m2) {
  out2[0] = m2[0];
  out2[1] = m2[1];
  out2[2] = m2[2];
  out2[3] = m2[3];
  out2[4] = m2[4];
  out2[5] = m2[5];
  return out2;
}
function mul(out2, m1, m2) {
  const out0 = m1[0] * m2[0] + m1[2] * m2[1];
  const out1 = m1[1] * m2[0] + m1[3] * m2[1];
  const out22 = m1[0] * m2[2] + m1[2] * m2[3];
  const out3 = m1[1] * m2[2] + m1[3] * m2[3];
  const out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
  const out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
  out2[0] = out0;
  out2[1] = out1;
  out2[2] = out22;
  out2[3] = out3;
  out2[4] = out4;
  out2[5] = out5;
  return out2;
}
function translate(out2, a, v4) {
  out2[0] = a[0];
  out2[1] = a[1];
  out2[2] = a[2];
  out2[3] = a[3];
  out2[4] = a[4] + v4[0];
  out2[5] = a[5] + v4[1];
  return out2;
}
function rotate(out2, a, rad) {
  const aa = a[0];
  const ac = a[2];
  const atx = a[4];
  const ab = a[1];
  const ad = a[3];
  const aty = a[5];
  const st = Math.sin(rad);
  const ct = Math.cos(rad);
  out2[0] = aa * ct + ab * st;
  out2[1] = -aa * st + ab * ct;
  out2[2] = ac * ct + ad * st;
  out2[3] = -ac * st + ct * ad;
  out2[4] = ct * atx + st * aty;
  out2[5] = ct * aty - st * atx;
  return out2;
}
function scale(out2, a, v4) {
  const vx = v4[0];
  const vy = v4[1];
  out2[0] = a[0] * vx;
  out2[1] = a[1] * vy;
  out2[2] = a[2] * vx;
  out2[3] = a[3] * vy;
  out2[4] = a[4] * vx;
  out2[5] = a[5] * vy;
  return out2;
}
function invert(out2, a) {
  const aa = a[0];
  const ac = a[2];
  const atx = a[4];
  const ab = a[1];
  const ad = a[3];
  const aty = a[5];
  let det = aa * ad - ab * ac;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out2[0] = ad * det;
  out2[1] = -ab * det;
  out2[2] = -ac * det;
  out2[3] = aa * det;
  out2[4] = (ac * aty - ad * atx) * det;
  out2[5] = (ab * atx - aa * aty) * det;
  return out2;
}
function clone(a) {
  const b = create();
  copy(b, a);
  return b;
}

// node_modules/zrender/src/core/Transformable.ts
const mIdentity = identity;
const EPSILON3 = 5e-05;
function isNotAroundZero(val) {
  return val > EPSILON3 || val < -EPSILON3;
}
const scaleTmp = [];
const tmpTransform = [];
const originTransform = create();
const abs = Math.abs;
class Transformable2 {
  setPosition(arr) {
    this.x = arr[0];
    this.y = arr[1];
  }
  setScale(arr) {
    this.scaleX = arr[0];
    this.scaleY = arr[1];
  }
  setOrigin(arr) {
    this.originX = arr[0];
    this.originY = arr[1];
  }
  needLocalTransform() {
    return isNotAroundZero(this.rotation) || isNotAroundZero(this.x) || isNotAroundZero(this.y) || isNotAroundZero(this.scaleX - 1) || isNotAroundZero(this.scaleY - 1);
  }
  updateTransform() {
    const parent = this.parent;
    const parentHasTransform = parent && parent.transform;
    const needLocalTransform = this.needLocalTransform();
    let m2 = this.transform;
    if (!(needLocalTransform || parentHasTransform)) {
      m2 && mIdentity(m2);
      return;
    }
    m2 = m2 || create();
    if (needLocalTransform) {
      this.getLocalTransform(m2);
    } else {
      mIdentity(m2);
    }
    if (parentHasTransform) {
      if (needLocalTransform) {
        mul(m2, parent.transform, m2);
      } else {
        copy(m2, parent.transform);
      }
    }
    this.transform = m2;
    this._resolveGlobalScaleRatio(m2);
  }
  _resolveGlobalScaleRatio(m2) {
    const globalScaleRatio = this.globalScaleRatio;
    if (globalScaleRatio != null && globalScaleRatio !== 1) {
      this.getGlobalScale(scaleTmp);
      const relX = scaleTmp[0] < 0 ? -1 : 1;
      const relY = scaleTmp[1] < 0 ? -1 : 1;
      const sx = ((scaleTmp[0] - relX) * globalScaleRatio + relX) / scaleTmp[0] || 0;
      const sy = ((scaleTmp[1] - relY) * globalScaleRatio + relY) / scaleTmp[1] || 0;
      m2[0] *= sx;
      m2[1] *= sx;
      m2[2] *= sy;
      m2[3] *= sy;
    }
    this.invTransform = this.invTransform || create();
    invert(this.invTransform, m2);
  }
  getLocalTransform(m2) {
    return Transformable2.getLocalTransform(this, m2);
  }
  getComputedTransform() {
    let transformNode = this;
    const ancestors = [];
    while (transformNode) {
      ancestors.push(transformNode);
      transformNode = transformNode.parent;
    }
    while (transformNode = ancestors.pop()) {
      transformNode.updateTransform();
    }
    return this.transform;
  }
  setLocalTransform(m2) {
    if (!m2) {
      return;
    }
    let sx = m2[0] * m2[0] + m2[1] * m2[1];
    let sy = m2[2] * m2[2] + m2[3] * m2[3];
    if (isNotAroundZero(sx - 1)) {
      sx = Math.sqrt(sx);
    }
    if (isNotAroundZero(sy - 1)) {
      sy = Math.sqrt(sy);
    }
    this.rotation = Math.atan2(-m2[1] / sy, m2[0] / sx);
    if (m2[0] < 0) {
      sx = -sx;
    }
    if (m2[3] < 0) {
      sy = -sy;
    }
    if (sx < 0 && sy < 0) {
      this.rotation += Math.PI;
      sx = -sx;
      sy = -sy;
    }
    this.x = m2[4];
    this.y = m2[5];
    this.scaleX = sx;
    this.scaleY = sy;
  }
  decomposeTransform() {
    if (!this.transform) {
      return;
    }
    const parent = this.parent;
    let m2 = this.transform;
    if (parent && parent.transform) {
      mul(tmpTransform, parent.invTransform, m2);
      m2 = tmpTransform;
    }
    const ox = this.originX;
    const oy = this.originY;
    if (ox || oy) {
      originTransform[4] = ox;
      originTransform[5] = oy;
      mul(tmpTransform, m2, originTransform);
      tmpTransform[4] -= ox;
      tmpTransform[5] -= oy;
      m2 = tmpTransform;
    }
    this.setLocalTransform(m2);
  }
  getGlobalScale(out2) {
    const m2 = this.transform;
    out2 = out2 || [];
    if (!m2) {
      out2[0] = 1;
      out2[1] = 1;
      return out2;
    }
    out2[0] = Math.sqrt(m2[0] * m2[0] + m2[1] * m2[1]);
    out2[1] = Math.sqrt(m2[2] * m2[2] + m2[3] * m2[3]);
    if (m2[0] < 0) {
      out2[0] = -out2[0];
    }
    if (m2[3] < 0) {
      out2[1] = -out2[1];
    }
    return out2;
  }
  transformCoordToLocal(x, y) {
    const v22 = [x, y];
    const invTransform = this.invTransform;
    if (invTransform) {
      applyTransform(v22, v22, invTransform);
    }
    return v22;
  }
  transformCoordToGlobal(x, y) {
    const v22 = [x, y];
    const transform = this.transform;
    if (transform) {
      applyTransform(v22, v22, transform);
    }
    return v22;
  }
  getLineScale() {
    const m2 = this.transform;
    return m2 && abs(m2[0] - 1) > 1e-10 && abs(m2[3] - 1) > 1e-10 ? Math.sqrt(abs(m2[0] * m2[3] - m2[2] * m2[1])) : 1;
  }
  static getLocalTransform(target, m2) {
    m2 = m2 || [];
    mIdentity(m2);
    const ox = target.originX || 0;
    const oy = target.originY || 0;
    const sx = target.scaleX;
    const sy = target.scaleY;
    const rotation = target.rotation || 0;
    const x = target.x;
    const y = target.y;
    m2[4] -= ox;
    m2[5] -= oy;
    m2[0] *= sx;
    m2[1] *= sy;
    m2[2] *= sx;
    m2[3] *= sy;
    m2[4] *= sx;
    m2[5] *= sy;
    if (rotation) {
      rotate(m2, m2, rotation);
    }
    m2[4] += ox;
    m2[5] += oy;
    m2[4] += x;
    m2[5] += y;
    return m2;
  }
}
Transformable2.initDefaultProps = function() {
  const proto2 = Transformable2.prototype;
  proto2.x = 0;
  proto2.y = 0;
  proto2.scaleX = 1;
  proto2.scaleY = 1;
  proto2.originX = 0;
  proto2.originY = 0;
  proto2.rotation = 0;
  proto2.globalScaleRatio = 1;
}();
const Transformable_default = Transformable2;

// node_modules/zrender/src/core/Point.ts
class Point4 {
  constructor(x, y) {
    this.x = x || 0;
    this.y = y || 0;
  }
  copy(other) {
    this.x = other.x;
    this.y = other.y;
    return this;
  }
  clone() {
    return new Point4(this.x, this.y);
  }
  set(x, y) {
    this.x = x;
    this.y = y;
    return this;
  }
  equal(other) {
    return other.x === this.x && other.y === this.y;
  }
  add(other) {
    this.x += other.x;
    this.y += other.y;
    return this;
  }
  scale(scalar) {
    this.x *= scalar;
    this.y *= scalar;
  }
  scaleAndAdd(other, scalar) {
    this.x += other.x * scalar;
    this.y += other.y * scalar;
  }
  sub(other) {
    this.x -= other.x;
    this.y -= other.y;
    return this;
  }
  dot(other) {
    return this.x * other.x + this.y * other.y;
  }
  len() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  lenSquare() {
    return this.x * this.x + this.y * this.y;
  }
  normalize() {
    const len2 = this.len();
    this.x /= len2;
    this.y /= len2;
    return this;
  }
  distance(other) {
    const dx = this.x - other.x;
    const dy = this.y - other.y;
    return Math.sqrt(dx * dx + dy * dy);
  }
  distanceSquare(other) {
    const dx = this.x - other.x;
    const dy = this.y - other.y;
    return dx * dx + dy * dy;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  transform(m2) {
    if (!m2) {
      return;
    }
    const x = this.x;
    const y = this.y;
    this.x = m2[0] * x + m2[2] * y + m2[4];
    this.y = m2[1] * x + m2[3] * y + m2[5];
    return this;
  }
  toArray(out2) {
    out2[0] = this.x;
    out2[1] = this.y;
    return out2;
  }
  fromArray(input) {
    this.x = input[0];
    this.y = input[1];
  }
  static set(p, x, y) {
    p.x = x;
    p.y = y;
  }
  static copy(p, p2) {
    p.x = p2.x;
    p.y = p2.y;
  }
  static len(p) {
    return Math.sqrt(p.x * p.x + p.y * p.y);
  }
  static lenSquare(p) {
    return p.x * p.x + p.y * p.y;
  }
  static dot(p0, p1) {
    return p0.x * p1.x + p0.y * p1.y;
  }
  static add(out2, p0, p1) {
    out2.x = p0.x + p1.x;
    out2.y = p0.y + p1.y;
  }
  static sub(out2, p0, p1) {
    out2.x = p0.x - p1.x;
    out2.y = p0.y - p1.y;
  }
  static scale(out2, p0, scalar) {
    out2.x = p0.x * scalar;
    out2.y = p0.y * scalar;
  }
  static scaleAndAdd(out2, p0, p1, scalar) {
    out2.x = p0.x + p1.x * scalar;
    out2.y = p0.y + p1.y * scalar;
  }
  static lerp(out2, p0, p1, t) {
    const onet = 1 - t;
    out2.x = onet * p0.x + t * p1.x;
    out2.y = onet * p0.y + t * p1.y;
  }
}

// node_modules/zrender/src/core/BoundingRect.ts
const mathMin = Math.min;
const mathMax = Math.max;
const lt = new Point4();
const rb = new Point4();
const lb = new Point4();
const rt = new Point4();
const minTv = new Point4();
const maxTv = new Point4();
class BoundingRect5 {
  constructor(x, y, width, height) {
    if (width < 0) {
      x = x + width;
      width = -width;
    }
    if (height < 0) {
      y = y + height;
      height = -height;
    }
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  union(other) {
    const x = mathMin(other.x, this.x);
    const y = mathMin(other.y, this.y);
    this.width = mathMax(other.x + other.width, this.x + this.width) - x;
    this.height = mathMax(other.y + other.height, this.y + this.height) - y;
    this.x = x;
    this.y = y;
  }
  applyTransform(m2) {
    BoundingRect5.applyTransform(this, this, m2);
  }
  calculateTransform(b) {
    const a = this;
    const sx = b.width / a.width;
    const sy = b.height / a.height;
    const m2 = create();
    translate(m2, m2, [-a.x, -a.y]);
    scale(m2, m2, [sx, sy]);
    translate(m2, m2, [b.x, b.y]);
    return m2;
  }
  intersect(b, mtv) {
    if (!b) {
      return false;
    }
    if (!(b instanceof BoundingRect5)) {
      b = BoundingRect5.create(b);
    }
    const a = this;
    const ax0 = a.x;
    const ax1 = a.x + a.width;
    const ay0 = a.y;
    const ay1 = a.y + a.height;
    const bx0 = b.x;
    const bx1 = b.x + b.width;
    const by0 = b.y;
    const by1 = b.y + b.height;
    let overlap = !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
    if (mtv) {
      let dMin = Infinity;
      let dMax = 0;
      const d0 = Math.abs(ax1 - bx0);
      const d1 = Math.abs(bx1 - ax0);
      const d2 = Math.abs(ay1 - by0);
      const d3 = Math.abs(by1 - ay0);
      const dx = Math.min(d0, d1);
      const dy = Math.min(d2, d3);
      if (ax1 < bx0 || bx1 < ax0) {
        if (dx > dMax) {
          dMax = dx;
          if (d0 < d1) {
            Point4.set(maxTv, -d0, 0);
          } else {
            Point4.set(maxTv, d1, 0);
          }
        }
      } else {
        if (dx < dMin) {
          dMin = dx;
          if (d0 < d1) {
            Point4.set(minTv, d0, 0);
          } else {
            Point4.set(minTv, -d1, 0);
          }
        }
      }
      if (ay1 < by0 || by1 < ay0) {
        if (dy > dMax) {
          dMax = dy;
          if (d2 < d3) {
            Point4.set(maxTv, 0, -d2);
          } else {
            Point4.set(maxTv, 0, d3);
          }
        }
      } else {
        if (dx < dMin) {
          dMin = dx;
          if (d2 < d3) {
            Point4.set(minTv, 0, d2);
          } else {
            Point4.set(minTv, 0, -d3);
          }
        }
      }
    }
    if (mtv) {
      Point4.copy(mtv, overlap ? minTv : maxTv);
    }
    return overlap;
  }
  contain(x, y) {
    const rect = this;
    return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
  }
  clone() {
    return new BoundingRect5(this.x, this.y, this.width, this.height);
  }
  copy(other) {
    BoundingRect5.copy(this, other);
  }
  plain() {
    return {
      x: this.x,
      y: this.y,
      width: this.width,
      height: this.height
    };
  }
  static create(rect) {
    return new BoundingRect5(rect.x, rect.y, rect.width, rect.height);
  }
  static copy(target, source) {
    target.x = source.x;
    target.y = source.y;
    target.width = source.width;
    target.height = source.height;
  }
  static applyTransform(target, source, m2) {
    if (!m2) {
      if (target !== source) {
        BoundingRect5.copy(target, source);
      }
      return;
    }
    if (m2[1] < 1e-05 && m2[1] > -1e-05 && m2[2] < 1e-05 && m2[2] > -1e-05) {
      const sx = m2[0];
      const sy = m2[3];
      const tx = m2[4];
      const ty = m2[5];
      target.x = source.x * sx + tx;
      target.y = source.y * sy + ty;
      target.width = source.width * sx;
      target.height = source.height * sy;
      if (target.width < 0) {
        target.x += target.width;
        target.width = -target.width;
      }
      if (target.height < 0) {
        target.y += target.height;
        target.height = -target.height;
      }
      return;
    }
    lt.x = lb.x = source.x;
    lt.y = rt.y = source.y;
    rb.x = rt.x = source.x + source.width;
    rb.y = lb.y = source.y + source.height;
    lt.transform(m2);
    rt.transform(m2);
    rb.transform(m2);
    lb.transform(m2);
    target.x = mathMin(lt.x, rb.x, lb.x, rt.x);
    target.y = mathMin(lt.y, rb.y, lb.y, rt.y);
    const maxX = mathMax(lt.x, rb.x, lb.x, rt.x);
    const maxY = mathMax(lt.y, rb.y, lb.y, rt.y);
    target.width = maxX - target.x;
    target.height = maxY - target.y;
  }
}
const BoundingRect_default = BoundingRect5;

// node_modules/zrender/src/contain/text.ts
let textWidthCache = {};
const DEFAULT_FONT = "12px sans-serif";
let _ctx;
let _cachedFont;
function defaultMeasureText(text11, font) {
  if (!_ctx) {
    _ctx = createCanvas().getContext("2d");
  }
  if (_cachedFont !== font) {
    _cachedFont = _ctx.font = font || DEFAULT_FONT;
  }
  return _ctx.measureText(text11);
}
let methods = {
  measureText: defaultMeasureText
};
function getWidth(text11, font) {
  font = font || DEFAULT_FONT;
  let cacheOfFont = textWidthCache[font];
  if (!cacheOfFont) {
    cacheOfFont = textWidthCache[font] = new LRU2(500);
  }
  let width = cacheOfFont.get(text11);
  if (width == null) {
    width = methods.measureText(text11, font).width;
    cacheOfFont.put(text11, width);
  }
  return width;
}
function innerGetBoundingRect(text11, font, textAlign, textBaseline) {
  const width = getWidth(text11, font);
  const height = getLineHeight(font);
  const x = adjustTextX(0, width, textAlign);
  const y = adjustTextY(0, height, textBaseline);
  const rect = new BoundingRect_default(x, y, width, height);
  return rect;
}
function getBoundingRect(text11, font, textAlign, textBaseline) {
  const textLines = ((text11 || "") + "").split("\n");
  const len2 = textLines.length;
  if (len2 === 1) {
    return innerGetBoundingRect(textLines[0], font, textAlign, textBaseline);
  } else {
    const uniondRect = new BoundingRect_default(0, 0, 0, 0);
    for (let i = 0; i < textLines.length; i++) {
      const rect = innerGetBoundingRect(textLines[i], font, textAlign, textBaseline);
      i === 0 ? uniondRect.copy(rect) : uniondRect.union(rect);
    }
    return uniondRect;
  }
}
function adjustTextX(x, width, textAlign) {
  if (textAlign === "right") {
    x -= width;
  } else if (textAlign === "center") {
    x -= width / 2;
  }
  return x;
}
function adjustTextY(y, height, verticalAlign) {
  if (verticalAlign === "middle") {
    y -= height / 2;
  } else if (verticalAlign === "bottom") {
    y -= height;
  }
  return y;
}
function getLineHeight(font) {
  return getWidth("国", font);
}
function parsePercent(value, maxValue) {
  if (typeof value === "string") {
    if (value.lastIndexOf("%") >= 0) {
      return parseFloat(value) / 100 * maxValue;
    }
    return parseFloat(value);
  }
  return value;
}
function calculateTextPosition(out2, opts, rect) {
  const textPosition = opts.position || "inside";
  const distance2 = opts.distance != null ? opts.distance : 5;
  const height = rect.height;
  const width = rect.width;
  const halfHeight = height / 2;
  let x = rect.x;
  let y = rect.y;
  let textAlign = "left";
  let textVerticalAlign = "top";
  if (textPosition instanceof Array) {
    x += parsePercent(textPosition[0], rect.width);
    y += parsePercent(textPosition[1], rect.height);
    textAlign = null;
    textVerticalAlign = null;
  } else {
    switch (textPosition) {
      case "left":
        x -= distance2;
        y += halfHeight;
        textAlign = "right";
        textVerticalAlign = "middle";
        break;
      case "right":
        x += distance2 + width;
        y += halfHeight;
        textVerticalAlign = "middle";
        break;
      case "top":
        x += width / 2;
        y -= distance2;
        textAlign = "center";
        textVerticalAlign = "bottom";
        break;
      case "bottom":
        x += width / 2;
        y += height + distance2;
        textAlign = "center";
        break;
      case "inside":
        x += width / 2;
        y += halfHeight;
        textAlign = "center";
        textVerticalAlign = "middle";
        break;
      case "insideLeft":
        x += distance2;
        y += halfHeight;
        textVerticalAlign = "middle";
        break;
      case "insideRight":
        x += width - distance2;
        y += halfHeight;
        textAlign = "right";
        textVerticalAlign = "middle";
        break;
      case "insideTop":
        x += width / 2;
        y += distance2;
        textAlign = "center";
        break;
      case "insideBottom":
        x += width / 2;
        y += height - distance2;
        textAlign = "center";
        textVerticalAlign = "bottom";
        break;
      case "insideTopLeft":
        x += distance2;
        y += distance2;
        break;
      case "insideTopRight":
        x += width - distance2;
        y += distance2;
        textAlign = "right";
        break;
      case "insideBottomLeft":
        x += distance2;
        y += height - distance2;
        textVerticalAlign = "bottom";
        break;
      case "insideBottomRight":
        x += width - distance2;
        y += height - distance2;
        textAlign = "right";
        textVerticalAlign = "bottom";
        break;
    }
  }
  out2 = out2 || {};
  out2.x = x;
  out2.y = y;
  out2.align = textAlign;
  out2.verticalAlign = textVerticalAlign;
  return out2;
}

// node_modules/zrender/src/config.ts
let dpr = 1;
if (typeof window !== "undefined") {
  dpr = Math.max(window.devicePixelRatio || 1, 1);
}
const devicePixelRatio = dpr;
const DARK_MODE_THRESHOLD = 0.4;
const DARK_LABEL_COLOR = "#333";
const LIGHT_LABEL_COLOR = "#ccc";
const LIGHTER_LABEL_COLOR = "#eee";

// node_modules/zrender/src/Element.ts
const PRESERVED_NORMAL_STATE = "__zr_normal__";
const PRIMARY_STATES_KEYS = ["x", "y", "scaleX", "scaleY", "originX", "originY", "rotation", "ignore"];
const DEFAULT_ANIMATABLE_MAP = {
  x: true,
  y: true,
  scaleX: true,
  scaleY: true,
  originX: true,
  originY: true,
  rotation: true,
  ignore: false
};
let tmpTextPosCalcRes = {};
let tmpBoundingRect = new BoundingRect_default(0, 0, 0, 0);
class Element {
  constructor(props) {
    this.id = guid();
    this.animators = [];
    this.currentStates = [];
    this.states = {};
    this._init(props);
  }
  _init(props) {
    this.attr(props);
  }
  drift(dx, dy, e) {
    switch (this.draggable) {
      case "horizontal":
        dy = 0;
        break;
      case "vertical":
        dx = 0;
        break;
    }
    let m2 = this.transform;
    if (!m2) {
      m2 = this.transform = [1, 0, 0, 1, 0, 0];
    }
    m2[4] += dx;
    m2[5] += dy;
    this.decomposeTransform();
    this.markRedraw();
  }
  beforeUpdate() {
  }
  afterUpdate() {
  }
  update() {
    this.updateTransform();
    this.updateInnerText();
  }
  updateInnerText(forceUpdate) {
    const textEl = this._textContent;
    if (textEl && (!textEl.ignore || forceUpdate)) {
      if (!this.textConfig) {
        this.textConfig = {};
      }
      const textConfig = this.textConfig;
      const isLocal = textConfig.local;
      const attachedTransform = textEl.attachedTransform;
      let textAlign;
      let textVerticalAlign;
      let textStyleChanged = false;
      if (isLocal) {
        attachedTransform.parent = this;
      } else {
        attachedTransform.parent = null;
      }
      let innerOrigin = false;
      attachedTransform.x = textEl.x;
      attachedTransform.y = textEl.y;
      attachedTransform.originX = textEl.originX;
      attachedTransform.originY = textEl.originY;
      attachedTransform.rotation = textEl.rotation;
      attachedTransform.scaleX = textEl.scaleX;
      attachedTransform.scaleY = textEl.scaleY;
      if (textConfig.position != null) {
        let layoutRect = tmpBoundingRect;
        if (textConfig.layoutRect) {
          layoutRect.copy(textConfig.layoutRect);
        } else {
          layoutRect.copy(this.getBoundingRect());
        }
        if (!isLocal) {
          layoutRect.applyTransform(this.transform);
        }
        if (this.calculateTextPosition) {
          this.calculateTextPosition(tmpTextPosCalcRes, textConfig, layoutRect);
        } else {
          calculateTextPosition(tmpTextPosCalcRes, textConfig, layoutRect);
        }
        attachedTransform.x = tmpTextPosCalcRes.x;
        attachedTransform.y = tmpTextPosCalcRes.y;
        textAlign = tmpTextPosCalcRes.align;
        textVerticalAlign = tmpTextPosCalcRes.verticalAlign;
        const textOrigin = textConfig.origin;
        if (textOrigin && textConfig.rotation != null) {
          let relOriginX;
          let relOriginY;
          if (textOrigin === "center") {
            relOriginX = layoutRect.width * 0.5;
            relOriginY = layoutRect.height * 0.5;
          } else {
            relOriginX = parsePercent(textOrigin[0], layoutRect.width);
            relOriginY = parsePercent(textOrigin[1], layoutRect.height);
          }
          innerOrigin = true;
          attachedTransform.originX = -attachedTransform.x + relOriginX + (isLocal ? 0 : layoutRect.x);
          attachedTransform.originY = -attachedTransform.y + relOriginY + (isLocal ? 0 : layoutRect.y);
        }
      }
      if (textConfig.rotation != null) {
        attachedTransform.rotation = textConfig.rotation;
      }
      const textOffset = textConfig.offset;
      if (textOffset) {
        attachedTransform.x += textOffset[0];
        attachedTransform.y += textOffset[1];
        if (!innerOrigin) {
          attachedTransform.originX = -textOffset[0];
          attachedTransform.originY = -textOffset[1];
        }
      }
      const isInside = textConfig.inside == null ? typeof textConfig.position === "string" && textConfig.position.indexOf("inside") >= 0 : textConfig.inside;
      const innerTextDefaultStyle = this._innerTextDefaultStyle || (this._innerTextDefaultStyle = {});
      let textFill;
      let textStroke;
      let autoStroke;
      if (isInside && this.canBeInsideText()) {
        textFill = textConfig.insideFill;
        textStroke = textConfig.insideStroke;
        if (textFill == null || textFill === "auto") {
          textFill = this.getInsideTextFill();
        }
        if (textStroke == null || textStroke === "auto") {
          textStroke = this.getInsideTextStroke(textFill);
          autoStroke = true;
        }
      } else {
        textFill = textConfig.outsideFill;
        textStroke = textConfig.outsideStroke;
        if (textFill == null || textFill === "auto") {
          textFill = this.getOutsideFill();
        }
        if (textStroke == null || textStroke === "auto") {
          textStroke = this.getOutsideStroke(textFill);
          autoStroke = true;
        }
      }
      textFill = textFill || "#000";
      if (textFill !== innerTextDefaultStyle.fill || textStroke !== innerTextDefaultStyle.stroke || autoStroke !== innerTextDefaultStyle.autoStroke || textAlign !== innerTextDefaultStyle.align || textVerticalAlign !== innerTextDefaultStyle.verticalAlign) {
        textStyleChanged = true;
        innerTextDefaultStyle.fill = textFill;
        innerTextDefaultStyle.stroke = textStroke;
        innerTextDefaultStyle.autoStroke = autoStroke;
        innerTextDefaultStyle.align = textAlign;
        innerTextDefaultStyle.verticalAlign = textVerticalAlign;
        textEl.setDefaultTextStyle(innerTextDefaultStyle);
      }
      if (textStyleChanged) {
        textEl.dirtyStyle();
      }
      textEl.markRedraw();
    }
  }
  canBeInsideText() {
    return true;
  }
  getInsideTextFill() {
    return "#fff";
  }
  getInsideTextStroke(textFill) {
    return "#000";
  }
  getOutsideFill() {
    return this.__zr && this.__zr.isDarkMode() ? LIGHT_LABEL_COLOR : DARK_LABEL_COLOR;
  }
  getOutsideStroke(textFill) {
    const backgroundColor = this.__zr && this.__zr.getBackgroundColor();
    let colorArr = typeof backgroundColor === "string" && parse(backgroundColor);
    if (!colorArr) {
      colorArr = [255, 255, 255, 1];
    }
    const alpha = colorArr[3];
    for (let i = 0; i < 3; i++) {
      colorArr[i] = colorArr[i] * alpha + 255 * (1 - alpha);
    }
    colorArr[3] = 1;
    return stringify(colorArr, "rgba");
  }
  traverse(cb, context) {
  }
  attrKV(key, value) {
    if (key === "textConfig") {
      this.setTextConfig(value);
    } else if (key === "textContent") {
      this.setTextContent(value);
    } else if (key === "clipPath") {
      this.setClipPath(value);
    } else if (key === "extra") {
      this.extra = this.extra || {};
      extend(this.extra, value);
    } else {
      this[key] = value;
    }
  }
  hide() {
    this.ignore = true;
    this.markRedraw();
  }
  show() {
    this.ignore = false;
    this.markRedraw();
  }
  attr(keyOrObj, value) {
    if (typeof keyOrObj === "string") {
      this.attrKV(keyOrObj, value);
    } else if (isObject(keyOrObj)) {
      let obj = keyOrObj;
      let keysArr = keys(obj);
      for (let i = 0; i < keysArr.length; i++) {
        let key = keysArr[i];
        this.attrKV(key, keyOrObj[key]);
      }
    }
    this.markRedraw();
    return this;
  }
  saveCurrentToNormalState(toState) {
    this._innerSaveToNormal(toState);
    const normalState = this._normalState;
    for (let i = 0; i < this.animators.length; i++) {
      const animator = this.animators[i];
      const fromStateTransition = animator.__fromStateTransition;
      if (fromStateTransition && fromStateTransition !== PRESERVED_NORMAL_STATE) {
        continue;
      }
      const targetName = animator.targetName;
      const target = targetName ? normalState[targetName] : normalState;
      animator.saveFinalToTarget(target);
    }
  }
  _innerSaveToNormal(toState) {
    let normalState = this._normalState;
    if (!normalState) {
      normalState = this._normalState = {};
    }
    if (toState.textConfig && !normalState.textConfig) {
      normalState.textConfig = this.textConfig;
    }
    this._savePrimaryToNormal(toState, normalState, PRIMARY_STATES_KEYS);
  }
  _savePrimaryToNormal(toState, normalState, primaryKeys) {
    for (let i = 0; i < primaryKeys.length; i++) {
      let key = primaryKeys[i];
      if (toState[key] != null && !(key in normalState)) {
        normalState[key] = this[key];
      }
    }
  }
  hasState() {
    return this.currentStates.length > 0;
  }
  getState(name) {
    return this.states[name];
  }
  ensureState(name) {
    const states36 = this.states;
    if (!states36[name]) {
      states36[name] = {};
    }
    return states36[name];
  }
  clearStates() {
    this.useState(PRESERVED_NORMAL_STATE, false);
  }
  useState(stateName, keepCurrentStates) {
    const toNormalState = stateName === PRESERVED_NORMAL_STATE;
    const hasStates = this.hasState();
    if (!hasStates && toNormalState) {
      return;
    }
    const currentStates = this.currentStates;
    const animationCfg = this.stateTransition;
    if (indexOf(currentStates, stateName) >= 0 && (keepCurrentStates || currentStates.length === 1)) {
      return;
    }
    let state;
    if (this.stateProxy && !toNormalState) {
      state = this.stateProxy(stateName);
    }
    if (!state) {
      state = this.states && this.states[stateName];
    }
    if (!state && !toNormalState) {
      logError(`State ${stateName} not exists.`);
      return;
    }
    if (!toNormalState) {
      this.saveCurrentToNormalState(state);
    }
    const useHoverLayer = !!(state && state.hoverLayer);
    if (useHoverLayer) {
      this._toggleHoverLayerFlag(true);
    }
    this._applyStateObj(stateName, state, this._normalState, keepCurrentStates, !this.__inHover && animationCfg && animationCfg.duration > 0, animationCfg);
    if (this._textContent) {
      this._textContent.useState(stateName, keepCurrentStates);
    }
    if (this._textGuide) {
      this._textGuide.useState(stateName, keepCurrentStates);
    }
    if (toNormalState) {
      this.currentStates = [];
      this._normalState = {};
    } else {
      if (!keepCurrentStates) {
        this.currentStates = [stateName];
      } else {
        this.currentStates.push(stateName);
      }
    }
    this._updateAnimationTargets();
    this.markRedraw();
    if (!useHoverLayer && this.__inHover) {
      this._toggleHoverLayerFlag(false);
      this.__dirty &= ~Element.REDARAW_BIT;
    }
    return state;
  }
  useStates(states36) {
    if (!states36.length) {
      this.clearStates();
    } else {
      const stateObjects = [];
      const currentStates = this.currentStates;
      const len2 = states36.length;
      let notChange = len2 === currentStates.length;
      if (notChange) {
        for (let i = 0; i < len2; i++) {
          if (states36[i] !== currentStates[i]) {
            notChange = false;
            break;
          }
        }
      }
      if (notChange) {
        return;
      }
      for (let i = 0; i < len2; i++) {
        const stateName = states36[i];
        let stateObj;
        if (this.stateProxy) {
          stateObj = this.stateProxy(stateName, states36);
        }
        if (!stateObj) {
          stateObj = this.states[stateName];
        }
        if (stateObj) {
          stateObjects.push(stateObj);
        }
      }
      const useHoverLayer = !!(stateObjects[len2 - 1] && stateObjects[len2 - 1].hoverLayer);
      if (useHoverLayer) {
        this._toggleHoverLayerFlag(true);
      }
      const mergedState = this._mergeStates(stateObjects);
      const animationCfg = this.stateTransition;
      this.saveCurrentToNormalState(mergedState);
      this._applyStateObj(states36.join(","), mergedState, this._normalState, false, !this.__inHover && animationCfg && animationCfg.duration > 0, animationCfg);
      if (this._textContent) {
        this._textContent.useStates(states36);
      }
      if (this._textGuide) {
        this._textGuide.useStates(states36);
      }
      this._updateAnimationTargets();
      this.currentStates = states36.slice();
      this.markRedraw();
      if (!useHoverLayer) {
        this._toggleHoverLayerFlag(false);
        this.__dirty &= ~Element.REDARAW_BIT;
      }
    }
  }
  _updateAnimationTargets() {
    for (let i = 0; i < this.animators.length; i++) {
      const animator = this.animators[i];
      if (animator.targetName) {
        animator.changeTarget(this[animator.targetName]);
      }
    }
  }
  removeState(state) {
    const idx = indexOf(this.currentStates, state);
    if (idx >= 0) {
      const currentStates = this.currentStates.slice();
      currentStates.splice(idx, 1);
      this.useStates(currentStates);
    }
  }
  replaceState(oldState, newState, forceAdd) {
    const currentStates = this.currentStates.slice();
    const idx = indexOf(currentStates, oldState);
    const newStateExists = indexOf(currentStates, newState) >= 0;
    if (idx >= 0) {
      if (!newStateExists) {
        currentStates[idx] = newState;
      } else {
        currentStates.splice(idx, 1);
      }
    } else if (forceAdd && !newStateExists) {
      currentStates.push(newState);
    }
    this.useStates(currentStates);
  }
  toggleState(state, enable) {
    if (enable) {
      this.useState(state, true);
    } else {
      this.removeState(state);
    }
  }
  _mergeStates(states36) {
    const mergedState = {};
    let mergedTextConfig;
    for (let i = 0; i < states36.length; i++) {
      const state = states36[i];
      extend(mergedState, state);
      if (state.textConfig) {
        mergedTextConfig = mergedTextConfig || {};
        extend(mergedTextConfig, state.textConfig);
      }
    }
    if (mergedTextConfig) {
      mergedState.textConfig = mergedTextConfig;
    }
    return mergedState;
  }
  _applyStateObj(stateName, state, normalState, keepCurrentStates, transition, animationCfg) {
    const needsRestoreToNormal = !(state && keepCurrentStates);
    if (state && state.textConfig) {
      this.textConfig = extend({}, keepCurrentStates ? this.textConfig : normalState.textConfig);
      extend(this.textConfig, state.textConfig);
    } else if (needsRestoreToNormal) {
      if (normalState.textConfig) {
        this.textConfig = normalState.textConfig;
      }
    }
    const transitionTarget = {};
    let hasTransition = false;
    for (let i = 0; i < PRIMARY_STATES_KEYS.length; i++) {
      const key = PRIMARY_STATES_KEYS[i];
      const propNeedsTransition = transition && DEFAULT_ANIMATABLE_MAP[key];
      if (state && state[key] != null) {
        if (propNeedsTransition) {
          hasTransition = true;
          transitionTarget[key] = state[key];
        } else {
          this[key] = state[key];
        }
      } else if (needsRestoreToNormal) {
        if (normalState[key] != null) {
          if (propNeedsTransition) {
            hasTransition = true;
            transitionTarget[key] = normalState[key];
          } else {
            this[key] = normalState[key];
          }
        }
      }
    }
    if (!transition) {
      for (let i = 0; i < this.animators.length; i++) {
        const animator = this.animators[i];
        const targetName = animator.targetName;
        animator.__changeFinalValue(targetName ? (state || normalState)[targetName] : state || normalState);
      }
    }
    if (hasTransition) {
      this._transitionState(stateName, transitionTarget, animationCfg);
    }
  }
  _attachComponent(componentEl) {
    if (componentEl.__zr && !componentEl.__hostTarget) {
      throw new Error("Text element has been added to zrender.");
    }
    if (componentEl === this) {
      throw new Error("Recursive component attachment.");
    }
    const zr = this.__zr;
    if (zr) {
      componentEl.addSelfToZr(zr);
    }
    componentEl.__zr = zr;
    componentEl.__hostTarget = this;
  }
  _detachComponent(componentEl) {
    if (componentEl.__zr) {
      componentEl.removeSelfFromZr(componentEl.__zr);
    }
    componentEl.__zr = null;
    componentEl.__hostTarget = null;
  }
  getClipPath() {
    return this._clipPath;
  }
  setClipPath(clipPath) {
    if (this._clipPath && this._clipPath !== clipPath) {
      this.removeClipPath();
    }
    this._attachComponent(clipPath);
    this._clipPath = clipPath;
    this.markRedraw();
  }
  removeClipPath() {
    const clipPath = this._clipPath;
    if (clipPath) {
      this._detachComponent(clipPath);
      this._clipPath = null;
      this.markRedraw();
    }
  }
  getTextContent() {
    return this._textContent;
  }
  setTextContent(textEl) {
    const previousTextContent = this._textContent;
    if (previousTextContent === textEl) {
      return;
    }
    if (previousTextContent && previousTextContent !== textEl) {
      this.removeTextContent();
    }
    if (textEl.__zr && !textEl.__hostTarget) {
      throw new Error("Text element has been added to zrender.");
    }
    textEl.attachedTransform = new Transformable_default();
    this._attachComponent(textEl);
    this._textContent = textEl;
    this.markRedraw();
  }
  setTextConfig(cfg) {
    if (!this.textConfig) {
      this.textConfig = {};
    }
    extend(this.textConfig, cfg);
    this.markRedraw();
  }
  removeTextContent() {
    const textEl = this._textContent;
    if (textEl) {
      textEl.attachedTransform = null;
      this._detachComponent(textEl);
      this._textContent = null;
      this._innerTextDefaultStyle = null;
      this.markRedraw();
    }
  }
  getTextGuideLine() {
    return this._textGuide;
  }
  setTextGuideLine(guideLine) {
    if (this._textGuide && this._textGuide !== guideLine) {
      this.removeTextGuideLine();
    }
    this._attachComponent(guideLine);
    this._textGuide = guideLine;
    this.markRedraw();
  }
  removeTextGuideLine() {
    const textGuide = this._textGuide;
    if (textGuide) {
      this._detachComponent(textGuide);
      this._textGuide = null;
      this.markRedraw();
    }
  }
  markRedraw() {
    this.__dirty |= Element.REDARAW_BIT;
    const zr = this.__zr;
    if (zr) {
      if (this.__inHover) {
        zr.refreshHover();
      } else {
        zr.refresh();
      }
    }
    if (this.__hostTarget) {
      this.__hostTarget.markRedraw();
    }
  }
  dirty() {
    this.markRedraw();
  }
  _toggleHoverLayerFlag(inHover) {
    this.__inHover = inHover;
    const textContent = this._textContent;
    const textGuide = this._textGuide;
    if (textContent) {
      textContent.__inHover = inHover;
    }
    if (textGuide) {
      textGuide.__inHover = inHover;
    }
  }
  addSelfToZr(zr) {
    this.__zr = zr;
    const animators = this.animators;
    if (animators) {
      for (let i = 0; i < animators.length; i++) {
        zr.animation.addAnimator(animators[i]);
      }
    }
    if (this._clipPath) {
      this._clipPath.addSelfToZr(zr);
    }
    if (this._textContent) {
      this._textContent.addSelfToZr(zr);
    }
    if (this._textGuide) {
      this._textGuide.addSelfToZr(zr);
    }
  }
  removeSelfFromZr(zr) {
    this.__zr = null;
    const animators = this.animators;
    if (animators) {
      for (let i = 0; i < animators.length; i++) {
        zr.animation.removeAnimator(animators[i]);
      }
    }
    if (this._clipPath) {
      this._clipPath.removeSelfFromZr(zr);
    }
    if (this._textContent) {
      this._textContent.removeSelfFromZr(zr);
    }
    if (this._textGuide) {
      this._textGuide.removeSelfFromZr(zr);
    }
  }
  animate(key, loop) {
    let target = key ? this[key] : this;
    if (!target) {
      logError('Property "' + key + '" is not existed in element ' + this.id);
      return;
    }
    const animator = new Animator2(target, loop);
    this.addAnimator(animator, key);
    return animator;
  }
  addAnimator(animator, key) {
    const zr = this.__zr;
    const el = this;
    animator.during(function() {
      el.updateDuringAnimation(key);
    }).done(function() {
      const animators = el.animators;
      const idx = indexOf(animators, animator);
      if (idx >= 0) {
        animators.splice(idx, 1);
      }
    });
    this.animators.push(animator);
    if (zr) {
      zr.animation.addAnimator(animator);
    }
  }
  updateDuringAnimation(key) {
    this.markRedraw();
  }
  stopAnimation(scope, forwardToLast) {
    const animators = this.animators;
    const len2 = animators.length;
    const leftAnimators = [];
    for (let i = 0; i < len2; i++) {
      const animator = animators[i];
      if (!scope || scope === animator.scope) {
        animator.stop(forwardToLast);
      } else {
        leftAnimators.push(animator);
      }
    }
    this.animators = leftAnimators;
    return this;
  }
  animateTo(target, cfg, animationProps) {
    animateTo(this, target, cfg, animationProps);
  }
  animateFrom(target, cfg, animationProps) {
    animateTo(this, target, cfg, animationProps, true);
  }
  _transitionState(stateName, target, cfg, animationProps) {
    const animators = animateTo(this, target, cfg, animationProps);
    for (let i = 0; i < animators.length; i++) {
      animators[i].__fromStateTransition = stateName;
    }
  }
  getBoundingRect() {
    return null;
  }
}
Element.REDARAW_BIT = 1;
Element.initDefaultProps = function() {
  const elProto = Element.prototype;
  elProto.type = "element";
  elProto.name = "";
  elProto.ignore = false;
  elProto.silent = false;
  elProto.isGroup = false;
  elProto.draggable = false;
  elProto.dragging = false;
  elProto.__inHover = false;
  elProto.__dirty = Element.REDARAW_BIT;
  const logs = {};
  function logDeprecatedError(key, xKey, yKey) {
    if (!logs[key + xKey + yKey]) {
      console.warn(`DEPRECATED: '${key}' has been deprecated. use '${xKey}', '${yKey}' instead`);
      logs[key + xKey + yKey] = true;
    }
  }
  function createLegacyProperty(key, privateKey, xKey, yKey) {
    Object.defineProperty(elProto, key, {
      get() {
        logDeprecatedError(key, xKey, yKey);
        if (!this[privateKey]) {
          const pos = this[privateKey] = [];
          enhanceArray(this, pos);
        }
        return this[privateKey];
      },
      set(pos) {
        logDeprecatedError(key, xKey, yKey);
        this[xKey] = pos[0];
        this[yKey] = pos[1];
        this[privateKey] = pos;
        enhanceArray(this, pos);
      }
    });
    function enhanceArray(self2, pos) {
      Object.defineProperty(pos, 0, {
        get() {
          return self2[xKey];
        },
        set(val) {
          self2[xKey] = val;
        }
      });
      Object.defineProperty(pos, 1, {
        get() {
          return self2[yKey];
        },
        set(val) {
          self2[yKey] = val;
        }
      });
    }
  }
  if (Object.defineProperty) {
    createLegacyProperty("position", "_legacyPos", "x", "y");
    createLegacyProperty("scale", "_legacyScale", "scaleX", "scaleY");
    createLegacyProperty("origin", "_legacyOrigin", "originX", "originY");
  }
}();
mixin(Element, Eventful2);
mixin(Element, Transformable_default);
function animateTo(animatable, target, cfg, animationProps, reverse) {
  cfg = cfg || {};
  const animators = [];
  animateToShallow(animatable, "", animatable, target, cfg, animationProps, animators, reverse);
  let count2 = animators.length;
  function done() {
    count2--;
    if (!count2) {
      cfg.done && cfg.done();
    }
  }
  if (!count2) {
    cfg.done && cfg.done();
  }
  if (animators.length > 0 && typeof cfg.during === "function") {
    animators[0].during((target2, percent) => {
      cfg.during(percent);
    });
  }
  for (let i = 0; i < animators.length; i++) {
    animators[i].done(done).start(cfg.easing, cfg.force);
  }
  return animators;
}
function copyArrShallow(source, target, len2) {
  for (let i = 0; i < len2; i++) {
    source[i] = target[i];
  }
}
function is2DArray(value) {
  return isArrayLike(value[0]);
}
function copyValue(target, source, key) {
  if (isArrayLike(source[key])) {
    if (!isArrayLike(target[key])) {
      target[key] = [];
    }
    const sourceArr = source[key];
    const targetArr = target[key];
    const len0 = sourceArr.length;
    if (is2DArray(sourceArr)) {
      const len1 = sourceArr[0].length;
      for (let i = 0; i < len0; i++) {
        if (!targetArr[i]) {
          targetArr[i] = Array.prototype.slice.call(sourceArr[i]);
        } else {
          copyArrShallow(targetArr[i], sourceArr[i], len1);
        }
      }
    } else {
      copyArrShallow(targetArr, sourceArr, len0);
    }
    targetArr.length = sourceArr.length;
  } else {
    target[key] = source[key];
  }
}
function animateToShallow(animatable, topKey, source, target, cfg, animationProps, animators, reverse) {
  const animatableKeys = [];
  const changedKeys = [];
  const targetKeys = keys(target);
  const duration = cfg.duration;
  const delay = cfg.delay;
  const additive = cfg.additive;
  const setToFinal = cfg.setToFinal;
  const animateAll = !isObject(animationProps);
  for (let k = 0; k < targetKeys.length; k++) {
    const innerKey = targetKeys[k];
    if (source[innerKey] != null && target[innerKey] != null && (animateAll || animationProps[innerKey])) {
      if (isObject(target[innerKey]) && !isArrayLike(target[innerKey])) {
        if (topKey) {
          if (!reverse) {
            source[innerKey] = target[innerKey];
            animatable.updateDuringAnimation(topKey);
          }
          continue;
        }
        animateToShallow(animatable, innerKey, source[innerKey], target[innerKey], cfg, animationProps && animationProps[innerKey], animators, reverse);
      } else {
        animatableKeys.push(innerKey);
        changedKeys.push(innerKey);
      }
    } else if (!reverse) {
      source[innerKey] = target[innerKey];
      animatable.updateDuringAnimation(topKey);
      changedKeys.push(innerKey);
    }
  }
  const keyLen = animatableKeys.length;
  if (keyLen > 0 || cfg.force) {
    const existsAnimators = animatable.animators;
    let lastAnimator;
    for (let i = 0; i < existsAnimators.length; i++) {
      if (existsAnimators[i].targetName === topKey) {
        lastAnimator = existsAnimators[i];
      }
    }
    if (!additive && lastAnimator) {
      const allAborted = lastAnimator.stopTracks(changedKeys);
      if (allAborted) {
        const idx = indexOf(existsAnimators, lastAnimator);
        existsAnimators.splice(idx, 1);
      }
    }
    let revertedSource;
    let reversedTarget;
    let sourceClone;
    if (reverse) {
      reversedTarget = {};
      if (setToFinal) {
        revertedSource = {};
      }
      for (let i = 0; i < keyLen; i++) {
        const innerKey = animatableKeys[i];
        reversedTarget[innerKey] = source[innerKey];
        if (setToFinal) {
          revertedSource[innerKey] = target[innerKey];
        } else {
          source[innerKey] = target[innerKey];
        }
      }
    } else if (setToFinal) {
      sourceClone = {};
      for (let i = 0; i < keyLen; i++) {
        const innerKey = animatableKeys[i];
        sourceClone[innerKey] = cloneValue(source[innerKey]);
        copyValue(source, target, innerKey);
      }
    }
    const animator = new Animator2(source, false, additive ? lastAnimator : null);
    animator.targetName = topKey;
    if (cfg.scope) {
      animator.scope = cfg.scope;
    }
    if (setToFinal && revertedSource) {
      animator.whenWithKeys(0, revertedSource, animatableKeys);
    }
    if (sourceClone) {
      animator.whenWithKeys(0, sourceClone, animatableKeys);
    }
    animator.whenWithKeys(duration == null ? 500 : duration, reverse ? reversedTarget : target, animatableKeys).delay(delay || 0);
    animatable.addAnimator(animator, topKey);
    animators.push(animator);
  }
}
const Element_default = Element;

// node_modules/zrender/src/graphic/Displayable.ts
const STYLE_MAGIC_KEY = "__zr_style_" + Math.round(Math.random() * 10);
const DEFAULT_COMMON_STYLE = {
  shadowBlur: 0,
  shadowOffsetX: 0,
  shadowOffsetY: 0,
  shadowColor: "#000",
  opacity: 1,
  blend: "source-over"
};
const DEFAULT_COMMON_ANIMATION_PROPS = {
  style: {
    shadowBlur: true,
    shadowOffsetX: true,
    shadowOffsetY: true,
    shadowColor: true,
    opacity: true
  }
};
DEFAULT_COMMON_STYLE[STYLE_MAGIC_KEY] = true;
const PRIMARY_STATES_KEYS2 = ["z", "z2", "invisible"];
class Displayable11 extends Element_default {
  constructor(props) {
    super(props);
  }
  _init(props) {
    const keysArr = keys(props);
    for (let i = 0; i < keysArr.length; i++) {
      const key = keysArr[i];
      if (key === "style") {
        this.useStyle(props[key]);
      } else {
        super.attrKV(key, props[key]);
      }
    }
    if (!this.style) {
      this.useStyle({});
    }
  }
  beforeBrush() {
  }
  afterBrush() {
  }
  innerBeforeBrush() {
  }
  innerAfterBrush() {
  }
  contain(x, y) {
    return this.rectContain(x, y);
  }
  traverse(cb, context) {
    cb.call(context, this);
  }
  rectContain(x, y) {
    const coord = this.transformCoordToLocal(x, y);
    const rect = this.getBoundingRect();
    return rect.contain(coord[0], coord[1]);
  }
  animateStyle(loop) {
    return this.animate("style", loop);
  }
  updateDuringAnimation(targetKey) {
    if (targetKey === "style") {
      this.dirtyStyle();
    } else {
      this.markRedraw();
    }
  }
  attrKV(key, value) {
    if (key !== "style") {
      super.attrKV(key, value);
    } else {
      if (!this.style) {
        this.useStyle(value);
      } else {
        this.setStyle(value);
      }
    }
  }
  setStyle(keyOrObj, value) {
    if (typeof keyOrObj === "string") {
      this.style[keyOrObj] = value;
    } else {
      extend(this.style, keyOrObj);
    }
    this.dirtyStyle();
    return this;
  }
  dirtyStyle() {
    this.markRedraw();
    this.__dirty |= Displayable11.STYLE_CHANGED_BIT;
    if (this._rect) {
      this._rect = null;
    }
  }
  dirty() {
    this.dirtyStyle();
  }
  styleChanged() {
    return !!(this.__dirty & Displayable11.STYLE_CHANGED_BIT);
  }
  styleUpdated() {
    this.__dirty &= ~Displayable11.STYLE_CHANGED_BIT;
  }
  createStyle(obj) {
    return createObject(DEFAULT_COMMON_STYLE, obj);
  }
  useStyle(obj) {
    if (!obj[STYLE_MAGIC_KEY]) {
      obj = this.createStyle(obj);
    }
    if (this.__inHover) {
      this.__hoverStyle = obj;
    } else {
      this.style = obj;
    }
    this.dirtyStyle();
  }
  isStyleObject(obj) {
    return obj[STYLE_MAGIC_KEY];
  }
  _innerSaveToNormal(toState) {
    super._innerSaveToNormal(toState);
    const normalState = this._normalState;
    if (toState.style && !normalState.style) {
      normalState.style = this._mergeStyle(this.createStyle(), this.style);
    }
    this._savePrimaryToNormal(toState, normalState, PRIMARY_STATES_KEYS2);
  }
  _applyStateObj(stateName, state, normalState, keepCurrentStates, transition, animationCfg) {
    super._applyStateObj(stateName, state, normalState, keepCurrentStates, transition, animationCfg);
    const needsRestoreToNormal = !(state && keepCurrentStates);
    let targetStyle;
    if (state && state.style) {
      if (transition) {
        if (keepCurrentStates) {
          targetStyle = state.style;
        } else {
          targetStyle = this._mergeStyle(this.createStyle(), normalState.style);
          this._mergeStyle(targetStyle, state.style);
        }
      } else {
        targetStyle = this._mergeStyle(this.createStyle(), keepCurrentStates ? this.style : normalState.style);
        this._mergeStyle(targetStyle, state.style);
      }
    } else if (needsRestoreToNormal) {
      targetStyle = normalState.style;
    }
    if (targetStyle) {
      if (transition) {
        const sourceStyle = this.style;
        this.style = this.createStyle(needsRestoreToNormal ? {} : sourceStyle);
        if (needsRestoreToNormal) {
          const changedKeys = keys(sourceStyle);
          for (let i = 0; i < changedKeys.length; i++) {
            const key = changedKeys[i];
            if (key in targetStyle) {
              targetStyle[key] = targetStyle[key];
              this.style[key] = sourceStyle[key];
            }
          }
        }
        const targetKeys = keys(targetStyle);
        for (let i = 0; i < targetKeys.length; i++) {
          const key = targetKeys[i];
          this.style[key] = this.style[key];
        }
        this._transitionState(stateName, {
          style: targetStyle
        }, animationCfg, this._getAnimationStyleProps());
      } else {
        this.useStyle(targetStyle);
      }
    }
    for (let i = 0; i < PRIMARY_STATES_KEYS2.length; i++) {
      let key = PRIMARY_STATES_KEYS2[i];
      if (state && state[key] != null) {
        this[key] = state[key];
      } else if (needsRestoreToNormal) {
        if (normalState[key] != null) {
          this[key] = normalState[key];
        }
      }
    }
  }
  _mergeStates(states36) {
    const mergedState = super._mergeStates(states36);
    let mergedStyle;
    for (let i = 0; i < states36.length; i++) {
      const state = states36[i];
      if (state.style) {
        mergedStyle = mergedStyle || {};
        this._mergeStyle(mergedStyle, state.style);
      }
    }
    if (mergedStyle) {
      mergedState.style = mergedStyle;
    }
    return mergedState;
  }
  _mergeStyle(targetStyle, sourceStyle) {
    extend(targetStyle, sourceStyle);
    return targetStyle;
  }
  _getAnimationStyleProps() {
    return DEFAULT_COMMON_ANIMATION_PROPS;
  }
}
Displayable11.STYLE_CHANGED_BIT = 2;
Displayable11.initDefaultProps = function() {
  const dispProto = Displayable11.prototype;
  dispProto.type = "displayable";
  dispProto.invisible = false;
  dispProto.z = 0;
  dispProto.z2 = 0;
  dispProto.zlevel = 0;
  dispProto.culling = false;
  dispProto.cursor = "pointer";
  dispProto.rectHover = false;
  dispProto.incremental = false;
  dispProto._rect = null;
  dispProto.__dirty = Element_default.REDARAW_BIT | Displayable11.STYLE_CHANGED_BIT;
}();
const Displayable_default = Displayable11;

// node_modules/zrender/src/core/curve.ts
const mathPow = Math.pow;
const mathSqrt2 = Math.sqrt;
const EPSILON4 = 1e-08;
const EPSILON_NUMERIC = 0.0001;
const THREE_SQRT = mathSqrt2(3);
const ONE_THIRD = 1 / 3;
const _v0 = create2();
const _v1 = create2();
const _v2 = create2();
function isAroundZero(val) {
  return val > -EPSILON4 && val < EPSILON4;
}
function isNotAroundZero2(val) {
  return val > EPSILON4 || val < -EPSILON4;
}
function cubicAt(p0, p1, p2, p3, t) {
  const onet = 1 - t;
  return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
}
function cubicDerivativeAt(p0, p1, p2, p3, t) {
  const onet = 1 - t;
  return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
}
function cubicRootAt(p0, p1, p2, p3, val, roots2) {
  const a = p3 + 3 * (p1 - p2) - p0;
  const b = 3 * (p2 - p1 * 2 + p0);
  const c = 3 * (p1 - p0);
  const d = p0 - val;
  const A = b * b - 3 * a * c;
  const B = b * c - 9 * a * d;
  const C = c * c - 3 * b * d;
  let n = 0;
  if (isAroundZero(A) && isAroundZero(B)) {
    if (isAroundZero(b)) {
      roots2[0] = 0;
    } else {
      const t1 = -c / b;
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
    }
  } else {
    const disc = B * B - 4 * A * C;
    if (isAroundZero(disc)) {
      const K = B / A;
      const t1 = -b / a + K;
      const t2 = -K / 2;
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
      if (t2 >= 0 && t2 <= 1) {
        roots2[n++] = t2;
      }
    } else if (disc > 0) {
      const discSqrt = mathSqrt2(disc);
      let Y1 = A * b + 1.5 * a * (-B + discSqrt);
      let Y2 = A * b + 1.5 * a * (-B - discSqrt);
      if (Y1 < 0) {
        Y1 = -mathPow(-Y1, ONE_THIRD);
      } else {
        Y1 = mathPow(Y1, ONE_THIRD);
      }
      if (Y2 < 0) {
        Y2 = -mathPow(-Y2, ONE_THIRD);
      } else {
        Y2 = mathPow(Y2, ONE_THIRD);
      }
      const t1 = (-b - (Y1 + Y2)) / (3 * a);
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
    } else {
      const T = (2 * A * b - 3 * a * B) / (2 * mathSqrt2(A * A * A));
      const theta = Math.acos(T) / 3;
      const ASqrt = mathSqrt2(A);
      const tmp = Math.cos(theta);
      const t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
      const t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
      const t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
      if (t2 >= 0 && t2 <= 1) {
        roots2[n++] = t2;
      }
      if (t3 >= 0 && t3 <= 1) {
        roots2[n++] = t3;
      }
    }
  }
  return n;
}
function cubicExtrema(p0, p1, p2, p3, extrema2) {
  const b = 6 * p2 - 12 * p1 + 6 * p0;
  const a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
  const c = 3 * p1 - 3 * p0;
  let n = 0;
  if (isAroundZero(a)) {
    if (isNotAroundZero2(b)) {
      const t1 = -c / b;
      if (t1 >= 0 && t1 <= 1) {
        extrema2[n++] = t1;
      }
    }
  } else {
    const disc = b * b - 4 * a * c;
    if (isAroundZero(disc)) {
      extrema2[0] = -b / (2 * a);
    } else if (disc > 0) {
      const discSqrt = mathSqrt2(disc);
      const t1 = (-b + discSqrt) / (2 * a);
      const t2 = (-b - discSqrt) / (2 * a);
      if (t1 >= 0 && t1 <= 1) {
        extrema2[n++] = t1;
      }
      if (t2 >= 0 && t2 <= 1) {
        extrema2[n++] = t2;
      }
    }
  }
  return n;
}
function cubicSubdivide(p0, p1, p2, p3, t, out2) {
  const p01 = (p1 - p0) * t + p0;
  const p12 = (p2 - p1) * t + p1;
  const p23 = (p3 - p2) * t + p2;
  const p012 = (p12 - p01) * t + p01;
  const p123 = (p23 - p12) * t + p12;
  const p0123 = (p123 - p012) * t + p012;
  out2[0] = p0;
  out2[1] = p01;
  out2[2] = p012;
  out2[3] = p0123;
  out2[4] = p0123;
  out2[5] = p123;
  out2[6] = p23;
  out2[7] = p3;
}
function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out2) {
  let t;
  let interval = 0.005;
  let d = Infinity;
  let prev;
  let next;
  let d1;
  let d2;
  _v0[0] = x;
  _v0[1] = y;
  for (let _t = 0; _t < 1; _t += 0.05) {
    _v1[0] = cubicAt(x0, x1, x2, x3, _t);
    _v1[1] = cubicAt(y0, y1, y2, y3, _t);
    d1 = distSquare(_v0, _v1);
    if (d1 < d) {
      t = _t;
      d = d1;
    }
  }
  d = Infinity;
  for (let i = 0; i < 32; i++) {
    if (interval < EPSILON_NUMERIC) {
      break;
    }
    prev = t - interval;
    next = t + interval;
    _v1[0] = cubicAt(x0, x1, x2, x3, prev);
    _v1[1] = cubicAt(y0, y1, y2, y3, prev);
    d1 = distSquare(_v1, _v0);
    if (prev >= 0 && d1 < d) {
      t = prev;
      d = d1;
    } else {
      _v2[0] = cubicAt(x0, x1, x2, x3, next);
      _v2[1] = cubicAt(y0, y1, y2, y3, next);
      d2 = distSquare(_v2, _v0);
      if (next <= 1 && d2 < d) {
        t = next;
        d = d2;
      } else {
        interval *= 0.5;
      }
    }
  }
  if (out2) {
    out2[0] = cubicAt(x0, x1, x2, x3, t);
    out2[1] = cubicAt(y0, y1, y2, y3, t);
  }
  return mathSqrt2(d);
}
function cubicLength(x0, y0, x1, y1, x2, y2, x3, y3, iteration) {
  let px = x0;
  let py = y0;
  let d = 0;
  const step2 = 1 / iteration;
  for (let i = 1; i <= iteration; i++) {
    let t = i * step2;
    const x = cubicAt(x0, x1, x2, x3, t);
    const y = cubicAt(y0, y1, y2, y3, t);
    const dx = x - px;
    const dy = y - py;
    d += Math.sqrt(dx * dx + dy * dy);
    px = x;
    py = y;
  }
  return d;
}
function quadraticAt(p0, p1, p2, t) {
  const onet = 1 - t;
  return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
}
function quadraticDerivativeAt(p0, p1, p2, t) {
  return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
}
function quadraticRootAt(p0, p1, p2, val, roots2) {
  const a = p0 - 2 * p1 + p2;
  const b = 2 * (p1 - p0);
  const c = p0 - val;
  let n = 0;
  if (isAroundZero(a)) {
    if (isNotAroundZero2(b)) {
      const t1 = -c / b;
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
    }
  } else {
    const disc = b * b - 4 * a * c;
    if (isAroundZero(disc)) {
      const t1 = -b / (2 * a);
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
    } else if (disc > 0) {
      const discSqrt = mathSqrt2(disc);
      const t1 = (-b + discSqrt) / (2 * a);
      const t2 = (-b - discSqrt) / (2 * a);
      if (t1 >= 0 && t1 <= 1) {
        roots2[n++] = t1;
      }
      if (t2 >= 0 && t2 <= 1) {
        roots2[n++] = t2;
      }
    }
  }
  return n;
}
function quadraticExtremum(p0, p1, p2) {
  const divider = p0 + p2 - 2 * p1;
  if (divider === 0) {
    return 0.5;
  } else {
    return (p0 - p1) / divider;
  }
}
function quadraticSubdivide(p0, p1, p2, t, out2) {
  const p01 = (p1 - p0) * t + p0;
  const p12 = (p2 - p1) * t + p1;
  const p012 = (p12 - p01) * t + p01;
  out2[0] = p0;
  out2[1] = p01;
  out2[2] = p012;
  out2[3] = p012;
  out2[4] = p12;
  out2[5] = p2;
}
function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out2) {
  let t;
  let interval = 0.005;
  let d = Infinity;
  _v0[0] = x;
  _v0[1] = y;
  for (let _t = 0; _t < 1; _t += 0.05) {
    _v1[0] = quadraticAt(x0, x1, x2, _t);
    _v1[1] = quadraticAt(y0, y1, y2, _t);
    const d1 = distSquare(_v0, _v1);
    if (d1 < d) {
      t = _t;
      d = d1;
    }
  }
  d = Infinity;
  for (let i = 0; i < 32; i++) {
    if (interval < EPSILON_NUMERIC) {
      break;
    }
    const prev = t - interval;
    const next = t + interval;
    _v1[0] = quadraticAt(x0, x1, x2, prev);
    _v1[1] = quadraticAt(y0, y1, y2, prev);
    const d1 = distSquare(_v1, _v0);
    if (prev >= 0 && d1 < d) {
      t = prev;
      d = d1;
    } else {
      _v2[0] = quadraticAt(x0, x1, x2, next);
      _v2[1] = quadraticAt(y0, y1, y2, next);
      const d2 = distSquare(_v2, _v0);
      if (next <= 1 && d2 < d) {
        t = next;
        d = d2;
      } else {
        interval *= 0.5;
      }
    }
  }
  if (out2) {
    out2[0] = quadraticAt(x0, x1, x2, t);
    out2[1] = quadraticAt(y0, y1, y2, t);
  }
  return mathSqrt2(d);
}
function quadraticLength(x0, y0, x1, y1, x2, y2, iteration) {
  let px = x0;
  let py = y0;
  let d = 0;
  const step2 = 1 / iteration;
  for (let i = 1; i <= iteration; i++) {
    let t = i * step2;
    const x = quadraticAt(x0, x1, x2, t);
    const y = quadraticAt(y0, y1, y2, t);
    const dx = x - px;
    const dy = y - py;
    d += Math.sqrt(dx * dx + dy * dy);
    px = x;
    py = y;
  }
  return d;
}

// node_modules/zrender/src/core/bbox.ts
const mathMin3 = Math.min;
const mathMax3 = Math.max;
const mathSin2 = Math.sin;
const mathCos2 = Math.cos;
const PI25 = Math.PI * 2;
const start = create2();
const end = create2();
const extremity = create2();
function fromPoints(points9, min4, max4) {
  if (points9.length === 0) {
    return;
  }
  let p = points9[0];
  let left = p[0];
  let right = p[0];
  let top = p[1];
  let bottom = p[1];
  for (let i = 1; i < points9.length; i++) {
    p = points9[i];
    left = mathMin3(left, p[0]);
    right = mathMax3(right, p[0]);
    top = mathMin3(top, p[1]);
    bottom = mathMax3(bottom, p[1]);
  }
  min4[0] = left;
  min4[1] = top;
  max4[0] = right;
  max4[1] = bottom;
}
function fromLine(x0, y0, x1, y1, min4, max4) {
  min4[0] = mathMin3(x0, x1);
  min4[1] = mathMin3(y0, y1);
  max4[0] = mathMax3(x0, x1);
  max4[1] = mathMax3(y0, y1);
}
const xDim = [];
const yDim = [];
function fromCubic(x0, y0, x1, y1, x2, y2, x3, y3, min4, max4) {
  const cubicExtrema2 = cubicExtrema;
  const cubicAt2 = cubicAt;
  let n = cubicExtrema2(x0, x1, x2, x3, xDim);
  min4[0] = Infinity;
  min4[1] = Infinity;
  max4[0] = -Infinity;
  max4[1] = -Infinity;
  for (let i = 0; i < n; i++) {
    const x = cubicAt2(x0, x1, x2, x3, xDim[i]);
    min4[0] = mathMin3(x, min4[0]);
    max4[0] = mathMax3(x, max4[0]);
  }
  n = cubicExtrema2(y0, y1, y2, y3, yDim);
  for (let i = 0; i < n; i++) {
    const y = cubicAt2(y0, y1, y2, y3, yDim[i]);
    min4[1] = mathMin3(y, min4[1]);
    max4[1] = mathMax3(y, max4[1]);
  }
  min4[0] = mathMin3(x0, min4[0]);
  max4[0] = mathMax3(x0, max4[0]);
  min4[0] = mathMin3(x3, min4[0]);
  max4[0] = mathMax3(x3, max4[0]);
  min4[1] = mathMin3(y0, min4[1]);
  max4[1] = mathMax3(y0, max4[1]);
  min4[1] = mathMin3(y3, min4[1]);
  max4[1] = mathMax3(y3, max4[1]);
}
function fromQuadratic(x0, y0, x1, y1, x2, y2, min4, max4) {
  const quadraticExtremum2 = quadraticExtremum;
  const quadraticAt3 = quadraticAt;
  const tx = mathMax3(mathMin3(quadraticExtremum2(x0, x1, x2), 1), 0);
  const ty = mathMax3(mathMin3(quadraticExtremum2(y0, y1, y2), 1), 0);
  const x = quadraticAt3(x0, x1, x2, tx);
  const y = quadraticAt3(y0, y1, y2, ty);
  min4[0] = mathMin3(x0, x2, x);
  min4[1] = mathMin3(y0, y2, y);
  max4[0] = mathMax3(x0, x2, x);
  max4[1] = mathMax3(y0, y2, y);
}
function fromArc(x, y, rx, ry, startAngle, endAngle, anticlockwise, min4, max4) {
  const vec2Min2 = min3;
  const vec2Max2 = max3;
  const diff2 = Math.abs(startAngle - endAngle);
  if (diff2 % PI25 < 0.0001 && diff2 > 0.0001) {
    min4[0] = x - rx;
    min4[1] = y - ry;
    max4[0] = x + rx;
    max4[1] = y + ry;
    return;
  }
  start[0] = mathCos2(startAngle) * rx + x;
  start[1] = mathSin2(startAngle) * ry + y;
  end[0] = mathCos2(endAngle) * rx + x;
  end[1] = mathSin2(endAngle) * ry + y;
  vec2Min2(min4, start, end);
  vec2Max2(max4, start, end);
  startAngle = startAngle % PI25;
  if (startAngle < 0) {
    startAngle = startAngle + PI25;
  }
  endAngle = endAngle % PI25;
  if (endAngle < 0) {
    endAngle = endAngle + PI25;
  }
  if (startAngle > endAngle && !anticlockwise) {
    endAngle += PI25;
  } else if (startAngle < endAngle && anticlockwise) {
    startAngle += PI25;
  }
  if (anticlockwise) {
    const tmp = endAngle;
    endAngle = startAngle;
    startAngle = tmp;
  }
  for (let angle = 0; angle < endAngle; angle += Math.PI / 2) {
    if (angle > startAngle) {
      extremity[0] = mathCos2(angle) * rx + x;
      extremity[1] = mathSin2(angle) * ry + y;
      vec2Min2(min4, extremity, min4);
      vec2Max2(max4, extremity, max4);
    }
  }
}

// node_modules/zrender/src/core/PathProxy.ts
const CMD2 = {
  M: 1,
  L: 2,
  C: 3,
  Q: 4,
  A: 5,
  Z: 6,
  R: 7
};
const tmpOutX = [];
const tmpOutY = [];
const min = [];
const max = [];
const min2 = [];
const max2 = [];
const mathMin2 = Math.min;
const mathMax2 = Math.max;
const mathCos = Math.cos;
const mathSin = Math.sin;
const mathSqrt = Math.sqrt;
const mathAbs = Math.abs;
const PI = Math.PI;
const PI24 = PI * 2;
const hasTypedArray = typeof Float32Array !== "undefined";
class PathProxy2 {
  constructor(notSaveData) {
    this.dpr = 1;
    this._xi = 0;
    this._yi = 0;
    this._x0 = 0;
    this._y0 = 0;
    this._len = 0;
    if (notSaveData) {
      this._saveData = false;
    }
    if (this._saveData) {
      this.data = [];
    }
  }
  setScale(sx, sy, segmentIgnoreThreshold) {
    segmentIgnoreThreshold = segmentIgnoreThreshold || 0;
    if (segmentIgnoreThreshold > 0) {
      this._ux = mathAbs(segmentIgnoreThreshold / devicePixelRatio / sx) || 0;
      this._uy = mathAbs(segmentIgnoreThreshold / devicePixelRatio / sy) || 0;
    }
  }
  setDPR(dpr2) {
    this.dpr = dpr2;
  }
  setContext(ctx) {
    this._ctx = ctx;
  }
  getContext() {
    return this._ctx;
  }
  beginPath() {
    this._ctx && this._ctx.beginPath();
    this.reset();
    return this;
  }
  reset() {
    if (this._saveData) {
      this._len = 0;
    }
    if (this._lineDash) {
      this._lineDash = null;
      this._dashOffset = 0;
    }
    if (this._pathSegLen) {
      this._pathSegLen = null;
      this._pathLen = 0;
    }
  }
  moveTo(x, y) {
    this.addData(CMD2.M, x, y);
    this._ctx && this._ctx.moveTo(x, y);
    this._x0 = x;
    this._y0 = y;
    this._xi = x;
    this._yi = y;
    return this;
  }
  lineTo(x, y) {
    const exceedUnit = mathAbs(x - this._xi) > this._ux || mathAbs(y - this._yi) > this._uy || this._len < 5;
    this.addData(CMD2.L, x, y);
    if (this._ctx && exceedUnit) {
      this._needsDash ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
    }
    if (exceedUnit) {
      this._xi = x;
      this._yi = y;
    }
    return this;
  }
  bezierCurveTo(x1, y1, x2, y2, x3, y3) {
    this.addData(CMD2.C, x1, y1, x2, y2, x3, y3);
    if (this._ctx) {
      this._needsDash ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
    }
    this._xi = x3;
    this._yi = y3;
    return this;
  }
  quadraticCurveTo(x1, y1, x2, y2) {
    this.addData(CMD2.Q, x1, y1, x2, y2);
    if (this._ctx) {
      this._needsDash ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
    }
    this._xi = x2;
    this._yi = y2;
    return this;
  }
  arc(cx, cy, r, startAngle, endAngle, anticlockwise) {
    let delta = endAngle - startAngle;
    endAngle = startAngle + delta;
    this.addData(CMD2.A, cx, cy, r, r, startAngle, delta, 0, anticlockwise ? 0 : 1);
    this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
    this._xi = mathCos(endAngle) * r + cx;
    this._yi = mathSin(endAngle) * r + cy;
    return this;
  }
  arcTo(x1, y1, x2, y2, radius) {
    if (this._ctx) {
      this._ctx.arcTo(x1, y1, x2, y2, radius);
    }
    return this;
  }
  rect(x, y, w, h) {
    this._ctx && this._ctx.rect(x, y, w, h);
    this.addData(CMD2.R, x, y, w, h);
    return this;
  }
  closePath() {
    this.addData(CMD2.Z);
    const ctx = this._ctx;
    const x0 = this._x0;
    const y0 = this._y0;
    if (ctx) {
      this._needsDash && this._dashedLineTo(x0, y0);
      ctx.closePath();
    }
    this._xi = x0;
    this._yi = y0;
    return this;
  }
  fill(ctx) {
    ctx && ctx.fill();
    this.toStatic();
  }
  stroke(ctx) {
    ctx && ctx.stroke();
    this.toStatic();
  }
  setLineDash(lineDash) {
    if (lineDash instanceof Array) {
      this._lineDash = lineDash;
      this._dashIdx = 0;
      let lineDashSum = 0;
      for (let i = 0; i < lineDash.length; i++) {
        lineDashSum += lineDash[i];
      }
      this._dashSum = lineDashSum;
      this._needsDash = true;
    } else {
      this._lineDash = null;
      this._needsDash = false;
    }
    return this;
  }
  setLineDashOffset(offset) {
    this._dashOffset = offset;
    return this;
  }
  len() {
    return this._len;
  }
  setData(data) {
    const len2 = data.length;
    if (!(this.data && this.data.length === len2) && hasTypedArray) {
      this.data = new Float32Array(len2);
    }
    for (let i = 0; i < len2; i++) {
      this.data[i] = data[i];
    }
    this._len = len2;
  }
  appendPath(path2) {
    if (!(path2 instanceof Array)) {
      path2 = [path2];
    }
    const len2 = path2.length;
    let appendSize = 0;
    let offset = this._len;
    for (let i = 0; i < len2; i++) {
      appendSize += path2[i].len();
    }
    if (hasTypedArray && this.data instanceof Float32Array) {
      this.data = new Float32Array(offset + appendSize);
    }
    for (let i = 0; i < len2; i++) {
      const appendPathData = path2[i].data;
      for (let k = 0; k < appendPathData.length; k++) {
        this.data[offset++] = appendPathData[k];
      }
    }
    this._len = offset;
  }
  addData(cmd, a, b, c, d, e, f, g, h) {
    if (!this._saveData) {
      return;
    }
    let data = this.data;
    if (this._len + arguments.length > data.length) {
      this._expandData();
      data = this.data;
    }
    for (let i = 0; i < arguments.length; i++) {
      data[this._len++] = arguments[i];
    }
  }
  _expandData() {
    if (!(this.data instanceof Array)) {
      const newData = [];
      for (let i = 0; i < this._len; i++) {
        newData[i] = this.data[i];
      }
      this.data = newData;
    }
  }
  _dashedLineTo(x1, y1) {
    const dashSum = this._dashSum;
    const lineDash = this._lineDash;
    const ctx = this._ctx;
    let offset = this._dashOffset;
    let x0 = this._xi;
    let y0 = this._yi;
    let dx = x1 - x0;
    let dy = y1 - y0;
    let dist3 = mathSqrt(dx * dx + dy * dy);
    let x = x0;
    let y = y0;
    let nDash = lineDash.length;
    let dash;
    let idx;
    dx /= dist3;
    dy /= dist3;
    if (offset < 0) {
      offset = dashSum + offset;
    }
    offset %= dashSum;
    x -= offset * dx;
    y -= offset * dy;
    while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx === 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {
      idx = this._dashIdx;
      dash = lineDash[idx];
      x += dx * dash;
      y += dy * dash;
      this._dashIdx = (idx + 1) % nDash;
      if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {
        continue;
      }
      ctx[idx % 2 ? "moveTo" : "lineTo"](dx >= 0 ? mathMin2(x, x1) : mathMax2(x, x1), dy >= 0 ? mathMin2(y, y1) : mathMax2(y, y1));
    }
    dx = x - x1;
    dy = y - y1;
    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
  }
  _dashedBezierTo(x1, y1, x2, y2, x3, y3) {
    const ctx = this._ctx;
    let dashSum = this._dashSum;
    let offset = this._dashOffset;
    let lineDash = this._lineDash;
    let x0 = this._xi;
    let y0 = this._yi;
    let bezierLen = 0;
    let idx = this._dashIdx;
    let nDash = lineDash.length;
    let t;
    let dx;
    let dy;
    let x;
    let y;
    let tmpLen = 0;
    if (offset < 0) {
      offset = dashSum + offset;
    }
    offset %= dashSum;
    for (t = 0; t < 1; t += 0.1) {
      dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
      dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
      bezierLen += mathSqrt(dx * dx + dy * dy);
    }
    for (; idx < nDash; idx++) {
      tmpLen += lineDash[idx];
      if (tmpLen > offset) {
        break;
      }
    }
    t = (tmpLen - offset) / bezierLen;
    while (t <= 1) {
      x = cubicAt(x0, x1, x2, x3, t);
      y = cubicAt(y0, y1, y2, y3, t);
      idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
      t += lineDash[idx] / bezierLen;
      idx = (idx + 1) % nDash;
    }
    idx % 2 !== 0 && ctx.lineTo(x3, y3);
    dx = x3 - x;
    dy = y3 - y;
    this._dashOffset = -mathSqrt(dx * dx + dy * dy);
  }
  _dashedQuadraticTo(x1, y1, x2, y2) {
    const x3 = x2;
    const y3 = y2;
    x2 = (x2 + 2 * x1) / 3;
    y2 = (y2 + 2 * y1) / 3;
    x1 = (this._xi + 2 * x1) / 3;
    y1 = (this._yi + 2 * y1) / 3;
    this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
  }
  toStatic() {
    if (!this._saveData) {
      return;
    }
    const data = this.data;
    if (data instanceof Array) {
      data.length = this._len;
      if (hasTypedArray && this._len > 11) {
        this.data = new Float32Array(data);
      }
    }
  }
  getBoundingRect() {
    min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
    max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
    const data = this.data;
    let xi = 0;
    let yi = 0;
    let x0 = 0;
    let y0 = 0;
    let i;
    for (i = 0; i < data.length; ) {
      const cmd = data[i++];
      if (i === 1) {
        xi = data[i];
        yi = data[i + 1];
        x0 = xi;
        y0 = yi;
      }
      switch (cmd) {
        case CMD2.M:
          xi = x0 = data[i++];
          yi = y0 = data[i++];
          min2[0] = x0;
          min2[1] = y0;
          max2[0] = x0;
          max2[1] = y0;
          break;
        case CMD2.L:
          fromLine(xi, yi, data[i], data[i + 1], min2, max2);
          xi = data[i++];
          yi = data[i++];
          break;
        case CMD2.C:
          fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
          xi = data[i++];
          yi = data[i++];
          break;
        case CMD2.Q:
          fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
          xi = data[i++];
          yi = data[i++];
          break;
        case CMD2.A:
          const cx = data[i++];
          const cy = data[i++];
          const rx = data[i++];
          const ry = data[i++];
          const startAngle = data[i++];
          const endAngle = data[i++] + startAngle;
          i += 1;
          const anticlockwise = 1 - data[i++];
          if (i === 1) {
            x0 = mathCos(startAngle) * rx + cx;
            y0 = mathSin(startAngle) * ry + cy;
          }
          fromArc(cx, cy, rx, ry, startAngle, endAngle, !!anticlockwise, min2, max2);
          xi = mathCos(endAngle) * rx + cx;
          yi = mathSin(endAngle) * ry + cy;
          break;
        case CMD2.R:
          x0 = xi = data[i++];
          y0 = yi = data[i++];
          const width = data[i++];
          const height = data[i++];
          fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
          break;
        case CMD2.Z:
          xi = x0;
          yi = y0;
          break;
      }
      min3(min, min, min2);
      max3(max, max, max2);
    }
    if (i === 0) {
      min[0] = min[1] = max[0] = max[1] = 0;
    }
    return new BoundingRect_default(min[0], min[1], max[0] - min[0], max[1] - min[1]);
  }
  _calculateLength() {
    const data = this.data;
    const len2 = this._len;
    const ux = this._ux;
    const uy = this._uy;
    let xi = 0;
    let yi = 0;
    let x0 = 0;
    let y0 = 0;
    if (!this._pathSegLen) {
      this._pathSegLen = [];
    }
    const pathSegLen = this._pathSegLen;
    let pathTotalLen = 0;
    let segCount = 0;
    for (let i = 0; i < len2; ) {
      const cmd = data[i++];
      if (i === 1) {
        xi = data[i];
        yi = data[i + 1];
        x0 = xi;
        y0 = yi;
      }
      let l = -1;
      switch (cmd) {
        case CMD2.M:
          xi = x0 = data[i++];
          yi = y0 = data[i++];
          break;
        case CMD2.L: {
          const x2 = data[i++];
          const y2 = data[i++];
          const dx = x2 - xi;
          const dy = y2 - yi;
          if (mathAbs(dx) > ux || mathAbs(dy) > uy || i === len2 - 1) {
            l = Math.sqrt(dx * dx + dy * dy);
            xi = x2;
            yi = y2;
          }
          break;
        }
        case CMD2.C: {
          const x1 = data[i++];
          const y1 = data[i++];
          const x2 = data[i++];
          const y2 = data[i++];
          const x3 = data[i++];
          const y3 = data[i++];
          l = cubicLength(xi, yi, x1, y1, x2, y2, x3, y3, 10);
          xi = x3;
          yi = y3;
          break;
        }
        case CMD2.Q: {
          const x1 = data[i++];
          const y1 = data[i++];
          const x2 = data[i++];
          const y2 = data[i++];
          l = quadraticLength(xi, yi, x1, y1, x2, y2, 10);
          xi = x2;
          yi = y2;
          break;
        }
        case CMD2.A:
          const cx = data[i++];
          const cy = data[i++];
          const rx = data[i++];
          const ry = data[i++];
          const startAngle = data[i++];
          let delta = data[i++];
          const endAngle = delta + startAngle;
          i += 1;
          const anticlockwise = !data[i++];
          if (i === 1) {
            x0 = mathCos(startAngle) * rx + cx;
            y0 = mathSin(startAngle) * ry + cy;
          }
          l = mathMax2(rx, ry) * mathMin2(PI24, Math.abs(delta));
          xi = mathCos(endAngle) * rx + cx;
          yi = mathSin(endAngle) * ry + cy;
          break;
        case CMD2.R: {
          x0 = xi = data[i++];
          y0 = yi = data[i++];
          const width = data[i++];
          const height = data[i++];
          l = width * 2 + height * 2;
          break;
        }
        case CMD2.Z: {
          const dx = x0 - xi;
          const dy = y0 - yi;
          l = Math.sqrt(dx * dx + dy * dy);
          xi = x0;
          yi = y0;
          break;
        }
      }
      if (l >= 0) {
        pathSegLen[segCount++] = l;
        pathTotalLen += l;
      }
    }
    this._pathLen = pathTotalLen;
    return pathTotalLen;
  }
  rebuildPath(ctx, percent) {
    const d = this.data;
    const ux = this._ux;
    const uy = this._uy;
    const len2 = this._len;
    let x0;
    let y0;
    let xi;
    let yi;
    let x;
    let y;
    const drawPart = percent < 1;
    let pathSegLen;
    let pathTotalLen;
    let accumLength = 0;
    let segCount = 0;
    let displayedLength;
    if (drawPart) {
      if (!this._pathSegLen) {
        this._calculateLength();
      }
      pathSegLen = this._pathSegLen;
      pathTotalLen = this._pathLen;
      displayedLength = percent * pathTotalLen;
      if (!displayedLength) {
        return;
      }
    }
    lo:
      for (let i = 0; i < len2; ) {
        const cmd = d[i++];
        if (i === 1) {
          xi = d[i];
          yi = d[i + 1];
          x0 = xi;
          y0 = yi;
        }
        switch (cmd) {
          case CMD2.M:
            x0 = xi = d[i++];
            y0 = yi = d[i++];
            ctx.moveTo(xi, yi);
            break;
          case CMD2.L: {
            x = d[i++];
            y = d[i++];
            if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len2 - 1) {
              if (drawPart) {
                const l = pathSegLen[segCount++];
                if (accumLength + l > displayedLength) {
                  const t = (displayedLength - accumLength) / l;
                  ctx.lineTo(xi * (1 - t) + x * t, yi * (1 - t) + y * t);
                  break lo;
                }
                accumLength += l;
              }
              ctx.lineTo(x, y);
              xi = x;
              yi = y;
            }
            break;
          }
          case CMD2.C: {
            const x1 = d[i++];
            const y1 = d[i++];
            const x2 = d[i++];
            const y2 = d[i++];
            const x3 = d[i++];
            const y3 = d[i++];
            if (drawPart) {
              const l = pathSegLen[segCount++];
              if (accumLength + l > displayedLength) {
                const t = (displayedLength - accumLength) / l;
                cubicSubdivide(xi, x1, x2, x3, t, tmpOutX);
                cubicSubdivide(yi, y1, y2, y3, t, tmpOutY);
                ctx.bezierCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2], tmpOutX[3], tmpOutY[3]);
                break lo;
              }
              accumLength += l;
            }
            ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
            xi = x3;
            yi = y3;
            break;
          }
          case CMD2.Q: {
            const x1 = d[i++];
            const y1 = d[i++];
            const x2 = d[i++];
            const y2 = d[i++];
            if (drawPart) {
              const l = pathSegLen[segCount++];
              if (accumLength + l > displayedLength) {
                const t = (displayedLength - accumLength) / l;
                quadraticSubdivide(xi, x1, x2, t, tmpOutX);
                quadraticSubdivide(yi, y1, y2, t, tmpOutY);
                ctx.quadraticCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2]);
                break lo;
              }
              accumLength += l;
            }
            ctx.quadraticCurveTo(x1, y1, x2, y2);
            xi = x2;
            yi = y2;
            break;
          }
          case CMD2.A:
            const cx = d[i++];
            const cy = d[i++];
            const rx = d[i++];
            const ry = d[i++];
            let startAngle = d[i++];
            let delta = d[i++];
            const psi = d[i++];
            const anticlockwise = !d[i++];
            const r = rx > ry ? rx : ry;
            const scaleX = rx > ry ? 1 : rx / ry;
            const scaleY = rx > ry ? ry / rx : 1;
            const isEllipse = mathAbs(rx - ry) > 0.001;
            let endAngle = startAngle + delta;
            let breakBuild = false;
            if (drawPart) {
              const l = pathSegLen[segCount++];
              if (accumLength + l > displayedLength) {
                endAngle = startAngle + delta * (displayedLength - accumLength) / l;
                breakBuild = true;
              }
              accumLength += l;
            }
            if (isEllipse) {
              ctx.translate(cx, cy);
              ctx.rotate(psi);
              ctx.scale(scaleX, scaleY);
              ctx.arc(0, 0, r, startAngle, endAngle, anticlockwise);
              ctx.scale(1 / scaleX, 1 / scaleY);
              ctx.rotate(-psi);
              ctx.translate(-cx, -cy);
            } else {
              ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
            }
            if (breakBuild) {
              break lo;
            }
            if (i === 1) {
              x0 = mathCos(startAngle) * rx + cx;
              y0 = mathSin(startAngle) * ry + cy;
            }
            xi = mathCos(endAngle) * rx + cx;
            yi = mathSin(endAngle) * ry + cy;
            break;
          case CMD2.R:
            x0 = xi = d[i];
            y0 = yi = d[i + 1];
            x = d[i++];
            y = d[i++];
            const width = d[i++];
            const height = d[i++];
            if (drawPart) {
              const l = pathSegLen[segCount++];
              if (accumLength + l > displayedLength) {
                let d2 = displayedLength - accumLength;
                ctx.moveTo(x, y);
                ctx.lineTo(x + mathMin2(d2, width), y);
                d2 -= width;
                if (d2 > 0) {
                  ctx.lineTo(x + width, y + mathMin2(d2, height));
                }
                d2 -= height;
                if (d2 > 0) {
                  ctx.lineTo(x + mathMax2(width - d2, 0), y + height);
                }
                d2 -= width;
                if (d2 > 0) {
                  ctx.lineTo(x, y + mathMax2(height - d2, 0));
                }
                break lo;
              }
              accumLength += l;
            }
            ctx.rect(x, y, width, height);
            break;
          case CMD2.Z:
            if (drawPart) {
              const l = pathSegLen[segCount++];
              if (accumLength + l > displayedLength) {
                const t = (displayedLength - accumLength) / l;
                ctx.lineTo(xi * (1 - t) + x0 * t, yi * (1 - t) + y0 * t);
                break lo;
              }
              accumLength += l;
            }
            ctx.closePath();
            xi = x0;
            yi = y0;
        }
      }
  }
}
PathProxy2.CMD = CMD2;
PathProxy2.initDefaultProps = function() {
  const proto2 = PathProxy2.prototype;
  proto2._saveData = true;
  proto2._needsDash = false;
  proto2._dashOffset = 0;
  proto2._dashIdx = 0;
  proto2._dashSum = 0;
  proto2._ux = 0;
  proto2._uy = 0;
}();

// node_modules/zrender/src/contain/line.ts
function containStroke3(x0, y0, x1, y1, lineWidth, x, y) {
  if (lineWidth === 0) {
    return false;
  }
  const _l = lineWidth;
  let _a = 0;
  let _b = x0;
  if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
    return false;
  }
  if (x0 !== x1) {
    _a = (y0 - y1) / (x0 - x1);
    _b = (x0 * y1 - x1 * y0) / (x0 - x1);
  } else {
    return Math.abs(x - x0) <= _l / 2;
  }
  const tmp = _a * x - y + _b;
  const _s = tmp * tmp / (_a * _a + 1);
  return _s <= _l / 2 * _l / 2;
}

// node_modules/zrender/src/contain/cubic.ts
function containStroke2(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
  if (lineWidth === 0) {
    return false;
  }
  const _l = lineWidth;
  if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
    return false;
  }
  const d = cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
  return d <= _l / 2;
}

// node_modules/zrender/src/contain/quadratic.ts
function containStroke5(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
  if (lineWidth === 0) {
    return false;
  }
  const _l = lineWidth;
  if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
    return false;
  }
  const d = quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
  return d <= _l / 2;
}

// node_modules/zrender/src/contain/util.ts
const PI23 = Math.PI * 2;
function normalizeRadian(angle) {
  angle %= PI23;
  if (angle < 0) {
    angle += PI23;
  }
  return angle;
}

// node_modules/zrender/src/contain/arc.ts
const PI2 = Math.PI * 2;
function containStroke(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
  if (lineWidth === 0) {
    return false;
  }
  const _l = lineWidth;
  x -= cx;
  y -= cy;
  const d = Math.sqrt(x * x + y * y);
  if (d - _l > r || d + _l < r) {
    return false;
  }
  if (Math.abs(startAngle - endAngle) % PI2 < 0.0001) {
    return true;
  }
  if (anticlockwise) {
    const tmp = startAngle;
    startAngle = normalizeRadian(endAngle);
    endAngle = normalizeRadian(tmp);
  } else {
    startAngle = normalizeRadian(startAngle);
    endAngle = normalizeRadian(endAngle);
  }
  if (startAngle > endAngle) {
    endAngle += PI2;
  }
  let angle = Math.atan2(y, x);
  if (angle < 0) {
    angle += PI2;
  }
  return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
}

// node_modules/zrender/src/contain/windingLine.ts
function windingLine2(x0, y0, x1, y1, x, y) {
  if (y > y0 && y > y1 || y < y0 && y < y1) {
    return 0;
  }
  if (y1 === y0) {
    return 0;
  }
  const t = (y - y0) / (y1 - y0);
  let dir3 = y1 < y0 ? 1 : -1;
  if (t === 1 || t === 0) {
    dir3 = y1 < y0 ? 0.5 : -0.5;
  }
  const x_ = t * (x1 - x0) + x0;
  return x_ === x ? Infinity : x_ > x ? dir3 : 0;
}

// node_modules/zrender/src/contain/path.ts
const CMD = PathProxy2.CMD;
const PI22 = Math.PI * 2;
const EPSILON = 0.0001;
function isAroundEqual(a, b) {
  return Math.abs(a - b) < EPSILON;
}
const roots = [-1, -1, -1];
const extrema = [-1, -1];
function swapExtrema() {
  const tmp = extrema[0];
  extrema[0] = extrema[1];
  extrema[1] = tmp;
}
function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
  if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
    return 0;
  }
  const nRoots = cubicRootAt(y0, y1, y2, y3, y, roots);
  if (nRoots === 0) {
    return 0;
  } else {
    let w = 0;
    let nExtrema = -1;
    let y0_;
    let y1_;
    for (let i = 0; i < nRoots; i++) {
      let t = roots[i];
      let unit = t === 0 || t === 1 ? 0.5 : 1;
      let x_ = cubicAt(x0, x1, x2, x3, t);
      if (x_ < x) {
        continue;
      }
      if (nExtrema < 0) {
        nExtrema = cubicExtrema(y0, y1, y2, y3, extrema);
        if (extrema[1] < extrema[0] && nExtrema > 1) {
          swapExtrema();
        }
        y0_ = cubicAt(y0, y1, y2, y3, extrema[0]);
        if (nExtrema > 1) {
          y1_ = cubicAt(y0, y1, y2, y3, extrema[1]);
        }
      }
      if (nExtrema === 2) {
        if (t < extrema[0]) {
          w += y0_ < y0 ? unit : -unit;
        } else if (t < extrema[1]) {
          w += y1_ < y0_ ? unit : -unit;
        } else {
          w += y3 < y1_ ? unit : -unit;
        }
      } else {
        if (t < extrema[0]) {
          w += y0_ < y0 ? unit : -unit;
        } else {
          w += y3 < y0_ ? unit : -unit;
        }
      }
    }
    return w;
  }
}
function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
  if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
    return 0;
  }
  const nRoots = quadraticRootAt(y0, y1, y2, y, roots);
  if (nRoots === 0) {
    return 0;
  } else {
    const t = quadraticExtremum(y0, y1, y2);
    if (t >= 0 && t <= 1) {
      let w = 0;
      let y_ = quadraticAt(y0, y1, y2, t);
      for (let i = 0; i < nRoots; i++) {
        let unit = roots[i] === 0 || roots[i] === 1 ? 0.5 : 1;
        let x_ = quadraticAt(x0, x1, x2, roots[i]);
        if (x_ < x) {
          continue;
        }
        if (roots[i] < t) {
          w += y_ < y0 ? unit : -unit;
        } else {
          w += y2 < y_ ? unit : -unit;
        }
      }
      return w;
    } else {
      const unit = roots[0] === 0 || roots[0] === 1 ? 0.5 : 1;
      const x_ = quadraticAt(x0, x1, x2, roots[0]);
      if (x_ < x) {
        return 0;
      }
      return y2 < y0 ? unit : -unit;
    }
  }
}
function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
  y -= cy;
  if (y > r || y < -r) {
    return 0;
  }
  const tmp = Math.sqrt(r * r - y * y);
  roots[0] = -tmp;
  roots[1] = tmp;
  const dTheta = Math.abs(startAngle - endAngle);
  if (dTheta < 0.0001) {
    return 0;
  }
  if (dTheta % PI22 < 0.0001) {
    startAngle = 0;
    endAngle = PI22;
    const dir3 = anticlockwise ? 1 : -1;
    if (x >= roots[0] + cx && x <= roots[1] + cx) {
      return dir3;
    } else {
      return 0;
    }
  }
  if (anticlockwise) {
    const tmp2 = startAngle;
    startAngle = normalizeRadian(endAngle);
    endAngle = normalizeRadian(tmp2);
  } else {
    startAngle = normalizeRadian(startAngle);
    endAngle = normalizeRadian(endAngle);
  }
  if (startAngle > endAngle) {
    endAngle += PI22;
  }
  let w = 0;
  for (let i = 0; i < 2; i++) {
    const x_ = roots[i];
    if (x_ + cx > x) {
      let angle = Math.atan2(y, x_);
      let dir3 = anticlockwise ? 1 : -1;
      if (angle < 0) {
        angle = PI22 + angle;
      }
      if (angle >= startAngle && angle <= endAngle || angle + PI22 >= startAngle && angle + PI22 <= endAngle) {
        if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
          dir3 = -dir3;
        }
        w += dir3;
      }
    }
  }
  return w;
}
function containPath(data, lineWidth, isStroke, x, y) {
  let w = 0;
  let xi = 0;
  let yi = 0;
  let x0 = 0;
  let y0 = 0;
  let x1;
  let y1;
  for (let i = 0; i < data.length; ) {
    const cmd = data[i++];
    if (cmd === CMD.M && i > 1) {
      if (!isStroke) {
        w += windingLine2(xi, yi, x0, y0, x, y);
      }
    }
    if (i === 1) {
      xi = data[i];
      yi = data[i + 1];
      x0 = xi;
      y0 = yi;
    }
    switch (cmd) {
      case CMD.M:
        x0 = data[i++];
        y0 = data[i++];
        xi = x0;
        yi = y0;
        break;
      case CMD.L:
        if (isStroke) {
          if (containStroke3(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
            return true;
          }
        } else {
          w += windingLine2(xi, yi, data[i], data[i + 1], x, y) || 0;
        }
        xi = data[i++];
        yi = data[i++];
        break;
      case CMD.C:
        if (isStroke) {
          if (containStroke2(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
            return true;
          }
        } else {
          w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
        }
        xi = data[i++];
        yi = data[i++];
        break;
      case CMD.Q:
        if (isStroke) {
          if (containStroke5(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
            return true;
          }
        } else {
          w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
        }
        xi = data[i++];
        yi = data[i++];
        break;
      case CMD.A:
        const cx = data[i++];
        const cy = data[i++];
        const rx = data[i++];
        const ry = data[i++];
        const theta = data[i++];
        const dTheta = data[i++];
        i += 1;
        const anticlockwise = !!(1 - data[i++]);
        x1 = Math.cos(theta) * rx + cx;
        y1 = Math.sin(theta) * ry + cy;
        if (i > 1) {
          w += windingLine2(xi, yi, x1, y1, x, y);
        } else {
          x0 = x1;
          y0 = y1;
        }
        const _x = (x - cx) * ry / rx + cx;
        if (isStroke) {
          if (containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
            return true;
          }
        } else {
          w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
        }
        xi = Math.cos(theta + dTheta) * rx + cx;
        yi = Math.sin(theta + dTheta) * ry + cy;
        break;
      case CMD.R:
        x0 = xi = data[i++];
        y0 = yi = data[i++];
        const width = data[i++];
        const height = data[i++];
        x1 = x0 + width;
        y1 = y0 + height;
        if (isStroke) {
          if (containStroke3(x0, y0, x1, y0, lineWidth, x, y) || containStroke3(x1, y0, x1, y1, lineWidth, x, y) || containStroke3(x1, y1, x0, y1, lineWidth, x, y) || containStroke3(x0, y1, x0, y0, lineWidth, x, y)) {
            return true;
          }
        } else {
          w += windingLine2(x1, y0, x1, y1, x, y);
          w += windingLine2(x0, y1, x0, y0, x, y);
        }
        break;
      case CMD.Z:
        if (isStroke) {
          if (containStroke3(xi, yi, x0, y0, lineWidth, x, y)) {
            return true;
          }
        } else {
          w += windingLine2(xi, yi, x0, y0, x, y);
        }
        xi = x0;
        yi = y0;
        break;
    }
  }
  if (!isStroke && !isAroundEqual(yi, y0)) {
    w += windingLine2(xi, yi, x0, y0, x, y) || 0;
  }
  return w !== 0;
}
function contain(pathData, x, y) {
  return containPath(pathData, 0, false, x, y);
}
function containStroke4(pathData, lineWidth, x, y) {
  return containPath(pathData, lineWidth, true, x, y);
}

// node_modules/zrender/src/graphic/Path.ts
const DEFAULT_PATH_STYLE = defaults({
  fill: "#000",
  stroke: null,
  strokePercent: 1,
  fillOpacity: 1,
  strokeOpacity: 1,
  lineDashOffset: 0,
  lineWidth: 1,
  lineCap: "butt",
  miterLimit: 10,
  strokeNoScale: false,
  strokeFirst: false
}, DEFAULT_COMMON_STYLE);
const DEFAULT_PATH_ANIMATION_PROPS = {
  style: defaults({
    fill: true,
    stroke: true,
    strokePercent: true,
    fillOpacity: true,
    strokeOpacity: true,
    lineDashOffset: true,
    lineWidth: true,
    miterLimit: true
  }, DEFAULT_COMMON_ANIMATION_PROPS.style)
};
class Path10 extends Displayable_default {
  constructor(opts) {
    super(opts);
  }
  _init(props) {
    const keysArr = keys(props);
    this.shape = this.getDefaultShape();
    const defaultStyle = this.getDefaultStyle();
    if (defaultStyle) {
      this.useStyle(defaultStyle);
    }
    for (let i = 0; i < keysArr.length; i++) {
      const key = keysArr[i];
      const value = props[key];
      if (key === "style") {
        if (!this.style) {
          this.useStyle(value);
        } else {
          extend(this.style, value);
        }
      } else if (key === "shape") {
        extend(this.shape, value);
      } else {
        super.attrKV(key, value);
      }
    }
    if (!this.style) {
      this.useStyle({});
    }
  }
  getDefaultStyle() {
    return null;
  }
  getDefaultShape() {
    return {};
  }
  canBeInsideText() {
    return this.hasFill();
  }
  getInsideTextFill() {
    const pathFill = this.style.fill;
    if (pathFill !== "none") {
      if (isString(pathFill)) {
        const fillLum = lum(pathFill, 0);
        if (fillLum > 0.6) {
          return DARK_LABEL_COLOR;
        } else if (fillLum > 0.2) {
          return LIGHTER_LABEL_COLOR;
        }
        return LIGHT_LABEL_COLOR;
      } else if (pathFill) {
        return LIGHT_LABEL_COLOR;
      }
    }
    return DARK_LABEL_COLOR;
  }
  getInsideTextStroke(textFill) {
    const pathFill = this.style.fill;
    if (isString(pathFill)) {
      const zr = this.__zr;
      const isDarkMode2 = !!(zr && zr.isDarkMode());
      const isDarkLabel = lum(textFill, 0) < DARK_MODE_THRESHOLD;
      if (isDarkMode2 === isDarkLabel) {
        return pathFill;
      }
    }
  }
  buildPath(ctx, shapeCfg, inBundle) {
  }
  pathUpdated() {
    this.__dirty &= ~Path10.SHAPE_CHANGED_BIT;
  }
  createPathProxy() {
    this.path = new PathProxy2(false);
  }
  hasStroke() {
    const style2 = this.style;
    const stroke = style2.stroke;
    return !(stroke == null || stroke === "none" || !(style2.lineWidth > 0));
  }
  hasFill() {
    const style2 = this.style;
    const fill = style2.fill;
    return fill != null && fill !== "none";
  }
  getBoundingRect() {
    let rect = this._rect;
    const style2 = this.style;
    const needsUpdateRect = !rect;
    if (needsUpdateRect) {
      let firstInvoke = false;
      if (!this.path) {
        firstInvoke = true;
        this.createPathProxy();
      }
      let path2 = this.path;
      if (firstInvoke || this.__dirty & Path10.SHAPE_CHANGED_BIT) {
        path2.beginPath();
        this.buildPath(path2, this.shape, false);
        this.pathUpdated();
      }
      rect = path2.getBoundingRect();
    }
    this._rect = rect;
    if (this.hasStroke()) {
      const rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
      if (this.__dirty || needsUpdateRect) {
        rectWithStroke.copy(rect);
        const lineScale = style2.strokeNoScale ? this.getLineScale() : 1;
        let w = style2.lineWidth;
        if (!this.hasFill()) {
          w = Math.max(w, this.strokeContainThreshold || 4);
        }
        if (lineScale > 1e-10) {
          rectWithStroke.width += w / lineScale;
          rectWithStroke.height += w / lineScale;
          rectWithStroke.x -= w / lineScale / 2;
          rectWithStroke.y -= w / lineScale / 2;
        }
      }
      return rectWithStroke;
    }
    return rect;
  }
  contain(x, y) {
    const localPos = this.transformCoordToLocal(x, y);
    const rect = this.getBoundingRect();
    const style2 = this.style;
    x = localPos[0];
    y = localPos[1];
    if (rect.contain(x, y)) {
      const pathData = this.path.data;
      if (this.hasStroke()) {
        let lineWidth = style2.lineWidth;
        let lineScale = style2.strokeNoScale ? this.getLineScale() : 1;
        if (lineScale > 1e-10) {
          if (!this.hasFill()) {
            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
          }
          if (containStroke4(pathData, lineWidth / lineScale, x, y)) {
            return true;
          }
        }
      }
      if (this.hasFill()) {
        return contain(pathData, x, y);
      }
    }
    return false;
  }
  dirtyShape() {
    this.__dirty |= Path10.SHAPE_CHANGED_BIT;
    if (this._rect) {
      this._rect = null;
    }
    this.markRedraw();
  }
  dirty() {
    this.dirtyStyle();
    this.dirtyShape();
  }
  animateShape(loop) {
    return this.animate("shape", loop);
  }
  updateDuringAnimation(targetKey) {
    if (targetKey === "style") {
      this.dirtyStyle();
    } else if (targetKey === "shape") {
      this.dirtyShape();
    } else {
      this.markRedraw();
    }
  }
  attrKV(key, value) {
    if (key === "shape") {
      this.setShape(value);
    } else {
      super.attrKV(key, value);
    }
  }
  setShape(keyOrObj, value) {
    let shape = this.shape;
    if (!shape) {
      shape = this.shape = {};
    }
    if (typeof keyOrObj === "string") {
      shape[keyOrObj] = value;
    } else {
      extend(shape, keyOrObj);
    }
    this.dirtyShape();
    return this;
  }
  shapeChanged() {
    return !!(this.__dirty & Path10.SHAPE_CHANGED_BIT);
  }
  createStyle(obj) {
    return createObject(DEFAULT_PATH_STYLE, obj);
  }
  _innerSaveToNormal(toState) {
    super._innerSaveToNormal(toState);
    const normalState = this._normalState;
    if (toState.shape && !normalState.shape) {
      normalState.shape = extend({}, this.shape);
    }
  }
  _applyStateObj(stateName, state, normalState, keepCurrentStates, transition, animationCfg) {
    super._applyStateObj(stateName, state, normalState, keepCurrentStates, transition, animationCfg);
    const needsRestoreToNormal = !(state && keepCurrentStates);
    let targetShape;
    if (state && state.shape) {
      if (transition) {
        if (keepCurrentStates) {
          targetShape = state.shape;
        } else {
          targetShape = extend({}, normalState.shape);
          extend(targetShape, state.shape);
        }
      } else {
        targetShape = extend({}, keepCurrentStates ? this.shape : normalState.shape);
        extend(targetShape, state.shape);
      }
    } else if (needsRestoreToNormal) {
      targetShape = normalState.shape;
    }
    if (targetShape) {
      if (transition) {
        this.shape = extend({}, this.shape);
        const targetShapePrimaryProps = {};
        const shapeKeys = keys(targetShape);
        for (let i = 0; i < shapeKeys.length; i++) {
          const key = shapeKeys[i];
          if (typeof targetShape[key] === "object") {
            this.shape[key] = targetShape[key];
          } else {
            targetShapePrimaryProps[key] = targetShape[key];
          }
        }
        this._transitionState(stateName, {
          shape: targetShapePrimaryProps
        }, animationCfg);
      } else {
        this.shape = targetShape;
        this.dirtyShape();
      }
    }
  }
  _mergeStates(states36) {
    const mergedState = super._mergeStates(states36);
    let mergedShape;
    for (let i = 0; i < states36.length; i++) {
      const state = states36[i];
      if (state.shape) {
        mergedShape = mergedShape || {};
        this._mergeStyle(mergedShape, state.shape);
      }
    }
    if (mergedShape) {
      mergedState.shape = mergedShape;
    }
    return mergedState;
  }
  _getAnimationStyleProps() {
    return DEFAULT_PATH_ANIMATION_PROPS;
  }
  isZeroArea() {
    return false;
  }
  static extend(defaultProps) {
    class Sub extends Path10 {
      getDefaultStyle() {
        return clone2(defaultProps.style);
      }
      getDefaultShape() {
        return clone2(defaultProps.shape);
      }
      constructor(opts) {
        super(opts);
        defaultProps.init && defaultProps.init.call(this, opts);
      }
    }
    for (let key in defaultProps) {
      if (typeof defaultProps[key] === "function") {
        Sub.prototype[key] = defaultProps[key];
      }
    }
    return Sub;
  }
}
Path10.SHAPE_CHANGED_BIT = 4;
Path10.initDefaultProps = function() {
  const pathProto = Path10.prototype;
  pathProto.type = "path";
  pathProto.strokeContainThreshold = 5;
  pathProto.segmentIgnoreThreshold = 0;
  pathProto.subPixelOptimize = false;
  pathProto.autoBatch = false;
  pathProto.__dirty = Element_default.REDARAW_BIT | Displayable_default.STYLE_CHANGED_BIT | Path10.SHAPE_CHANGED_BIT;
}();
const Path_default = Path10;

// node_modules/zrender/src/tool/transformPath.ts
const CMD4 = PathProxy2.CMD;
const points = [[], [], []];
const mathSqrt4 = Math.sqrt;
const mathAtan2 = Math.atan2;
function transformPath_default(path2, m2) {
  let data = path2.data;
  let cmd;
  let nPoint;
  let i;
  let j;
  let k;
  let p;
  const M = CMD4.M;
  const C = CMD4.C;
  const L = CMD4.L;
  const R = CMD4.R;
  const A = CMD4.A;
  const Q = CMD4.Q;
  for (i = 0, j = 0; i < data.length; ) {
    cmd = data[i++];
    j = i;
    nPoint = 0;
    switch (cmd) {
      case M:
        nPoint = 1;
        break;
      case L:
        nPoint = 1;
        break;
      case C:
        nPoint = 3;
        break;
      case Q:
        nPoint = 2;
        break;
      case A:
        const x = m2[4];
        const y = m2[5];
        const sx = mathSqrt4(m2[0] * m2[0] + m2[1] * m2[1]);
        const sy = mathSqrt4(m2[2] * m2[2] + m2[3] * m2[3]);
        const angle = mathAtan2(-m2[1] / sy, m2[0] / sx);
        data[i] *= sx;
        data[i++] += x;
        data[i] *= sy;
        data[i++] += y;
        data[i++] *= sx;
        data[i++] *= sy;
        data[i++] += angle;
        data[i++] += angle;
        i += 2;
        j = i;
        break;
      case R:
        p[0] = data[i++];
        p[1] = data[i++];
        applyTransform(p, p, m2);
        data[j++] = p[0];
        data[j++] = p[1];
        p[0] += data[i++];
        p[1] += data[i++];
        applyTransform(p, p, m2);
        data[j++] = p[0];
        data[j++] = p[1];
    }
    for (k = 0; k < nPoint; k++) {
      let p2 = points[k];
      p2[0] = data[i++];
      p2[1] = data[i++];
      applyTransform(p2, p2, m2);
      data[j++] = p2[0];
      data[j++] = p2[1];
    }
  }
}

// node_modules/zrender/src/tool/path.ts
const mathSqrt3 = Math.sqrt;
const mathSin4 = Math.sin;
const mathCos4 = Math.cos;
const PI6 = Math.PI;
function vMag(v4) {
  return Math.sqrt(v4[0] * v4[0] + v4[1] * v4[1]);
}
function vRatio(u, v4) {
  return (u[0] * v4[0] + u[1] * v4[1]) / (vMag(u) * vMag(v4));
}
function vAngle(u, v4) {
  return (u[0] * v4[1] < u[1] * v4[0] ? -1 : 1) * Math.acos(vRatio(u, v4));
}
function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path2) {
  const psi = psiDeg * (PI6 / 180);
  const xp = mathCos4(psi) * (x1 - x2) / 2 + mathSin4(psi) * (y1 - y2) / 2;
  const yp = -1 * mathSin4(psi) * (x1 - x2) / 2 + mathCos4(psi) * (y1 - y2) / 2;
  const lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);
  if (lambda > 1) {
    rx *= mathSqrt3(lambda);
    ry *= mathSqrt3(lambda);
  }
  const f = (fa === fs ? -1 : 1) * mathSqrt3((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
  const cxp = f * rx * yp / ry;
  const cyp = f * -ry * xp / rx;
  const cx = (x1 + x2) / 2 + mathCos4(psi) * cxp - mathSin4(psi) * cyp;
  const cy = (y1 + y2) / 2 + mathSin4(psi) * cxp + mathCos4(psi) * cyp;
  const theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
  const u = [(xp - cxp) / rx, (yp - cyp) / ry];
  const v4 = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
  let dTheta = vAngle(u, v4);
  if (vRatio(u, v4) <= -1) {
    dTheta = PI6;
  }
  if (vRatio(u, v4) >= 1) {
    dTheta = 0;
  }
  if (dTheta < 0) {
    const n = Math.round(dTheta / PI6 * 1e+06) / 1e+06;
    dTheta = PI6 * 2 + n % 2 * PI6;
  }
  path2.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
}
const commandReg = /([mlvhzcqtsa])([^mlvhzcqtsa]*)/ig;
const numberReg = /-?([0-9]*\.)?[0-9]+([eE]-?[0-9]+)?/g;
function createPathProxyFromString(data) {
  if (!data) {
    return new PathProxy2();
  }
  let cpx = 0;
  let cpy = 0;
  let subpathX = cpx;
  let subpathY = cpy;
  let prevCmd;
  const path2 = new PathProxy2();
  const CMD6 = PathProxy2.CMD;
  const cmdList = data.match(commandReg);
  for (let l = 0; l < cmdList.length; l++) {
    const cmdText = cmdList[l];
    let cmdStr = cmdText.charAt(0);
    let cmd;
    const p = cmdText.match(numberReg) || [];
    const pLen = p.length;
    for (let i = 0; i < pLen; i++) {
      p[i] = parseFloat(p[i]);
    }
    let off = 0;
    while (off < pLen) {
      let ctlPtx;
      let ctlPty;
      let rx;
      let ry;
      let psi;
      let fa;
      let fs;
      let x1 = cpx;
      let y1 = cpy;
      let len2;
      let pathData;
      switch (cmdStr) {
        case "l":
          cpx += p[off++];
          cpy += p[off++];
          cmd = CMD6.L;
          path2.addData(cmd, cpx, cpy);
          break;
        case "L":
          cpx = p[off++];
          cpy = p[off++];
          cmd = CMD6.L;
          path2.addData(cmd, cpx, cpy);
          break;
        case "m":
          cpx += p[off++];
          cpy += p[off++];
          cmd = CMD6.M;
          path2.addData(cmd, cpx, cpy);
          subpathX = cpx;
          subpathY = cpy;
          cmdStr = "l";
          break;
        case "M":
          cpx = p[off++];
          cpy = p[off++];
          cmd = CMD6.M;
          path2.addData(cmd, cpx, cpy);
          subpathX = cpx;
          subpathY = cpy;
          cmdStr = "L";
          break;
        case "h":
          cpx += p[off++];
          cmd = CMD6.L;
          path2.addData(cmd, cpx, cpy);
          break;
        case "H":
          cpx = p[off++];
          cmd = CMD6.L;
          path2.addData(cmd, cpx, cpy);
          break;
        case "v":
          cpy += p[off++];
          cmd = CMD6.L;
          path2.addData(cmd, cpx, cpy);
          break;
        case "V":
          cpy = p[off++];
          cmd = CMD6.L;
          path2.addData(cmd, cpx, cpy);
          break;
        case "C":
          cmd = CMD6.C;
          path2.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
          cpx = p[off - 2];
          cpy = p[off - 1];
          break;
        case "c":
          cmd = CMD6.C;
          path2.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
          cpx += p[off - 2];
          cpy += p[off - 1];
          break;
        case "S":
          ctlPtx = cpx;
          ctlPty = cpy;
          len2 = path2.len();
          pathData = path2.data;
          if (prevCmd === CMD6.C) {
            ctlPtx += cpx - pathData[len2 - 4];
            ctlPty += cpy - pathData[len2 - 3];
          }
          cmd = CMD6.C;
          x1 = p[off++];
          y1 = p[off++];
          cpx = p[off++];
          cpy = p[off++];
          path2.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
          break;
        case "s":
          ctlPtx = cpx;
          ctlPty = cpy;
          len2 = path2.len();
          pathData = path2.data;
          if (prevCmd === CMD6.C) {
            ctlPtx += cpx - pathData[len2 - 4];
            ctlPty += cpy - pathData[len2 - 3];
          }
          cmd = CMD6.C;
          x1 = cpx + p[off++];
          y1 = cpy + p[off++];
          cpx += p[off++];
          cpy += p[off++];
          path2.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
          break;
        case "Q":
          x1 = p[off++];
          y1 = p[off++];
          cpx = p[off++];
          cpy = p[off++];
          cmd = CMD6.Q;
          path2.addData(cmd, x1, y1, cpx, cpy);
          break;
        case "q":
          x1 = p[off++] + cpx;
          y1 = p[off++] + cpy;
          cpx += p[off++];
          cpy += p[off++];
          cmd = CMD6.Q;
          path2.addData(cmd, x1, y1, cpx, cpy);
          break;
        case "T":
          ctlPtx = cpx;
          ctlPty = cpy;
          len2 = path2.len();
          pathData = path2.data;
          if (prevCmd === CMD6.Q) {
            ctlPtx += cpx - pathData[len2 - 4];
            ctlPty += cpy - pathData[len2 - 3];
          }
          cpx = p[off++];
          cpy = p[off++];
          cmd = CMD6.Q;
          path2.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
          break;
        case "t":
          ctlPtx = cpx;
          ctlPty = cpy;
          len2 = path2.len();
          pathData = path2.data;
          if (prevCmd === CMD6.Q) {
            ctlPtx += cpx - pathData[len2 - 4];
            ctlPty += cpy - pathData[len2 - 3];
          }
          cpx += p[off++];
          cpy += p[off++];
          cmd = CMD6.Q;
          path2.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
          break;
        case "A":
          rx = p[off++];
          ry = p[off++];
          psi = p[off++];
          fa = p[off++];
          fs = p[off++];
          x1 = cpx, y1 = cpy;
          cpx = p[off++];
          cpy = p[off++];
          cmd = CMD6.A;
          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path2);
          break;
        case "a":
          rx = p[off++];
          ry = p[off++];
          psi = p[off++];
          fa = p[off++];
          fs = p[off++];
          x1 = cpx, y1 = cpy;
          cpx += p[off++];
          cpy += p[off++];
          cmd = CMD6.A;
          processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path2);
          break;
      }
    }
    if (cmdStr === "z" || cmdStr === "Z") {
      cmd = CMD6.Z;
      path2.addData(cmd);
      cpx = subpathX;
      cpy = subpathY;
    }
    prevCmd = cmd;
  }
  path2.toStatic();
  return path2;
}
class SVGPath extends Path_default {
  applyTransform(m2) {
  }
}
function isPathProxy(path2) {
  return path2.setData != null;
}
function createPathOptions(str, opts) {
  const pathProxy = createPathProxyFromString(str);
  const innerOpts = extend({}, opts);
  innerOpts.buildPath = function(path2) {
    if (isPathProxy(path2)) {
      path2.setData(pathProxy.data);
      const ctx = path2.getContext();
      if (ctx) {
        path2.rebuildPath(ctx, 1);
      }
    } else {
      const ctx = path2;
      pathProxy.rebuildPath(ctx, 1);
    }
  };
  innerOpts.applyTransform = function(m2) {
    transformPath_default(pathProxy, m2);
    this.dirtyShape();
  };
  return innerOpts;
}
function createFromString(str, opts) {
  return new SVGPath(createPathOptions(str, opts));
}
function extendFromString(str, defaultOpts) {
  const innerOpts = createPathOptions(str, defaultOpts);
  class Sub extends SVGPath {
    constructor(opts) {
      super(opts);
      this.applyTransform = innerOpts.applyTransform;
      this.buildPath = innerOpts.buildPath;
    }
  }
  return Sub;
}
function mergePath(pathEls, opts) {
  const pathList = [];
  const len2 = pathEls.length;
  for (let i = 0; i < len2; i++) {
    const pathEl = pathEls[i];
    if (!pathEl.path) {
      pathEl.createPathProxy();
    }
    if (pathEl.shapeChanged()) {
      pathEl.buildPath(pathEl.path, pathEl.shape, true);
    }
    pathList.push(pathEl.path);
  }
  const pathBundle = new Path_default(opts);
  pathBundle.createPathProxy();
  pathBundle.buildPath = function(path2) {
    if (isPathProxy(path2)) {
      path2.appendPath(pathList);
      const ctx = path2.getContext();
      if (ctx) {
        path2.rebuildPath(ctx, 1);
      }
    }
  };
  return pathBundle;
}

// node_modules/zrender/src/graphic/Group.ts
class Group6 extends Element_default {
  constructor(opts) {
    super();
    this.isGroup = true;
    this._children = [];
    this.attr(opts);
  }
  childrenRef() {
    return this._children;
  }
  children() {
    return this._children.slice();
  }
  childAt(idx) {
    return this._children[idx];
  }
  childOfName(name) {
    const children = this._children;
    for (let i = 0; i < children.length; i++) {
      if (children[i].name === name) {
        return children[i];
      }
    }
  }
  childCount() {
    return this._children.length;
  }
  add(child) {
    if (child) {
      if (child !== this && child.parent !== this) {
        this._children.push(child);
        this._doAdd(child);
      }
      if (child.__hostTarget) {
        throw "This elemenet has been used as an attachment";
      }
    }
    return this;
  }
  addBefore(child, nextSibling) {
    if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
      const children = this._children;
      const idx = children.indexOf(nextSibling);
      if (idx >= 0) {
        children.splice(idx, 0, child);
        this._doAdd(child);
      }
    }
    return this;
  }
  replaceAt(child, index) {
    const children = this._children;
    const old = children[index];
    if (child && child !== this && child.parent !== this && child !== old) {
      children[index] = child;
      old.parent = null;
      const zr = this.__zr;
      if (zr) {
        old.removeSelfFromZr(zr);
      }
      this._doAdd(child);
    }
    return this;
  }
  _doAdd(child) {
    if (child.parent) {
      child.parent.remove(child);
    }
    child.parent = this;
    const zr = this.__zr;
    if (zr && zr !== child.__zr) {
      child.addSelfToZr(zr);
    }
    zr && zr.refresh();
  }
  remove(child) {
    const zr = this.__zr;
    const children = this._children;
    const idx = indexOf(children, child);
    if (idx < 0) {
      return this;
    }
    children.splice(idx, 1);
    child.parent = null;
    if (zr) {
      child.removeSelfFromZr(zr);
    }
    zr && zr.refresh();
    return this;
  }
  removeAll() {
    const children = this._children;
    const zr = this.__zr;
    for (let i = 0; i < children.length; i++) {
      const child = children[i];
      if (zr) {
        child.removeSelfFromZr(zr);
      }
      child.parent = null;
    }
    children.length = 0;
    return this;
  }
  eachChild(cb, context) {
    const children = this._children;
    for (let i = 0; i < children.length; i++) {
      const child = children[i];
      cb.call(context, child, i);
    }
    return this;
  }
  traverse(cb, context) {
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      const stopped = cb.call(context, child);
      if (child.isGroup && !stopped) {
        child.traverse(cb, context);
      }
    }
    return this;
  }
  addSelfToZr(zr) {
    super.addSelfToZr(zr);
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      child.addSelfToZr(zr);
    }
  }
  removeSelfFromZr(zr) {
    super.removeSelfFromZr(zr);
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      child.removeSelfFromZr(zr);
    }
  }
  getBoundingRect(includeChildren) {
    const tmpRect2 = new BoundingRect_default(0, 0, 0, 0);
    const children = includeChildren || this._children;
    const tmpMat = [];
    let rect = null;
    for (let i = 0; i < children.length; i++) {
      const child = children[i];
      if (child.ignore || child.invisible) {
        continue;
      }
      const childRect = child.getBoundingRect();
      const transform = child.getLocalTransform(tmpMat);
      if (transform) {
        BoundingRect_default.applyTransform(tmpRect2, childRect, transform);
        rect = rect || tmpRect2.clone();
        rect.union(tmpRect2);
      } else {
        rect = rect || childRect.clone();
        rect.union(childRect);
      }
    }
    return rect || tmpRect2;
  }
}
Group6.prototype.type = "group";
const Group_default = Group6;

// node_modules/zrender/src/graphic/Image.ts
const DEFAULT_IMAGE_STYLE = defaults({
  x: 0,
  y: 0
}, DEFAULT_COMMON_STYLE);
const DEFAULT_IMAGE_ANIMATION_PROPS = {
  style: defaults({
    x: true,
    y: true,
    width: true,
    height: true,
    sx: true,
    sy: true,
    sWidth: true,
    sHeight: true
  }, DEFAULT_COMMON_ANIMATION_PROPS.style)
};
class ZRImage extends Displayable_default {
  createStyle(obj) {
    return createObject(DEFAULT_IMAGE_STYLE, obj);
  }
  _getAnimationStyleProps() {
    return DEFAULT_IMAGE_ANIMATION_PROPS;
  }
  getBoundingRect() {
    const style2 = this.style;
    if (!this._rect) {
      this._rect = new BoundingRect_default(style2.x || 0, style2.y || 0, style2.width || 0, style2.height || 0);
    }
    return this._rect;
  }
}
ZRImage.prototype.type = "image";
const Image_default = ZRImage;

// node_modules/zrender/src/graphic/shape/Circle.ts
class CircleShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r = 0;
  }
}
class Circle2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new CircleShape();
  }
  buildPath(ctx, shape, inBundle) {
    if (inBundle) {
      ctx.moveTo(shape.cx + shape.r, shape.cy);
    }
    ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2);
  }
}
Circle2.prototype.type = "circle";
const Circle_default = Circle2;

// node_modules/zrender/src/graphic/helper/roundRect.ts
function buildPath2(ctx, shape) {
  let x = shape.x;
  let y = shape.y;
  let width = shape.width;
  let height = shape.height;
  let r = shape.r;
  let r1;
  let r2;
  let r3;
  let r4;
  if (width < 0) {
    x = x + width;
    width = -width;
  }
  if (height < 0) {
    y = y + height;
    height = -height;
  }
  if (typeof r === "number") {
    r1 = r2 = r3 = r4 = r;
  } else if (r instanceof Array) {
    if (r.length === 1) {
      r1 = r2 = r3 = r4 = r[0];
    } else if (r.length === 2) {
      r1 = r3 = r[0];
      r2 = r4 = r[1];
    } else if (r.length === 3) {
      r1 = r[0];
      r2 = r4 = r[1];
      r3 = r[2];
    } else {
      r1 = r[0];
      r2 = r[1];
      r3 = r[2];
      r4 = r[3];
    }
  } else {
    r1 = r2 = r3 = r4 = 0;
  }
  let total;
  if (r1 + r2 > width) {
    total = r1 + r2;
    r1 *= width / total;
    r2 *= width / total;
  }
  if (r3 + r4 > width) {
    total = r3 + r4;
    r3 *= width / total;
    r4 *= width / total;
  }
  if (r2 + r3 > height) {
    total = r2 + r3;
    r2 *= height / total;
    r3 *= height / total;
  }
  if (r1 + r4 > height) {
    total = r1 + r4;
    r1 *= height / total;
    r4 *= height / total;
  }
  ctx.moveTo(x + r1, y);
  ctx.lineTo(x + width - r2, y);
  r2 !== 0 && ctx.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
  ctx.lineTo(x + width, y + height - r3);
  r3 !== 0 && ctx.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
  ctx.lineTo(x + r4, y + height);
  r4 !== 0 && ctx.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
  ctx.lineTo(x, y + r1);
  r1 !== 0 && ctx.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
}

// node_modules/zrender/src/graphic/helper/subPixelOptimize.ts
const round = Math.round;
function subPixelOptimizeLine(outputShape, inputShape, style2) {
  if (!inputShape) {
    return;
  }
  const x1 = inputShape.x1;
  const x2 = inputShape.x2;
  const y1 = inputShape.y1;
  const y2 = inputShape.y2;
  outputShape.x1 = x1;
  outputShape.x2 = x2;
  outputShape.y1 = y1;
  outputShape.y2 = y2;
  const lineWidth = style2 && style2.lineWidth;
  if (!lineWidth) {
    return outputShape;
  }
  if (round(x1 * 2) === round(x2 * 2)) {
    outputShape.x1 = outputShape.x2 = subPixelOptimize(x1, lineWidth, true);
  }
  if (round(y1 * 2) === round(y2 * 2)) {
    outputShape.y1 = outputShape.y2 = subPixelOptimize(y1, lineWidth, true);
  }
  return outputShape;
}
function subPixelOptimizeRect(outputShape, inputShape, style2) {
  if (!inputShape) {
    return;
  }
  const originX = inputShape.x;
  const originY = inputShape.y;
  const originWidth = inputShape.width;
  const originHeight = inputShape.height;
  outputShape.x = originX;
  outputShape.y = originY;
  outputShape.width = originWidth;
  outputShape.height = originHeight;
  const lineWidth = style2 && style2.lineWidth;
  if (!lineWidth) {
    return outputShape;
  }
  outputShape.x = subPixelOptimize(originX, lineWidth, true);
  outputShape.y = subPixelOptimize(originY, lineWidth, true);
  outputShape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);
  outputShape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);
  return outputShape;
}
function subPixelOptimize(position2, lineWidth, positiveOrNegative) {
  if (!lineWidth) {
    return position2;
  }
  const doubledPosition = round(position2 * 2);
  return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
}

// node_modules/zrender/src/graphic/shape/Rect.ts
class RectShape {
  constructor() {
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
  }
}
const subPixelOptimizeOutputShape2 = {};
class Rect3 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new RectShape();
  }
  buildPath(ctx, shape) {
    let x;
    let y;
    let width;
    let height;
    if (this.subPixelOptimize) {
      const optimizedShape = subPixelOptimizeRect(subPixelOptimizeOutputShape2, shape, this.style);
      x = optimizedShape.x;
      y = optimizedShape.y;
      width = optimizedShape.width;
      height = optimizedShape.height;
      optimizedShape.r = shape.r;
      shape = optimizedShape;
    } else {
      x = shape.x;
      y = shape.y;
      width = shape.width;
      height = shape.height;
    }
    if (!shape.r) {
      ctx.rect(x, y, width, height);
    } else {
      buildPath2(ctx, shape);
    }
  }
  isZeroArea() {
    return !this.shape.width || !this.shape.height;
  }
}
Rect3.prototype.type = "rect";
const Rect_default = Rect3;

// node_modules/zrender/src/graphic/shape/Ellipse.ts
class EllipseShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.rx = 0;
    this.ry = 0;
  }
}
class Ellipse2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new EllipseShape();
  }
  buildPath(ctx, shape) {
    const k = 0.5522848;
    const x = shape.cx;
    const y = shape.cy;
    const a = shape.rx;
    const b = shape.ry;
    const ox = a * k;
    const oy = b * k;
    ctx.moveTo(x - a, y);
    ctx.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);
    ctx.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);
    ctx.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);
    ctx.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);
    ctx.closePath();
  }
}
Ellipse2.prototype.type = "ellipse";
const Ellipse_default = Ellipse2;

// node_modules/zrender/src/graphic/shape/Line.ts
const subPixelOptimizeOutputShape = {};
class LineShape {
  constructor() {
    this.x1 = 0;
    this.y1 = 0;
    this.x2 = 0;
    this.y2 = 0;
    this.percent = 1;
  }
}
class Line2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new LineShape();
  }
  buildPath(ctx, shape) {
    let x1;
    let y1;
    let x2;
    let y2;
    if (this.subPixelOptimize) {
      const optimizedShape = subPixelOptimizeLine(subPixelOptimizeOutputShape, shape, this.style);
      x1 = optimizedShape.x1;
      y1 = optimizedShape.y1;
      x2 = optimizedShape.x2;
      y2 = optimizedShape.y2;
    } else {
      x1 = shape.x1;
      y1 = shape.y1;
      x2 = shape.x2;
      y2 = shape.y2;
    }
    const percent = shape.percent;
    if (percent === 0) {
      return;
    }
    ctx.moveTo(x1, y1);
    if (percent < 1) {
      x2 = x1 * (1 - percent) + x2 * percent;
      y2 = y1 * (1 - percent) + y2 * percent;
    }
    ctx.lineTo(x2, y2);
  }
  pointAt(p) {
    const shape = this.shape;
    return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
  }
}
Line2.prototype.type = "line";
const Line_default = Line2;

// node_modules/zrender/src/graphic/helper/smoothSpline.ts
function interpolate(p0, p1, p2, p3, t, t2, t3) {
  const v0 = (p2 - p0) * 0.5;
  const v12 = (p3 - p1) * 0.5;
  return (2 * (p1 - p2) + v0 + v12) * t3 + (-3 * (p1 - p2) - 2 * v0 - v12) * t2 + v0 * t + p1;
}
function smoothSpline_default(points9, isLoop) {
  const len2 = points9.length;
  const ret = [];
  let distance2 = 0;
  for (let i = 1; i < len2; i++) {
    distance2 += distance(points9[i - 1], points9[i]);
  }
  let segs = distance2 / 2;
  segs = segs < len2 ? len2 : segs;
  for (let i = 0; i < segs; i++) {
    const pos = i / (segs - 1) * (isLoop ? len2 : len2 - 1);
    const idx = Math.floor(pos);
    const w = pos - idx;
    let p0;
    let p1 = points9[idx % len2];
    let p2;
    let p3;
    if (!isLoop) {
      p0 = points9[idx === 0 ? idx : idx - 1];
      p2 = points9[idx > len2 - 2 ? len2 - 1 : idx + 1];
      p3 = points9[idx > len2 - 3 ? len2 - 1 : idx + 2];
    } else {
      p0 = points9[(idx - 1 + len2) % len2];
      p2 = points9[(idx + 1) % len2];
      p3 = points9[(idx + 2) % len2];
    }
    const w2 = w * w;
    const w3 = w * w2;
    ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
  }
  return ret;
}

// node_modules/zrender/src/graphic/helper/smoothBezier.ts
function smoothBezier_default(points9, smooth, isLoop, constraint) {
  const cps = [];
  const v4 = [];
  const v12 = [];
  const v22 = [];
  let prevPoint;
  let nextPoint;
  let min4;
  let max4;
  if (constraint) {
    min4 = [Infinity, Infinity];
    max4 = [-Infinity, -Infinity];
    for (let i = 0, len2 = points9.length; i < len2; i++) {
      min3(min4, min4, points9[i]);
      max3(max4, max4, points9[i]);
    }
    min3(min4, min4, constraint[0]);
    max3(max4, max4, constraint[1]);
  }
  for (let i = 0, len2 = points9.length; i < len2; i++) {
    const point = points9[i];
    if (isLoop) {
      prevPoint = points9[i ? i - 1 : len2 - 1];
      nextPoint = points9[(i + 1) % len2];
    } else {
      if (i === 0 || i === len2 - 1) {
        cps.push(clone3(points9[i]));
        continue;
      } else {
        prevPoint = points9[i - 1];
        nextPoint = points9[i + 1];
      }
    }
    sub(v4, nextPoint, prevPoint);
    scale2(v4, v4, smooth);
    let d0 = distance(point, prevPoint);
    let d1 = distance(point, nextPoint);
    const sum2 = d0 + d1;
    if (sum2 !== 0) {
      d0 /= sum2;
      d1 /= sum2;
    }
    scale2(v12, v4, -d0);
    scale2(v22, v4, d1);
    const cp02 = add([], point, v12);
    const cp12 = add([], point, v22);
    if (constraint) {
      max3(cp02, cp02, min4);
      min3(cp02, cp02, max4);
      max3(cp12, cp12, min4);
      min3(cp12, cp12, max4);
    }
    cps.push(cp02);
    cps.push(cp12);
  }
  if (isLoop) {
    cps.push(cps.shift());
  }
  return cps;
}

// node_modules/zrender/src/graphic/helper/poly.ts
function buildPath(ctx, shape, closePath) {
  const smooth = shape.smooth;
  let points9 = shape.points;
  if (points9 && points9.length >= 2) {
    if (smooth && smooth !== "spline") {
      const controlPoints = smoothBezier_default(points9, smooth, closePath, shape.smoothConstraint);
      ctx.moveTo(points9[0][0], points9[0][1]);
      const len2 = points9.length;
      for (let i = 0; i < (closePath ? len2 : len2 - 1); i++) {
        const cp12 = controlPoints[i * 2];
        const cp2 = controlPoints[i * 2 + 1];
        const p = points9[(i + 1) % len2];
        ctx.bezierCurveTo(cp12[0], cp12[1], cp2[0], cp2[1], p[0], p[1]);
      }
    } else {
      if (smooth === "spline") {
        points9 = smoothSpline_default(points9, closePath);
      }
      ctx.moveTo(points9[0][0], points9[0][1]);
      for (let i = 1, l = points9.length; i < l; i++) {
        ctx.lineTo(points9[i][0], points9[i][1]);
      }
    }
    closePath && ctx.closePath();
  }
}

// node_modules/zrender/src/graphic/shape/Polygon.ts
class PolygonShape {
  constructor() {
    this.points = null;
    this.smooth = 0;
    this.smoothConstraint = null;
  }
}
class Polygon2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new PolygonShape();
  }
  buildPath(ctx, shape) {
    buildPath(ctx, shape, true);
  }
}
Polygon2.prototype.type = "polygon";
const Polygon_default = Polygon2;

// node_modules/zrender/src/graphic/shape/Polyline.ts
class PolylineShape {
  constructor() {
    this.points = null;
    this.percent = 1;
    this.smooth = 0;
    this.smoothConstraint = null;
  }
}
class Polyline4 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new PolylineShape();
  }
  buildPath(ctx, shape) {
    buildPath(ctx, shape, false);
  }
}
Polyline4.prototype.type = "polyline";
const Polyline_default = Polyline4;

// node_modules/zrender/src/graphic/Gradient.ts
class Gradient6 {
  constructor(colorStops) {
    this.colorStops = colorStops || [];
  }
  addColorStop(offset, color8) {
    this.colorStops.push({
      offset,
      color: color8
    });
  }
}

// node_modules/zrender/src/graphic/LinearGradient.ts
class LinearGradient4 extends Gradient6 {
  constructor(x, y, x2, y2, colorStops, globalCoord) {
    super(colorStops);
    this.x = x == null ? 0 : x;
    this.y = y == null ? 0 : y;
    this.x2 = x2 == null ? 1 : x2;
    this.y2 = y2 == null ? 0 : y2;
    this.type = "linear";
    this.global = globalCoord || false;
  }
}

// node_modules/zrender/src/graphic/TSpan.ts
const DEFAULT_TSPAN_STYLE = defaults({
  strokeFirst: true,
  font: DEFAULT_FONT,
  x: 0,
  y: 0,
  textAlign: "left",
  textBaseline: "top"
}, DEFAULT_PATH_STYLE);
class TSpan3 extends Displayable_default {
  hasStroke() {
    const style2 = this.style;
    const stroke = style2.stroke;
    return stroke != null && stroke !== "none" && style2.lineWidth > 0;
  }
  hasFill() {
    const style2 = this.style;
    const fill = style2.fill;
    return fill != null && fill !== "none";
  }
  createStyle(obj) {
    return createObject(DEFAULT_TSPAN_STYLE, obj);
  }
  setBoundingRect(rect) {
    this._rect = rect;
  }
  getBoundingRect() {
    const style2 = this.style;
    if (!this._rect) {
      let text11 = style2.text;
      text11 != null ? text11 += "" : text11 = "";
      const rect = getBoundingRect(text11, style2.font, style2.textAlign, style2.textBaseline);
      rect.x += style2.x || 0;
      rect.y += style2.y || 0;
      if (this.hasStroke()) {
        const w = style2.lineWidth;
        rect.x -= w / 2;
        rect.y -= w / 2;
        rect.width += w;
        rect.height += w;
      }
      this._rect = rect;
    }
    return this._rect;
  }
}
TSpan3.prototype.type = "tspan";
const TSpan_default = TSpan3;

// node_modules/zrender/src/tool/parseSVG.ts
const DILIMITER_REG = /[\s,]+/;
function parseXML(svg2) {
  if (isString(svg2)) {
    const parser = new DOMParser();
    svg2 = parser.parseFromString(svg2, "text/xml");
  }
  let svgNode = svg2;
  if (svgNode.nodeType === 9) {
    svgNode = svgNode.firstChild;
  }
  while (svgNode.nodeName.toLowerCase() !== "svg" || svgNode.nodeType !== 1) {
    svgNode = svgNode.nextSibling;
  }
  return svgNode;
}
let nodeParsers;
class SVGParser {
  constructor() {
    this._defs = {};
    this._root = null;
    this._isDefine = false;
    this._isText = false;
  }
  parse(xml, opt) {
    opt = opt || {};
    const svg2 = parseXML(xml);
    if (!svg2) {
      throw new Error("Illegal svg");
    }
    let root = new Group_default();
    this._root = root;
    const viewBox = svg2.getAttribute("viewBox") || "";
    let width = parseFloat(svg2.getAttribute("width") || opt.width);
    let height = parseFloat(svg2.getAttribute("height") || opt.height);
    isNaN(width) && (width = null);
    isNaN(height) && (height = null);
    parseAttributes(svg2, root, null, true);
    let child = svg2.firstChild;
    while (child) {
      this._parseNode(child, root);
      child = child.nextSibling;
    }
    let viewBoxRect;
    let viewBoxTransform;
    if (viewBox) {
      const viewBoxArr = trim(viewBox).split(DILIMITER_REG);
      if (viewBoxArr.length >= 4) {
        viewBoxRect = {
          x: parseFloat(viewBoxArr[0] || 0),
          y: parseFloat(viewBoxArr[1] || 0),
          width: parseFloat(viewBoxArr[2]),
          height: parseFloat(viewBoxArr[3])
        };
      }
    }
    if (viewBoxRect && width != null && height != null) {
      viewBoxTransform = makeViewBoxTransform(viewBoxRect, width, height);
      if (!opt.ignoreViewBox) {
        const elRoot = root;
        root = new Group_default();
        root.add(elRoot);
        elRoot.scaleX = elRoot.scaleY = viewBoxTransform.scale;
        elRoot.x = viewBoxTransform.x;
        elRoot.y = viewBoxTransform.y;
      }
    }
    if (!opt.ignoreRootClip && width != null && height != null) {
      root.setClipPath(new Rect_default({
        shape: {
          x: 0,
          y: 0,
          width,
          height
        }
      }));
    }
    return {
      root,
      width,
      height,
      viewBoxRect,
      viewBoxTransform
    };
  }
  _parseNode(xmlNode, parentGroup) {
    const nodeName = xmlNode.nodeName.toLowerCase();
    if (nodeName === "defs") {
      this._isDefine = true;
    } else if (nodeName === "text") {
      this._isText = true;
    }
    let el;
    if (this._isDefine) {
      const parser = defineParsers[nodeName];
      if (parser) {
        const def = parser.call(this, xmlNode);
        const id = xmlNode.getAttribute("id");
        if (id) {
          this._defs[id] = def;
        }
      }
    } else {
      const parser = nodeParsers[nodeName];
      if (parser) {
        el = parser.call(this, xmlNode, parentGroup);
        parentGroup.add(el);
      }
    }
    if (el) {
      let child = xmlNode.firstChild;
      while (child) {
        if (child.nodeType === 1) {
          this._parseNode(child, el);
        }
        if (child.nodeType === 3 && this._isText) {
          this._parseText(child, el);
        }
        child = child.nextSibling;
      }
    }
    if (nodeName === "defs") {
      this._isDefine = false;
    } else if (nodeName === "text") {
      this._isText = false;
    }
  }
  _parseText(xmlNode, parentGroup) {
    if (xmlNode.nodeType === 1) {
      const dx = xmlNode.getAttribute("dx") || 0;
      const dy = xmlNode.getAttribute("dy") || 0;
      this._textX += parseFloat(dx);
      this._textY += parseFloat(dy);
    }
    const text11 = new TSpan_default({
      style: {
        text: xmlNode.textContent
      },
      x: this._textX || 0,
      y: this._textY || 0
    });
    inheritStyle(parentGroup, text11);
    parseAttributes(xmlNode, text11, this._defs);
    const textStyle2 = text11.style;
    const fontSize = textStyle2.fontSize;
    if (fontSize && fontSize < 9) {
      textStyle2.fontSize = 9;
      text11.scaleX *= fontSize / 9;
      text11.scaleY *= fontSize / 9;
    }
    const font = (textStyle2.fontSize || textStyle2.fontFamily) && [textStyle2.fontStyle, textStyle2.fontWeight, (textStyle2.fontSize || 12) + "px", textStyle2.fontFamily || "sans-serif"].join(" ");
    textStyle2.font = font;
    const rect = text11.getBoundingRect();
    this._textX += rect.width;
    parentGroup.add(text11);
    return text11;
  }
}
SVGParser.internalField = function() {
  nodeParsers = {
    g: function(xmlNode, parentGroup) {
      const g = new Group_default();
      inheritStyle(parentGroup, g);
      parseAttributes(xmlNode, g, this._defs);
      return g;
    },
    rect: function(xmlNode, parentGroup) {
      const rect = new Rect_default();
      inheritStyle(parentGroup, rect);
      parseAttributes(xmlNode, rect, this._defs);
      rect.setShape({
        x: parseFloat(xmlNode.getAttribute("x") || "0"),
        y: parseFloat(xmlNode.getAttribute("y") || "0"),
        width: parseFloat(xmlNode.getAttribute("width") || "0"),
        height: parseFloat(xmlNode.getAttribute("height") || "0")
      });
      return rect;
    },
    circle: function(xmlNode, parentGroup) {
      const circle = new Circle_default();
      inheritStyle(parentGroup, circle);
      parseAttributes(xmlNode, circle, this._defs);
      circle.setShape({
        cx: parseFloat(xmlNode.getAttribute("cx") || "0"),
        cy: parseFloat(xmlNode.getAttribute("cy") || "0"),
        r: parseFloat(xmlNode.getAttribute("r") || "0")
      });
      return circle;
    },
    line: function(xmlNode, parentGroup) {
      const line3 = new Line_default();
      inheritStyle(parentGroup, line3);
      parseAttributes(xmlNode, line3, this._defs);
      line3.setShape({
        x1: parseFloat(xmlNode.getAttribute("x1") || "0"),
        y1: parseFloat(xmlNode.getAttribute("y1") || "0"),
        x2: parseFloat(xmlNode.getAttribute("x2") || "0"),
        y2: parseFloat(xmlNode.getAttribute("y2") || "0")
      });
      return line3;
    },
    ellipse: function(xmlNode, parentGroup) {
      const ellipse = new Ellipse_default();
      inheritStyle(parentGroup, ellipse);
      parseAttributes(xmlNode, ellipse, this._defs);
      ellipse.setShape({
        cx: parseFloat(xmlNode.getAttribute("cx") || "0"),
        cy: parseFloat(xmlNode.getAttribute("cy") || "0"),
        rx: parseFloat(xmlNode.getAttribute("rx") || "0"),
        ry: parseFloat(xmlNode.getAttribute("ry") || "0")
      });
      return ellipse;
    },
    polygon: function(xmlNode, parentGroup) {
      const pointsStr = xmlNode.getAttribute("points");
      let pointsArr;
      if (pointsStr) {
        pointsArr = parsePoints(pointsStr);
      }
      const polygon = new Polygon_default({
        shape: {
          points: pointsArr || []
        }
      });
      inheritStyle(parentGroup, polygon);
      parseAttributes(xmlNode, polygon, this._defs);
      return polygon;
    },
    polyline: function(xmlNode, parentGroup) {
      const path2 = new Path_default();
      inheritStyle(parentGroup, path2);
      parseAttributes(xmlNode, path2, this._defs);
      const pointsStr = xmlNode.getAttribute("points");
      let pointsArr;
      if (pointsStr) {
        pointsArr = parsePoints(pointsStr);
      }
      const polyline = new Polyline_default({
        shape: {
          points: pointsArr || []
        }
      });
      return polyline;
    },
    image: function(xmlNode, parentGroup) {
      const img = new Image_default();
      inheritStyle(parentGroup, img);
      parseAttributes(xmlNode, img, this._defs);
      img.setStyle({
        image: xmlNode.getAttribute("xlink:href"),
        x: +xmlNode.getAttribute("x"),
        y: +xmlNode.getAttribute("y"),
        width: +xmlNode.getAttribute("width"),
        height: +xmlNode.getAttribute("height")
      });
      return img;
    },
    text: function(xmlNode, parentGroup) {
      const x = xmlNode.getAttribute("x") || "0";
      const y = xmlNode.getAttribute("y") || "0";
      const dx = xmlNode.getAttribute("dx") || "0";
      const dy = xmlNode.getAttribute("dy") || "0";
      this._textX = parseFloat(x) + parseFloat(dx);
      this._textY = parseFloat(y) + parseFloat(dy);
      const g = new Group_default();
      inheritStyle(parentGroup, g);
      parseAttributes(xmlNode, g, this._defs);
      return g;
    },
    tspan: function(xmlNode, parentGroup) {
      const x = xmlNode.getAttribute("x");
      const y = xmlNode.getAttribute("y");
      if (x != null) {
        this._textX = parseFloat(x);
      }
      if (y != null) {
        this._textY = parseFloat(y);
      }
      const dx = xmlNode.getAttribute("dx") || 0;
      const dy = xmlNode.getAttribute("dy") || 0;
      const g = new Group_default();
      inheritStyle(parentGroup, g);
      parseAttributes(xmlNode, g, this._defs);
      this._textX += dx;
      this._textY += dy;
      return g;
    },
    path: function(xmlNode, parentGroup) {
      const d = xmlNode.getAttribute("d") || "";
      const path2 = createFromString(d);
      inheritStyle(parentGroup, path2);
      parseAttributes(xmlNode, path2, this._defs);
      return path2;
    }
  };
}();
const defineParsers = {
  lineargradient: function(xmlNode) {
    const x1 = parseInt(xmlNode.getAttribute("x1") || "0", 10);
    const y1 = parseInt(xmlNode.getAttribute("y1") || "0", 10);
    const x2 = parseInt(xmlNode.getAttribute("x2") || "10", 10);
    const y2 = parseInt(xmlNode.getAttribute("y2") || "0", 10);
    const gradient = new LinearGradient4(x1, y1, x2, y2);
    _parseGradientColorStops(xmlNode, gradient);
    return gradient;
  }
};
function _parseGradientColorStops(xmlNode, gradient) {
  let stop2 = xmlNode.firstChild;
  while (stop2) {
    if (stop2.nodeType === 1) {
      const offsetStr = stop2.getAttribute("offset");
      let offset;
      if (offsetStr.indexOf("%") > 0) {
        offset = parseInt(offsetStr, 10) / 100;
      } else if (offsetStr) {
        offset = parseFloat(offsetStr);
      } else {
        offset = 0;
      }
      const stopColor = stop2.getAttribute("stop-color") || "#000000";
      gradient.colorStops.push({
        offset,
        color: stopColor
      });
    }
    stop2 = stop2.nextSibling;
  }
}
function inheritStyle(parent, child) {
  if (parent && parent.__inheritedStyle) {
    if (!child.__inheritedStyle) {
      child.__inheritedStyle = {};
    }
    defaults(child.__inheritedStyle, parent.__inheritedStyle);
  }
}
function parsePoints(pointsString) {
  const list = trim(pointsString).split(DILIMITER_REG);
  const points9 = [];
  for (let i = 0; i < list.length; i += 2) {
    const x = parseFloat(list[i]);
    const y = parseFloat(list[i + 1]);
    points9.push([x, y]);
  }
  return points9;
}
const attributesMap = {
  fill: "fill",
  stroke: "stroke",
  "stroke-width": "lineWidth",
  opacity: "opacity",
  "fill-opacity": "fillOpacity",
  "stroke-opacity": "strokeOpacity",
  "stroke-dasharray": "lineDash",
  "stroke-dashoffset": "lineDashOffset",
  "stroke-linecap": "lineCap",
  "stroke-linejoin": "lineJoin",
  "stroke-miterlimit": "miterLimit",
  "font-family": "fontFamily",
  "font-size": "fontSize",
  "font-style": "fontStyle",
  "font-weight": "fontWeight",
  "text-align": "textAlign",
  "alignment-baseline": "textBaseline"
};
function parseAttributes(xmlNode, el, defs, onlyInlineStyle) {
  const disp = el;
  const zrStyle = disp.__inheritedStyle || {};
  if (xmlNode.nodeType === 1) {
    parseTransformAttribute(xmlNode, el);
    extend(zrStyle, parseStyleAttribute(xmlNode));
    if (!onlyInlineStyle) {
      for (let svgAttrName in attributesMap) {
        if (attributesMap.hasOwnProperty(svgAttrName)) {
          const attrValue = xmlNode.getAttribute(svgAttrName);
          if (attrValue != null) {
            zrStyle[attributesMap[svgAttrName]] = attrValue;
          }
        }
      }
    }
  }
  disp.style = disp.style || {};
  zrStyle.fill != null && (disp.style.fill = getPaint(zrStyle.fill, defs));
  zrStyle.stroke != null && (disp.style.stroke = getPaint(zrStyle.stroke, defs));
  each(["lineWidth", "opacity", "fillOpacity", "strokeOpacity", "miterLimit", "fontSize"], function(propName) {
    zrStyle[propName] != null && (disp.style[propName] = parseFloat(zrStyle[propName]));
  });
  if (!zrStyle.textBaseline || zrStyle.textBaseline === "auto") {
    zrStyle.textBaseline = "alphabetic";
  }
  if (zrStyle.textBaseline === "alphabetic") {
    zrStyle.textBaseline = "bottom";
  }
  if (zrStyle.textAlign === "start") {
    zrStyle.textAlign = "left";
  }
  if (zrStyle.textAlign === "end") {
    zrStyle.textAlign = "right";
  }
  each(["lineDashOffset", "lineCap", "lineJoin", "fontWeight", "fontFamily", "fontStyle", "textAlign", "textBaseline"], function(propName) {
    zrStyle[propName] != null && (disp.style[propName] = zrStyle[propName]);
  });
  if (zrStyle.lineDash) {
    disp.style.lineDash = map2(trim(zrStyle.lineDash).split(DILIMITER_REG), function(str) {
      return parseFloat(str);
    });
  }
  disp.__inheritedStyle = zrStyle;
}
const urlRegex = /url\(\s*#(.*?)\)/;
function getPaint(str, defs) {
  const urlMatch = defs && str && str.match(urlRegex);
  if (urlMatch) {
    const url = trim(urlMatch[1]);
    const def = defs[url];
    return def;
  }
  return str;
}
const transformRegex = /(translate|scale|rotate|skewX|skewY|matrix)\(([\-\s0-9\.e,]*)\)/g;
function parseTransformAttribute(xmlNode, node) {
  let transform = xmlNode.getAttribute("transform");
  if (transform) {
    transform = transform.replace(/,/g, " ");
    const transformOps = [];
    let m2 = null;
    transform.replace(transformRegex, function(str, type, value) {
      transformOps.push(type, value);
      return "";
    });
    for (let i = transformOps.length - 1; i > 0; i -= 2) {
      let value = transformOps[i];
      let type = transformOps[i - 1];
      let valueArr;
      m2 = m2 || create();
      switch (type) {
        case "translate":
          valueArr = trim(value).split(DILIMITER_REG);
          translate(m2, m2, [parseFloat(valueArr[0]), parseFloat(valueArr[1] || "0")]);
          break;
        case "scale":
          valueArr = trim(value).split(DILIMITER_REG);
          scale(m2, m2, [parseFloat(valueArr[0]), parseFloat(valueArr[1] || valueArr[0])]);
          break;
        case "rotate":
          valueArr = trim(value).split(DILIMITER_REG);
          rotate(m2, m2, parseFloat(valueArr[0]));
          break;
        case "skew":
          valueArr = trim(value).split(DILIMITER_REG);
          console.warn("Skew transform is not supported yet");
          break;
        case "matrix":
          valueArr = trim(value).split(DILIMITER_REG);
          m2[0] = parseFloat(valueArr[0]);
          m2[1] = parseFloat(valueArr[1]);
          m2[2] = parseFloat(valueArr[2]);
          m2[3] = parseFloat(valueArr[3]);
          m2[4] = parseFloat(valueArr[4]);
          m2[5] = parseFloat(valueArr[5]);
          break;
      }
    }
    node.setLocalTransform(m2);
  }
}
const styleRegex = /([^\s:;]+)\s*:\s*([^:;]+)/g;
function parseStyleAttribute(xmlNode) {
  const style2 = xmlNode.getAttribute("style");
  const result = {};
  if (!style2) {
    return result;
  }
  const styleList = {};
  styleRegex.lastIndex = 0;
  let styleRegResult;
  while ((styleRegResult = styleRegex.exec(style2)) != null) {
    styleList[styleRegResult[1]] = styleRegResult[2];
  }
  for (const svgAttrName in attributesMap) {
    if (attributesMap.hasOwnProperty(svgAttrName) && styleList[svgAttrName] != null) {
      result[attributesMap[svgAttrName]] = styleList[svgAttrName];
    }
  }
  return result;
}
function makeViewBoxTransform(viewBoxRect, width, height) {
  const scaleX = width / viewBoxRect.width;
  const scaleY = height / viewBoxRect.height;
  const scale4 = Math.min(scaleX, scaleY);
  return {
    scale: scale4,
    x: -(viewBoxRect.x + viewBoxRect.width / 2) * scale4 + width / 2,
    y: -(viewBoxRect.y + viewBoxRect.height / 2) * scale4 + height / 2
  };
}
function parseSVG2(xml, opt) {
  const parser = new SVGParser();
  return parser.parse(xml, opt);
}

// node_modules/zrender/src/graphic/CompoundPath.ts
class CompoundPath2 extends Path_default {
  constructor() {
    super(...arguments);
    this.type = "compound";
  }
  _updatePathDirty() {
    const paths = this.shape.paths;
    let dirtyPath = this.shapeChanged();
    for (let i = 0; i < paths.length; i++) {
      dirtyPath = dirtyPath || paths[i].shapeChanged();
    }
    if (dirtyPath) {
      this.dirtyShape();
    }
  }
  beforeBrush() {
    this._updatePathDirty();
    const paths = this.shape.paths || [];
    const scale4 = this.getGlobalScale();
    for (let i = 0; i < paths.length; i++) {
      if (!paths[i].path) {
        paths[i].createPathProxy();
      }
      paths[i].path.setScale(scale4[0], scale4[1], paths[i].segmentIgnoreThreshold);
    }
  }
  buildPath(ctx, shape) {
    const paths = shape.paths || [];
    for (let i = 0; i < paths.length; i++) {
      paths[i].buildPath(ctx, paths[i].shape, true);
    }
  }
  afterBrush() {
    const paths = this.shape.paths || [];
    for (let i = 0; i < paths.length; i++) {
      paths[i].pathUpdated();
    }
  }
  getBoundingRect() {
    this._updatePathDirty.call(this);
    return Path_default.prototype.getBoundingRect.call(this);
  }
}

// node_modules/zrender/src/graphic/IncrementalDisplayable.ts
const m = [];
class IncrementalDisplayble extends Displayable_default {
  constructor() {
    super(...arguments);
    this.notClear = true;
    this.incremental = true;
    this._displayables = [];
    this._temporaryDisplayables = [];
    this._cursor = 0;
  }
  traverse(cb, context) {
    cb.call(context, this);
  }
  useStyle() {
    this.style = {};
  }
  getCursor() {
    return this._cursor;
  }
  innerAfterBrush() {
    this._cursor = this._displayables.length;
  }
  clearDisplaybles() {
    this._displayables = [];
    this._temporaryDisplayables = [];
    this._cursor = 0;
    this.markRedraw();
    this.notClear = false;
  }
  clearTemporalDisplayables() {
    this._temporaryDisplayables = [];
  }
  addDisplayable(displayable, notPersistent) {
    if (notPersistent) {
      this._temporaryDisplayables.push(displayable);
    } else {
      this._displayables.push(displayable);
    }
    this.markRedraw();
  }
  addDisplayables(displayables, notPersistent) {
    notPersistent = notPersistent || false;
    for (let i = 0; i < displayables.length; i++) {
      this.addDisplayable(displayables[i], notPersistent);
    }
  }
  getDisplayables() {
    return this._displayables;
  }
  getTemporalDisplayables() {
    return this._temporaryDisplayables;
  }
  eachPendingDisplayable(cb) {
    for (let i = this._cursor; i < this._displayables.length; i++) {
      cb && cb(this._displayables[i]);
    }
    for (let i = 0; i < this._temporaryDisplayables.length; i++) {
      cb && cb(this._temporaryDisplayables[i]);
    }
  }
  update() {
    this.updateTransform();
    for (let i = this._cursor; i < this._displayables.length; i++) {
      const displayable = this._displayables[i];
      displayable.parent = this;
      displayable.update();
      displayable.parent = null;
    }
    for (let i = 0; i < this._temporaryDisplayables.length; i++) {
      const displayable = this._temporaryDisplayables[i];
      displayable.parent = this;
      displayable.update();
      displayable.parent = null;
    }
  }
  getBoundingRect() {
    if (!this._rect) {
      const rect = new BoundingRect_default(Infinity, Infinity, -Infinity, -Infinity);
      for (let i = 0; i < this._displayables.length; i++) {
        const displayable = this._displayables[i];
        const childRect = displayable.getBoundingRect().clone();
        if (displayable.needLocalTransform()) {
          childRect.applyTransform(displayable.getLocalTransform(m));
        }
        rect.union(childRect);
      }
      this._rect = rect;
    }
    return this._rect;
  }
  contain(x, y) {
    const localPos = this.transformCoordToLocal(x, y);
    const rect = this.getBoundingRect();
    if (rect.contain(localPos[0], localPos[1])) {
      for (let i = 0; i < this._displayables.length; i++) {
        const displayable = this._displayables[i];
        if (displayable.contain(x, y)) {
          return true;
        }
      }
    }
    return false;
  }
}

// node_modules/zrender/src/graphic/helper/image.ts
const globalImageCache = new LRU2(50);
function findExistImage(newImageOrSrc) {
  if (typeof newImageOrSrc === "string") {
    const cachedImgObj = globalImageCache.get(newImageOrSrc);
    return cachedImgObj && cachedImgObj.image;
  } else {
    return newImageOrSrc;
  }
}
function createOrUpdateImage(newImageOrSrc, image2, hostEl, cb, cbPayload) {
  if (!newImageOrSrc) {
    return image2;
  } else if (typeof newImageOrSrc === "string") {
    if (image2 && image2.__zrImageSrc === newImageOrSrc || !hostEl) {
      return image2;
    }
    const cachedImgObj = globalImageCache.get(newImageOrSrc);
    const pendingWrap = {
      hostEl,
      cb,
      cbPayload
    };
    if (cachedImgObj) {
      image2 = cachedImgObj.image;
      !isImageReady(image2) && cachedImgObj.pending.push(pendingWrap);
    } else {
      image2 = new Image();
      image2.onload = image2.onerror = imageOnLoad;
      globalImageCache.put(newImageOrSrc, image2.__cachedImgObj = {
        image: image2,
        pending: [pendingWrap]
      });
      image2.src = image2.__zrImageSrc = newImageOrSrc;
    }
    return image2;
  } else {
    return newImageOrSrc;
  }
}
function imageOnLoad() {
  const cachedImgObj = this.__cachedImgObj;
  this.onload = this.onerror = this.__cachedImgObj = null;
  for (let i = 0; i < cachedImgObj.pending.length; i++) {
    const pendingWrap = cachedImgObj.pending[i];
    const cb = pendingWrap.cb;
    cb && cb(this, pendingWrap.cbPayload);
    pendingWrap.hostEl.dirty();
  }
  cachedImgObj.pending.length = 0;
}
function isImageReady(image2) {
  return image2 && image2.width && image2.height;
}

// node_modules/zrender/src/graphic/helper/parseText.ts
const STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
function truncateText(text11, containerWidth, font, ellipsis, options) {
  if (!containerWidth) {
    return "";
  }
  const textLines = (text11 + "").split("\n");
  options = prepareTruncateOptions(containerWidth, font, ellipsis, options);
  for (let i = 0, len2 = textLines.length; i < len2; i++) {
    textLines[i] = truncateSingleLine(textLines[i], options);
  }
  return textLines.join("\n");
}
function prepareTruncateOptions(containerWidth, font, ellipsis, options) {
  options = options || {};
  let preparedOpts = extend({}, options);
  preparedOpts.font = font;
  ellipsis = retrieve2(ellipsis, "...");
  preparedOpts.maxIterations = retrieve2(options.maxIterations, 2);
  const minChar = preparedOpts.minChar = retrieve2(options.minChar, 0);
  preparedOpts.cnCharWidth = getWidth("国", font);
  const ascCharWidth = preparedOpts.ascCharWidth = getWidth("a", font);
  preparedOpts.placeholder = retrieve2(options.placeholder, "");
  let contentWidth = containerWidth = Math.max(0, containerWidth - 1);
  for (let i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
    contentWidth -= ascCharWidth;
  }
  let ellipsisWidth = getWidth(ellipsis, font);
  if (ellipsisWidth > contentWidth) {
    ellipsis = "";
    ellipsisWidth = 0;
  }
  contentWidth = containerWidth - ellipsisWidth;
  preparedOpts.ellipsis = ellipsis;
  preparedOpts.ellipsisWidth = ellipsisWidth;
  preparedOpts.contentWidth = contentWidth;
  preparedOpts.containerWidth = containerWidth;
  return preparedOpts;
}
function truncateSingleLine(textLine, options) {
  const containerWidth = options.containerWidth;
  const font = options.font;
  const contentWidth = options.contentWidth;
  if (!containerWidth) {
    return "";
  }
  let lineWidth = getWidth(textLine, font);
  if (lineWidth <= containerWidth) {
    return textLine;
  }
  for (let j = 0; ; j++) {
    if (lineWidth <= contentWidth || j >= options.maxIterations) {
      textLine += options.ellipsis;
      break;
    }
    const subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
    textLine = textLine.substr(0, subLength);
    lineWidth = getWidth(textLine, font);
  }
  if (textLine === "") {
    textLine = options.placeholder;
  }
  return textLine;
}
function estimateLength(text11, contentWidth, ascCharWidth, cnCharWidth) {
  let width = 0;
  let i = 0;
  for (let len2 = text11.length; i < len2 && width < contentWidth; i++) {
    const charCode = text11.charCodeAt(i);
    width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
  }
  return i;
}
function parsePlainText(text11, style2) {
  text11 != null && (text11 += "");
  const overflow = style2.overflow;
  const padding = style2.padding;
  const font = style2.font;
  const truncate = overflow === "truncate";
  const calculatedLineHeight = getLineHeight(font);
  const lineHeight = retrieve2(style2.lineHeight, calculatedLineHeight);
  const truncateLineOverflow = style2.lineOverflow === "truncate";
  let width = style2.width;
  let lines2;
  if (width != null && overflow === "break" || overflow === "breakAll") {
    lines2 = text11 ? wrapText(text11, style2.font, width, overflow === "breakAll", 0).lines : [];
  } else {
    lines2 = text11 ? text11.split("\n") : [];
  }
  const contentHeight = lines2.length * lineHeight;
  const height = retrieve2(style2.height, contentHeight);
  if (contentHeight > height && truncateLineOverflow) {
    const lineCount = Math.floor(height / lineHeight);
    lines2 = lines2.slice(0, lineCount);
  }
  let outerHeight = height;
  let outerWidth = width;
  if (padding) {
    outerHeight += padding[0] + padding[2];
    if (outerWidth != null) {
      outerWidth += padding[1] + padding[3];
    }
  }
  if (text11 && truncate && outerWidth != null) {
    const options = prepareTruncateOptions(width, font, style2.ellipsis, {
      minChar: style2.truncateMinChar,
      placeholder: style2.placeholder
    });
    for (let i = 0; i < lines2.length; i++) {
      lines2[i] = truncateSingleLine(lines2[i], options);
    }
  }
  if (width == null) {
    let maxWidth = 0;
    for (let i = 0; i < lines2.length; i++) {
      maxWidth = Math.max(getWidth(lines2[i], font), maxWidth);
    }
    width = maxWidth;
  }
  return {
    lines: lines2,
    height,
    outerHeight,
    lineHeight,
    calculatedLineHeight,
    contentHeight,
    width
  };
}
class RichTextToken {
}
class RichTextLine {
  constructor(tokens) {
    this.tokens = [];
    if (tokens) {
      this.tokens = tokens;
    }
  }
}
class RichTextContentBlock {
  constructor() {
    this.width = 0;
    this.height = 0;
    this.contentWidth = 0;
    this.contentHeight = 0;
    this.outerWidth = 0;
    this.outerHeight = 0;
    this.lines = [];
  }
}
function parseRichText(text11, style2) {
  const contentBlock = new RichTextContentBlock();
  text11 != null && (text11 += "");
  if (!text11) {
    return contentBlock;
  }
  const topWidth = style2.width;
  const topHeight = style2.height;
  const overflow = style2.overflow;
  let wrapInfo = (overflow === "break" || overflow === "breakAll") && topWidth != null ? {
    width: topWidth,
    accumWidth: 0,
    breakAll: overflow === "breakAll"
  } : null;
  let lastIndex = STYLE_REG.lastIndex = 0;
  let result;
  while ((result = STYLE_REG.exec(text11)) != null) {
    const matchedIndex = result.index;
    if (matchedIndex > lastIndex) {
      pushTokens(contentBlock, text11.substring(lastIndex, matchedIndex), style2, wrapInfo);
    }
    pushTokens(contentBlock, result[2], style2, wrapInfo, result[1]);
    lastIndex = STYLE_REG.lastIndex;
  }
  if (lastIndex < text11.length) {
    pushTokens(contentBlock, text11.substring(lastIndex, text11.length), style2, wrapInfo);
  }
  let pendingList = [];
  let calculatedHeight = 0;
  let calculatedWidth = 0;
  const stlPadding = style2.padding;
  const truncate = overflow === "truncate";
  const truncateLine = style2.lineOverflow === "truncate";
  let prevToken;
  outer:
    for (let i = 0; i < contentBlock.lines.length; i++) {
      const line3 = contentBlock.lines[i];
      let lineHeight = 0;
      let lineWidth = 0;
      for (let j = 0; j < line3.tokens.length; j++) {
        const token = line3.tokens[j];
        const tokenStyle = token.styleName && style2.rich[token.styleName] || {};
        const textPadding = token.textPadding = tokenStyle.padding;
        const paddingH = textPadding ? textPadding[1] + textPadding[3] : 0;
        const font = token.font = tokenStyle.font || style2.font;
        token.contentHeight = getLineHeight(font);
        let tokenHeight = retrieve2(tokenStyle.height, token.contentHeight);
        token.lineHeight = retrieve3(tokenStyle.lineHeight, style2.lineHeight, tokenHeight);
        textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
        token.height = tokenHeight;
        token.align = tokenStyle && tokenStyle.align || style2.align;
        token.verticalAlign = tokenStyle && tokenStyle.verticalAlign || "middle";
        if (truncateLine && topHeight != null && calculatedHeight + token.lineHeight > topHeight) {
          if (j > 0) {
            line3.tokens = line3.tokens.slice(0, j);
            contentBlock.lines = contentBlock.lines.slice(0, i + 1);
          } else {
            contentBlock.lines = contentBlock.lines.slice(0, i);
          }
          break outer;
        }
        let styleTokenWidth = tokenStyle.width;
        let tokenWidthNotSpecified = styleTokenWidth == null || styleTokenWidth === "auto";
        if (typeof styleTokenWidth === "string" && styleTokenWidth.charAt(styleTokenWidth.length - 1) === "%") {
          token.percentWidth = styleTokenWidth;
          pendingList.push(token);
          token.contentWidth = getWidth(token.text, font);
        } else {
          if (tokenWidthNotSpecified) {
            const textBackgroundColor = tokenStyle.backgroundColor;
            let bgImg = textBackgroundColor && textBackgroundColor.image;
            if (bgImg) {
              bgImg = findExistImage(bgImg);
              if (isImageReady(bgImg)) {
                token.width = Math.max(token.width, bgImg.width * tokenHeight / bgImg.height);
              }
            }
          }
          const remainTruncWidth = truncate && topWidth != null ? topWidth - lineWidth : null;
          if (remainTruncWidth != null && remainTruncWidth < token.width) {
            if (!tokenWidthNotSpecified || remainTruncWidth < paddingH) {
              token.text = "";
              token.width = token.contentWidth = 0;
            } else {
              token.text = truncateText(token.text, remainTruncWidth - paddingH, font, style2.ellipsis, {
                minChar: style2.truncateMinChar
              });
              token.width = token.contentWidth = getWidth(token.text, font);
            }
          } else {
            token.contentWidth = getWidth(token.text, font);
          }
        }
        token.width += paddingH;
        lineWidth += token.width;
        tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
        prevToken = token;
      }
      line3.width = lineWidth;
      line3.lineHeight = lineHeight;
      calculatedHeight += lineHeight;
      calculatedWidth = Math.max(calculatedWidth, lineWidth);
    }
  contentBlock.outerWidth = contentBlock.width = retrieve2(topWidth, calculatedWidth);
  contentBlock.outerHeight = contentBlock.height = retrieve2(topHeight, calculatedHeight);
  contentBlock.contentHeight = calculatedHeight;
  contentBlock.contentWidth = calculatedWidth;
  if (stlPadding) {
    contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
    contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
  }
  for (let i = 0; i < pendingList.length; i++) {
    const token = pendingList[i];
    const percentWidth = token.percentWidth;
    token.width = parseInt(percentWidth, 10) / 100 * contentBlock.width;
  }
  return contentBlock;
}
function pushTokens(block, str, style2, wrapInfo, styleName) {
  const isEmptyStr = str === "";
  const tokenStyle = styleName && style2.rich[styleName] || {};
  const lines2 = block.lines;
  const font = tokenStyle.font || style2.font;
  let newLine = false;
  let strLines;
  let linesWidths;
  if (wrapInfo) {
    const tokenPadding = tokenStyle.padding;
    let tokenPaddingH = tokenPadding ? tokenPadding[1] + tokenPadding[3] : 0;
    if (tokenStyle.width != null && tokenStyle.width !== "auto") {
      const outerWidth = parsePercent2(tokenStyle.width, wrapInfo.width) + tokenPaddingH;
      if (lines2.length > 0) {
        if (outerWidth + wrapInfo.accumWidth > wrapInfo.width) {
          strLines = str.split("\n");
          newLine = true;
        }
      }
      wrapInfo.accumWidth = outerWidth;
    } else {
      const res = wrapText(str, font, wrapInfo.width, wrapInfo.breakAll, wrapInfo.accumWidth);
      wrapInfo.accumWidth = res.accumWidth + tokenPaddingH;
      linesWidths = res.linesWidths;
      strLines = res.lines;
    }
  } else {
    strLines = str.split("\n");
  }
  for (let i = 0; i < strLines.length; i++) {
    const text11 = strLines[i];
    const token = new RichTextToken();
    token.styleName = styleName;
    token.text = text11;
    token.isLineHolder = !text11 && !isEmptyStr;
    if (typeof tokenStyle.width === "number") {
      token.width = tokenStyle.width;
    } else {
      token.width = linesWidths ? linesWidths[i] : getWidth(text11, font);
    }
    if (!i && !newLine) {
      const tokens = (lines2[lines2.length - 1] || (lines2[0] = new RichTextLine())).tokens;
      const tokensLen = tokens.length;
      tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : (text11 || !tokensLen || isEmptyStr) && tokens.push(token);
    } else {
      lines2.push(new RichTextLine([token]));
    }
  }
}
function isLatin(ch) {
  let code = ch.charCodeAt(0);
  return code >= 33 && code <= 255;
}
const breakCharMap = reduce(",&?/;] ".split(""), function(obj, ch) {
  obj[ch] = true;
  return obj;
}, {});
function isWordBreakChar(ch) {
  if (isLatin(ch)) {
    if (breakCharMap[ch]) {
      return true;
    }
    return false;
  }
  return true;
}
function wrapText(text11, font, lineWidth, isBreakAll, lastAccumWidth) {
  let lines2 = [];
  let linesWidths = [];
  let line3 = "";
  let currentWord = "";
  let currentWordWidth = 0;
  let accumWidth = 0;
  for (let i = 0; i < text11.length; i++) {
    const ch = text11.charAt(i);
    if (ch === "\n") {
      if (currentWord) {
        line3 += currentWord;
        accumWidth += currentWordWidth;
      }
      lines2.push(line3);
      linesWidths.push(accumWidth);
      line3 = "";
      currentWord = "";
      currentWordWidth = 0;
      accumWidth = 0;
      continue;
    }
    const chWidth = getWidth(ch, font);
    const inWord = isBreakAll ? false : !isWordBreakChar(ch);
    if (!lines2.length ? lastAccumWidth + accumWidth + chWidth > lineWidth : accumWidth + chWidth > lineWidth) {
      if (!accumWidth) {
        if (inWord) {
          lines2.push(currentWord);
          linesWidths.push(currentWordWidth);
          currentWord = ch;
          currentWordWidth = chWidth;
        } else {
          lines2.push(ch);
          linesWidths.push(chWidth);
        }
      } else if (line3 || currentWord) {
        if (inWord) {
          if (!line3) {
            line3 = currentWord;
            currentWord = "";
            currentWordWidth = 0;
            accumWidth = currentWordWidth;
          }
          lines2.push(line3);
          linesWidths.push(accumWidth - currentWordWidth);
          currentWord += ch;
          currentWordWidth += chWidth;
          line3 = "";
          accumWidth = currentWordWidth;
        } else {
          if (currentWord) {
            line3 += currentWord;
            accumWidth += currentWordWidth;
            currentWord = "";
            currentWordWidth = 0;
          }
          lines2.push(line3);
          linesWidths.push(accumWidth);
          line3 = ch;
          accumWidth = chWidth;
        }
      }
      continue;
    }
    accumWidth += chWidth;
    if (inWord) {
      currentWord += ch;
      currentWordWidth += chWidth;
    } else {
      if (currentWord) {
        line3 += currentWord;
        currentWord = "";
        currentWordWidth = 0;
      }
      line3 += ch;
    }
  }
  if (!lines2.length && !line3) {
    line3 = text11;
    currentWord = "";
    currentWordWidth = 0;
  }
  if (currentWord) {
    line3 += currentWord;
  }
  if (line3) {
    lines2.push(line3);
    linesWidths.push(accumWidth);
  }
  if (lines2.length === 1) {
    accumWidth += lastAccumWidth;
  }
  return {
    accumWidth,
    lines: lines2,
    linesWidths
  };
}
function parsePercent2(value, maxValue) {
  if (typeof value === "string") {
    if (value.lastIndexOf("%") >= 0) {
      return parseFloat(value) / 100 * maxValue;
    }
    return parseFloat(value);
  }
  return value;
}

// node_modules/zrender/src/graphic/Text.ts
const DEFAULT_RICH_TEXT_COLOR = {
  fill: "#000"
};
const DEFAULT_STROKE_LINE_WIDTH = 2;
const DEFAULT_TEXT_ANIMATION_PROPS = {
  style: defaults({
    fill: true,
    stroke: true,
    fillOpacity: true,
    strokeOpacity: true,
    lineWidth: true,
    fontSize: true,
    lineHeight: true,
    width: true,
    height: true,
    textShadowColor: true,
    textShadowBlur: true,
    textShadowOffsetX: true,
    textShadowOffsetY: true,
    backgroundColor: true,
    padding: true,
    borderColor: true,
    borderWidth: true,
    borderRadius: true
  }, DEFAULT_COMMON_ANIMATION_PROPS.style)
};
class ZRText2 extends Displayable_default {
  constructor(opts) {
    super();
    this.type = "text";
    this._children = [];
    this._defaultStyle = DEFAULT_RICH_TEXT_COLOR;
    this.attr(opts);
  }
  childrenRef() {
    return this._children;
  }
  update() {
    if (this.styleChanged()) {
      this._updateSubTexts();
    }
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      child.zlevel = this.zlevel;
      child.z = this.z;
      child.z2 = this.z2;
      child.culling = this.culling;
      child.cursor = this.cursor;
      child.invisible = this.invisible;
    }
    const attachedTransform = this.attachedTransform;
    if (attachedTransform) {
      attachedTransform.updateTransform();
      const m2 = attachedTransform.transform;
      if (m2) {
        this.transform = this.transform || [];
        copy(this.transform, m2);
      } else {
        this.transform = null;
      }
    } else {
      super.update();
    }
  }
  getComputedTransform() {
    if (this.__hostTarget) {
      this.__hostTarget.getComputedTransform();
      this.__hostTarget.updateInnerText(true);
    }
    return this.attachedTransform ? this.attachedTransform.getComputedTransform() : super.getComputedTransform();
  }
  _updateSubTexts() {
    this._childCursor = 0;
    normalizeTextStyle(this.style);
    this.style.rich ? this._updateRichTexts() : this._updatePlainTexts();
    this._children.length = this._childCursor;
    this.styleUpdated();
  }
  addSelfToZr(zr) {
    super.addSelfToZr(zr);
    for (let i = 0; i < this._children.length; i++) {
      this._children[i].__zr = zr;
    }
  }
  removeSelfFromZr(zr) {
    super.removeSelfFromZr(zr);
    for (let i = 0; i < this._children.length; i++) {
      this._children[i].__zr = null;
    }
  }
  getBoundingRect() {
    if (this.styleChanged()) {
      this._updateSubTexts();
    }
    if (!this._rect) {
      const tmpRect2 = new BoundingRect_default(0, 0, 0, 0);
      const children = this._children;
      const tmpMat = [];
      let rect = null;
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        const childRect = child.getBoundingRect();
        const transform = child.getLocalTransform(tmpMat);
        if (transform) {
          tmpRect2.copy(childRect);
          tmpRect2.applyTransform(transform);
          rect = rect || tmpRect2.clone();
          rect.union(tmpRect2);
        } else {
          rect = rect || childRect.clone();
          rect.union(childRect);
        }
      }
      this._rect = rect || tmpRect2;
    }
    return this._rect;
  }
  setDefaultTextStyle(defaultTextStyle) {
    this._defaultStyle = defaultTextStyle || DEFAULT_RICH_TEXT_COLOR;
  }
  setTextContent(textContent) {
    throw new Error("Can't attach text on another text");
  }
  _mergeStyle(targetStyle, sourceStyle) {
    if (!sourceStyle) {
      return targetStyle;
    }
    const sourceRich = sourceStyle.rich;
    const targetRich = targetStyle.rich || sourceRich && {};
    extend(targetStyle, sourceStyle);
    if (sourceRich && targetRich) {
      this._mergeRich(targetRich, sourceRich);
      targetStyle.rich = targetRich;
    } else if (targetRich) {
      targetStyle.rich = targetRich;
    }
    return targetStyle;
  }
  _mergeRich(targetRich, sourceRich) {
    const richNames = keys(sourceRich);
    for (let i = 0; i < richNames.length; i++) {
      const richName = richNames[i];
      targetRich[richName] = targetRich[richName] || {};
      extend(targetRich[richName], sourceRich[richName]);
    }
  }
  _getAnimationStyleProps() {
    return DEFAULT_TEXT_ANIMATION_PROPS;
  }
  _getOrCreateChild(Ctor) {
    let child = this._children[this._childCursor];
    if (!child || !(child instanceof Ctor)) {
      child = new Ctor();
    }
    this._children[this._childCursor++] = child;
    child.__zr = this.__zr;
    child.parent = this;
    return child;
  }
  _updatePlainTexts() {
    const style2 = this.style;
    const textFont = style2.font || DEFAULT_FONT;
    const textPadding = style2.padding;
    const text11 = getStyleText(style2);
    const contentBlock = parsePlainText(text11, style2);
    const needDrawBg = needDrawBackground(style2);
    const bgColorDrawn = !!style2.backgroundColor;
    let outerHeight = contentBlock.outerHeight;
    const textLines = contentBlock.lines;
    const lineHeight = contentBlock.lineHeight;
    const defaultStyle = this._defaultStyle;
    const baseX = style2.x || 0;
    const baseY = style2.y || 0;
    const textAlign = style2.align || defaultStyle.align || "left";
    const verticalAlign = style2.verticalAlign || defaultStyle.verticalAlign || "top";
    let textX = baseX;
    let textY = adjustTextY(baseY, contentBlock.contentHeight, verticalAlign);
    if (needDrawBg || textPadding) {
      let outerWidth = contentBlock.width;
      textPadding && (outerWidth += textPadding[1] + textPadding[3]);
      const boxX = adjustTextX(baseX, outerWidth, textAlign);
      const boxY = adjustTextY(baseY, outerHeight, verticalAlign);
      needDrawBg && this._renderBackground(style2, boxX, boxY, outerWidth, outerHeight);
    }
    textY += lineHeight / 2;
    if (textPadding) {
      textX = getTextXForPadding(baseX, textAlign, textPadding);
      if (verticalAlign === "top") {
        textY += textPadding[0];
      } else if (verticalAlign === "bottom") {
        textY -= textPadding[2];
      }
    }
    let defaultLineWidth = 0;
    let useDefaultFill = false;
    const textFill = getFill("fill" in style2 ? style2.fill : (useDefaultFill = true, defaultStyle.fill));
    const textStroke = getStroke("stroke" in style2 ? style2.stroke : !bgColorDrawn && (!defaultStyle.autoStroke || useDefaultFill) ? (defaultLineWidth = DEFAULT_STROKE_LINE_WIDTH, defaultStyle.stroke) : null);
    const hasShadow2 = style2.textShadowBlur > 0;
    const fixedBoundingRect = style2.width != null && (style2.overflow === "truncate" || style2.overflow === "break" || style2.overflow === "breakAll");
    const calculatedLineHeight = contentBlock.calculatedLineHeight;
    for (let i = 0; i < textLines.length; i++) {
      const el = this._getOrCreateChild(TSpan_default);
      const subElStyle = el.createStyle();
      el.useStyle(subElStyle);
      subElStyle.text = textLines[i];
      subElStyle.x = textX;
      subElStyle.y = textY;
      if (textAlign) {
        subElStyle.textAlign = textAlign;
      }
      subElStyle.textBaseline = "middle";
      subElStyle.opacity = style2.opacity;
      subElStyle.strokeFirst = true;
      if (hasShadow2) {
        subElStyle.shadowBlur = style2.textShadowBlur || 0;
        subElStyle.shadowColor = style2.textShadowColor || "transparent";
        subElStyle.shadowOffsetX = style2.textShadowOffsetX || 0;
        subElStyle.shadowOffsetY = style2.textShadowOffsetY || 0;
      }
      if (textStroke) {
        subElStyle.stroke = textStroke;
        subElStyle.lineWidth = style2.lineWidth || defaultLineWidth;
      }
      if (textFill) {
        subElStyle.fill = textFill;
      }
      subElStyle.font = textFont;
      textY += lineHeight;
      if (fixedBoundingRect) {
        el.setBoundingRect(new BoundingRect_default(adjustTextX(subElStyle.x, style2.width, subElStyle.textAlign), adjustTextY(subElStyle.y, calculatedLineHeight, subElStyle.textBaseline), style2.width, calculatedLineHeight));
      }
    }
  }
  _updateRichTexts() {
    const style2 = this.style;
    const text11 = getStyleText(style2);
    const contentBlock = parseRichText(text11, style2);
    const contentWidth = contentBlock.width;
    const outerWidth = contentBlock.outerWidth;
    const outerHeight = contentBlock.outerHeight;
    const textPadding = style2.padding;
    const baseX = style2.x || 0;
    const baseY = style2.y || 0;
    const defaultStyle = this._defaultStyle;
    const textAlign = style2.align || defaultStyle.align;
    const verticalAlign = style2.verticalAlign || defaultStyle.verticalAlign;
    const boxX = adjustTextX(baseX, outerWidth, textAlign);
    const boxY = adjustTextY(baseY, outerHeight, verticalAlign);
    let xLeft = adjustTextX(baseX, contentBlock.contentWidth, textAlign);
    let lineTop = adjustTextY(baseY, contentBlock.contentHeight, verticalAlign);
    const xRight = xLeft + contentWidth;
    if (needDrawBackground(style2)) {
      this._renderBackground(style2, boxX, boxY, outerWidth, outerHeight);
    }
    const bgColorDrawn = !!style2.backgroundColor;
    for (let i = 0; i < contentBlock.lines.length; i++) {
      const line3 = contentBlock.lines[i];
      const tokens = line3.tokens;
      const tokenCount = tokens.length;
      const lineHeight = line3.lineHeight;
      let remainedWidth = line3.width;
      let leftIndex = 0;
      let lineXLeft = xLeft;
      let lineXRight = xRight;
      let rightIndex = tokenCount - 1;
      let token;
      while (leftIndex < tokenCount && (token = tokens[leftIndex], !token.align || token.align === "left")) {
        this._placeToken(token, style2, lineHeight, lineTop, lineXLeft, "left", bgColorDrawn);
        remainedWidth -= token.width;
        lineXLeft += token.width;
        leftIndex++;
      }
      while (rightIndex >= 0 && (token = tokens[rightIndex], token.align === "right")) {
        this._placeToken(token, style2, lineHeight, lineTop, lineXRight, "right", bgColorDrawn);
        remainedWidth -= token.width;
        lineXRight -= token.width;
        rightIndex--;
      }
      lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - remainedWidth) / 2;
      while (leftIndex <= rightIndex) {
        token = tokens[leftIndex];
        this._placeToken(token, style2, lineHeight, lineTop, lineXLeft + token.width / 2, "center", bgColorDrawn);
        lineXLeft += token.width;
        leftIndex++;
      }
      lineTop += lineHeight;
    }
  }
  _placeToken(token, style2, lineHeight, lineTop, x, textAlign, parentBgColorDrawn) {
    const tokenStyle = style2.rich[token.styleName] || {};
    tokenStyle.text = token.text;
    const verticalAlign = token.verticalAlign;
    let y = lineTop + lineHeight / 2;
    if (verticalAlign === "top") {
      y = lineTop + token.height / 2;
    } else if (verticalAlign === "bottom") {
      y = lineTop + lineHeight - token.height / 2;
    }
    const needDrawBg = !token.isLineHolder && needDrawBackground(tokenStyle);
    needDrawBg && this._renderBackground(tokenStyle, textAlign === "right" ? x - token.width : textAlign === "center" ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
    const bgColorDrawn = !!tokenStyle.backgroundColor;
    const textPadding = token.textPadding;
    if (textPadding) {
      x = getTextXForPadding(x, textAlign, textPadding);
    }
    const el = this._getOrCreateChild(TSpan_default);
    const subElStyle = el.createStyle();
    el.useStyle(subElStyle);
    const defaultStyle = this._defaultStyle;
    let useDefaultFill = false;
    let defaultLineWidth = 0;
    const textFill = getStroke("fill" in tokenStyle ? tokenStyle.fill : "fill" in style2 ? style2.fill : (useDefaultFill = true, defaultStyle.fill));
    const textStroke = getStroke("stroke" in tokenStyle ? tokenStyle.stroke : "stroke" in style2 ? style2.stroke : !bgColorDrawn && !parentBgColorDrawn && (!defaultStyle.autoStroke || useDefaultFill) ? (defaultLineWidth = DEFAULT_STROKE_LINE_WIDTH, defaultStyle.stroke) : null);
    const hasShadow2 = tokenStyle.textShadowBlur > 0 || style2.textShadowBlur > 0;
    subElStyle.text = token.text;
    subElStyle.x = x;
    subElStyle.y = y;
    if (hasShadow2) {
      subElStyle.shadowBlur = tokenStyle.textShadowBlur || style2.textShadowBlur || 0;
      subElStyle.shadowColor = tokenStyle.textShadowColor || style2.textShadowColor || "transparent";
      subElStyle.shadowOffsetX = tokenStyle.textShadowOffsetX || style2.textShadowOffsetX || 0;
      subElStyle.shadowOffsetY = tokenStyle.textShadowOffsetY || style2.textShadowOffsetY || 0;
    }
    subElStyle.textAlign = textAlign;
    subElStyle.textBaseline = "middle";
    subElStyle.font = token.font || DEFAULT_FONT;
    if (textStroke) {
      subElStyle.lineWidth = retrieve3(tokenStyle.lineWidth, style2.lineWidth, defaultLineWidth);
      subElStyle.stroke = textStroke;
    }
    if (textFill) {
      subElStyle.fill = textFill;
    }
    const textWidth = token.contentWidth;
    const textHeight = token.contentHeight;
    el.setBoundingRect(new BoundingRect_default(adjustTextX(subElStyle.x, textWidth, subElStyle.textAlign), adjustTextY(subElStyle.y, textHeight, subElStyle.textBaseline), textWidth, textHeight));
  }
  _renderBackground(style2, x, y, width, height) {
    const textBackgroundColor = style2.backgroundColor;
    const textBorderWidth = style2.borderWidth;
    const textBorderColor = style2.borderColor;
    const isPlainBg = isString(textBackgroundColor);
    const textBorderRadius = style2.borderRadius;
    const self2 = this;
    let rectEl;
    let imgEl;
    if (isPlainBg || textBorderWidth && textBorderColor) {
      rectEl = this._getOrCreateChild(Rect_default);
      rectEl.useStyle(rectEl.createStyle());
      rectEl.style.fill = null;
      const rectShape = rectEl.shape;
      rectShape.x = x;
      rectShape.y = y;
      rectShape.width = width;
      rectShape.height = height;
      rectShape.r = textBorderRadius;
      rectEl.dirtyShape();
    }
    if (isPlainBg) {
      const rectStyle = rectEl.style;
      rectStyle.fill = textBackgroundColor || null;
      rectStyle.opacity = retrieve2(style2.opacity, 1);
      rectStyle.fillOpacity = retrieve2(style2.fillOpacity, 1);
    } else if (textBackgroundColor && textBackgroundColor.image) {
      imgEl = this._getOrCreateChild(Image_default);
      imgEl.onload = function() {
        self2.dirtyStyle();
      };
      const imgStyle = imgEl.style;
      imgStyle.image = textBackgroundColor.image;
      imgStyle.x = x;
      imgStyle.y = y;
      imgStyle.width = width;
      imgStyle.height = height;
    }
    if (textBorderWidth && textBorderColor) {
      const rectStyle = rectEl.style;
      rectStyle.lineWidth = textBorderWidth;
      rectStyle.stroke = textBorderColor;
      rectStyle.strokeOpacity = retrieve2(style2.strokeOpacity, 1);
    }
    const shadowStyle = (rectEl || imgEl).style;
    shadowStyle.shadowBlur = style2.shadowBlur || 0;
    shadowStyle.shadowColor = style2.shadowColor || "transparent";
    shadowStyle.shadowOffsetX = style2.shadowOffsetX || 0;
    shadowStyle.shadowOffsetY = style2.shadowOffsetY || 0;
  }
  static makeFont(style2) {
    let font = "";
    if (style2.fontSize || style2.fontFamily || style2.fontWeight) {
      let fontSize = "";
      if (typeof style2.fontSize === "string" && (style2.fontSize.indexOf("px") !== -1 || style2.fontSize.indexOf("rem") !== -1 || style2.fontSize.indexOf("em") !== -1)) {
        fontSize = style2.fontSize;
      } else if (!isNaN(+style2.fontSize)) {
        fontSize = style2.fontSize + "px";
      } else {
        fontSize = "12px";
      }
      font = [style2.fontStyle, style2.fontWeight, fontSize, style2.fontFamily || "sans-serif"].join(" ");
    }
    return font && trim(font) || style2.textFont || style2.font;
  }
}
const VALID_TEXT_ALIGN = {
  left: true,
  right: 1,
  center: 1
};
const VALID_TEXT_VERTICAL_ALIGN = {
  top: 1,
  bottom: 1,
  middle: 1
};
function normalizeTextStyle(style2) {
  normalizeStyle(style2);
  each(style2.rich, normalizeStyle);
  return style2;
}
function normalizeStyle(style2) {
  if (style2) {
    style2.font = ZRText2.makeFont(style2);
    let textAlign = style2.align;
    textAlign === "middle" && (textAlign = "center");
    style2.align = textAlign == null || VALID_TEXT_ALIGN[textAlign] ? textAlign : "left";
    let verticalAlign = style2.verticalAlign;
    verticalAlign === "center" && (verticalAlign = "middle");
    style2.verticalAlign = verticalAlign == null || VALID_TEXT_VERTICAL_ALIGN[verticalAlign] ? verticalAlign : "top";
    const textPadding = style2.padding;
    if (textPadding) {
      style2.padding = normalizeCssArray(style2.padding);
    }
  }
}
function getStroke(stroke, lineWidth) {
  return stroke == null || lineWidth <= 0 || stroke === "transparent" || stroke === "none" ? null : stroke.image || stroke.colorStops ? "#000" : stroke;
}
function getFill(fill) {
  return fill == null || fill === "none" ? null : fill.image || fill.colorStops ? "#000" : fill;
}
function getTextXForPadding(x, textAlign, textPadding) {
  return textAlign === "right" ? x - textPadding[1] : textAlign === "center" ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
}
function getStyleText(style2) {
  let text11 = style2.text;
  text11 != null && (text11 += "");
  return text11;
}
function needDrawBackground(style2) {
  return !!(style2.backgroundColor || style2.borderWidth && style2.borderColor);
}
const Text_default = ZRText2;

// node_modules/zrender/src/graphic/shape/Arc.ts
class ArcShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r = 0;
    this.startAngle = 0;
    this.endAngle = Math.PI * 2;
    this.clockwise = true;
  }
}
class Arc2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new ArcShape();
  }
  buildPath(ctx, shape) {
    const x = shape.cx;
    const y = shape.cy;
    const r = Math.max(shape.r, 0);
    const startAngle = shape.startAngle;
    const endAngle = shape.endAngle;
    const clockwise = shape.clockwise;
    const unitX = Math.cos(startAngle);
    const unitY = Math.sin(startAngle);
    ctx.moveTo(unitX * r + x, unitY * r + y);
    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
  }
}
Arc2.prototype.type = "arc";
const Arc_default = Arc2;

// node_modules/zrender/src/graphic/shape/BezierCurve.ts
const out = [];
class BezierCurveShape {
  constructor() {
    this.x1 = 0;
    this.y1 = 0;
    this.x2 = 0;
    this.y2 = 0;
    this.cpx1 = 0;
    this.cpy1 = 0;
    this.percent = 1;
  }
}
function someVectorAt(shape, t, isTangent) {
  const cpx2 = shape.cpx2;
  const cpy2 = shape.cpy2;
  if (cpx2 === null || cpy2 === null) {
    return [(isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t), (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)];
  } else {
    return [(isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t), (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)];
  }
}
class BezierCurve2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new BezierCurveShape();
  }
  buildPath(ctx, shape) {
    let x1 = shape.x1;
    let y1 = shape.y1;
    let x2 = shape.x2;
    let y2 = shape.y2;
    let cpx1 = shape.cpx1;
    let cpy1 = shape.cpy1;
    let cpx2 = shape.cpx2;
    let cpy2 = shape.cpy2;
    let percent = shape.percent;
    if (percent === 0) {
      return;
    }
    ctx.moveTo(x1, y1);
    if (cpx2 == null || cpy2 == null) {
      if (percent < 1) {
        quadraticSubdivide(x1, cpx1, x2, percent, out);
        cpx1 = out[1];
        x2 = out[2];
        quadraticSubdivide(y1, cpy1, y2, percent, out);
        cpy1 = out[1];
        y2 = out[2];
      }
      ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
    } else {
      if (percent < 1) {
        cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
        cpx1 = out[1];
        cpx2 = out[2];
        x2 = out[3];
        cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
        cpy1 = out[1];
        cpy2 = out[2];
        y2 = out[3];
      }
      ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
    }
  }
  pointAt(t) {
    return someVectorAt(this.shape, t, false);
  }
  tangentAt(t) {
    const p = someVectorAt(this.shape, t, true);
    return normalize(p, p);
  }
}
BezierCurve2.prototype.type = "bezier-curve";
const BezierCurve_default = BezierCurve2;

// node_modules/zrender/src/graphic/shape/Droplet.ts
class DropletShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.width = 0;
    this.height = 0;
  }
}
class Droplet2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new DropletShape();
  }
  buildPath(ctx, shape) {
    const x = shape.cx;
    const y = shape.cy;
    const a = shape.width;
    const b = shape.height;
    ctx.moveTo(x, y + a);
    ctx.bezierCurveTo(x + a, y + a, x + a * 3 / 2, y - a / 3, x, y - b);
    ctx.bezierCurveTo(x - a * 3 / 2, y - a / 3, x - a, y + a, x, y + a);
    ctx.closePath();
  }
}
Droplet2.prototype.type = "droplet";

// node_modules/zrender/src/graphic/shape/Heart.ts
class HeartShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.width = 0;
    this.height = 0;
  }
}
class Heart2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new HeartShape();
  }
  buildPath(ctx, shape) {
    const x = shape.cx;
    const y = shape.cy;
    const a = shape.width;
    const b = shape.height;
    ctx.moveTo(x, y);
    ctx.bezierCurveTo(x + a / 2, y - b * 2 / 3, x + a * 2, y + b / 3, x, y + b);
    ctx.bezierCurveTo(x - a * 2, y + b / 3, x - a / 2, y - b * 2 / 3, x, y);
  }
}
Heart2.prototype.type = "heart";

// node_modules/zrender/src/graphic/shape/Isogon.ts
const PI3 = Math.PI;
const sin = Math.sin;
const cos = Math.cos;
class IsogonShape {
  constructor() {
    this.x = 0;
    this.y = 0;
    this.r = 0;
    this.n = 0;
  }
}
class Isogon2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new IsogonShape();
  }
  buildPath(ctx, shape) {
    const n = shape.n;
    if (!n || n < 2) {
      return;
    }
    const x = shape.x;
    const y = shape.y;
    const r = shape.r;
    const dStep = 2 * PI3 / n;
    let deg = -PI3 / 2;
    ctx.moveTo(x + r * cos(deg), y + r * sin(deg));
    for (let i = 0, end2 = n - 1; i < end2; i++) {
      deg += dStep;
      ctx.lineTo(x + r * cos(deg), y + r * sin(deg));
    }
    ctx.closePath();
    return;
  }
}
Isogon2.prototype.type = "isogon";

// node_modules/zrender/src/graphic/shape/Ring.ts
class RingShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r = 0;
    this.r0 = 0;
  }
}
class Ring2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new RingShape();
  }
  buildPath(ctx, shape) {
    const x = shape.cx;
    const y = shape.cy;
    const PI210 = Math.PI * 2;
    ctx.moveTo(x + shape.r, y);
    ctx.arc(x, y, shape.r, 0, PI210, false);
    ctx.moveTo(x + shape.r0, y);
    ctx.arc(x, y, shape.r0, 0, PI210, true);
  }
}
Ring2.prototype.type = "ring";
const Ring_default = Ring2;

// node_modules/zrender/src/graphic/shape/Rose.ts
const sin2 = Math.sin;
const cos2 = Math.cos;
const radian = Math.PI / 180;
class RoseShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r = [];
    this.k = 0;
    this.n = 1;
  }
}
class Rose2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new RoseShape();
  }
  buildPath(ctx, shape) {
    const R = shape.r;
    const k = shape.k;
    const n = shape.n;
    const x0 = shape.cx;
    const y0 = shape.cy;
    let x;
    let y;
    let r;
    ctx.moveTo(x0, y0);
    for (let i = 0, len2 = R.length; i < len2; i++) {
      r = R[i];
      for (let j = 0; j <= 360 * n; j++) {
        x = r * sin2(k / n * j % 360 * radian) * cos2(j * radian) + x0;
        y = r * sin2(k / n * j % 360 * radian) * sin2(j * radian) + y0;
        ctx.lineTo(x, y);
      }
    }
  }
}
Rose2.prototype.type = "rose";

// node_modules/zrender/src/graphic/shape/Sector.ts
class SectorShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r0 = 0;
    this.r = 0;
    this.startAngle = 0;
    this.endAngle = Math.PI * 2;
    this.clockwise = true;
  }
}
class Sector2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new SectorShape();
  }
  buildPath(ctx, shape) {
    const x = shape.cx;
    const y = shape.cy;
    const r0 = Math.max(shape.r0 || 0, 0);
    const r = Math.max(shape.r, 0);
    const startAngle = shape.startAngle;
    const endAngle = shape.endAngle;
    const clockwise = shape.clockwise;
    const unitX = Math.cos(startAngle);
    const unitY = Math.sin(startAngle);
    ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
    ctx.lineTo(unitX * r + x, unitY * r + y);
    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
    ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);
    if (r0 !== 0) {
      ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
    }
    ctx.closePath();
  }
  isZeroArea() {
    return this.shape.startAngle === this.shape.endAngle || this.shape.r === this.shape.r0;
  }
}
Sector2.prototype.type = "sector";
const Sector_default = Sector2;

// node_modules/zrender/src/graphic/shape/Star.ts
const PI4 = Math.PI;
const cos3 = Math.cos;
const sin3 = Math.sin;
class StarShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.n = 3;
    this.r = 0;
  }
}
class Star2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new StarShape();
  }
  buildPath(ctx, shape) {
    const n = shape.n;
    if (!n || n < 2) {
      return;
    }
    const x = shape.cx;
    const y = shape.cy;
    const r = shape.r;
    let r0 = shape.r0;
    if (r0 == null) {
      r0 = n > 4 ? r * cos3(2 * PI4 / n) / cos3(PI4 / n) : r / 3;
    }
    const dStep = PI4 / n;
    let deg = -PI4 / 2;
    const xStart = x + r * cos3(deg);
    const yStart = y + r * sin3(deg);
    deg += dStep;
    ctx.moveTo(xStart, yStart);
    for (let i = 0, end2 = n * 2 - 1, ri; i < end2; i++) {
      ri = i % 2 === 0 ? r0 : r;
      ctx.lineTo(x + ri * cos3(deg), y + ri * sin3(deg));
      deg += dStep;
    }
    ctx.closePath();
  }
}
Star2.prototype.type = "star";

// node_modules/zrender/src/graphic/shape/Trochoid.ts
const cos4 = Math.cos;
const sin4 = Math.sin;
class TrochoidShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r = 0;
    this.r0 = 0;
    this.d = 0;
    this.location = "out";
  }
}
class Trochoid2 extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new TrochoidShape();
  }
  buildPath(ctx, shape) {
    const R = shape.r;
    const r = shape.r0;
    const d = shape.d;
    const offsetX = shape.cx;
    const offsetY = shape.cy;
    const delta = shape.location === "out" ? 1 : -1;
    let x1;
    let y1;
    let x2;
    let y2;
    if (shape.location && R <= r) {
      return;
    }
    let num = 0;
    let i = 1;
    let theta;
    x1 = (R + delta * r) * cos4(0) - delta * d * cos4(0) + offsetX;
    y1 = (R + delta * r) * sin4(0) - d * sin4(0) + offsetY;
    ctx.moveTo(x1, y1);
    do {
      num++;
    } while (r * num % (R + delta * r) !== 0);
    do {
      theta = Math.PI / 180 * i;
      x2 = (R + delta * r) * cos4(theta) - delta * d * cos4((R / r + delta) * theta) + offsetX;
      y2 = (R + delta * r) * sin4(theta) - d * sin4((R / r + delta) * theta) + offsetY;
      ctx.lineTo(x2, y2);
      i++;
    } while (i <= r * num / (R + delta * r) * 360);
  }
}
Trochoid2.prototype.type = "trochoid";

// node_modules/zrender/src/graphic/RadialGradient.ts
class RadialGradient5 extends Gradient6 {
  constructor(x, y, r, colorStops, globalCoord) {
    super(colorStops);
    this.x = x == null ? 0.5 : x;
    this.y = y == null ? 0.5 : y;
    this.r = r == null ? 0.5 : r;
    this.type = "radial";
    this.global = globalCoord || false;
  }
}
const RadialGradient_default = RadialGradient5;

// node_modules/zrender/src/graphic/Pattern.ts

// node_modules/zrender/src/core/OrientedBoundingRect.ts
const extent = [0, 0];
const extent2 = [0, 0];
const minTv2 = new Point4();
const maxTv2 = new Point4();
class OrientedBoundingRect {
  constructor(rect, transform) {
    this._corners = [];
    this._axes = [];
    this._origin = [0, 0];
    for (let i = 0; i < 4; i++) {
      this._corners[i] = new Point4();
    }
    for (let i = 0; i < 2; i++) {
      this._axes[i] = new Point4();
    }
    if (rect) {
      this.fromBoundingRect(rect, transform);
    }
  }
  fromBoundingRect(rect, transform) {
    const corners = this._corners;
    const axes = this._axes;
    const x = rect.x;
    const y = rect.y;
    const x2 = x + rect.width;
    const y2 = y + rect.height;
    corners[0].set(x, y);
    corners[1].set(x2, y);
    corners[2].set(x2, y2);
    corners[3].set(x, y2);
    if (transform) {
      for (let i = 0; i < 4; i++) {
        corners[i].transform(transform);
      }
    }
    Point4.sub(axes[0], corners[1], corners[0]);
    Point4.sub(axes[1], corners[3], corners[0]);
    axes[0].normalize();
    axes[1].normalize();
    for (let i = 0; i < 2; i++) {
      this._origin[i] = axes[i].dot(corners[0]);
    }
  }
  intersect(other, mtv) {
    let overlapped = true;
    const noMtv = !mtv;
    minTv2.set(Infinity, Infinity);
    maxTv2.set(0, 0);
    if (!this._intersectCheckOneSide(this, other, minTv2, maxTv2, noMtv, 1)) {
      overlapped = false;
      if (noMtv) {
        return overlapped;
      }
    }
    if (!this._intersectCheckOneSide(other, this, minTv2, maxTv2, noMtv, -1)) {
      overlapped = false;
      if (noMtv) {
        return overlapped;
      }
    }
    if (!noMtv) {
      Point4.copy(mtv, overlapped ? minTv2 : maxTv2);
    }
    return overlapped;
  }
  _intersectCheckOneSide(self2, other, minTv3, maxTv3, noMtv, inverse) {
    let overlapped = true;
    for (let i = 0; i < 2; i++) {
      const axis2 = this._axes[i];
      this._getProjMinMaxOnAxis(i, self2._corners, extent);
      this._getProjMinMaxOnAxis(i, other._corners, extent2);
      if (extent[1] < extent2[0] || extent[0] > extent2[1]) {
        overlapped = false;
        if (noMtv) {
          return overlapped;
        }
        const dist0 = Math.abs(extent2[0] - extent[1]);
        const dist1 = Math.abs(extent[0] - extent2[1]);
        if (Math.min(dist0, dist1) > maxTv3.len()) {
          if (dist0 < dist1) {
            Point4.scale(maxTv3, axis2, -dist0 * inverse);
          } else {
            Point4.scale(maxTv3, axis2, dist1 * inverse);
          }
        }
      } else if (minTv3) {
        const dist0 = Math.abs(extent2[0] - extent[1]);
        const dist1 = Math.abs(extent[0] - extent2[1]);
        if (Math.min(dist0, dist1) < minTv3.len()) {
          if (dist0 < dist1) {
            Point4.scale(minTv3, axis2, dist0 * inverse);
          } else {
            Point4.scale(minTv3, axis2, -dist1 * inverse);
          }
        }
      }
    }
    return overlapped;
  }
  _getProjMinMaxOnAxis(dim, corners, out2) {
    const axis2 = this._axes[dim];
    const origin = this._origin;
    const proj = corners[0].dot(axis2) + origin[dim];
    let min4 = proj;
    let max4 = proj;
    for (let i = 1; i < corners.length; i++) {
      const proj2 = corners[i].dot(axis2) + origin[dim];
      min4 = Math.min(proj2, min4);
      max4 = Math.max(proj2, max4);
    }
    out2[0] = min4;
    out2[1] = max4;
  }
}
const OrientedBoundingRect_default = OrientedBoundingRect;

// node_modules/zrender/src/export.ts

// node_modules/zrender/src/zrender.ts
const zrender_exports = {};
__export(zrender_exports, {
  dispose: () => dispose,
  disposeAll: () => disposeAll,
  getInstance: () => getInstance,
  init: () => init,
  registerPainter: () => registerPainter,
  version: () => version
});
const useVML = !env_default.canvasSupported;
const painterCtors = {};
let instances = {};
function delInstance(id) {
  delete instances[id];
}
function isDarkMode(backgroundColor) {
  if (!backgroundColor) {
    return false;
  }
  if (typeof backgroundColor === "string") {
    return lum(backgroundColor, 1) < DARK_MODE_THRESHOLD;
  } else if (backgroundColor.colorStops) {
    const colorStops = backgroundColor.colorStops;
    let totalLum = 0;
    const len2 = colorStops.length;
    for (let i = 0; i < len2; i++) {
      totalLum += lum(colorStops[i].color, 1);
    }
    totalLum /= len2;
    return totalLum < DARK_MODE_THRESHOLD;
  }
  return false;
}
class ZRender {
  constructor(id, dom2, opts) {
    this._stillFrameAccum = 0;
    this._needsRefresh = true;
    this._needsRefreshHover = true;
    this._darkMode = false;
    opts = opts || {};
    this.dom = dom2;
    this.id = id;
    const self2 = this;
    const storage2 = new Storage3();
    let rendererType = opts.renderer;
    if (useVML) {
      if (!painterCtors.vml) {
        throw new Error("You need to require 'zrender/vml/vml' to support IE8");
      }
      rendererType = "vml";
    } else if (!rendererType) {
      rendererType = "canvas";
    }
    if (!painterCtors[rendererType]) {
      throw new Error(`Renderer '${rendererType}' is not imported. Please import it first.`);
    }
    const painter = new painterCtors[rendererType](dom2, storage2, opts, id);
    this.storage = storage2;
    this.painter = painter;
    const handerProxy = !env_default.node && !env_default.worker ? new HandlerDomProxy2(painter.getViewportRoot(), painter.root) : null;
    this.handler = new Handler_default(storage2, painter, handerProxy, painter.root);
    this.animation = new Animation({
      stage: {
        update: bind(this.flush, this)
      }
    });
    this.animation.start();
  }
  add(el) {
    this.storage.addRoot(el);
    el.addSelfToZr(this);
    this._needsRefresh = true;
  }
  remove(el) {
    this.storage.delRoot(el);
    el.removeSelfFromZr(this);
    this._needsRefresh = true;
  }
  configLayer(zLevel, config58) {
    if (this.painter.configLayer) {
      this.painter.configLayer(zLevel, config58);
    }
    this._needsRefresh = true;
  }
  setBackgroundColor(backgroundColor) {
    if (this.painter.setBackgroundColor) {
      this.painter.setBackgroundColor(backgroundColor);
    }
    this._needsRefresh = true;
    this._backgroundColor = backgroundColor;
    this._darkMode = isDarkMode(backgroundColor);
  }
  getBackgroundColor() {
    return this._backgroundColor;
  }
  setDarkMode(darkMode) {
    this._darkMode = darkMode;
  }
  isDarkMode() {
    return this._darkMode;
  }
  refreshImmediately(fromInside) {
    if (!fromInside) {
      this.animation.update();
    }
    this._needsRefresh = false;
    this.painter.refresh();
    this._needsRefresh = false;
  }
  refresh() {
    this._needsRefresh = true;
    this.animation.start();
  }
  flush() {
    let triggerRendered;
    if (this._needsRefresh) {
      triggerRendered = true;
      this.refreshImmediately(true);
    }
    if (this._needsRefreshHover) {
      triggerRendered = true;
      this.refreshHoverImmediately();
    }
    if (triggerRendered) {
      this._stillFrameAccum = 0;
      this.trigger("rendered");
    } else {
      this._stillFrameAccum++;
      if (this._stillFrameAccum > 10) {
        this.animation.stop();
      }
    }
  }
  wakeUp() {
    this.animation.start();
    this._stillFrameAccum = 0;
  }
  addHover(el) {
  }
  removeHover(el) {
  }
  clearHover() {
  }
  refreshHover() {
    this._needsRefreshHover = true;
  }
  refreshHoverImmediately() {
    this._needsRefreshHover = false;
    if (this.painter.refreshHover) {
      this.painter.refreshHover();
    }
  }
  resize(opts) {
    opts = opts || {};
    this.painter.resize(opts.width, opts.height);
    this.handler.resize();
  }
  clearAnimation() {
    this.animation.clear();
  }
  getWidth() {
    return this.painter.getWidth();
  }
  getHeight() {
    return this.painter.getHeight();
  }
  pathToImage(e, dpr2) {
    if (this.painter.pathToImage) {
      return this.painter.pathToImage(e, dpr2);
    }
  }
  setCursorStyle(cursorStyle) {
    this.handler.setCursorStyle(cursorStyle);
  }
  findHover(x, y) {
    return this.handler.findHover(x, y);
  }
  on(eventName, eventHandler, context) {
    this.handler.on(eventName, eventHandler, context);
    return this;
  }
  off(eventName, eventHandler) {
    this.handler.off(eventName, eventHandler);
  }
  trigger(eventName, event3) {
    this.handler.trigger(eventName, event3);
  }
  clear() {
    const roots2 = this.storage.getRoots();
    for (let i = 0; i < roots2.length; i++) {
      if (roots2[i] instanceof Group_default) {
        roots2[i].removeSelfFromZr(this);
      }
    }
    this.storage.delAllRoots();
    this.painter.clear();
  }
  dispose() {
    this.animation.stop();
    this.clear();
    this.storage.dispose();
    this.painter.dispose();
    this.handler.dispose();
    this.animation = this.storage = this.painter = this.handler = null;
    delInstance(this.id);
  }
}
function init(dom2, opts) {
  const zr = new ZRender(guid(), dom2, opts);
  instances[zr.id] = zr;
  return zr;
}
function dispose(zr) {
  zr.dispose();
}
function disposeAll() {
  for (let key in instances) {
    if (instances.hasOwnProperty(key)) {
      instances[key].dispose();
    }
  }
  instances = {};
}
function getInstance(id) {
  return instances[id];
}
function registerPainter(name, Ctor) {
  painterCtors[name] = Ctor;
}
const version = "4.3.1";

// src/util/number.ts
const number_exports = {};
__export(number_exports, {
  MAX_SAFE_INTEGER: () => MAX_SAFE_INTEGER,
  asc: () => asc2,
  getPercentWithPrecision: () => getPercentWithPrecision,
  getPixelPrecision: () => getPixelPrecision,
  getPrecision: () => getPrecision,
  getPrecisionSafe: () => getPrecisionSafe,
  isNumeric: () => isNumeric,
  isRadianAroundZero: () => isRadianAroundZero,
  linearMap: () => linearMap,
  nice: () => nice,
  parseDate: () => parseDate,
  parsePercent: () => parsePercent3,
  quantile: () => quantile,
  quantity: () => quantity,
  quantityExponent: () => quantityExponent,
  reformIntervals: () => reformIntervals,
  remRadian: () => remRadian,
  round: () => round2
});
const RADIAN_EPSILON = 0.0001;
function _trim(str) {
  return str.replace(/^\s+|\s+$/g, "");
}
function linearMap(val, domain, range, clamp2) {
  const subDomain = domain[1] - domain[0];
  const subRange = range[1] - range[0];
  if (subDomain === 0) {
    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;
  }
  if (clamp2) {
    if (subDomain > 0) {
      if (val <= domain[0]) {
        return range[0];
      } else if (val >= domain[1]) {
        return range[1];
      }
    } else {
      if (val >= domain[0]) {
        return range[0];
      } else if (val <= domain[1]) {
        return range[1];
      }
    }
  } else {
    if (val === domain[0]) {
      return range[0];
    }
    if (val === domain[1]) {
      return range[1];
    }
  }
  return (val - domain[0]) / subDomain * subRange + range[0];
}
function parsePercent3(percent, all) {
  switch (percent) {
    case "center":
    case "middle":
      percent = "50%";
      break;
    case "left":
    case "top":
      percent = "0%";
      break;
    case "right":
    case "bottom":
      percent = "100%";
      break;
  }
  if (typeof percent === "string") {
    if (_trim(percent).match(/%$/)) {
      return parseFloat(percent) / 100 * all;
    }
    return parseFloat(percent);
  }
  return percent == null ? NaN : +percent;
}
function round2(x, precision, returnStr) {
  if (precision == null) {
    precision = 10;
  }
  precision = Math.min(Math.max(0, precision), 20);
  x = (+x).toFixed(precision);
  return returnStr ? x : +x;
}
function asc2(arr) {
  arr.sort(function(a, b) {
    return a - b;
  });
  return arr;
}
function getPrecision(val) {
  val = +val;
  if (isNaN(val)) {
    return 0;
  }
  let e = 1;
  let count2 = 0;
  while (Math.round(val * e) / e !== val) {
    e *= 10;
    count2++;
  }
  return count2;
}
function getPrecisionSafe(val) {
  const str = val.toString();
  const eIndex = str.indexOf("e");
  if (eIndex > 0) {
    const precision = +str.slice(eIndex + 1);
    return precision < 0 ? -precision : 0;
  } else {
    const dotIndex = str.indexOf(".");
    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;
  }
}
function getPixelPrecision(dataExtent, pixelExtent) {
  const log9 = Math.log;
  const LN10 = Math.LN10;
  const dataQuantity = Math.floor(log9(dataExtent[1] - dataExtent[0]) / LN10);
  const sizeQuantity = Math.round(log9(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
  const precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
  return !isFinite(precision) ? 20 : precision;
}
function getPercentWithPrecision(valueList, idx, precision) {
  if (!valueList[idx]) {
    return 0;
  }
  const sum2 = reduce(valueList, function(acc, val) {
    return acc + (isNaN(val) ? 0 : val);
  }, 0);
  if (sum2 === 0) {
    return 0;
  }
  const digits = Math.pow(10, precision);
  const votesPerQuota = map2(valueList, function(val) {
    return (isNaN(val) ? 0 : val) / sum2 * digits * 100;
  });
  const targetSeats = digits * 100;
  const seats = map2(votesPerQuota, function(votes) {
    return Math.floor(votes);
  });
  let currentSum = reduce(seats, function(acc, val) {
    return acc + val;
  }, 0);
  const remainder = map2(votesPerQuota, function(votes, idx2) {
    return votes - seats[idx2];
  });
  while (currentSum < targetSeats) {
    let max4 = Number.NEGATIVE_INFINITY;
    let maxId = null;
    for (let i = 0, len2 = remainder.length; i < len2; ++i) {
      if (remainder[i] > max4) {
        max4 = remainder[i];
        maxId = i;
      }
    }
    ++seats[maxId];
    remainder[maxId] = 0;
    ++currentSum;
  }
  return seats[idx] / digits;
}
const MAX_SAFE_INTEGER = 9007199254740991;
function remRadian(radian2) {
  const pi2 = Math.PI * 2;
  return (radian2 % pi2 + pi2) % pi2;
}
function isRadianAroundZero(val) {
  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
}
const TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d\d)(?::(\d\d)(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/;
function parseDate(value) {
  if (value instanceof Date) {
    return value;
  } else if (typeof value === "string") {
    const match = TIME_REG.exec(value);
    if (!match) {
      return new Date(NaN);
    }
    if (!match[8]) {
      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);
    } else {
      let hour = +match[4] || 0;
      if (match[8].toUpperCase() !== "Z") {
        hour -= +match[8].slice(0, 3);
      }
      return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));
    }
  } else if (value == null) {
    return new Date(NaN);
  }
  return new Date(Math.round(value));
}
function quantity(val) {
  return Math.pow(10, quantityExponent(val));
}
function quantityExponent(val) {
  if (val === 0) {
    return 0;
  }
  let exp = Math.floor(Math.log(val) / Math.LN10);
  if (val / Math.pow(10, exp) >= 10) {
    exp++;
  }
  return exp;
}
function nice(val, round5) {
  const exponent = quantityExponent(val);
  const exp10 = Math.pow(10, exponent);
  const f = val / exp10;
  let nf;
  if (round5) {
    if (f < 1.5) {
      nf = 1;
    } else if (f < 2.5) {
      nf = 2;
    } else if (f < 4) {
      nf = 3;
    } else if (f < 7) {
      nf = 5;
    } else {
      nf = 10;
    }
  } else {
    if (f < 1) {
      nf = 1;
    } else if (f < 2) {
      nf = 2;
    } else if (f < 3) {
      nf = 3;
    } else if (f < 5) {
      nf = 5;
    } else {
      nf = 10;
    }
  }
  val = nf * exp10;
  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
}
function quantile(ascArr, p) {
  const H = (ascArr.length - 1) * p + 1;
  const h = Math.floor(H);
  const v4 = +ascArr[h - 1];
  const e = H - h;
  return e ? v4 + e * (ascArr[h] - v4) : v4;
}
function reformIntervals(list) {
  list.sort(function(a, b) {
    return littleThan2(a, b, 0) ? -1 : 1;
  });
  let curr = -Infinity;
  let currClose = 1;
  for (let i = 0; i < list.length; ) {
    const interval = list[i].interval;
    const close = list[i].close;
    for (let lg = 0; lg < 2; lg++) {
      if (interval[lg] <= curr) {
        interval[lg] = curr;
        close[lg] = !lg ? 1 - currClose : 1;
      }
      curr = interval[lg];
      currClose = close[lg];
    }
    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
      list.splice(i, 1);
    } else {
      i++;
    }
  }
  return list;
  function littleThan2(a, b, lg) {
    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan2(a, b, 1));
  }
}
function isNumeric(v4) {
  return v4 - parseFloat(v4) >= 0;
}

// src/util/model.ts
const DUMMY_COMPONENT_NAME_PREFIX = "series\0";
const INTERNAL_COMPONENT_ID_PREFIX = "\0_ec_\0";
function normalizeToArray(value) {
  return value instanceof Array ? value : value == null ? [] : [value];
}
function defaultEmphasis(opt, key, subOpts) {
  if (opt) {
    opt[key] = opt[key] || {};
    opt.emphasis = opt.emphasis || {};
    opt.emphasis[key] = opt.emphasis[key] || {};
    for (let i = 0, len2 = subOpts.length; i < len2; i++) {
      const subOptName = subOpts[i];
      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {
        opt.emphasis[key][subOptName] = opt[key][subOptName];
      }
    }
  }
}
const TEXT_STYLE_OPTIONS = ["fontStyle", "fontWeight", "fontSize", "fontFamily", "rich", "tag", "color", "textBorderColor", "textBorderWidth", "width", "height", "lineHeight", "align", "verticalAlign", "baseline", "shadowColor", "shadowBlur", "shadowOffsetX", "shadowOffsetY", "textShadowColor", "textShadowBlur", "textShadowOffsetX", "textShadowOffsetY", "backgroundColor", "borderColor", "borderWidth", "borderRadius", "padding"];
function getDataItemValue(dataItem) {
  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;
}
function isDataItemOption(dataItem) {
  return isObject(dataItem) && !(dataItem instanceof Array);
}
function mappingToExists(existings, newCmptOptions, mode) {
  const isNormalMergeMode = mode === "normalMerge";
  const isReplaceMergeMode = mode === "replaceMerge";
  const isReplaceAllMode = mode === "replaceAll";
  existings = existings || [];
  newCmptOptions = (newCmptOptions || []).slice();
  const existingIdIdxMap = createHashMap();
  each(newCmptOptions, function(cmptOption, index) {
    if (!isObject(cmptOption)) {
      newCmptOptions[index] = null;
      return;
    }
    cmptOption.id == null || validateIdOrName(cmptOption.id);
    cmptOption.name == null || validateIdOrName(cmptOption.name);
  });
  const result = prepareResult(existings, existingIdIdxMap, mode);
  if (isNormalMergeMode || isReplaceMergeMode) {
    mappingById(result, existings, existingIdIdxMap, newCmptOptions);
  }
  if (isNormalMergeMode) {
    mappingByName(result, newCmptOptions);
  }
  if (isNormalMergeMode || isReplaceMergeMode) {
    mappingByIndex(result, newCmptOptions, isReplaceMergeMode);
  } else if (isReplaceAllMode) {
    mappingInReplaceAllMode(result, newCmptOptions);
  }
  makeIdAndName(result);
  return result;
}
function prepareResult(existings, existingIdIdxMap, mode) {
  const result = [];
  if (mode === "replaceAll") {
    return result;
  }
  for (let index = 0; index < existings.length; index++) {
    const existing = existings[index];
    if (existing && existing.id != null) {
      existingIdIdxMap.set(existing.id, index);
    }
    result.push({
      existing: mode === "replaceMerge" || isComponentIdInternal(existing) ? null : existing,
      newOption: null,
      keyInfo: null,
      brandNew: null
    });
  }
  return result;
}
function mappingById(result, existings, existingIdIdxMap, newCmptOptions) {
  each(newCmptOptions, function(cmptOption, index) {
    if (!cmptOption || cmptOption.id == null) {
      return;
    }
    const optionId = makeComparableKey(cmptOption.id);
    const existingIdx = existingIdIdxMap.get(optionId);
    if (existingIdx != null) {
      const resultItem = result[existingIdx];
      assert(!resultItem.newOption, 'Duplicated option on id "' + optionId + '".');
      resultItem.newOption = cmptOption;
      resultItem.existing = existings[existingIdx];
      newCmptOptions[index] = null;
    }
  });
}
function mappingByName(result, newCmptOptions) {
  each(newCmptOptions, function(cmptOption, index) {
    if (!cmptOption || cmptOption.name == null) {
      return;
    }
    for (let i = 0; i < result.length; i++) {
      const existing = result[i].existing;
      if (!result[i].newOption && existing && (existing.id == null || cmptOption.id == null) && !isComponentIdInternal(cmptOption) && !isComponentIdInternal(existing) && keyExistAndEqual("name", existing, cmptOption)) {
        result[i].newOption = cmptOption;
        newCmptOptions[index] = null;
        return;
      }
    }
  });
}
function mappingByIndex(result, newCmptOptions, brandNew) {
  let nextIdx = 0;
  each(newCmptOptions, function(cmptOption) {
    if (!cmptOption) {
      return;
    }
    let resultItem;
    while ((resultItem = result[nextIdx]) && (resultItem.newOption || isComponentIdInternal(resultItem.existing) || resultItem.existing && cmptOption.id != null && !keyExistAndEqual("id", cmptOption, resultItem.existing))) {
      nextIdx++;
    }
    if (resultItem) {
      resultItem.newOption = cmptOption;
      resultItem.brandNew = brandNew;
    } else {
      result.push({
        newOption: cmptOption,
        brandNew,
        existing: null,
        keyInfo: null
      });
    }
    nextIdx++;
  });
}
function mappingInReplaceAllMode(result, newCmptOptions) {
  each(newCmptOptions, function(cmptOption) {
    result.push({
      newOption: cmptOption,
      brandNew: true,
      existing: null,
      keyInfo: null
    });
  });
}
function makeIdAndName(mapResult) {
  const idMap = createHashMap();
  each(mapResult, function(item) {
    const existing = item.existing;
    existing && idMap.set(existing.id, item);
  });
  each(mapResult, function(item) {
    const opt = item.newOption;
    assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, "id duplicates: " + (opt && opt.id));
    opt && opt.id != null && idMap.set(opt.id, item);
    !item.keyInfo && (item.keyInfo = {});
  });
  each(mapResult, function(item, index) {
    const existing = item.existing;
    const opt = item.newOption;
    const keyInfo = item.keyInfo;
    if (!isObject(opt)) {
      return;
    }
    keyInfo.name = opt.name != null ? makeComparableKey(opt.name) : existing ? existing.name : DUMMY_COMPONENT_NAME_PREFIX + index;
    if (existing) {
      keyInfo.id = makeComparableKey(existing.id);
    } else if (opt.id != null) {
      keyInfo.id = makeComparableKey(opt.id);
    } else {
      let idNum = 0;
      do {
        keyInfo.id = "\0" + keyInfo.name + "\0" + idNum++;
      } while (idMap.get(keyInfo.id));
    }
    idMap.set(keyInfo.id, item);
  });
}
function keyExistAndEqual(attr2, obj1, obj2) {
  const key1 = obj1[attr2];
  const key2 = obj2[attr2];
  return key1 != null && key2 != null && key1 + "" === key2 + "";
}
function makeComparableKey(val) {
  if (__DEV__) {
    if (val == null) {
      throw new Error();
    }
  }
  return val + "";
}
function validateIdOrName(idOrName) {
  if (__DEV__) {
    assert(isValidIdOrName(idOrName), "`" + idOrName + "` is invalid id or name. Must be a string.");
  }
}
function isValidIdOrName(idOrName) {
  return isString(idOrName) || isNumeric(idOrName);
}
function isNameSpecified(componentModel) {
  const name = componentModel.name;
  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));
}
function isComponentIdInternal(cmptOption) {
  return cmptOption && cmptOption.id != null && makeComparableKey(cmptOption.id).indexOf(INTERNAL_COMPONENT_ID_PREFIX) === 0;
}
function makeInternalComponentId(idSuffix) {
  return INTERNAL_COMPONENT_ID_PREFIX + idSuffix;
}
function setComponentTypeToKeyInfo(mappingResult, mainType, componentModelCtor) {
  each(mappingResult, function(item) {
    const newOption = item.newOption;
    if (isObject(newOption)) {
      item.keyInfo.mainType = mainType;
      item.keyInfo.subType = determineSubType(mainType, newOption, item.existing, componentModelCtor);
    }
  });
}
function determineSubType(mainType, newCmptOption, existComponent, componentModelCtor) {
  const subType = newCmptOption.type ? newCmptOption.type : existComponent ? existComponent.subType : componentModelCtor.determineSubType(mainType, newCmptOption);
  return subType;
}
function compressBatches(batchA, batchB) {
  const mapA = {};
  const mapB = {};
  makeMap(batchA || [], mapA);
  makeMap(batchB || [], mapB, mapA);
  return [mapToArray(mapA), mapToArray(mapB)];
  function makeMap(sourceBatch, map3, otherMap) {
    for (let i = 0, len2 = sourceBatch.length; i < len2; i++) {
      const seriesId = sourceBatch[i].seriesId;
      const dataIndices = normalizeToArray(sourceBatch[i].dataIndex);
      const otherDataIndices = otherMap && otherMap[seriesId];
      for (let j = 0, lenj = dataIndices.length; j < lenj; j++) {
        const dataIndex = dataIndices[j];
        if (otherDataIndices && otherDataIndices[dataIndex]) {
          otherDataIndices[dataIndex] = null;
        } else {
          (map3[seriesId] || (map3[seriesId] = {}))[dataIndex] = 1;
        }
      }
    }
  }
  function mapToArray(map3, isData) {
    const result = [];
    for (const i in map3) {
      if (map3.hasOwnProperty(i) && map3[i] != null) {
        if (isData) {
          result.push(+i);
        } else {
          const dataIndices = mapToArray(map3[i], true);
          dataIndices.length && result.push({
            seriesId: i,
            dataIndex: dataIndices
          });
        }
      }
    }
    return result;
  }
}
function queryDataIndex(data, payload) {
  if (payload.dataIndexInside != null) {
    return payload.dataIndexInside;
  } else if (payload.dataIndex != null) {
    return isArray(payload.dataIndex) ? map2(payload.dataIndex, function(value) {
      return data.indexOfRawIndex(value);
    }) : data.indexOfRawIndex(payload.dataIndex);
  } else if (payload.name != null) {
    return isArray(payload.name) ? map2(payload.name, function(value) {
      return data.indexOfName(value);
    }) : data.indexOfName(payload.name);
  }
}
function makeInner() {
  const key = "__ec_inner_" + innerUniqueIndex++;
  return function(hostObj) {
    return hostObj[key] || (hostObj[key] = {});
  };
}
let innerUniqueIndex = Math.round(Math.random() * 5);
function parseFinder(ecModel, finderInput, opt) {
  let finder;
  if (isString(finderInput)) {
    const obj = {};
    obj[finderInput + "Index"] = 0;
    finder = obj;
  } else {
    finder = finderInput;
  }
  const defaultMainType = opt ? opt.defaultMainType : null;
  const queryOptionMap = createHashMap();
  const result = {};
  each(finder, function(value, key) {
    if (key === "dataIndex" || key === "dataIndexInside") {
      result[key] = value;
      return;
    }
    const parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
    const mainType = parsedKey[1];
    const queryType = (parsedKey[2] || "").toLowerCase();
    if (!mainType || !queryType || mainType !== defaultMainType && value == null || opt && opt.includeMainTypes && indexOf(opt.includeMainTypes, mainType) < 0) {
      return;
    }
    const queryOption = queryOptionMap.get(mainType) || queryOptionMap.set(mainType, {});
    queryOption[queryType] = value;
  });
  queryOptionMap.each(function(queryOption, mainType) {
    const queryResult = queryReferringComponents(ecModel, mainType, queryOption, {
      useDefault: mainType === defaultMainType,
      enableAll: true,
      enableNone: true
    });
    result[mainType + "Models"] = queryResult.models;
    result[mainType + "Model"] = queryResult.models[0];
  });
  return result;
}
const SINGLE_REFERRING = {
  useDefault: true,
  enableAll: false,
  enableNone: false
};
const MULTIPLE_REFERRING = {
  useDefault: false,
  enableAll: true,
  enableNone: true
};
function queryReferringComponents(ecModel, mainType, userOption, opt) {
  let indexOption = userOption.index;
  let idOption = userOption.id;
  let nameOption = userOption.name;
  const result = {
    models: null,
    specified: indexOption != null || idOption != null || nameOption != null
  };
  if (!result.specified) {
    let firstCmpt;
    result.models = opt.useDefault && (firstCmpt = ecModel.getComponent(mainType)) ? [firstCmpt] : [];
    return result;
  }
  if (indexOption === "none" || indexOption === false) {
    assert(opt.enableNone, '`"none"` or `false` is not a valid value on index option.');
    result.models = [];
    return result;
  }
  if (indexOption === "all") {
    assert(opt.enableAll, '`"all"` is not a valid value on index option.');
    indexOption = idOption = nameOption = null;
  }
  result.models = ecModel.queryComponents({
    mainType,
    index: indexOption,
    id: idOption,
    name: nameOption
  });
  return result;
}
function setAttribute(dom2, key, value) {
  dom2.setAttribute ? dom2.setAttribute(key, value) : dom2[key] = value;
}
function getAttribute(dom2, key) {
  return dom2.getAttribute ? dom2.getAttribute(key) : dom2[key];
}
function getTooltipRenderMode(renderModeOption) {
  if (renderModeOption === "auto") {
    return env_default.domSupported ? "html" : "richText";
  } else {
    return renderModeOption || "html";
  }
}
function groupData(array, getKey2) {
  const buckets = createHashMap();
  const keys2 = [];
  each(array, function(item) {
    const key = getKey2(item);
    (buckets.get(key) || (keys2.push(key), buckets.set(key, []))).push(item);
  });
  return {
    keys: keys2,
    buckets
  };
}

// src/util/clazz.ts
const TYPE_DELIMITER = ".";
const IS_CONTAINER = "___EC__COMPONENT__CONTAINER___";
const IS_EXTENDED_CLASS = "___EC__EXTENDED_CLASS___";
function parseClassType(componentType) {
  const ret = {
    main: "",
    sub: ""
  };
  if (componentType) {
    const typeArr = componentType.split(TYPE_DELIMITER);
    ret.main = typeArr[0] || "";
    ret.sub = typeArr[1] || "";
  }
  return ret;
}
function checkClassType(componentType) {
  assert(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
}
function isExtendedClass(clz) {
  return !!(clz && clz[IS_EXTENDED_CLASS]);
}
function enableClassExtend(rootClz, mandatoryMethods) {
  rootClz.$constructor = rootClz;
  rootClz.extend = function(proto2) {
    if (__DEV__) {
      each(mandatoryMethods, function(method) {
        if (!proto2[method]) {
          console.warn("Method `" + method + "` should be implemented" + (proto2.type ? " in " + proto2.type : "") + ".");
        }
      });
    }
    const superClass = this;
    function ExtendedClass(...args) {
      if (!proto2.$constructor) {
        if (!isESClass(superClass)) {
          superClass.apply(this, arguments);
        } else {
          const ins = createObject(ExtendedClass.prototype, new superClass(...args));
          return ins;
        }
      } else {
        proto2.$constructor.apply(this, arguments);
      }
    }
    ExtendedClass[IS_EXTENDED_CLASS] = true;
    extend(ExtendedClass.prototype, proto2);
    ExtendedClass.extend = this.extend;
    ExtendedClass.superCall = superCall;
    ExtendedClass.superApply = superApply;
    inherits(ExtendedClass, this);
    ExtendedClass.superClass = superClass;
    return ExtendedClass;
  };
}
function isESClass(fn) {
  return typeof fn === "function" && /^class\s/.test(Function.prototype.toString.call(fn));
}
function mountExtend(SubClz, SupperClz) {
  SubClz.extend = SupperClz.extend;
}
let classBase = Math.round(Math.random() * 10);
function enableClassCheck(target) {
  const classAttr = ["__\0is_clz", classBase++].join("_");
  target.prototype[classAttr] = true;
  if (__DEV__) {
    assert(!target.isInstance, 'The method "is" can not be defined.');
  }
  target.isInstance = function(obj) {
    return !!(obj && obj[classAttr]);
  };
}
function superCall(context, methodName, ...args) {
  return this.superClass.prototype[methodName].apply(context, args);
}
function superApply(context, methodName, args) {
  return this.superClass.prototype[methodName].apply(context, args);
}
function enableClassManagement(target, options) {
  options = options || {};
  const storage2 = {};
  target.registerClass = function(clz) {
    const componentFullType = clz.type || clz.prototype.type;
    if (componentFullType) {
      checkClassType(componentFullType);
      clz.prototype.type = componentFullType;
      const componentTypeInfo = parseClassType(componentFullType);
      if (!componentTypeInfo.sub) {
        if (__DEV__) {
          if (storage2[componentTypeInfo.main]) {
            console.warn(componentTypeInfo.main + " exists.");
          }
        }
        storage2[componentTypeInfo.main] = clz;
      } else if (componentTypeInfo.sub !== IS_CONTAINER) {
        const container = makeContainer(componentTypeInfo);
        container[componentTypeInfo.sub] = clz;
      }
    }
    return clz;
  };
  target.getClass = function(mainType, subType, throwWhenNotFound) {
    let clz = storage2[mainType];
    if (clz && clz[IS_CONTAINER]) {
      clz = subType ? clz[subType] : null;
    }
    if (throwWhenNotFound && !clz) {
      throw new Error(!subType ? mainType + ".type should be specified." : "Component " + mainType + "." + (subType || "") + " not exists. Load it first.");
    }
    return clz;
  };
  target.getClassesByMainType = function(componentType) {
    const componentTypeInfo = parseClassType(componentType);
    const result = [];
    const obj = storage2[componentTypeInfo.main];
    if (obj && obj[IS_CONTAINER]) {
      each(obj, function(o, type) {
        type !== IS_CONTAINER && result.push(o);
      });
    } else {
      result.push(obj);
    }
    return result;
  };
  target.hasClass = function(componentType) {
    const componentTypeInfo = parseClassType(componentType);
    return !!storage2[componentTypeInfo.main];
  };
  target.getAllClassMainTypes = function() {
    const types298 = [];
    each(storage2, function(obj, type) {
      types298.push(type);
    });
    return types298;
  };
  target.hasSubTypes = function(componentType) {
    const componentTypeInfo = parseClassType(componentType);
    const obj = storage2[componentTypeInfo.main];
    return obj && obj[IS_CONTAINER];
  };
  function makeContainer(componentTypeInfo) {
    let container = storage2[componentTypeInfo.main];
    if (!container || !container[IS_CONTAINER]) {
      container = storage2[componentTypeInfo.main] = {};
      container[IS_CONTAINER] = true;
    }
    return container;
  }
  if (options.registerWhenExtend) {
    const originalExtend = target.extend;
    if (originalExtend) {
      target.extend = function(proto2) {
        const ExtendedClass = originalExtend.call(this, proto2);
        return target.registerClass(ExtendedClass);
      };
    }
  }
}

// src/model/mixin/makeStyleMapper.ts
function makeStyleMapper_default(properties, ignoreParent) {
  for (let i = 0; i < properties.length; i++) {
    if (!properties[i][1]) {
      properties[i][1] = properties[i][0];
    }
  }
  ignoreParent = ignoreParent || false;
  return function(model65, excludes, includes) {
    const style2 = {};
    for (let i = 0; i < properties.length; i++) {
      const propName = properties[i][1];
      if (excludes && indexOf(excludes, propName) >= 0 || includes && indexOf(includes, propName) < 0) {
        continue;
      }
      const val = model65.getShallow(propName, ignoreParent);
      if (val != null) {
        style2[properties[i][0]] = val;
      }
    }
    return style2;
  };
}

// src/model/mixin/areaStyle.ts
const AREA_STYLE_KEY_MAP = [["fill", "color"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["opacity"], ["shadowColor"]];
const getAreaStyle = makeStyleMapper_default(AREA_STYLE_KEY_MAP);
class AreaStyleMixin {
  getAreaStyle(excludes, includes) {
    return getAreaStyle(this, excludes, includes);
  }
}

// src/util/graphic.ts
const graphic_exports = {};
__export(graphic_exports, {
  Arc: () => Arc_default,
  BezierCurve: () => BezierCurve_default,
  BoundingRect: () => BoundingRect_default,
  Circle: () => Circle_default,
  CompoundPath: () => CompoundPath2,
  Ellipse: () => Ellipse_default,
  Group: () => Group_default,
  Image: () => Image_default,
  IncrementalDisplayable: () => IncrementalDisplayble,
  Line: () => Line_default,
  LinearGradient: () => LinearGradient4,
  OrientedBoundingRect: () => OrientedBoundingRect_default,
  Path: () => Path_default,
  Point: () => Point4,
  Polygon: () => Polygon_default,
  Polyline: () => Polyline_default,
  RadialGradient: () => RadialGradient_default,
  Rect: () => Rect_default,
  Ring: () => Ring_default,
  Sector: () => Sector_default,
  Text: () => Text_default,
  applyTransform: () => applyTransform2,
  clipPointsByRect: () => clipPointsByRect,
  clipRectByRect: () => clipRectByRect,
  createIcon: () => createIcon,
  extendPath: () => extendPath,
  extendShape: () => extendShape,
  getECData: () => getECData,
  getShapeClass: () => getShapeClass,
  getTransform: () => getTransform,
  groupTransition: () => groupTransition,
  initLabel: () => initLabel,
  initProps: () => initProps,
  isElementRemoved: () => isElementRemoved,
  lineLineIntersect: () => lineLineIntersect,
  linePolygonIntersect: () => linePolygonIntersect,
  makeImage: () => makeImage,
  makePath: () => makePath,
  mergePath: () => mergePath2,
  registerShape: () => registerShape,
  removeElement: () => removeElement,
  removeElementWithFadeOut: () => removeElementWithFadeOut,
  resizePath: () => resizePath,
  subPixelOptimize: () => subPixelOptimize4,
  subPixelOptimizeLine: () => subPixelOptimizeLine2,
  subPixelOptimizeRect: () => subPixelOptimizeRect2,
  transformDirection: () => transformDirection,
  updateLabel: () => updateLabel,
  updateProps: () => updateProps
});
const mathMax9 = Math.max;
const mathMin9 = Math.min;
const _customShapeMap = {};
function extendShape(opts) {
  return Path_default.extend(opts);
}
const extendPathFromString = extendFromString;
function extendPath(pathData, opts) {
  return extendPathFromString(pathData, opts);
}
function registerShape(name, ShapeClass) {
  _customShapeMap[name] = ShapeClass;
}
function getShapeClass(name) {
  if (_customShapeMap.hasOwnProperty(name)) {
    return _customShapeMap[name];
  }
}
function makePath(pathData, opts, rect, layout33) {
  const path2 = createFromString(pathData, opts);
  if (rect) {
    if (layout33 === "center") {
      rect = centerGraphic(rect, path2.getBoundingRect());
    }
    resizePath(path2, rect);
  }
  return path2;
}
function makeImage(imageUrl, rect, layout33) {
  const zrImg = new Image_default({
    style: {
      image: imageUrl,
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height
    },
    onload(img) {
      if (layout33 === "center") {
        const boundingRect = {
          width: img.width,
          height: img.height
        };
        zrImg.setStyle(centerGraphic(rect, boundingRect));
      }
    }
  });
  return zrImg;
}
function centerGraphic(rect, boundingRect) {
  const aspect = boundingRect.width / boundingRect.height;
  let width = rect.height * aspect;
  let height;
  if (width <= rect.width) {
    height = rect.height;
  } else {
    width = rect.width;
    height = width / aspect;
  }
  const cx = rect.x + rect.width / 2;
  const cy = rect.y + rect.height / 2;
  return {
    x: cx - width / 2,
    y: cy - height / 2,
    width,
    height
  };
}
const mergePath2 = mergePath;
function resizePath(path2, rect) {
  if (!path2.applyTransform) {
    return;
  }
  const pathRect = path2.getBoundingRect();
  const m2 = pathRect.calculateTransform(rect);
  path2.applyTransform(m2);
}
function subPixelOptimizeLine2(param) {
  subPixelOptimizeLine(param.shape, param.shape, param.style);
  return param;
}
function subPixelOptimizeRect2(param) {
  subPixelOptimizeRect(param.shape, param.shape, param.style);
  return param;
}
const subPixelOptimize4 = subPixelOptimize;
function animateOrSetProps(animationType, el, props, animatableModel, dataIndex, cb, during) {
  let isFrom = false;
  if (typeof dataIndex === "function") {
    during = cb;
    cb = dataIndex;
    dataIndex = null;
  } else if (isObject(dataIndex)) {
    cb = dataIndex.cb;
    during = dataIndex.during;
    isFrom = dataIndex.isFrom;
    dataIndex = dataIndex.dataIndex;
  }
  const isUpdate = animationType === "update";
  const isRemove = animationType === "remove";
  let animationPayload;
  if (animatableModel && animatableModel.ecModel) {
    const updatePayload = animatableModel.ecModel.getUpdatePayload();
    animationPayload = updatePayload && updatePayload.animation;
  }
  const animationEnabled = animatableModel && animatableModel.isAnimationEnabled();
  if (animationEnabled) {
    let duration;
    let animationEasing;
    let animationDelay;
    if (animationPayload) {
      duration = animationPayload.duration || 0;
      animationEasing = animationPayload.easing || "cubicOut";
      animationDelay = animationPayload.delay || 0;
    } else if (isRemove) {
      duration = 200;
      animationEasing = "cubicOut";
      animationDelay = 0;
    } else {
      duration = animatableModel.getShallow(isUpdate ? "animationDurationUpdate" : "animationDuration");
      animationEasing = animatableModel.getShallow(isUpdate ? "animationEasingUpdate" : "animationEasing");
      animationDelay = animatableModel.getShallow(isUpdate ? "animationDelayUpdate" : "animationDelay");
      if (typeof animationDelay === "function") {
        animationDelay = animationDelay(dataIndex, animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
      }
      if (typeof duration === "function") {
        duration = duration(dataIndex);
      }
    }
    if (!isRemove) {
      el.stopAnimation("remove");
    }
    duration > 0 ? isFrom ? el.animateFrom(props, {
      duration,
      delay: animationDelay || 0,
      easing: animationEasing,
      done: cb,
      force: !!cb || !!during,
      scope: animationType,
      during
    }) : el.animateTo(props, {
      duration,
      delay: animationDelay || 0,
      easing: animationEasing,
      done: cb,
      force: !!cb || !!during,
      setToFinal: true,
      scope: animationType,
      during
    }) : (el.stopAnimation(), el.attr(props), cb && cb());
  } else {
    el.stopAnimation();
    !isFrom && el.attr(props);
    cb && cb();
  }
}
function updateProps(el, props, animatableModel, dataIndex, cb, during) {
  animateOrSetProps("update", el, props, animatableModel, dataIndex, cb, during);
}
function initProps(el, props, animatableModel, dataIndex, cb, during) {
  animateOrSetProps("init", el, props, animatableModel, dataIndex, cb, during);
}
function removeElement(el, props, animatableModel, dataIndex, cb, during) {
  animateOrSetProps("remove", el, props, animatableModel, dataIndex, cb, during);
}
function fadeOutDisplayable(el, animatableModel, dataIndex, done) {
  el.removeTextContent();
  el.removeTextGuideLine();
  removeElement(el, {
    style: {
      opacity: 0
    }
  }, animatableModel, dataIndex, done);
}
function removeElementWithFadeOut(el, animatableModel, dataIndex) {
  function doRemove() {
    el.parent && el.parent.remove(el);
  }
  if (!el.isGroup) {
    fadeOutDisplayable(el, animatableModel, dataIndex, doRemove);
  } else {
    el.traverse(function(disp) {
      if (!disp.isGroup) {
        fadeOutDisplayable(disp, animatableModel, dataIndex, doRemove);
      }
    });
  }
}
function isElementRemoved(el) {
  if (!el.__zr) {
    return true;
  }
  for (let i = 0; i < el.animators.length; i++) {
    const animator = el.animators[i];
    if (animator.scope === "remove") {
      return true;
    }
  }
  return false;
}
function animateOrSetLabel(animationType, el, data, dataIndex, labelModel, seriesModel, animatableModel, defaultTextGetter) {
  const valueAnimationEnabled = labelModel && labelModel.get("valueAnimation");
  if (valueAnimationEnabled) {
    const precisionOption = labelModel.get("precision");
    const precision = precisionOption === "auto" ? 0 : precisionOption;
    let interpolateValues;
    const rawValues = seriesModel.getRawValue(dataIndex);
    let isRawValueNumber = false;
    if (typeof rawValues === "number") {
      isRawValueNumber = true;
      interpolateValues = rawValues;
    } else {
      interpolateValues = [];
      for (let i = 0; i < rawValues.length; ++i) {
        const info = data.getDimensionInfo(i);
        if (info.type !== "ordinal") {
          interpolateValues.push(rawValues[i]);
        }
      }
    }
    const during = (percent) => {
      let interpolated;
      if (isRawValueNumber) {
        const value = interpolateNumber(0, interpolateValues, percent);
        interpolated = round2(value, precision);
      } else {
        interpolated = [];
        for (let i = 0; i < rawValues.length; ++i) {
          const info = data.getDimensionInfo(i);
          if (info.type === "ordinal") {
            interpolated[i] = rawValues[i];
          } else {
            const value = interpolateNumber(0, interpolateValues[i], percent);
            interpolated[i] = round2(value), precision;
          }
        }
      }
      const text11 = el.getTextContent();
      if (text11) {
        const labelText = getLabelText({
          labelDataIndex: dataIndex,
          labelFetcher: seriesModel,
          defaultText: defaultTextGetter ? defaultTextGetter(interpolated) : interpolated + ""
        }, {
          normal: labelModel
        }, interpolated);
        text11.style.text = labelText.normal;
        text11.dirty();
      }
    };
    const props = {};
    animateOrSetProps(animationType, el, props, animatableModel, dataIndex, null, during);
  }
}
function updateLabel(el, data, dataIndex, labelModel, seriesModel, animatableModel, defaultTextGetter) {
  animateOrSetLabel("update", el, data, dataIndex, labelModel, seriesModel, animatableModel, defaultTextGetter);
}
function initLabel(el, data, dataIndex, labelModel, seriesModel, animatableModel, defaultTextGetter) {
  animateOrSetLabel("init", el, data, dataIndex, labelModel, seriesModel, animatableModel, defaultTextGetter);
}
function getTransform(target, ancestor) {
  const mat = identity([]);
  while (target && target !== ancestor) {
    mul(mat, target.getLocalTransform(), mat);
    target = target.parent;
  }
  return mat;
}
function applyTransform2(target, transform, invert2) {
  if (transform && !isArrayLike(transform)) {
    transform = Transformable_default.getLocalTransform(transform);
  }
  if (invert2) {
    transform = invert([], transform);
  }
  return applyTransform([], target, transform);
}
function transformDirection(direction, transform, invert2) {
  const hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
  const vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
  let vertex = [direction === "left" ? -hBase : direction === "right" ? hBase : 0, direction === "top" ? -vBase : direction === "bottom" ? vBase : 0];
  vertex = applyTransform2(vertex, transform, invert2);
  return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? "right" : "left" : vertex[1] > 0 ? "bottom" : "top";
}
function isNotGroup(el) {
  return !el.isGroup;
}
function isPath(el) {
  return el.shape != null;
}
function groupTransition(g1, g2, animatableModel) {
  if (!g1 || !g2) {
    return;
  }
  function getElMap(g) {
    const elMap = {};
    g.traverse(function(el) {
      if (isNotGroup(el) && el.anid) {
        elMap[el.anid] = el;
      }
    });
    return elMap;
  }
  function getAnimatableProps(el) {
    const obj = {
      x: el.x,
      y: el.y,
      rotation: el.rotation
    };
    if (isPath(el)) {
      obj.shape = extend({}, el.shape);
    }
    return obj;
  }
  const elMap1 = getElMap(g1);
  g2.traverse(function(el) {
    if (isNotGroup(el) && el.anid) {
      const oldEl = elMap1[el.anid];
      if (oldEl) {
        const newProp = getAnimatableProps(el);
        el.attr(getAnimatableProps(oldEl));
        updateProps(el, newProp, animatableModel, getECData(el).dataIndex);
      }
    }
  });
}
function clipPointsByRect(points9, rect) {
  return map2(points9, function(point) {
    let x = point[0];
    x = mathMax9(x, rect.x);
    x = mathMin9(x, rect.x + rect.width);
    let y = point[1];
    y = mathMax9(y, rect.y);
    y = mathMin9(y, rect.y + rect.height);
    return [x, y];
  });
}
function clipRectByRect(targetRect, rect) {
  const x = mathMax9(targetRect.x, rect.x);
  const x2 = mathMin9(targetRect.x + targetRect.width, rect.x + rect.width);
  const y = mathMax9(targetRect.y, rect.y);
  const y2 = mathMin9(targetRect.y + targetRect.height, rect.y + rect.height);
  if (x2 >= x && y2 >= y) {
    return {
      x,
      y,
      width: x2 - x,
      height: y2 - y
    };
  }
}
function createIcon(iconStr, opt, rect) {
  const innerOpts = extend({
    rectHover: true
  }, opt);
  const style2 = innerOpts.style = {
    strokeNoScale: true
  };
  rect = rect || {
    x: -1,
    y: -1,
    width: 2,
    height: 2
  };
  if (iconStr) {
    return iconStr.indexOf("image://") === 0 ? (style2.image = iconStr.slice(8), defaults(style2, rect), new Image_default(innerOpts)) : makePath(iconStr.replace("path://", ""), innerOpts, rect, "center");
  }
}
function linePolygonIntersect(a1x, a1y, a2x, a2y, points9) {
  for (let i = 0, p2 = points9[points9.length - 1]; i < points9.length; i++) {
    const p = points9[i];
    if (lineLineIntersect(a1x, a1y, a2x, a2y, p[0], p[1], p2[0], p2[1])) {
      return true;
    }
    p2 = p;
  }
}
function lineLineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
  const mx = a2x - a1x;
  const my = a2y - a1y;
  const nx = b2x - b1x;
  const ny = b2y - b1y;
  const nmCrossProduct = crossProduct2d(nx, ny, mx, my);
  if (nearZero(nmCrossProduct)) {
    return false;
  }
  const b1a1x = a1x - b1x;
  const b1a1y = a1y - b1y;
  const q = crossProduct2d(b1a1x, b1a1y, mx, my) / nmCrossProduct;
  if (q < 0 || q > 1) {
    return false;
  }
  const p = crossProduct2d(b1a1x, b1a1y, nx, ny) / nmCrossProduct;
  if (p < 0 || p > 1) {
    return false;
  }
  return true;
}
function crossProduct2d(x1, y1, x2, y2) {
  return x1 * y2 - x2 * y1;
}
function nearZero(val) {
  return val <= 1e-06 && val >= -1e-06;
}
const getECData = makeInner();
registerShape("circle", Circle_default);
registerShape("ellipse", Ellipse_default);
registerShape("sector", Sector_default);
registerShape("ring", Ring_default);
registerShape("polygon", Polygon_default);
registerShape("polyline", Polyline_default);
registerShape("rect", Rect_default);
registerShape("line", Line_default);
registerShape("bezierCurve", BezierCurve_default);
registerShape("arc", Arc_default);

// src/util/states.ts
let _highlightNextDigit = 1;
const _highlightKeyMap = {};
const getSavedStates = makeInner();
const HOVER_STATE_NORMAL = 0;
const HOVER_STATE_BLUR = 1;
const HOVER_STATE_EMPHASIS = 2;
const SPECIAL_STATES = ["emphasis", "blur", "select"];
const DISPLAY_STATES = ["normal", "emphasis", "blur", "select"];
const Z2_EMPHASIS_LIFT = 10;
const Z2_SELECT_LIFT = 9;
const HIGHLIGHT_ACTION_TYPE = "highlight";
const DOWNPLAY_ACTION_TYPE = "downplay";
const SELECT_ACTION_TYPE = "select";
const UNSELECT_ACTION_TYPE = "unselect";
const TOGGLE_SELECT_ACTION_TYPE = "toggleSelect";
function hasFillOrStroke(fillOrStroke) {
  return fillOrStroke != null && fillOrStroke !== "none";
}
const liftedColorCache = new LRU2(100);
function liftColor(color8) {
  if (typeof color8 !== "string") {
    return color8;
  }
  let liftedColor = liftedColorCache.get(color8);
  if (!liftedColor) {
    liftedColor = lift(color8, -0.1);
    liftedColorCache.put(color8, liftedColor);
  }
  return liftedColor;
}
function doChangeHoverState(el, stateName, hoverStateEnum) {
  if (el.onHoverStateChange) {
    if ((el.hoverState || 0) !== hoverStateEnum) {
      el.onHoverStateChange(stateName);
    }
  }
  el.hoverState = hoverStateEnum;
}
function singleEnterEmphasis(el) {
  doChangeHoverState(el, "emphasis", HOVER_STATE_EMPHASIS);
}
function singleLeaveEmphasis(el) {
  doChangeHoverState(el, "normal", HOVER_STATE_NORMAL);
}
function singleEnterBlur(el) {
  doChangeHoverState(el, "blur", HOVER_STATE_BLUR);
}
function singleLeaveBlur(el) {
  doChangeHoverState(el, "normal", HOVER_STATE_NORMAL);
}
function singleEnterSelect(el) {
  el.selected = true;
}
function singleLeaveSelect(el) {
  el.selected = false;
}
function updateElementState(el, updater, commonParam) {
  updater(el, commonParam);
}
function traverseUpdateState(el, updater, commonParam) {
  updateElementState(el, updater, commonParam);
  el.isGroup && el.traverse(function(child) {
    updateElementState(child, updater, commonParam);
  });
}
function setStatesFlag(el, stateName) {
  switch (stateName) {
    case "emphasis":
      el.hoverState = HOVER_STATE_EMPHASIS;
      break;
    case "normal":
      el.hoverState = HOVER_STATE_NORMAL;
      break;
    case "blur":
      el.hoverState = HOVER_STATE_BLUR;
      break;
    case "select":
      el.selected = true;
  }
}
function getFromStateStyle(el, props, toStateName, defaultValue) {
  const style2 = el.style;
  const fromState = {};
  for (let i = 0; i < props.length; i++) {
    const propName = props[i];
    const val = style2[propName];
    fromState[propName] = val == null ? defaultValue && defaultValue[propName] : val;
  }
  for (let i = 0; i < el.animators.length; i++) {
    const animator = el.animators[i];
    if (animator.__fromStateTransition && animator.__fromStateTransition.indexOf(toStateName) < 0 && animator.targetName === "style") {
      animator.saveFinalToTarget(fromState, props);
    }
  }
  return fromState;
}
function createEmphasisDefaultState(el, stateName, targetStates, state) {
  const hasSelect = targetStates && indexOf(targetStates, "select") >= 0;
  let cloned = false;
  if (el instanceof Path_default) {
    const store = getSavedStates(el);
    const fromFill = hasSelect ? store.selectFill || store.normalFill : store.normalFill;
    const fromStroke = hasSelect ? store.selectStroke || store.normalStroke : store.normalStroke;
    if (hasFillOrStroke(fromFill) || hasFillOrStroke(fromStroke)) {
      state = state || {};
      let emphasisStyle = state.style || {};
      if (!hasFillOrStroke(emphasisStyle.fill) && hasFillOrStroke(fromFill)) {
        cloned = true;
        state = extend({}, state);
        emphasisStyle = extend({}, emphasisStyle);
        emphasisStyle.fill = liftColor(fromFill);
      } else if (!hasFillOrStroke(emphasisStyle.stroke) && hasFillOrStroke(fromStroke)) {
        if (!cloned) {
          state = extend({}, state);
          emphasisStyle = extend({}, emphasisStyle);
        }
        emphasisStyle.stroke = liftColor(fromStroke);
      }
      state.style = emphasisStyle;
    }
  }
  if (state) {
    if (state.z2 == null) {
      if (!cloned) {
        state = extend({}, state);
      }
      const z2EmphasisLift = el.z2EmphasisLift;
      state.z2 = el.z2 + (z2EmphasisLift != null ? z2EmphasisLift : Z2_EMPHASIS_LIFT);
    }
  }
  return state;
}
function createSelectDefaultState(el, stateName, state) {
  if (state) {
    if (state.z2 == null) {
      state = extend({}, state);
      const z2SelectLift = el.z2SelectLift;
      state.z2 = el.z2 + (z2SelectLift != null ? z2SelectLift : Z2_SELECT_LIFT);
    }
  }
  return state;
}
function createBlurDefaultState(el, stateName, state) {
  const hasBlur = indexOf(el.currentStates, stateName) >= 0;
  const currentOpacity = el.style.opacity;
  const fromState = !hasBlur ? getFromStateStyle(el, ["opacity"], stateName, {
    opacity: 1
  }) : null;
  state = state || {};
  let blurStyle = state.style || {};
  if (blurStyle.opacity == null) {
    state = extend({}, state);
    blurStyle = extend({
      opacity: hasBlur ? currentOpacity : fromState.opacity * 0.1
    }, blurStyle);
    state.style = blurStyle;
  }
  return state;
}
function elementStateProxy(stateName, targetStates) {
  const state = this.states[stateName];
  if (this.style) {
    if (stateName === "emphasis") {
      return createEmphasisDefaultState(this, stateName, targetStates, state);
    } else if (stateName === "blur") {
      return createBlurDefaultState(this, stateName, state);
    } else if (stateName === "select") {
      return createSelectDefaultState(this, stateName, state);
    }
  }
  return state;
}
function setDefaultStateProxy(el) {
  el.stateProxy = elementStateProxy;
  const textContent = el.getTextContent();
  const textGuide = el.getTextGuideLine();
  if (textContent) {
    textContent.stateProxy = elementStateProxy;
  }
  if (textGuide) {
    textGuide.stateProxy = elementStateProxy;
  }
}
function enterEmphasisWhenMouseOver(el, e) {
  !shouldSilent(el, e) && !el.__highByOuter && traverseUpdateState(el, singleEnterEmphasis);
}
function leaveEmphasisWhenMouseOut(el, e) {
  !shouldSilent(el, e) && !el.__highByOuter && traverseUpdateState(el, singleLeaveEmphasis);
}
function enterEmphasis(el, highlightDigit) {
  el.__highByOuter |= 1 << (highlightDigit || 0);
  traverseUpdateState(el, singleEnterEmphasis);
}
function leaveEmphasis(el, highlightDigit) {
  !(el.__highByOuter &= ~(1 << (highlightDigit || 0))) && traverseUpdateState(el, singleLeaveEmphasis);
}
function enterBlur(el) {
  traverseUpdateState(el, singleEnterBlur);
}
function leaveBlur(el) {
  traverseUpdateState(el, singleLeaveBlur);
}
function enterSelect(el) {
  traverseUpdateState(el, singleEnterSelect);
}
function leaveSelect(el) {
  traverseUpdateState(el, singleLeaveSelect);
}
function shouldSilent(el, e) {
  return el.__highDownSilentOnTouch && e.zrByTouch;
}
function allLeaveBlur(ecIns) {
  const model65 = ecIns.getModel();
  model65.eachComponent(function(componentType, componentModel) {
    const view = componentType === "series" ? ecIns.getViewOfSeriesModel(componentModel) : ecIns.getViewOfComponentModel(componentModel);
    view.group.traverse(function(child) {
      singleLeaveBlur(child);
    });
  });
}
function toggleSeriesBlurState(targetSeriesIndex, focus, blurScope, ecIns, isBlur) {
  const ecModel = ecIns.getModel();
  blurScope = blurScope || "coordinateSystem";
  function leaveBlurOfIndices(data, dataIndices) {
    for (let i = 0; i < dataIndices.length; i++) {
      const itemEl = data.getItemGraphicEl(dataIndices[i]);
      itemEl && leaveBlur(itemEl);
    }
  }
  if (!isBlur) {
    allLeaveBlur(ecIns);
    return;
  }
  if (targetSeriesIndex == null) {
    return;
  }
  if (!focus || focus === "none") {
    return;
  }
  const targetSeriesModel = ecModel.getSeriesByIndex(targetSeriesIndex);
  let targetCoordSys = targetSeriesModel.coordinateSystem;
  if (targetCoordSys && targetCoordSys.master) {
    targetCoordSys = targetCoordSys.master;
  }
  const blurredSeries = [];
  ecModel.eachSeries(function(seriesModel) {
    const sameSeries = targetSeriesModel === seriesModel;
    let coordSys = seriesModel.coordinateSystem;
    if (coordSys && coordSys.master) {
      coordSys = coordSys.master;
    }
    const sameCoordSys = coordSys && targetCoordSys ? coordSys === targetCoordSys : sameSeries;
    if (!(blurScope === "series" && !sameSeries || blurScope === "coordinateSystem" && !sameCoordSys || focus === "series" && sameSeries)) {
      const view = ecIns.getViewOfSeriesModel(seriesModel);
      view.group.traverse(function(child) {
        singleEnterBlur(child);
      });
      if (isArrayLike(focus)) {
        leaveBlurOfIndices(seriesModel.getData(), focus);
      } else if (isObject(focus)) {
        const dataTypes = keys(focus);
        for (let d = 0; d < dataTypes.length; d++) {
          leaveBlurOfIndices(seriesModel.getData(dataTypes[d]), focus[dataTypes[d]]);
        }
      }
      blurredSeries.push(seriesModel);
    }
  });
  ecModel.eachComponent(function(componentType, componentModel) {
    if (componentType === "series") {
      return;
    }
    const view = ecIns.getViewOfComponentModel(componentModel);
    if (view && view.blurSeries) {
      view.blurSeries(blurredSeries, ecModel);
    }
  });
}
function toggleSeriesBlurStateFromPayload(seriesModel, payload, ecIns) {
  if (!isHighDownPayload(payload)) {
    return;
  }
  const isHighlight = payload.type === HIGHLIGHT_ACTION_TYPE;
  const seriesIndex = seriesModel.seriesIndex;
  const data = seriesModel.getData(payload.dataType);
  let dataIndex = queryDataIndex(data, payload);
  dataIndex = (isArray(dataIndex) ? dataIndex[0] : dataIndex) || 0;
  let el = data.getItemGraphicEl(dataIndex);
  if (!el) {
    const count2 = data.count();
    let current = 0;
    while (!el && current < count2) {
      el = data.getItemGraphicEl(current++);
    }
  }
  if (el) {
    const ecData = getECData(el);
    toggleSeriesBlurState(seriesIndex, ecData.focus, ecData.blurScope, ecIns, isHighlight);
  } else {
    const focus = seriesModel.get(["emphasis", "focus"]);
    const blurScope = seriesModel.get(["emphasis", "blurScope"]);
    if (focus != null) {
      toggleSeriesBlurState(seriesIndex, focus, blurScope, ecIns, isHighlight);
    }
  }
}
function toggleSelectionFromPayload(seriesModel, payload, ecIns) {
  if (!isSelectChangePayload(payload)) {
    return;
  }
  const dataType = payload.dataType;
  const data = seriesModel.getData(dataType);
  let dataIndex = queryDataIndex(data, payload);
  if (!isArray(dataIndex)) {
    dataIndex = [dataIndex];
  }
  seriesModel[payload.type === TOGGLE_SELECT_ACTION_TYPE ? "toggleSelect" : payload.type === SELECT_ACTION_TYPE ? "select" : "unselect"](dataIndex, dataType);
}
function updateSeriesElementSelection(seriesModel) {
  const allData = seriesModel.getAllData();
  each(allData, function({data, type}) {
    data.eachItemGraphicEl(function(el, idx) {
      seriesModel.isSelected(idx, type) ? enterSelect(el) : leaveSelect(el);
    });
  });
}
function getAllSelectedIndices(ecModel) {
  const ret = [];
  ecModel.eachSeries(function(seriesModel) {
    const allData = seriesModel.getAllData();
    each(allData, function({data, type}) {
      const dataIndices = seriesModel.getSelectedDataIndices();
      if (dataIndices.length > 0) {
        const item = {
          dataIndex: dataIndices,
          seriesIndex: seriesModel.seriesIndex
        };
        if (type != null) {
          item.dataType = type;
        }
        ret.push(item);
      }
    });
  });
  return ret;
}
function enableHoverEmphasis(el, focus, blurScope) {
  setAsHighDownDispatcher(el, true);
  traverseUpdateState(el, setDefaultStateProxy);
  enableHoverFocus(el, focus, blurScope);
}
function enableHoverFocus(el, focus, blurScope) {
  if (focus != null) {
    const ecData = getECData(el);
    ecData.focus = focus;
    ecData.blurScope = blurScope;
  }
}
const OTHER_STATES = ["emphasis", "blur", "select"];
const styleGetterMap = {
  itemStyle: "getItemStyle",
  lineStyle: "getLineStyle",
  areaStyle: "getAreaStyle"
};
function setStatesStylesFromModel(el, itemModel, styleType, getterType) {
  styleType = styleType || "itemStyle";
  for (let i = 0; i < OTHER_STATES.length; i++) {
    const stateName = OTHER_STATES[i];
    const model65 = itemModel.getModel([stateName, styleType]);
    const state = el.ensureState(stateName);
    state.style = model65[getterType || styleGetterMap[styleType]]();
  }
}
function setAsHighDownDispatcher(el, asDispatcher) {
  const disable = asDispatcher === false;
  const extendedEl = el;
  if (el.highDownSilentOnTouch) {
    extendedEl.__highDownSilentOnTouch = el.highDownSilentOnTouch;
  }
  if (!disable || extendedEl.__highDownDispatcher) {
    extendedEl.__highByOuter = extendedEl.__highByOuter || 0;
    extendedEl.__highDownDispatcher = !disable;
  }
}
function isHighDownDispatcher(el) {
  return !!(el && el.__highDownDispatcher);
}
function getHighlightDigit(highlightKey) {
  let highlightDigit = _highlightKeyMap[highlightKey];
  if (highlightDigit == null && _highlightNextDigit <= 32) {
    highlightDigit = _highlightKeyMap[highlightKey] = _highlightNextDigit++;
  }
  return highlightDigit;
}
function isSelectChangePayload(payload) {
  const payloadType = payload.type;
  return payloadType === SELECT_ACTION_TYPE || payloadType === UNSELECT_ACTION_TYPE || payloadType === TOGGLE_SELECT_ACTION_TYPE;
}
function isHighDownPayload(payload) {
  const payloadType = payload.type;
  return payloadType === HIGHLIGHT_ACTION_TYPE || payloadType === DOWNPLAY_ACTION_TYPE;
}
function savePathStates(el) {
  const store = getSavedStates(el);
  store.normalFill = el.style.fill;
  store.normalStroke = el.style.stroke;
  const selectState = el.states.select || {};
  store.selectFill = selectState.style && selectState.style.fill || null;
  store.selectStroke = selectState.style && selectState.style.stroke || null;
}

// src/util/log.ts
const storedLogs = {};
function deprecateLog(str) {
  if (__DEV__) {
    if (storedLogs[str]) {
      return;
    }
    if (typeof console !== "undefined" && console.warn) {
      storedLogs[str] = true;
      console.warn("[ECharts] DEPRECATED: " + str);
    }
  }
}
function deprecateReplaceLog(oldOpt, newOpt, scope) {
  if (__DEV__) {
    deprecateLog((scope ? `[${scope}]` : "") + `${oldOpt} is deprecated, use ${newOpt} instead.`);
  }
}

// src/label/labelStyle.ts
const EMPTY_OBJ = {};
function getLabelText(opt, stateModels, overrideValue) {
  const labelFetcher = opt.labelFetcher;
  const labelDataIndex = opt.labelDataIndex;
  const labelDimIndex = opt.labelDimIndex;
  const normalModel = stateModels.normal;
  let baseText;
  if (labelFetcher) {
    baseText = labelFetcher.getFormattedLabel(labelDataIndex, "normal", null, labelDimIndex, normalModel && normalModel.get("formatter"), overrideValue != null ? {
      value: overrideValue
    } : null);
  }
  if (baseText == null) {
    baseText = isFunction(opt.defaultText) ? opt.defaultText(labelDataIndex, opt) : opt.defaultText;
  }
  const statesText = {
    normal: baseText
  };
  for (let i = 0; i < SPECIAL_STATES.length; i++) {
    const stateName = SPECIAL_STATES[i];
    const stateModel = stateModels[stateName];
    statesText[stateName] = retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, stateName, null, labelDimIndex, stateModel && stateModel.get("formatter")) : null, baseText);
  }
  return statesText;
}
function setLabelStyle(targetEl, labelStatesModels, opt, stateSpecified) {
  opt = opt || EMPTY_OBJ;
  const isSetOnText = targetEl instanceof Text_default;
  let needsCreateText = false;
  for (let i = 0; i < DISPLAY_STATES.length; i++) {
    const stateModel = labelStatesModels[DISPLAY_STATES[i]];
    if (stateModel && stateModel.getShallow("show")) {
      needsCreateText = true;
      break;
    }
  }
  let textContent = isSetOnText ? targetEl : null;
  if (needsCreateText) {
    if (!isSetOnText) {
      textContent = targetEl.getTextContent();
      if (!textContent) {
        textContent = new Text_default();
        targetEl.setTextContent(textContent);
      }
      if (targetEl.stateProxy) {
        textContent.stateProxy = targetEl.stateProxy;
      }
    }
    const labelStatesTexts = getLabelText(opt, labelStatesModels);
    const normalModel = labelStatesModels.normal;
    const showNormal = normalModel.getShallow("show");
    const normalStyle = createTextStyle(normalModel, stateSpecified && stateSpecified.normal, opt, false, !isSetOnText);
    normalStyle.text = labelStatesTexts.normal;
    if (!isSetOnText) {
      targetEl.setTextConfig(createTextConfig(normalModel, opt, false));
    }
    for (let i = 0; i < SPECIAL_STATES.length; i++) {
      const stateName = SPECIAL_STATES[i];
      const stateModel = labelStatesModels[stateName];
      if (stateModel) {
        const stateObj = textContent.ensureState(stateName);
        stateObj.ignore = !retrieve2(stateModel.getShallow("show"), showNormal);
        stateObj.style = createTextStyle(stateModel, stateSpecified && stateSpecified[stateName], opt, true, !isSetOnText);
        stateObj.style.text = labelStatesTexts[stateName];
        if (!isSetOnText) {
          const targetElEmphasisState = targetEl.ensureState(stateName);
          targetElEmphasisState.textConfig = createTextConfig(stateModel, opt, true);
        }
      }
    }
    textContent.silent = !!normalModel.getShallow("silent");
    if (textContent.style.x != null) {
      normalStyle.x = textContent.style.x;
    }
    if (textContent.style.y != null) {
      normalStyle.y = textContent.style.y;
    }
    textContent.ignore = !showNormal;
    textContent.useStyle(normalStyle);
    textContent.dirty();
  } else if (textContent) {
    textContent.ignore = true;
  }
  targetEl.dirty();
}
function getLabelStatesModels(itemModel, labelName) {
  labelName = labelName || "label";
  const statesModels = {
    normal: itemModel.getModel(labelName)
  };
  for (let i = 0; i < SPECIAL_STATES.length; i++) {
    const stateName = SPECIAL_STATES[i];
    statesModels[stateName] = itemModel.getModel([stateName, labelName]);
  }
  return statesModels;
}
function createTextStyle(textStyleModel, specifiedTextStyle, opt, isNotNormal, isAttached) {
  const textStyle2 = {};
  setTextStyleCommon(textStyle2, textStyleModel, opt, isNotNormal, isAttached);
  specifiedTextStyle && extend(textStyle2, specifiedTextStyle);
  return textStyle2;
}
function createTextConfig(textStyleModel, opt, isNotNormal) {
  opt = opt || {};
  const textConfig = {};
  let labelPosition;
  let labelRotate = textStyleModel.getShallow("rotate");
  const labelDistance = retrieve2(textStyleModel.getShallow("distance"), isNotNormal ? null : 5);
  const labelOffset = textStyleModel.getShallow("offset");
  labelPosition = textStyleModel.getShallow("position") || (isNotNormal ? null : "inside");
  labelPosition === "outside" && (labelPosition = opt.defaultOutsidePosition || "top");
  if (labelPosition != null) {
    textConfig.position = labelPosition;
  }
  if (labelOffset != null) {
    textConfig.offset = labelOffset;
  }
  if (labelRotate != null) {
    labelRotate *= Math.PI / 180;
    textConfig.rotation = labelRotate;
  }
  if (labelDistance != null) {
    textConfig.distance = labelDistance;
  }
  textConfig.outsideFill = textStyleModel.get("color") === "inherit" ? opt.inheritColor || null : "auto";
  return textConfig;
}
function setTextStyleCommon(textStyle2, textStyleModel, opt, isNotNormal, isAttached) {
  opt = opt || EMPTY_OBJ;
  const ecModel = textStyleModel.ecModel;
  const globalTextStyle = ecModel && ecModel.option.textStyle;
  const richItemNames = getRichItemNames(textStyleModel);
  let richResult;
  if (richItemNames) {
    richResult = {};
    for (const name in richItemNames) {
      if (richItemNames.hasOwnProperty(name)) {
        const richTextStyle = textStyleModel.getModel(["rich", name]);
        setTokenTextStyle(richResult[name] = {}, richTextStyle, globalTextStyle, opt, isNotNormal, isAttached);
      }
    }
  }
  if (richResult) {
    textStyle2.rich = richResult;
  }
  const overflow = textStyleModel.get("overflow");
  if (overflow) {
    textStyle2.overflow = overflow;
  }
  const margin = textStyleModel.get("minMargin");
  if (margin != null) {
    textStyle2.margin = margin;
  }
  setTokenTextStyle(textStyle2, textStyleModel, globalTextStyle, opt, isNotNormal, isAttached, true);
}
function getRichItemNames(textStyleModel) {
  let richItemNameMap;
  while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {
    const rich = (textStyleModel.option || EMPTY_OBJ).rich;
    if (rich) {
      richItemNameMap = richItemNameMap || {};
      const richKeys = keys(rich);
      for (let i = 0; i < richKeys.length; i++) {
        const richKey = richKeys[i];
        richItemNameMap[richKey] = 1;
      }
    }
    textStyleModel = textStyleModel.parentModel;
  }
  return richItemNameMap;
}
const TEXT_PROPS_WITH_GLOBAL = ["fontStyle", "fontWeight", "fontSize", "fontFamily", "opacity", "textShadowColor", "textShadowBlur", "textShadowOffsetX", "textShadowOffsetY"];
const TEXT_PROPS_SELF = ["align", "lineHeight", "width", "height", "tag", "verticalAlign"];
const TEXT_PROPS_BOX = ["padding", "borderWidth", "borderRadius", "backgroundColor", "borderColor", "shadowColor", "shadowBlur", "shadowOffsetX", "shadowOffsetY"];
function setTokenTextStyle(textStyle2, textStyleModel, globalTextStyle, opt, isNotNormal, isAttached, isBlock) {
  globalTextStyle = !isNotNormal && globalTextStyle || EMPTY_OBJ;
  const inheritColor = opt && opt.inheritColor;
  let fillColor = textStyleModel.getShallow("color");
  let strokeColor = textStyleModel.getShallow("textBorderColor");
  if (fillColor === "inherit" || fillColor === "auto") {
    if (__DEV__) {
      if (fillColor === "auto") {
        deprecateReplaceLog("color: 'auto'", "color: 'inherit'");
      }
    }
    if (inheritColor) {
      fillColor = inheritColor;
    } else {
      fillColor = null;
    }
  }
  if (strokeColor === "inherit" || strokeColor === "auto") {
    if (__DEV__) {
      if (strokeColor === "auto") {
        deprecateReplaceLog("color: 'auto'", "color: 'inherit'");
      }
    }
    if (inheritColor) {
      strokeColor = inheritColor;
    } else {
      strokeColor = null;
    }
  }
  fillColor = fillColor || globalTextStyle.color;
  strokeColor = strokeColor || globalTextStyle.textBorderColor;
  if (fillColor != null) {
    textStyle2.fill = fillColor;
  }
  if (strokeColor != null) {
    textStyle2.stroke = strokeColor;
  }
  const lineWidth = retrieve2(textStyleModel.getShallow("textBorderWidth"), globalTextStyle.textBorderWidth);
  if (lineWidth != null) {
    textStyle2.lineWidth = lineWidth;
  }
  if (!isNotNormal && !isAttached) {
    if (textStyle2.fill == null && opt.inheritColor) {
      textStyle2.fill = opt.inheritColor;
    }
  }
  for (let i = 0; i < TEXT_PROPS_WITH_GLOBAL.length; i++) {
    const key = TEXT_PROPS_WITH_GLOBAL[i];
    const val = retrieve2(textStyleModel.getShallow(key), globalTextStyle[key]);
    if (val != null) {
      textStyle2[key] = val;
    }
  }
  for (let i = 0; i < TEXT_PROPS_SELF.length; i++) {
    const key = TEXT_PROPS_SELF[i];
    const val = textStyleModel.getShallow(key);
    if (val != null) {
      textStyle2[key] = val;
    }
  }
  if (textStyle2.verticalAlign == null) {
    const baseline = textStyleModel.getShallow("baseline");
    if (baseline != null) {
      textStyle2.verticalAlign = baseline;
    }
  }
  if (!isBlock || !opt.disableBox) {
    for (let i = 0; i < TEXT_PROPS_BOX.length; i++) {
      const key = TEXT_PROPS_BOX[i];
      const val = textStyleModel.getShallow(key);
      if (val != null) {
        textStyle2[key] = val;
      }
    }
    if ((textStyle2.backgroundColor === "auto" || textStyle2.backgroundColor === "inherit") && inheritColor) {
      if (__DEV__) {
        if (textStyle2.backgroundColor === "auto") {
          deprecateReplaceLog("backgroundColor: 'auto'", "backgroundColor: 'inherit'");
        }
      }
      textStyle2.backgroundColor = inheritColor;
    }
    if ((textStyle2.borderColor === "auto" || textStyle2.borderColor === "inherit") && inheritColor) {
      if (__DEV__) {
        if (textStyle2.borderColor === "auto") {
          deprecateReplaceLog("borderColor: 'auto'", "borderColor: 'inherit'");
        }
      }
      textStyle2.borderColor = inheritColor;
    }
  }
}
function getFont(opt, ecModel) {
  const gTextStyleModel = ecModel && ecModel.getModel("textStyle");
  return trim([opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow("fontStyle") || "", opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow("fontWeight") || "", (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow("fontSize") || 12) + "px", opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow("fontFamily") || "sans-serif"].join(" "));
}

// src/model/mixin/textStyle.ts
const PATH_COLOR = ["textStyle", "color"];
const tmpRichText = new Text_default();
class TextStyleMixin {
  getTextColor(isEmphasis) {
    const ecModel = this.ecModel;
    return this.getShallow("color") || (!isEmphasis && ecModel ? ecModel.get(PATH_COLOR) : null);
  }
  getFont() {
    return getFont({
      fontStyle: this.getShallow("fontStyle"),
      fontWeight: this.getShallow("fontWeight"),
      fontSize: this.getShallow("fontSize"),
      fontFamily: this.getShallow("fontFamily")
    }, this.ecModel);
  }
  getTextRect(text11) {
    tmpRichText.useStyle({
      text: text11,
      fontStyle: this.getShallow("fontStyle"),
      fontWeight: this.getShallow("fontWeight"),
      fontSize: this.getShallow("fontSize"),
      fontFamily: this.getShallow("fontFamily"),
      verticalAlign: this.getShallow("verticalAlign") || this.getShallow("baseline"),
      padding: this.getShallow("padding"),
      lineHeight: this.getShallow("lineHeight"),
      rich: this.getShallow("rich")
    });
    tmpRichText.update();
    return tmpRichText.getBoundingRect();
  }
}
const textStyle_default = TextStyleMixin;

// src/model/mixin/lineStyle.ts
const LINE_STYLE_KEY_MAP = [["lineWidth", "width"], ["stroke", "color"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"]];
const getLineStyle = makeStyleMapper_default(LINE_STYLE_KEY_MAP);
class LineStyleMixin {
  getLineStyle(excludes) {
    const style2 = getLineStyle(this, excludes);
    style2.lineDash = this.getLineDash(style2.lineWidth);
    return style2;
  }
  getLineDash(lineWidth) {
    if (lineWidth == null) {
      lineWidth = 1;
    }
    const lineType = this.get("type");
    const dotSize = Math.max(lineWidth, 2);
    const dashSize = lineWidth * 4;
    return lineType === "solid" || lineType == null ? false : lineType === "dashed" ? [dashSize, dashSize] : [dotSize, dotSize];
  }
}

// src/model/mixin/itemStyle.ts
const ITEM_STYLE_KEY_MAP = [["fill", "color"], ["stroke", "borderColor"], ["lineWidth", "borderWidth"], ["opacity"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"]];
const getItemStyle = makeStyleMapper_default(ITEM_STYLE_KEY_MAP);
class ItemStyleMixin {
  getItemStyle(excludes, includes) {
    const style2 = getItemStyle(this, excludes, includes);
    const lineDash = this.getBorderLineDash();
    lineDash && (style2.lineDash = lineDash);
    return style2;
  }
  getBorderLineDash() {
    const lineType = this.get("borderType");
    return lineType === "solid" || lineType == null ? null : lineType === "dashed" ? [5, 5] : [1, 1];
  }
}

// src/model/Model.ts
class Model108 {
  constructor(option, parentModel, ecModel) {
    this.parentModel = parentModel;
    this.ecModel = ecModel;
    this.option = option;
  }
  init(option, parentModel, ecModel, ...rest) {
  }
  mergeOption(option, ecModel) {
    merge(this.option, option, true);
  }
  get(path2, ignoreParent) {
    if (path2 == null) {
      return this.option;
    }
    return this._doGet(this.parsePath(path2), !ignoreParent && this.parentModel);
  }
  getShallow(key, ignoreParent) {
    const option = this.option;
    let val = option == null ? option : option[key];
    if (val == null && !ignoreParent) {
      const parentModel = this.parentModel;
      if (parentModel) {
        val = parentModel.getShallow(key);
      }
    }
    return val;
  }
  getModel(path2, parentModel) {
    const hasPath = path2 != null;
    const pathFinal = hasPath ? this.parsePath(path2) : null;
    const obj = hasPath ? this._doGet(pathFinal) : this.option;
    parentModel = parentModel || this.parentModel && this.parentModel.getModel(this.resolveParentPath(pathFinal));
    return new Model108(obj, parentModel, this.ecModel);
  }
  isEmpty() {
    return this.option == null;
  }
  restoreData() {
  }
  clone() {
    const Ctor = this.constructor;
    return new Ctor(clone2(this.option));
  }
  parsePath(path2) {
    if (typeof path2 === "string") {
      return path2.split(".");
    }
    return path2;
  }
  resolveParentPath(path2) {
    return path2;
  }
  isAnimationEnabled() {
    if (!env_default.node && this.option) {
      if (this.option.animation != null) {
        return !!this.option.animation;
      } else if (this.parentModel) {
        return this.parentModel.isAnimationEnabled();
      }
    }
  }
  _doGet(pathArr, parentModel) {
    let obj = this.option;
    if (!pathArr) {
      return obj;
    }
    for (let i = 0; i < pathArr.length; i++) {
      if (!pathArr[i]) {
        continue;
      }
      obj = obj && typeof obj === "object" ? obj[pathArr[i]] : null;
      if (obj == null) {
        break;
      }
    }
    if (obj == null && parentModel) {
      obj = parentModel._doGet(this.resolveParentPath(pathArr), parentModel.parentModel);
    }
    return obj;
  }
}
enableClassExtend(Model108);
enableClassCheck(Model108);
mixin(Model108, LineStyleMixin);
mixin(Model108, ItemStyleMixin);
mixin(Model108, AreaStyleMixin);
mixin(Model108, textStyle_default);
const Model_default = Model108;

// src/util/component.ts
let base = Math.round(Math.random() * 10);
function getUID(type) {
  return [type || "", base++].join("_");
}
function enableSubTypeDefaulter(target) {
  const subTypeDefaulters = {};
  target.registerSubTypeDefaulter = function(componentType, defaulter) {
    const componentTypeInfo = parseClassType(componentType);
    subTypeDefaulters[componentTypeInfo.main] = defaulter;
  };
  target.determineSubType = function(componentType, option) {
    let type = option.type;
    if (!type) {
      const componentTypeMain = parseClassType(componentType).main;
      if (target.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
        type = subTypeDefaulters[componentTypeMain](option);
      }
    }
    return type;
  };
}
function enableTopologicalTravel(entity, dependencyGetter) {
  entity.topologicalTravel = function(targetNameList, fullNameList, callback, context) {
    if (!targetNameList.length) {
      return;
    }
    const result = makeDepndencyGraph(fullNameList);
    const graph2 = result.graph;
    const stack = result.noEntryList;
    const targetNameSet = {};
    each(targetNameList, function(name) {
      targetNameSet[name] = true;
    });
    while (stack.length) {
      const currComponentType = stack.pop();
      const currVertex = graph2[currComponentType];
      const isInTargetNameSet = !!targetNameSet[currComponentType];
      if (isInTargetNameSet) {
        callback.call(context, currComponentType, currVertex.originalDeps.slice());
        delete targetNameSet[currComponentType];
      }
      each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
    }
    each(targetNameSet, function() {
      throw new Error("Circle dependency may exists");
    });
    function removeEdge(succComponentType) {
      graph2[succComponentType].entryCount--;
      if (graph2[succComponentType].entryCount === 0) {
        stack.push(succComponentType);
      }
    }
    function removeEdgeAndAdd(succComponentType) {
      targetNameSet[succComponentType] = true;
      removeEdge(succComponentType);
    }
  };
  function makeDepndencyGraph(fullNameList) {
    const graph2 = {};
    const noEntryList = [];
    each(fullNameList, function(name) {
      const thisItem = createDependencyGraphItem(graph2, name);
      const originalDeps = thisItem.originalDeps = dependencyGetter(name);
      const availableDeps = getAvailableDependencies(originalDeps, fullNameList);
      thisItem.entryCount = availableDeps.length;
      if (thisItem.entryCount === 0) {
        noEntryList.push(name);
      }
      each(availableDeps, function(dependentName) {
        if (indexOf(thisItem.predecessor, dependentName) < 0) {
          thisItem.predecessor.push(dependentName);
        }
        const thatItem = createDependencyGraphItem(graph2, dependentName);
        if (indexOf(thatItem.successor, dependentName) < 0) {
          thatItem.successor.push(name);
        }
      });
    });
    return {
      graph: graph2,
      noEntryList
    };
  }
  function createDependencyGraphItem(graph2, name) {
    if (!graph2[name]) {
      graph2[name] = {
        predecessor: [],
        successor: []
      };
    }
    return graph2[name];
  }
  function getAvailableDependencies(originalDeps, fullNameList) {
    const availableDeps = [];
    each(originalDeps, function(dep) {
      indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
    });
    return availableDeps;
  }
}
function inheritDefaultOption(superOption, subOption) {
  return merge(merge({}, superOption, true), subOption, true);
}

// src/legacy/getTextRect.ts
function getTextRect(text11, font, align, verticalAlign, padding, rich, truncate, lineHeight) {
  deprecateLog("getTextRect is deprecated.");
  const textEl = new Text_default({
    style: {
      text: text11,
      font,
      align,
      verticalAlign,
      padding,
      rich,
      overflow: truncate ? "truncate" : null,
      lineHeight
    }
  });
  return textEl.getBoundingRect();
}

// src/util/format.ts
const format_exports = {};
__export(format_exports, {
  addCommas: () => addCommas,
  capitalFirst: () => capitalFirst,
  encodeHTML: () => encodeHTML,
  formatTime: () => formatTime,
  formatTpl: () => formatTpl,
  formatTplSimple: () => formatTplSimple,
  getTextRect: () => getTextRect,
  getTooltipMarker: () => getTooltipMarker,
  normalizeCssArray: () => normalizeCssArray2,
  toCamelCase: () => toCamelCase2,
  truncateText: () => truncateText,
  windowOpen: () => windowOpen
});
function addCommas(x) {
  if (isNaN(x)) {
    return "-";
  }
  const parts = (x + "").split(".");
  return parts[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, "$1,") + (parts.length > 1 ? "." + parts[1] : "");
}
function toCamelCase2(str, upperCaseFirst) {
  str = (str || "").toLowerCase().replace(/-(.)/g, function(match, group1) {
    return group1.toUpperCase();
  });
  if (upperCaseFirst && str) {
    str = str.charAt(0).toUpperCase() + str.slice(1);
  }
  return str;
}
const normalizeCssArray2 = normalizeCssArray;
const replaceReg = /([&<>"'])/g;
const replaceMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
function encodeHTML(source) {
  return source == null ? "" : (source + "").replace(replaceReg, function(str, c) {
    return replaceMap[c];
  });
}
const TPL_VAR_ALIAS = ["a", "b", "c", "d", "e", "f", "g"];
const wrapVar = function(varName, seriesIdx) {
  return "{" + varName + (seriesIdx == null ? "" : seriesIdx) + "}";
};
function formatTpl(tpl, paramsList, encode) {
  if (!isArray(paramsList)) {
    paramsList = [paramsList];
  }
  const seriesLen = paramsList.length;
  if (!seriesLen) {
    return "";
  }
  const $vars = paramsList[0].$vars || [];
  for (let i = 0; i < $vars.length; i++) {
    const alias = TPL_VAR_ALIAS[i];
    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
  }
  for (let seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
    for (let k = 0; k < $vars.length; k++) {
      const val = paramsList[seriesIdx][$vars[k]];
      tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);
    }
  }
  return tpl;
}
function formatTplSimple(tpl, param, encode) {
  each(param, function(value, key) {
    tpl = tpl.replace("{" + key + "}", encode ? encodeHTML(value) : value);
  });
  return tpl;
}
function getTooltipMarker(inOpt, extraCssText) {
  const opt = isString(inOpt) ? {
    color: inOpt,
    extraCssText
  } : inOpt || {};
  const color8 = opt.color;
  const type = opt.type;
  extraCssText = opt.extraCssText;
  const renderMode = opt.renderMode || "html";
  const markerId = opt.markerId || "X";
  if (!color8) {
    return "";
  }
  if (renderMode === "html") {
    return type === "subItem" ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:' + encodeHTML(color8) + ";" + (extraCssText || "") + '"></span>' : '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color8) + ";" + (extraCssText || "") + '"></span>';
  } else {
    return {
      renderMode,
      content: "{marker" + markerId + "|}  ",
      style: {
        color: color8
      }
    };
  }
}
function pad(str, len2) {
  str += "";
  return "0000".substr(0, len2 - str.length) + str;
}
function formatTime(tpl, value, isUTC) {
  if (tpl === "week" || tpl === "month" || tpl === "quarter" || tpl === "half-year" || tpl === "year") {
    tpl = "MM-dd\nyyyy";
  }
  const date = parseDate(value);
  const utc = isUTC ? "UTC" : "";
  const y = date["get" + utc + "FullYear"]();
  const M = date["get" + utc + "Month"]() + 1;
  const d = date["get" + utc + "Date"]();
  const h = date["get" + utc + "Hours"]();
  const m2 = date["get" + utc + "Minutes"]();
  const s = date["get" + utc + "Seconds"]();
  const S = date["get" + utc + "Milliseconds"]();
  tpl = tpl.replace("MM", pad(M, 2)).replace("M", M).replace("yyyy", y).replace("yy", y % 100 + "").replace("dd", pad(d, 2)).replace("d", d).replace("hh", pad(h, 2)).replace("h", h).replace("mm", pad(m2, 2)).replace("m", m2).replace("ss", pad(s, 2)).replace("s", s).replace("SSS", pad(S, 3));
  return tpl;
}
function capitalFirst(str) {
  return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
}
function windowOpen(link, target) {
  if (target === "_blank" || target === "blank") {
    const blank = window.open();
    blank.opener = null;
    blank.location.href = link;
  } else {
    window.open(link, target);
  }
}

// src/util/layout.ts
const each18 = each;
const LOCATION_PARAMS = ["left", "right", "top", "bottom", "width", "height"];
const HV_NAMES = [["width", "left", "right"], ["height", "top", "bottom"]];
function boxLayout(orient, group, gap, maxWidth, maxHeight) {
  let x = 0;
  let y = 0;
  if (maxWidth == null) {
    maxWidth = Infinity;
  }
  if (maxHeight == null) {
    maxHeight = Infinity;
  }
  let currentLineMaxSize = 0;
  group.eachChild(function(child, idx) {
    const rect = child.getBoundingRect();
    const nextChild = group.childAt(idx + 1);
    const nextChildRect = nextChild && nextChild.getBoundingRect();
    let nextX;
    let nextY;
    if (orient === "horizontal") {
      const moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
      nextX = x + moveX;
      if (nextX > maxWidth || child.newline) {
        x = 0;
        nextX = moveX;
        y += currentLineMaxSize + gap;
        currentLineMaxSize = rect.height;
      } else {
        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
      }
    } else {
      const moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
      nextY = y + moveY;
      if (nextY > maxHeight || child.newline) {
        x += currentLineMaxSize + gap;
        y = 0;
        nextY = moveY;
        currentLineMaxSize = rect.width;
      } else {
        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
      }
    }
    if (child.newline) {
      return;
    }
    child.x = x;
    child.y = y;
    child.markRedraw();
    orient === "horizontal" ? x = nextX + gap : y = nextY + gap;
  });
}
const box = boxLayout;
const vbox = curry(boxLayout, "vertical");
const hbox = curry(boxLayout, "horizontal");
function getAvailableSize(positionInfo, containerRect, margin) {
  const containerWidth = containerRect.width;
  const containerHeight = containerRect.height;
  let x = parsePercent3(positionInfo.left, containerWidth);
  let y = parsePercent3(positionInfo.top, containerHeight);
  let x2 = parsePercent3(positionInfo.right, containerWidth);
  let y2 = parsePercent3(positionInfo.bottom, containerHeight);
  (isNaN(x) || isNaN(parseFloat(positionInfo.left))) && (x = 0);
  (isNaN(x2) || isNaN(parseFloat(positionInfo.right))) && (x2 = containerWidth);
  (isNaN(y) || isNaN(parseFloat(positionInfo.top))) && (y = 0);
  (isNaN(y2) || isNaN(parseFloat(positionInfo.bottom))) && (y2 = containerHeight);
  margin = normalizeCssArray2(margin || 0);
  return {
    width: Math.max(x2 - x - margin[1] - margin[3], 0),
    height: Math.max(y2 - y - margin[0] - margin[2], 0)
  };
}
function getLayoutRect(positionInfo, containerRect, margin) {
  margin = normalizeCssArray2(margin || 0);
  const containerWidth = containerRect.width;
  const containerHeight = containerRect.height;
  let left = parsePercent3(positionInfo.left, containerWidth);
  let top = parsePercent3(positionInfo.top, containerHeight);
  const right = parsePercent3(positionInfo.right, containerWidth);
  const bottom = parsePercent3(positionInfo.bottom, containerHeight);
  let width = parsePercent3(positionInfo.width, containerWidth);
  let height = parsePercent3(positionInfo.height, containerHeight);
  const verticalMargin = margin[2] + margin[0];
  const horizontalMargin = margin[1] + margin[3];
  const aspect = positionInfo.aspect;
  if (isNaN(width)) {
    width = containerWidth - right - horizontalMargin - left;
  }
  if (isNaN(height)) {
    height = containerHeight - bottom - verticalMargin - top;
  }
  if (aspect != null) {
    if (isNaN(width) && isNaN(height)) {
      if (aspect > containerWidth / containerHeight) {
        width = containerWidth * 0.8;
      } else {
        height = containerHeight * 0.8;
      }
    }
    if (isNaN(width)) {
      width = aspect * height;
    }
    if (isNaN(height)) {
      height = width / aspect;
    }
  }
  if (isNaN(left)) {
    left = containerWidth - right - width - horizontalMargin;
  }
  if (isNaN(top)) {
    top = containerHeight - bottom - height - verticalMargin;
  }
  switch (positionInfo.left || positionInfo.right) {
    case "center":
      left = containerWidth / 2 - width / 2 - margin[3];
      break;
    case "right":
      left = containerWidth - width - horizontalMargin;
      break;
  }
  switch (positionInfo.top || positionInfo.bottom) {
    case "middle":
    case "center":
      top = containerHeight / 2 - height / 2 - margin[0];
      break;
    case "bottom":
      top = containerHeight - height - verticalMargin;
      break;
  }
  left = left || 0;
  top = top || 0;
  if (isNaN(width)) {
    width = containerWidth - horizontalMargin - left - (right || 0);
  }
  if (isNaN(height)) {
    height = containerHeight - verticalMargin - top - (bottom || 0);
  }
  const rect = new BoundingRect_default(left + margin[3], top + margin[0], width, height);
  rect.margin = margin;
  return rect;
}
function positionElement(el, positionInfo, containerRect, margin, opt) {
  const h = !opt || !opt.hv || opt.hv[0];
  const v4 = !opt || !opt.hv || opt.hv[1];
  const boundingMode = opt && opt.boundingMode || "all";
  if (!h && !v4) {
    return;
  }
  let rect;
  if (boundingMode === "raw") {
    rect = el.type === "group" ? new BoundingRect_default(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
  } else {
    rect = el.getBoundingRect();
    if (el.needLocalTransform()) {
      const transform = el.getLocalTransform();
      rect = rect.clone();
      rect.applyTransform(transform);
    }
  }
  const layoutRect = getLayoutRect(defaults({
    width: rect.width,
    height: rect.height
  }, positionInfo), containerRect, margin);
  const dx = h ? layoutRect.x - rect.x : 0;
  const dy = v4 ? layoutRect.y - rect.y : 0;
  if (boundingMode === "raw") {
    el.x = dx;
    el.y = dy;
  } else {
    el.x += dx;
    el.y += dy;
  }
  el.markRedraw();
}
function sizeCalculable(option, hvIdx) {
  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;
}
function fetchLayoutMode(ins) {
  const layoutMode = ins.layoutMode || ins.constructor.layoutMode;
  return isObject(layoutMode) ? layoutMode : layoutMode ? {
    type: layoutMode
  } : null;
}
function mergeLayoutParam(targetOption, newOption, opt) {
  let ignoreSize = opt && opt.ignoreSize;
  !isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);
  const hResult = merge2(HV_NAMES[0], 0);
  const vResult = merge2(HV_NAMES[1], 1);
  copy3(HV_NAMES[0], targetOption, hResult);
  copy3(HV_NAMES[1], targetOption, vResult);
  function merge2(names, hvIdx) {
    const newParams = {};
    let newValueCount = 0;
    const merged = {};
    let mergedValueCount = 0;
    const enoughParamNumber = 2;
    each18(names, function(name) {
      merged[name] = targetOption[name];
    });
    each18(names, function(name) {
      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
      hasValue(newParams, name) && newValueCount++;
      hasValue(merged, name) && mergedValueCount++;
    });
    if (ignoreSize[hvIdx]) {
      if (hasValue(newOption, names[1])) {
        merged[names[2]] = null;
      } else if (hasValue(newOption, names[2])) {
        merged[names[1]] = null;
      }
      return merged;
    }
    if (mergedValueCount === enoughParamNumber || !newValueCount) {
      return merged;
    } else if (newValueCount >= enoughParamNumber) {
      return newParams;
    } else {
      for (let i = 0; i < names.length; i++) {
        const name = names[i];
        if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
          newParams[name] = targetOption[name];
          break;
        }
      }
      return newParams;
    }
  }
  function hasProp(obj, name) {
    return obj.hasOwnProperty(name);
  }
  function hasValue(obj, name) {
    return obj[name] != null && obj[name] !== "auto";
  }
  function copy3(names, target, source) {
    each18(names, function(name) {
      target[name] = source[name];
    });
  }
}
function getLayoutParams(source) {
  return copyLayoutParams({}, source);
}
function copyLayoutParams(target, source) {
  source && target && each18(LOCATION_PARAMS, function(name) {
    source.hasOwnProperty(name) && (target[name] = source[name]);
  });
  return target;
}

// src/model/Component.ts
const inner19 = makeInner();
class ComponentModel7 extends Model_default {
  constructor(option, parentModel, ecModel) {
    super(option, parentModel, ecModel);
    this.uid = getUID("ec_cpt_model");
  }
  init(option, parentModel, ecModel) {
    this.mergeDefaultAndTheme(option, ecModel);
  }
  mergeDefaultAndTheme(option, ecModel) {
    const layoutMode = fetchLayoutMode(this);
    const inputPositionParams = layoutMode ? getLayoutParams(option) : {};
    const themeModel = ecModel.getTheme();
    merge(option, themeModel.get(this.mainType));
    merge(option, this.getDefaultOption());
    if (layoutMode) {
      mergeLayoutParam(option, inputPositionParams, layoutMode);
    }
  }
  mergeOption(option, ecModel) {
    merge(this.option, option, true);
    const layoutMode = fetchLayoutMode(this);
    if (layoutMode) {
      mergeLayoutParam(this.option, option, layoutMode);
    }
  }
  optionUpdated(newCptOption, isInit) {
  }
  getDefaultOption() {
    const ctor = this.constructor;
    if (!isExtendedClass(ctor)) {
      return ctor.defaultOption;
    }
    const fields = inner19(this);
    if (!fields.defaultOption) {
      const optList = [];
      let clz = ctor;
      while (clz) {
        const opt = clz.prototype.defaultOption;
        opt && optList.push(opt);
        clz = clz.superClass;
      }
      let defaultOption4 = {};
      for (let i = optList.length - 1; i >= 0; i--) {
        defaultOption4 = merge(defaultOption4, optList[i], true);
      }
      fields.defaultOption = defaultOption4;
    }
    return fields.defaultOption;
  }
  getReferringComponents(mainType, opt) {
    const indexKey = mainType + "Index";
    const idKey = mainType + "Id";
    return queryReferringComponents(this.ecModel, mainType, {
      index: this.get(indexKey, true),
      id: this.get(idKey, true)
    }, opt);
  }
  getBoxLayoutParams() {
    const boxLayoutModel = this;
    return {
      left: boxLayoutModel.get("left"),
      top: boxLayoutModel.get("top"),
      right: boxLayoutModel.get("right"),
      bottom: boxLayoutModel.get("bottom"),
      width: boxLayoutModel.get("width"),
      height: boxLayoutModel.get("height")
    };
  }
}
ComponentModel7.protoInitialize = function() {
  const proto2 = ComponentModel7.prototype;
  proto2.type = "component";
  proto2.id = "";
  proto2.name = "";
  proto2.mainType = "";
  proto2.subType = "";
  proto2.componentIndex = 0;
}();
mountExtend(ComponentModel7, Model_default);
enableClassManagement(ComponentModel7, {
  registerWhenExtend: true
});
enableSubTypeDefaulter(ComponentModel7);
enableTopologicalTravel(ComponentModel7, getDependencies);
function getDependencies(componentType) {
  let deps = [];
  each(ComponentModel7.getClassesByMainType(componentType), function(clz) {
    deps = deps.concat(clz.dependencies || clz.prototype.dependencies || []);
  });
  deps = map2(deps, function(type) {
    return parseClassType(type).main;
  });
  if (componentType !== "dataset" && indexOf(deps, "dataset") <= 0) {
    deps.unshift("dataset");
  }
  return deps;
}
const Component_default = ComponentModel7;

// src/model/globalDefault.ts
let platform = "";
if (typeof navigator !== "undefined") {
  platform = navigator.platform || "";
}
const globalDefault_default = {
  darkMode: "auto",
  color: ["#51689b", "#ce5c5c", "#fbc357", "#8fbf8f", "#659d84", "#fb8e6a", "#c77288", "#786090", "#91c4c5", "#6890ba"],
  gradientColor: ["#f6efa6", "#d88273", "#bf444c"],
  textStyle: {
    fontFamily: platform.match(/^Win/) ? "Microsoft YaHei" : "sans-serif",
    fontSize: 12,
    fontStyle: "normal",
    fontWeight: "normal"
  },
  blendMode: null,
  stateAnimation: {
    duration: 300,
    easing: "cubicOut"
  },
  animation: "auto",
  animationDuration: 1000,
  animationDurationUpdate: 500,
  animationEasing: "cubicInOut",
  animationEasingUpdate: "cubicInOut",
  animationThreshold: 2000,
  progressiveThreshold: 3000,
  progressive: 400,
  hoverLayerThreshold: 3000,
  useUTC: false
};

// src/model/mixin/colorPalette.ts
const inner21 = makeInner();
function getNearestColorPalette(colors, requestColorNum) {
  const paletteNum = colors.length;
  for (let i = 0; i < paletteNum; i++) {
    if (colors[i].length > requestColorNum) {
      return colors[i];
    }
  }
  return colors[paletteNum - 1];
}
class ColorPaletteMixin {
  clearColorPalette() {
    inner21(this).colorIdx = 0;
    inner21(this).colorNameMap = {};
  }
  getColorFromPalette(name, scope, requestColorNum) {
    scope = scope || this;
    const scopeFields = inner21(scope);
    const colorIdx = scopeFields.colorIdx || 0;
    const colorNameMap = scopeFields.colorNameMap = scopeFields.colorNameMap || {};
    if (colorNameMap.hasOwnProperty(name)) {
      return colorNameMap[name];
    }
    const defaultColorPalette = normalizeToArray(this.get("color", true));
    const layeredColorPalette = this.get("colorLayer", true);
    let colorPalette4 = requestColorNum == null || !layeredColorPalette ? defaultColorPalette : getNearestColorPalette(layeredColorPalette, requestColorNum);
    colorPalette4 = colorPalette4 || defaultColorPalette;
    if (!colorPalette4 || !colorPalette4.length) {
      return;
    }
    const color8 = colorPalette4[colorIdx];
    if (name) {
      colorNameMap[name] = color8;
    }
    scopeFields.colorIdx = (colorIdx + 1) % colorPalette4.length;
    return color8;
  }
}

// node_modules/zrender/src/core/types.ts

// src/util/types.ts
const VISUAL_DIMENSIONS = createHashMap(["tooltip", "label", "itemName", "itemId", "seriesName"]);
const SOURCE_FORMAT_ORIGINAL = "original";
const SOURCE_FORMAT_ARRAY_ROWS = "arrayRows";
const SOURCE_FORMAT_OBJECT_ROWS = "objectRows";
const SOURCE_FORMAT_KEYED_COLUMNS = "keyedColumns";
const SOURCE_FORMAT_TYPED_ARRAY = "typedArray";
const SOURCE_FORMAT_UNKNOWN = "unknown";
const SERIES_LAYOUT_BY_COLUMN = "column";
const SERIES_LAYOUT_BY_ROW = "row";

// src/data/Source.ts
class Source5 {
  constructor(fields) {
    this.fromDataset = fields.fromDataset;
    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);
    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN;
    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;
    this.dimensionsDefine = fields.dimensionsDefine;
    this.encodeDefine = fields.encodeDefine && createHashMap(fields.encodeDefine);
    this.startIndex = fields.startIndex || 0;
    this.dimensionsDetectCount = fields.dimensionsDetectCount;
  }
  static seriesDataToSource(data) {
    return new Source5({
      data,
      sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL,
      fromDataset: false
    });
  }
}
const Source_default = Source5;

// src/data/helper/sourceHelper.ts
const BE_ORDINAL = {
  Must: 1,
  Might: 2,
  Not: 3
};
const inner18 = makeInner();
function detectSourceFormat(datasetModel) {
  const data = datasetModel.option.source;
  let sourceFormat = SOURCE_FORMAT_UNKNOWN;
  if (isTypedArray(data)) {
    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;
  } else if (isArray(data)) {
    if (data.length === 0) {
      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;
    }
    for (let i = 0, len2 = data.length; i < len2; i++) {
      const item = data[i];
      if (item == null) {
        continue;
      } else if (isArray(item)) {
        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;
        break;
      } else if (isObject(item)) {
        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;
        break;
      }
    }
  } else if (isObject(data)) {
    for (const key in data) {
      if (data.hasOwnProperty(key) && isArrayLike(data[key])) {
        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;
        break;
      }
    }
  } else if (data != null) {
    throw new Error("Invalid data");
  }
  inner18(datasetModel).sourceFormat = sourceFormat;
}
function getSource(seriesModel) {
  return inner18(seriesModel).source;
}
function resetSourceDefaulter(ecModel) {
  inner18(ecModel).datasetMap = createHashMap();
}
function prepareSource(seriesModel) {
  const seriesOption = seriesModel.option;
  let data = seriesOption.data;
  let sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;
  let fromDataset = false;
  let seriesLayoutBy = seriesOption.seriesLayoutBy;
  let sourceHeader = seriesOption.sourceHeader;
  let dimensionsDefine = seriesOption.dimensions;
  const datasetModel = getDatasetModel(seriesModel);
  if (datasetModel) {
    const datasetOption = datasetModel.option;
    data = datasetOption.source;
    sourceFormat = inner18(datasetModel).sourceFormat;
    fromDataset = true;
    seriesLayoutBy = seriesLayoutBy || datasetOption.seriesLayoutBy;
    sourceHeader == null && (sourceHeader = datasetOption.sourceHeader);
    dimensionsDefine = dimensionsDefine || datasetOption.dimensions;
  }
  const completeResult = completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine);
  inner18(seriesModel).source = new Source_default({
    data,
    fromDataset,
    seriesLayoutBy,
    sourceFormat,
    dimensionsDefine: completeResult.dimensionsDefine,
    startIndex: completeResult.startIndex,
    dimensionsDetectCount: completeResult.dimensionsDetectCount,
    encodeDefine: seriesOption.encode
  });
}
function completeBySourceData(data, sourceFormat, seriesLayoutBy, sourceHeader, dimensionsDefine) {
  if (!data) {
    return {
      dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine)
    };
  }
  let dimensionsDetectCount;
  let startIndex;
  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {
    if (sourceHeader === "auto" || sourceHeader == null) {
      arrayRowsTravelFirst(function(val) {
        if (val != null && val !== "-") {
          if (isString(val)) {
            startIndex == null && (startIndex = 1);
          } else {
            startIndex = 0;
          }
        }
      }, seriesLayoutBy, data, 10);
    } else {
      startIndex = sourceHeader ? 1 : 0;
    }
    if (!dimensionsDefine && startIndex === 1) {
      dimensionsDefine = [];
      arrayRowsTravelFirst(function(val, index) {
        dimensionsDefine[index] = val != null ? val : "";
      }, seriesLayoutBy, data);
    }
    dimensionsDetectCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? data.length : data[0] ? data[0].length : null;
  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {
    if (!dimensionsDefine) {
      dimensionsDefine = objectRowsCollectDimensions(data);
    }
  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
    if (!dimensionsDefine) {
      dimensionsDefine = [];
      each(data, function(colArr, key) {
        dimensionsDefine.push(key);
      });
    }
  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {
    const value0 = getDataItemValue(data[0]);
    dimensionsDetectCount = isArray(value0) && value0.length || 1;
  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {
    if (__DEV__) {
      assert(!!dimensionsDefine, "dimensions must be given if data is TypedArray.");
    }
  }
  return {
    startIndex,
    dimensionsDefine: normalizeDimensionsDefine(dimensionsDefine),
    dimensionsDetectCount
  };
}
function normalizeDimensionsDefine(dimensionsDefine) {
  if (!dimensionsDefine) {
    return;
  }
  const nameMap = createHashMap();
  return map2(dimensionsDefine, function(item, index) {
    item = extend({}, isObject(item) ? item : {
      name: item
    });
    if (item.name == null) {
      return item;
    }
    item.name += "";
    if (item.displayName == null) {
      item.displayName = item.name;
    }
    const exist = nameMap.get(item.name);
    if (!exist) {
      nameMap.set(item.name, {
        count: 1
      });
    } else {
      item.name += "-" + exist.count++;
    }
    return item;
  });
}
function arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {
  maxLoop == null && (maxLoop = Infinity);
  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {
    for (let i = 0; i < data.length && i < maxLoop; i++) {
      cb(data[i] ? data[i][0] : null, i);
    }
  } else {
    const value0 = data[0] || [];
    for (let i = 0; i < value0.length && i < maxLoop; i++) {
      cb(value0[i], i);
    }
  }
}
function objectRowsCollectDimensions(data) {
  let firstIndex = 0;
  let obj;
  while (firstIndex < data.length && !(obj = data[firstIndex++])) {
  }
  if (obj) {
    const dimensions = [];
    each(obj, function(value, key) {
      dimensions.push(key);
    });
    return dimensions;
  }
}
function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {
  const encode = {};
  const datasetModel = getDatasetModel(seriesModel);
  if (!datasetModel || !coordDimensions) {
    return encode;
  }
  const encodeItemName = [];
  const encodeSeriesName = [];
  const ecModel = seriesModel.ecModel;
  const datasetMap = inner18(ecModel).datasetMap;
  const key = datasetModel.uid + "_" + source.seriesLayoutBy;
  let baseCategoryDimIndex;
  let categoryWayValueDimStart;
  coordDimensions = coordDimensions.slice();
  each(coordDimensions, function(coordDimInfo, coordDimIdx) {
    !isObject(coordDimInfo) && (coordDimensions[coordDimIdx] = {
      name: coordDimInfo
    });
    if (coordDimInfo.type === "ordinal" && baseCategoryDimIndex == null) {
      baseCategoryDimIndex = coordDimIdx;
      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimensions[coordDimIdx]);
    }
    encode[coordDimInfo.name] = [];
  });
  const datasetRecord = datasetMap.get(key) || datasetMap.set(key, {
    categoryWayDim: categoryWayValueDimStart,
    valueWayDim: 0
  });
  each(coordDimensions, function(coordDimInfo, coordDimIdx) {
    const coordDimName = coordDimInfo.name;
    const count2 = getDataDimCountOnCoordDim(coordDimInfo);
    if (baseCategoryDimIndex == null) {
      const start2 = datasetRecord.valueWayDim;
      pushDim(encode[coordDimName], start2, count2);
      pushDim(encodeSeriesName, start2, count2);
      datasetRecord.valueWayDim += count2;
    } else if (baseCategoryDimIndex === coordDimIdx) {
      pushDim(encode[coordDimName], 0, count2);
      pushDim(encodeItemName, 0, count2);
    } else {
      const start2 = datasetRecord.categoryWayDim;
      pushDim(encode[coordDimName], start2, count2);
      pushDim(encodeSeriesName, start2, count2);
      datasetRecord.categoryWayDim += count2;
    }
  });
  function pushDim(dimIdxArr, idxFrom, idxCount) {
    for (let i = 0; i < idxCount; i++) {
      dimIdxArr.push(idxFrom + i);
    }
  }
  function getDataDimCountOnCoordDim(coordDimInfo) {
    const dimsDef = coordDimInfo.dimsDef;
    return dimsDef ? dimsDef.length : 1;
  }
  encodeItemName.length && (encode.itemName = encodeItemName);
  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);
  return encode;
}
function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {
  const encode = {};
  const datasetModel = getDatasetModel(seriesModel);
  if (!datasetModel) {
    return encode;
  }
  const sourceFormat = source.sourceFormat;
  const dimensionsDefine = source.dimensionsDefine;
  let potentialNameDimIndex;
  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
    each(dimensionsDefine, function(dim, idx) {
      if ((isObject(dim) ? dim.name : dim) === "name") {
        potentialNameDimIndex = idx;
      }
    });
  }
  const idxResult = function() {
    const idxRes0 = {};
    const idxRes1 = {};
    const guessRecords = [];
    for (let i = 0, len2 = Math.min(5, dimCount); i < len2; i++) {
      const guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);
      guessRecords.push(guessResult);
      const isPureNumber = guessResult === BE_ORDINAL.Not;
      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {
        idxRes0.v = i;
      }
      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {
        idxRes0.n = i;
      }
      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {
        return idxRes0;
      }
      if (!isPureNumber) {
        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {
          idxRes1.v = i;
        }
        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {
          idxRes1.n = i;
        }
      }
    }
    function fulfilled(idxResult2) {
      return idxResult2.v != null && idxResult2.n != null;
    }
    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;
  }();
  if (idxResult) {
    encode.value = idxResult.v;
    const nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n;
    encode.itemName = [nameDimIndex];
    encode.seriesName = [nameDimIndex];
  }
  return encode;
}
function getDatasetModel(seriesModel) {
  const option = seriesModel.option;
  const thisData = option.data;
  if (!thisData) {
    return seriesModel.ecModel.getComponent("dataset", option.datasetIndex || 0);
  }
}
function guessOrdinal(source, dimIndex) {
  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);
}
function doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {
  let result;
  const maxLoop = 5;
  if (isTypedArray(data)) {
    return BE_ORDINAL.Not;
  }
  let dimName;
  let dimType;
  if (dimensionsDefine) {
    const dimDefItem = dimensionsDefine[dimIndex];
    if (isObject(dimDefItem)) {
      dimName = dimDefItem.name;
      dimType = dimDefItem.type;
    } else if (isString(dimDefItem)) {
      dimName = dimDefItem;
    }
  }
  if (dimType != null) {
    return dimType === "ordinal" ? BE_ORDINAL.Must : BE_ORDINAL.Not;
  }
  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {
    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {
      const sample = data[dimIndex];
      for (let i = 0; i < (sample || []).length && i < maxLoop; i++) {
        if ((result = detectValue(sample[startIndex + i])) != null) {
          return result;
        }
      }
    } else {
      for (let i = 0; i < data.length && i < maxLoop; i++) {
        const row = data[startIndex + i];
        if (row && (result = detectValue(row[dimIndex])) != null) {
          return result;
        }
      }
    }
  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {
    if (!dimName) {
      return BE_ORDINAL.Not;
    }
    for (let i = 0; i < data.length && i < maxLoop; i++) {
      const item = data[i];
      if (item && (result = detectValue(item[dimName])) != null) {
        return result;
      }
    }
  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {
    if (!dimName) {
      return BE_ORDINAL.Not;
    }
    const sample = data[dimName];
    if (!sample || isTypedArray(sample)) {
      return BE_ORDINAL.Not;
    }
    for (let i = 0; i < sample.length && i < maxLoop; i++) {
      if ((result = detectValue(sample[i])) != null) {
        return result;
      }
    }
  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {
    for (let i = 0; i < data.length && i < maxLoop; i++) {
      const item = data[i];
      const val = getDataItemValue(item);
      if (!isArray(val)) {
        return BE_ORDINAL.Not;
      }
      if ((result = detectValue(val[dimIndex])) != null) {
        return result;
      }
    }
  }
  function detectValue(val) {
    const beStr = isString(val);
    if (val != null && isFinite(val) && val !== "") {
      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;
    } else if (beStr && val !== "-") {
      return BE_ORDINAL.Must;
    }
  }
  return BE_ORDINAL.Not;
}

// src/model/internalComponentCreator.ts
const internalOptionCreatorMap = createHashMap();
function registerInternalOptionCreator(mainType, creator) {
  assert(internalOptionCreatorMap.get(mainType) == null && creator);
  internalOptionCreatorMap.set(mainType, creator);
}
function concatInternalOptions(ecModel, mainType, newCmptOptionList) {
  const internalOptionCreator = internalOptionCreatorMap.get(mainType);
  if (!internalOptionCreator) {
    return newCmptOptionList;
  }
  const internalOptions = internalOptionCreator(ecModel);
  if (!internalOptions) {
    return newCmptOptionList;
  }
  if (__DEV__) {
    for (let i = 0; i < internalOptions.length; i++) {
      assert(isComponentIdInternal(internalOptions[i]));
    }
  }
  return newCmptOptionList.concat(internalOptions);
}

// src/model/Global.ts
let reCreateSeriesIndices;
let assertSeriesInitialized;
let initBase;
const OPTION_INNER_KEY = "\0_ec_inner";
class GlobalModel145 extends Model_default {
  init(option, parentModel, ecModel, theme2, optionManager) {
    theme2 = theme2 || {};
    this.option = null;
    this._theme = new Model_default(theme2);
    this._optionManager = optionManager;
  }
  setOption(option, opts, optionPreprocessorFuncs2) {
    assert(!(OPTION_INNER_KEY in option), "please use chart.getOption()");
    const innerOpt = normalizeReplaceMergeInput(opts);
    this._optionManager.setOption(option, optionPreprocessorFuncs2, innerOpt);
    this._resetOption(null, innerOpt);
  }
  resetOption(type, opt) {
    return this._resetOption(type, normalizeReplaceMergeInput(opt));
  }
  _resetOption(type, opt) {
    let optionChanged = false;
    const optionManager = this._optionManager;
    if (!type || type === "recreate") {
      const baseOption = optionManager.mountOption(type === "recreate");
      if (!this.option || type === "recreate") {
        initBase(this, baseOption);
      } else {
        this.restoreData();
        this._mergeOption(baseOption, opt);
      }
      optionChanged = true;
    }
    if (type === "timeline" || type === "media") {
      this.restoreData();
    }
    if (!type || type === "recreate" || type === "timeline") {
      const timelineOption = optionManager.getTimelineOption(this);
      if (timelineOption) {
        optionChanged = true;
        this._mergeOption(timelineOption, opt);
      }
    }
    if (!type || type === "recreate" || type === "media") {
      const mediaOptions = optionManager.getMediaOption(this);
      if (mediaOptions.length) {
        each(mediaOptions, function(mediaOption) {
          optionChanged = true;
          this._mergeOption(mediaOption, opt);
        }, this);
      }
    }
    return optionChanged;
  }
  mergeOption(option) {
    this._mergeOption(option, null);
  }
  _mergeOption(newOption, opt) {
    const option = this.option;
    const componentsMap = this._componentsMap;
    const componentsCount = this._componentsCount;
    const newCmptTypes = [];
    const newCmptTypeMap = createHashMap();
    const replaceMergeMainTypeMap = opt && opt.replaceMergeMainTypeMap;
    resetSourceDefaulter(this);
    each(newOption, function(componentOption, mainType) {
      if (componentOption == null) {
        return;
      }
      if (!Component_default.hasClass(mainType)) {
        option[mainType] = option[mainType] == null ? clone2(componentOption) : merge(option[mainType], componentOption, true);
      } else if (mainType) {
        newCmptTypes.push(mainType);
        newCmptTypeMap.set(mainType, true);
      }
    });
    if (replaceMergeMainTypeMap) {
      replaceMergeMainTypeMap.each(function(val, mainTypeInReplaceMerge) {
        if (!newCmptTypeMap.get(mainTypeInReplaceMerge)) {
          newCmptTypes.push(mainTypeInReplaceMerge);
          newCmptTypeMap.set(mainTypeInReplaceMerge, true);
        }
      });
    }
    Component_default.topologicalTravel(newCmptTypes, Component_default.getAllClassMainTypes(), visitComponent, this);
    function visitComponent(mainType) {
      const newCmptOptionList = concatInternalOptions(this, mainType, normalizeToArray(newOption[mainType]));
      const oldCmptList = componentsMap.get(mainType);
      const mergeMode = !oldCmptList ? "replaceAll" : replaceMergeMainTypeMap && replaceMergeMainTypeMap.get(mainType) ? "replaceMerge" : "normalMerge";
      const mappingResult = mappingToExists(oldCmptList, newCmptOptionList, mergeMode);
      setComponentTypeToKeyInfo(mappingResult, mainType, Component_default);
      option[mainType] = null;
      componentsMap.set(mainType, null);
      componentsCount.set(mainType, 0);
      const optionsByMainType = [];
      const cmptsByMainType = [];
      let cmptsCountByMainType = 0;
      each(mappingResult, function(resultItem, index) {
        let componentModel = resultItem.existing;
        const newCmptOption = resultItem.newOption;
        if (!newCmptOption) {
          if (componentModel) {
            componentModel.mergeOption({}, this);
            componentModel.optionUpdated({}, false);
          }
        } else {
          const ComponentModelClass = Component_default.getClass(mainType, resultItem.keyInfo.subType, true);
          if (componentModel && componentModel.constructor === ComponentModelClass) {
            componentModel.name = resultItem.keyInfo.name;
            componentModel.mergeOption(newCmptOption, this);
            componentModel.optionUpdated(newCmptOption, false);
          } else {
            const extraOpt = extend({
              componentIndex: index
            }, resultItem.keyInfo);
            componentModel = new ComponentModelClass(newCmptOption, this, this, extraOpt);
            extend(componentModel, extraOpt);
            if (resultItem.brandNew) {
              componentModel.__requireNewView = true;
            }
            componentModel.init(newCmptOption, this, this);
            componentModel.optionUpdated(null, true);
          }
        }
        if (componentModel) {
          optionsByMainType.push(componentModel.option);
          cmptsByMainType.push(componentModel);
          cmptsCountByMainType++;
        } else {
          optionsByMainType.push(void 0);
          cmptsByMainType.push(void 0);
        }
      }, this);
      option[mainType] = optionsByMainType;
      componentsMap.set(mainType, cmptsByMainType);
      componentsCount.set(mainType, cmptsCountByMainType);
      if (mainType === "series") {
        reCreateSeriesIndices(this);
      }
    }
    if (!this._seriesIndices) {
      reCreateSeriesIndices(this);
    }
  }
  getOption() {
    const option = clone2(this.option);
    each(option, function(optInMainType, mainType) {
      if (Component_default.hasClass(mainType)) {
        const opts = normalizeToArray(optInMainType);
        let realLen = opts.length;
        let metNonInner = false;
        for (let i = realLen - 1; i >= 0; i--) {
          if (opts[i] && !isComponentIdInternal(opts[i])) {
            metNonInner = true;
          } else {
            opts[i] = null;
            !metNonInner && realLen--;
          }
        }
        opts.length = realLen;
        option[mainType] = opts;
      }
    });
    delete option[OPTION_INNER_KEY];
    return option;
  }
  getTheme() {
    return this._theme;
  }
  setUpdatePayload(payload) {
    this._payload = payload;
  }
  getUpdatePayload() {
    return this._payload;
  }
  getComponent(mainType, idx) {
    const list = this._componentsMap.get(mainType);
    if (list) {
      const cmpt = list[idx || 0];
      if (cmpt) {
        return cmpt;
      } else if (idx == null) {
        for (let i = 0; i < list.length; i++) {
          if (list[i]) {
            return list[i];
          }
        }
      }
    }
  }
  queryComponents(condition) {
    const mainType = condition.mainType;
    if (!mainType) {
      return [];
    }
    const index = condition.index;
    const id = condition.id;
    const name = condition.name;
    const cmpts = this._componentsMap.get(mainType);
    if (!cmpts || !cmpts.length) {
      return [];
    }
    let result;
    if (index != null) {
      result = [];
      each(normalizeToArray(index), function(idx) {
        cmpts[idx] && result.push(cmpts[idx]);
      });
    } else if (id != null) {
      result = queryByIdOrName("id", id, cmpts);
    } else if (name != null) {
      result = queryByIdOrName("name", name, cmpts);
    } else {
      result = filter(cmpts, (cmpt) => !!cmpt);
    }
    return filterBySubType(result, condition);
  }
  findComponents(condition) {
    const query = condition.query;
    const mainType = condition.mainType;
    const queryCond = getQueryCond(query);
    const result = queryCond ? this.queryComponents(queryCond) : filter(this._componentsMap.get(mainType), (cmpt) => !!cmpt);
    return doFilter(filterBySubType(result, condition));
    function getQueryCond(q) {
      const indexAttr = mainType + "Index";
      const idAttr = mainType + "Id";
      const nameAttr = mainType + "Name";
      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
        mainType,
        index: q[indexAttr],
        id: q[idAttr],
        name: q[nameAttr]
      } : null;
    }
    function doFilter(res) {
      return condition.filter ? filter(res, condition.filter) : res;
    }
  }
  eachComponent(mainType, cb, context) {
    const componentsMap = this._componentsMap;
    if (isFunction(mainType)) {
      const ctxForAll = cb;
      const cbForAll = mainType;
      componentsMap.each(function(cmpts, componentType) {
        for (let i = 0; cmpts && i < cmpts.length; i++) {
          const cmpt = cmpts[i];
          cmpt && cbForAll.call(ctxForAll, componentType, cmpt, cmpt.componentIndex);
        }
      });
    } else {
      const cmpts = isString(mainType) ? componentsMap.get(mainType) : isObject(mainType) ? this.findComponents(mainType) : null;
      for (let i = 0; cmpts && i < cmpts.length; i++) {
        const cmpt = cmpts[i];
        cmpt && cb.call(context, cmpt, cmpt.componentIndex);
      }
    }
  }
  getSeriesByName(name) {
    return filter(this._componentsMap.get("series"), (oneSeries) => !!oneSeries && oneSeries.name === name);
  }
  getSeriesByIndex(seriesIndex) {
    return this._componentsMap.get("series")[seriesIndex];
  }
  getSeriesByType(subType) {
    return filter(this._componentsMap.get("series"), (oneSeries) => !!oneSeries && oneSeries.subType === subType);
  }
  getSeries() {
    return filter(this._componentsMap.get("series").slice(), (oneSeries) => !!oneSeries);
  }
  getSeriesCount() {
    return this._componentsCount.get("series");
  }
  eachSeries(cb, context) {
    assertSeriesInitialized(this);
    each(this._seriesIndices, function(rawSeriesIndex) {
      const series = this._componentsMap.get("series")[rawSeriesIndex];
      cb.call(context, series, rawSeriesIndex);
    }, this);
  }
  eachRawSeries(cb, context) {
    each(this._componentsMap.get("series"), function(series) {
      series && cb.call(context, series, series.componentIndex);
    });
  }
  eachSeriesByType(subType, cb, context) {
    assertSeriesInitialized(this);
    each(this._seriesIndices, function(rawSeriesIndex) {
      const series = this._componentsMap.get("series")[rawSeriesIndex];
      if (series.subType === subType) {
        cb.call(context, series, rawSeriesIndex);
      }
    }, this);
  }
  eachRawSeriesByType(subType, cb, context) {
    return each(this.getSeriesByType(subType), cb, context);
  }
  isSeriesFiltered(seriesModel) {
    assertSeriesInitialized(this);
    return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;
  }
  getCurrentSeriesIndices() {
    return (this._seriesIndices || []).slice();
  }
  filterSeries(cb, context) {
    assertSeriesInitialized(this);
    const newSeriesIndices = [];
    each(this._seriesIndices, function(seriesRawIdx) {
      const series = this._componentsMap.get("series")[seriesRawIdx];
      cb.call(context, series, seriesRawIdx) && newSeriesIndices.push(seriesRawIdx);
    }, this);
    this._seriesIndices = newSeriesIndices;
    this._seriesIndicesMap = createHashMap(newSeriesIndices);
  }
  restoreData(payload) {
    reCreateSeriesIndices(this);
    const componentsMap = this._componentsMap;
    const componentTypes = [];
    componentsMap.each(function(components, componentType) {
      componentTypes.push(componentType);
    });
    Component_default.topologicalTravel(componentTypes, Component_default.getAllClassMainTypes(), function(componentType) {
      each(componentsMap.get(componentType), function(component12) {
        if (component12 && (componentType !== "series" || !isNotTargetSeries(component12, payload))) {
          component12.restoreData();
        }
      });
    });
  }
}
GlobalModel145.internalField = function() {
  reCreateSeriesIndices = function(ecModel) {
    const seriesIndices = ecModel._seriesIndices = [];
    each(ecModel._componentsMap.get("series"), function(series) {
      series && seriesIndices.push(series.componentIndex);
    });
    ecModel._seriesIndicesMap = createHashMap(seriesIndices);
  };
  assertSeriesInitialized = function(ecModel) {
    if (__DEV__) {
      if (!ecModel._seriesIndices) {
        throw new Error("Option should contains series.");
      }
    }
  };
  initBase = function(ecModel, baseOption) {
    ecModel.option = {};
    ecModel.option[OPTION_INNER_KEY] = 1;
    ecModel._componentsMap = createHashMap({
      series: []
    });
    ecModel._componentsCount = createHashMap();
    mergeTheme(baseOption, ecModel._theme.option);
    merge(baseOption, globalDefault_default, false);
    ecModel._mergeOption(baseOption, null);
  };
}();
function isNotTargetSeries(seriesModel, payload) {
  if (payload) {
    const index = payload.seiresIndex;
    const id = payload.seriesId;
    const name = payload.seriesName;
    return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name != null && seriesModel.name !== name;
  }
}
function mergeTheme(option, theme2) {
  const notMergeColorLayer = option.color && !option.colorLayer;
  each(theme2, function(themeItem, name) {
    if (name === "colorLayer" && notMergeColorLayer) {
      return;
    }
    if (!Component_default.hasClass(name)) {
      if (typeof themeItem === "object") {
        option[name] = !option[name] ? clone2(themeItem) : merge(option[name], themeItem, false);
      } else {
        if (option[name] == null) {
          option[name] = themeItem;
        }
      }
    }
  });
}
function queryByIdOrName(attr2, idOrName, cmpts) {
  if (isArray(idOrName)) {
    const keyMap = createHashMap(idOrName);
    each(idOrName, function(idOrNameItem) {
      if (idOrNameItem != null) {
        validateIdOrName(idOrNameItem);
        keyMap.set(idOrNameItem, true);
      }
    });
    return filter(cmpts, (cmpt) => cmpt && keyMap.get(cmpt[attr2]));
  } else {
    validateIdOrName(idOrName);
    return filter(cmpts, (cmpt) => cmpt && cmpt[attr2] === idOrName + "");
  }
}
function filterBySubType(components, condition) {
  return condition.hasOwnProperty("subType") ? filter(components, (cmpt) => cmpt && cmpt.subType === condition.subType) : components;
}
function normalizeReplaceMergeInput(opts) {
  const replaceMergeMainTypeMap = createHashMap();
  opts && each(normalizeToArray(opts.replaceMerge), function(mainType) {
    if (__DEV__) {
      assert(Component_default.hasClass(mainType), '"' + mainType + '" is not valid component main type in "replaceMerge"');
    }
    replaceMergeMainTypeMap.set(mainType, true);
  });
  return {
    replaceMergeMainTypeMap
  };
}
mixin(GlobalModel145, ColorPaletteMixin);
const Global_default = GlobalModel145;

// src/ExtensionAPI.ts
const availableMethods = ["getDom", "getZr", "getWidth", "getHeight", "getDevicePixelRatio", "dispatchAction", "isDisposed", "on", "off", "getDataURL", "getConnectedDataURL", "getModel", "getOption", "getViewOfComponentModel", "getViewOfSeriesModel", "getId", "updateLabelLayout"];
class ExtensionAPI3 {
  constructor(ecInstance) {
    each(availableMethods, function(methodName) {
      this[methodName] = bind(ecInstance[methodName], ecInstance);
    }, this);
  }
}
const ExtensionAPI_default = ExtensionAPI3;

// src/CoordinateSystem.ts
const coordinateSystemCreators = {};
class CoordinateSystemManager {
  constructor() {
    this._coordinateSystems = [];
  }
  create(ecModel, api) {
    let coordinateSystems = [];
    each(coordinateSystemCreators, function(creater, type) {
      const list = creater.create(ecModel, api);
      coordinateSystems = coordinateSystems.concat(list || []);
    });
    this._coordinateSystems = coordinateSystems;
  }
  update(ecModel, api) {
    each(this._coordinateSystems, function(coordSys) {
      coordSys.update && coordSys.update(ecModel, api);
    });
  }
  getCoordinateSystems() {
    return this._coordinateSystems.slice();
  }
}
CoordinateSystemManager.register = function(type, creator) {
  coordinateSystemCreators[type] = creator;
};
CoordinateSystemManager.get = function(type) {
  return coordinateSystemCreators[type];
};
const CoordinateSystem_default = CoordinateSystemManager;

// src/model/OptionManager.ts
const QUERY_REG = /^(min|max)?(.+)$/;
class OptionManager4 {
  constructor(api) {
    this._timelineOptions = [];
    this._mediaList = [];
    this._currentMediaIndices = [];
    this._api = api;
  }
  setOption(rawOption, optionPreprocessorFuncs2, opt) {
    if (rawOption) {
      each(normalizeToArray(rawOption.series), function(series) {
        series && series.data && isTypedArray(series.data) && setAsPrimitive(series.data);
      });
    }
    rawOption = clone2(rawOption);
    const optionBackup = this._optionBackup;
    const newParsedOption = parseRawOption(rawOption, optionPreprocessorFuncs2, !optionBackup);
    this._newBaseOption = newParsedOption.baseOption;
    if (optionBackup) {
      if (newParsedOption.timelineOptions.length) {
        optionBackup.timelineOptions = newParsedOption.timelineOptions;
      }
      if (newParsedOption.mediaList.length) {
        optionBackup.mediaList = newParsedOption.mediaList;
      }
      if (newParsedOption.mediaDefault) {
        optionBackup.mediaDefault = newParsedOption.mediaDefault;
      }
    } else {
      this._optionBackup = newParsedOption;
    }
  }
  mountOption(isRecreate) {
    const optionBackup = this._optionBackup;
    this._timelineOptions = optionBackup.timelineOptions;
    this._mediaList = optionBackup.mediaList;
    this._mediaDefault = optionBackup.mediaDefault;
    this._currentMediaIndices = [];
    return clone2(isRecreate ? optionBackup.baseOption : this._newBaseOption);
  }
  getTimelineOption(ecModel) {
    let option;
    const timelineOptions = this._timelineOptions;
    if (timelineOptions.length) {
      const timelineModel = ecModel.getComponent("timeline");
      if (timelineModel) {
        option = clone2(timelineOptions[timelineModel.getCurrentIndex()]);
      }
    }
    return option;
  }
  getMediaOption(ecModel) {
    const ecWidth = this._api.getWidth();
    const ecHeight = this._api.getHeight();
    const mediaList = this._mediaList;
    const mediaDefault = this._mediaDefault;
    let indices = [];
    let result = [];
    if (!mediaList.length && !mediaDefault) {
      return result;
    }
    for (let i = 0, len2 = mediaList.length; i < len2; i++) {
      if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
        indices.push(i);
      }
    }
    if (!indices.length && mediaDefault) {
      indices = [-1];
    }
    if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
      result = map2(indices, function(index) {
        return clone2(index === -1 ? mediaDefault.option : mediaList[index].option);
      });
    }
    this._currentMediaIndices = indices;
    return result;
  }
}
function parseRawOption(rawOption, optionPreprocessorFuncs2, isNew) {
  let timelineOptions = [];
  const mediaList = [];
  let mediaDefault;
  let baseOption;
  const timelineOpt = rawOption.timeline;
  if (rawOption.baseOption) {
    baseOption = rawOption.baseOption;
  }
  if (timelineOpt || rawOption.options) {
    baseOption = baseOption || {};
    timelineOptions = (rawOption.options || []).slice();
  }
  if (rawOption.media) {
    baseOption = baseOption || {};
    const media = rawOption.media;
    each(media, function(singleMedia) {
      if (singleMedia && singleMedia.option) {
        if (singleMedia.query) {
          mediaList.push(singleMedia);
        } else if (!mediaDefault) {
          mediaDefault = singleMedia;
        }
      }
    });
  }
  if (!baseOption) {
    baseOption = rawOption;
  }
  if (!baseOption.timeline) {
    baseOption.timeline = timelineOpt;
  }
  each([baseOption].concat(timelineOptions).concat(map2(mediaList, function(media) {
    return media.option;
  })), function(option) {
    each(optionPreprocessorFuncs2, function(preProcess) {
      preProcess(option, isNew);
    });
  });
  return {
    baseOption,
    timelineOptions,
    mediaDefault,
    mediaList
  };
}
function applyMediaQuery(query, ecWidth, ecHeight) {
  const realMap = {
    width: ecWidth,
    height: ecHeight,
    aspectratio: ecWidth / ecHeight
  };
  let applicatable = true;
  each(query, function(value, attr2) {
    const matched = attr2.match(QUERY_REG);
    if (!matched || !matched[1] || !matched[2]) {
      return;
    }
    const operator = matched[1];
    const realAttr = matched[2].toLowerCase();
    if (!compare(realMap[realAttr], value, operator)) {
      applicatable = false;
    }
  });
  return applicatable;
}
function compare(real, expect, operator) {
  if (operator === "min") {
    return real >= expect;
  } else if (operator === "max") {
    return real <= expect;
  } else {
    return real === expect;
  }
}
function indicesEquals(indices1, indices2) {
  return indices1.join(",") === indices2.join(",");
}
const OptionManager_default = OptionManager4;

// src/preprocessor/helper/compatStyle.ts
const each17 = each;
const isObject4 = isObject;
const POSSIBLE_STYLES = ["areaStyle", "lineStyle", "nodeStyle", "linkStyle", "chordStyle", "label", "labelLine"];
function compatEC2ItemStyle(opt) {
  const itemStyleOpt = opt && opt.itemStyle;
  if (!itemStyleOpt) {
    return;
  }
  for (let i = 0, len2 = POSSIBLE_STYLES.length; i < len2; i++) {
    const styleName = POSSIBLE_STYLES[i];
    const normalItemStyleOpt = itemStyleOpt.normal;
    const emphasisItemStyleOpt = itemStyleOpt.emphasis;
    if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
      if (__DEV__) {
        deprecateReplaceLog(`itemStyle.normal.${styleName}`, styleName);
      }
      opt[styleName] = opt[styleName] || {};
      if (!opt[styleName].normal) {
        opt[styleName].normal = normalItemStyleOpt[styleName];
      } else {
        merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
      }
      normalItemStyleOpt[styleName] = null;
    }
    if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
      if (__DEV__) {
        deprecateReplaceLog(`itemStyle.emphasis.${styleName}`, `emphasis.${styleName}`);
      }
      opt[styleName] = opt[styleName] || {};
      if (!opt[styleName].emphasis) {
        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
      } else {
        merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
      }
      emphasisItemStyleOpt[styleName] = null;
    }
  }
}
function convertNormalEmphasis(opt, optType, useExtend) {
  if (opt && opt[optType] && (opt[optType].normal || opt[optType].emphasis)) {
    const normalOpt = opt[optType].normal;
    const emphasisOpt = opt[optType].emphasis;
    if (normalOpt) {
      if (__DEV__) {
        deprecateLog(`'normal' hierarchy in ${optType} has been removed since 4.0. All style properties are configured in ${optType} directly now.`);
      }
      if (useExtend) {
        opt[optType].normal = opt[optType].emphasis = null;
        defaults(opt[optType], normalOpt);
      } else {
        opt[optType] = normalOpt;
      }
    }
    if (emphasisOpt) {
      if (__DEV__) {
        deprecateLog(`${optType}.emphasis has been changed to emphasis.${optType} since 4.0`);
      }
      opt.emphasis = opt.emphasis || {};
      opt.emphasis[optType] = emphasisOpt;
      if (emphasisOpt.focus) {
        opt.emphasis.focus = emphasisOpt.focus;
      }
      if (emphasisOpt.blurScope) {
        opt.emphasis.blurScope = emphasisOpt.blurScope;
      }
    }
  }
}
function removeEC3NormalStatus(opt) {
  convertNormalEmphasis(opt, "itemStyle");
  convertNormalEmphasis(opt, "lineStyle");
  convertNormalEmphasis(opt, "areaStyle");
  convertNormalEmphasis(opt, "label");
  convertNormalEmphasis(opt, "labelLine");
  convertNormalEmphasis(opt, "upperLabel");
  convertNormalEmphasis(opt, "edgeLabel");
}
function compatTextStyle(opt, propName) {
  const labelOptSingle = isObject4(opt) && opt[propName];
  const textStyle2 = isObject4(labelOptSingle) && labelOptSingle.textStyle;
  if (textStyle2) {
    if (__DEV__) {
      deprecateLog(`textStyle hierarchy in ${propName} has been removed since 4.0. All textStyle properties are configured in ${propName} directly now.`);
    }
    for (let i = 0, len2 = TEXT_STYLE_OPTIONS.length; i < len2; i++) {
      const textPropName = TEXT_STYLE_OPTIONS[i];
      if (textStyle2.hasOwnProperty(textPropName)) {
        labelOptSingle[textPropName] = textStyle2[textPropName];
      }
    }
  }
}
function compatEC3CommonStyles(opt) {
  if (opt) {
    removeEC3NormalStatus(opt);
    compatTextStyle(opt, "label");
    opt.emphasis && compatTextStyle(opt.emphasis, "label");
  }
}
function processSeries(seriesOpt) {
  if (!isObject4(seriesOpt)) {
    return;
  }
  compatEC2ItemStyle(seriesOpt);
  removeEC3NormalStatus(seriesOpt);
  compatTextStyle(seriesOpt, "label");
  compatTextStyle(seriesOpt, "upperLabel");
  compatTextStyle(seriesOpt, "edgeLabel");
  if (seriesOpt.emphasis) {
    compatTextStyle(seriesOpt.emphasis, "label");
    compatTextStyle(seriesOpt.emphasis, "upperLabel");
    compatTextStyle(seriesOpt.emphasis, "edgeLabel");
  }
  let markPoint2 = seriesOpt.markPoint;
  if (markPoint2) {
    compatEC2ItemStyle(markPoint2);
    compatEC3CommonStyles(markPoint2);
  }
  let markLine2 = seriesOpt.markLine;
  if (markLine2) {
    compatEC2ItemStyle(markLine2);
    compatEC3CommonStyles(markLine2);
  }
  const markArea2 = seriesOpt.markArea;
  if (markArea2) {
    compatEC3CommonStyles(markArea2);
  }
  let data = seriesOpt.data;
  if (seriesOpt.type === "graph") {
    data = data || seriesOpt.nodes;
    const edgeData = seriesOpt.links || seriesOpt.edges;
    if (edgeData && !isTypedArray(edgeData)) {
      for (let i = 0; i < edgeData.length; i++) {
        compatEC3CommonStyles(edgeData[i]);
      }
    }
    each(seriesOpt.categories, function(opt) {
      removeEC3NormalStatus(opt);
    });
  }
  if (data && !isTypedArray(data)) {
    for (let i = 0; i < data.length; i++) {
      compatEC3CommonStyles(data[i]);
    }
  }
  markPoint2 = seriesOpt.markPoint;
  if (markPoint2 && markPoint2.data) {
    const mpData = markPoint2.data;
    for (let i = 0; i < mpData.length; i++) {
      compatEC3CommonStyles(mpData[i]);
    }
  }
  markLine2 = seriesOpt.markLine;
  if (markLine2 && markLine2.data) {
    const mlData = markLine2.data;
    for (let i = 0; i < mlData.length; i++) {
      if (isArray(mlData[i])) {
        compatEC3CommonStyles(mlData[i][0]);
        compatEC3CommonStyles(mlData[i][1]);
      } else {
        compatEC3CommonStyles(mlData[i]);
      }
    }
  }
  if (seriesOpt.type === "gauge") {
    compatTextStyle(seriesOpt, "axisLabel");
    compatTextStyle(seriesOpt, "title");
    compatTextStyle(seriesOpt, "detail");
  } else if (seriesOpt.type === "treemap") {
    convertNormalEmphasis(seriesOpt.breadcrumb, "itemStyle");
    each(seriesOpt.levels, function(opt) {
      removeEC3NormalStatus(opt);
    });
  } else if (seriesOpt.type === "tree") {
    removeEC3NormalStatus(seriesOpt.leaves);
  }
}
function toArr(o) {
  return isArray(o) ? o : o ? [o] : [];
}
function toObj(o) {
  return (isArray(o) ? o[0] : o) || {};
}
function compatStyle_default(option, isTheme) {
  each17(toArr(option.series), function(seriesOpt) {
    isObject4(seriesOpt) && processSeries(seriesOpt);
  });
  const axes = ["xAxis", "yAxis", "radiusAxis", "angleAxis", "singleAxis", "parallelAxis", "radar"];
  isTheme && axes.push("valueAxis", "categoryAxis", "logAxis", "timeAxis");
  each17(axes, function(axisName) {
    each17(toArr(option[axisName]), function(axisOpt) {
      if (axisOpt) {
        compatTextStyle(axisOpt, "axisLabel");
        compatTextStyle(axisOpt.axisPointer, "label");
      }
    });
  });
  each17(toArr(option.parallel), function(parallelOpt) {
    const parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
    compatTextStyle(parallelAxisDefault, "axisLabel");
    compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, "label");
  });
  each17(toArr(option.calendar), function(calendarOpt) {
    convertNormalEmphasis(calendarOpt, "itemStyle");
    compatTextStyle(calendarOpt, "dayLabel");
    compatTextStyle(calendarOpt, "monthLabel");
    compatTextStyle(calendarOpt, "yearLabel");
  });
  each17(toArr(option.radar), function(radarOpt) {
    compatTextStyle(radarOpt, "name");
    if (radarOpt.name && radarOpt.axisName == null) {
      radarOpt.axisName = radarOpt.name;
      delete radarOpt.name;
      if (__DEV__) {
        deprecateLog("name property in radar component has been changed to axisName");
      }
    }
    if (radarOpt.nameGap != null && radarOpt.axisNameGap == null) {
      radarOpt.axisNameGap = radarOpt.nameGap;
      delete radarOpt.nameGap;
      if (__DEV__) {
        deprecateLog("nameGap property in radar component has been changed to axisNameGap");
      }
    }
  });
  each17(toArr(option.geo), function(geoOpt) {
    if (isObject4(geoOpt)) {
      compatEC3CommonStyles(geoOpt);
      each17(toArr(geoOpt.regions), function(regionObj) {
        compatEC3CommonStyles(regionObj);
      });
    }
  });
  each17(toArr(option.timeline), function(timelineOpt) {
    compatEC3CommonStyles(timelineOpt);
    convertNormalEmphasis(timelineOpt, "label");
    convertNormalEmphasis(timelineOpt, "itemStyle");
    convertNormalEmphasis(timelineOpt, "controlStyle", true);
    const data = timelineOpt.data;
    isArray(data) && each(data, function(item) {
      if (isObject(item)) {
        convertNormalEmphasis(item, "label");
        convertNormalEmphasis(item, "itemStyle");
      }
    });
  });
  each17(toArr(option.toolbox), function(toolboxOpt) {
    convertNormalEmphasis(toolboxOpt, "iconStyle");
    each17(toolboxOpt.feature, function(featureOpt) {
      convertNormalEmphasis(featureOpt, "iconStyle");
    });
  });
  compatTextStyle(toObj(option.axisPointer), "label");
  compatTextStyle(toObj(option.tooltip).axisPointer, "label");
}

// src/preprocessor/backwardCompat.ts
function get(opt, path2) {
  const pathArr = path2.split(",");
  let obj = opt;
  for (let i = 0; i < pathArr.length; i++) {
    obj = obj && obj[pathArr[i]];
    if (obj == null) {
      break;
    }
  }
  return obj;
}
function set2(opt, path2, val, overwrite) {
  const pathArr = path2.split(",");
  let obj = opt;
  let key;
  let i = 0;
  for (; i < pathArr.length - 1; i++) {
    key = pathArr[i];
    if (obj[key] == null) {
      obj[key] = {};
    }
    obj = obj[key];
  }
  if (overwrite || obj[pathArr[i]] == null) {
    obj[pathArr[i]] = val;
  }
}
function compatLayoutProperties(option) {
  option && each(LAYOUT_PROPERTIES, function(prop) {
    if (prop[0] in option && !(prop[1] in option)) {
      option[prop[1]] = option[prop[0]];
    }
  });
}
const LAYOUT_PROPERTIES = [["x", "left"], ["y", "top"], ["x2", "right"], ["y2", "bottom"]];
const COMPATITABLE_COMPONENTS = ["grid", "geo", "parallel", "legend", "toolbox", "title", "visualMap", "dataZoom", "timeline"];
const BAR_ITEM_STYLE_MAP = [["borderRadius", "barBorderRadius"], ["borderColor", "barBorderColor"], ["borderWidth", "barBorderWidth"]];
function compatBarItemStyle(option) {
  const itemStyle5 = option && option.itemStyle;
  if (itemStyle5) {
    for (let i = 0; i < BAR_ITEM_STYLE_MAP.length; i++) {
      const oldName = BAR_ITEM_STYLE_MAP[i][1];
      const newName = BAR_ITEM_STYLE_MAP[i][0];
      if (itemStyle5[oldName] != null) {
        itemStyle5[newName] = itemStyle5[oldName];
        if (__DEV__) {
          deprecateReplaceLog(oldName, newName);
        }
      }
    }
  }
}
function compatPieLabel(option) {
  if (!option) {
    return;
  }
  if (option.alignTo === "edge" && option.margin != null && option.edgeDistance == null) {
    if (__DEV__) {
      deprecateReplaceLog("label.margin", "label.edgeDistance", "pie");
    }
    option.edgeDistance = option.margin;
  }
}
function compatSunburstState(option) {
  if (!option) {
    return;
  }
  if (option.downplay && !option.blur) {
    option.blur = option.downplay;
    if (__DEV__) {
      deprecateReplaceLog("downplay", "blur", "sunburst");
    }
  }
}
function compatGraphFocus(option) {
  if (!option) {
    return;
  }
  if (option.focusNodeAdjacency != null) {
    option.emphasis = option.emphasis || {};
    if (option.emphasis.focus == null) {
      if (__DEV__) {
        deprecateReplaceLog("focusNodeAdjacency", "emphasis: { focus: 'adjacency'}", "graph/sankey");
      }
      option.emphasis.focus = "adjacency";
    }
  }
}
function traverseTree(data, cb) {
  if (data) {
    for (let i = 0; i < data.length; i++) {
      cb(data[i]);
      data[i] && traverseTree(data[i].children, cb);
    }
  }
}
function backwardCompat_default2(option, isTheme) {
  compatStyle_default(option, isTheme);
  option.series = normalizeToArray(option.series);
  each(option.series, function(seriesOpt) {
    if (!isObject(seriesOpt)) {
      return;
    }
    const seriesType2 = seriesOpt.type;
    if (seriesType2 === "line") {
      if (seriesOpt.clipOverflow != null) {
        seriesOpt.clip = seriesOpt.clipOverflow;
        if (__DEV__) {
          deprecateReplaceLog("clipOverflow", "clip", "line");
        }
      }
    } else if (seriesType2 === "pie" || seriesType2 === "gauge") {
      if (seriesOpt.clockWise != null) {
        seriesOpt.clockwise = seriesOpt.clockWise;
        if (__DEV__) {
          deprecateReplaceLog("clockWise", "clockwise");
        }
      }
      compatPieLabel(seriesOpt.label);
      const data = seriesOpt.data;
      if (data && !isTypedArray(data)) {
        for (let i = 0; i < data.length; i++) {
          compatPieLabel(data[i]);
        }
      }
      if (seriesOpt.hoverOffset != null) {
        seriesOpt.emphasis = seriesOpt.emphasis || {};
        if (seriesOpt.emphasis.scaleSize = null) {
          if (__DEV__) {
            deprecateReplaceLog("hoverOffset", "emphasis.scaleSize");
          }
          seriesOpt.emphasis.scaleSize = seriesOpt.hoverOffset;
        }
      }
    } else if (seriesType2 === "gauge") {
      const pointerColor = get(seriesOpt, "pointer.color");
      pointerColor != null && set2(seriesOpt, "itemStyle.color", pointerColor);
    } else if (seriesType2 === "bar") {
      compatBarItemStyle(seriesOpt);
      compatBarItemStyle(seriesOpt.backgroundStyle);
      compatBarItemStyle(seriesOpt.emphasis);
      const data = seriesOpt.data;
      if (data && !isTypedArray(data)) {
        for (let i = 0; i < data.length; i++) {
          if (typeof data[i] === "object") {
            compatBarItemStyle(data[i]);
            compatBarItemStyle(data[i] && data[i].emphasis);
          }
        }
      }
    } else if (seriesType2 === "sunburst") {
      const highlightPolicy = seriesOpt.highlightPolicy;
      if (highlightPolicy) {
        seriesOpt.emphasis = seriesOpt.emphasis || {};
        if (!seriesOpt.emphasis.focus) {
          seriesOpt.emphasis.focus = highlightPolicy;
          if (__DEV__) {
            deprecateReplaceLog("highlightPolicy", "emphasis.focus", "sunburst");
          }
        }
      }
      compatSunburstState(seriesOpt);
      traverseTree(seriesOpt.data, compatSunburstState);
    } else if (seriesType2 === "graph" || seriesType2 === "sankey") {
      compatGraphFocus(seriesOpt);
    } else if (seriesType2 === "map") {
      if (seriesOpt.mapType && !seriesOpt.map) {
        if (__DEV__) {
          deprecateReplaceLog("mapType", "map", "map");
        }
        seriesOpt.map = seriesOpt.mapType;
      }
      if (seriesOpt.mapLocation) {
        if (__DEV__) {
          deprecateLog("`mapLocation` is not used anymore.");
        }
        defaults(seriesOpt, seriesOpt.mapLocation);
      }
    }
    if (seriesOpt.hoverAnimation != null) {
      seriesOpt.emphasis = seriesOpt.emphasis || {};
      if (seriesOpt.emphasis && seriesOpt.emphasis.scale == null) {
        if (__DEV__) {
          deprecateReplaceLog("hoverAnimation", "emphasis.scale");
        }
        seriesOpt.emphasis.scale = seriesOpt.hoverAnimation;
      }
    }
    compatLayoutProperties(seriesOpt);
  });
  if (option.dataRange) {
    option.visualMap = option.dataRange;
  }
  each(COMPATITABLE_COMPONENTS, function(componentName) {
    let options = option[componentName];
    if (options) {
      if (!isArray(options)) {
        options = [options];
      }
      each(options, function(option2) {
        compatLayoutProperties(option2);
      });
    }
  });
}

// src/processor/dataStack.ts
function dataStack_default(ecModel) {
  const stackInfoMap = createHashMap();
  ecModel.eachSeries(function(seriesModel) {
    const stack = seriesModel.get("stack");
    if (stack) {
      const stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);
      const data = seriesModel.getData();
      const stackInfo = {
        stackResultDimension: data.getCalculationInfo("stackResultDimension"),
        stackedOverDimension: data.getCalculationInfo("stackedOverDimension"),
        stackedDimension: data.getCalculationInfo("stackedDimension"),
        stackedByDimension: data.getCalculationInfo("stackedByDimension"),
        isStackedByIndex: data.getCalculationInfo("isStackedByIndex"),
        data,
        seriesModel
      };
      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {
        return;
      }
      stackInfoList.length && data.setCalculationInfo("stackedOnSeries", stackInfoList[stackInfoList.length - 1].seriesModel);
      stackInfoList.push(stackInfo);
    }
  });
  stackInfoMap.each(calculateStack);
}
function calculateStack(stackInfoList) {
  each(stackInfoList, function(targetStackInfo, idxInStack) {
    const resultVal = [];
    const resultNaN = [NaN, NaN];
    const dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];
    const targetData = targetStackInfo.data;
    const isStackedByIndex = targetStackInfo.isStackedByIndex;
    const newData = targetData.map(dims, function(v0, v12, dataIndex) {
      let sum2 = targetData.get(targetStackInfo.stackedDimension, dataIndex);
      if (isNaN(sum2)) {
        return resultNaN;
      }
      let byValue;
      let stackedDataRawIndex;
      if (isStackedByIndex) {
        stackedDataRawIndex = targetData.getRawIndex(dataIndex);
      } else {
        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);
      }
      let stackedOver = NaN;
      for (let j = idxInStack - 1; j >= 0; j--) {
        const stackInfo = stackInfoList[j];
        if (!isStackedByIndex) {
          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);
        }
        if (stackedDataRawIndex >= 0) {
          const val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex);
          if (sum2 >= 0 && val > 0 || sum2 <= 0 && val < 0) {
            sum2 += val;
            stackedOver = val;
            break;
          }
        }
      }
      resultVal[0] = sum2;
      resultVal[1] = stackedOver;
      return resultVal;
    });
    targetData.hostModel.setData(newData);
    targetStackInfo.data = newData;
  });
}

// src/data/helper/dataProvider.ts
let providerMethods;
class DefaultDataProvider {
  constructor(sourceParam, dimSize) {
    const source = !(sourceParam instanceof Source_default) ? Source_default.seriesDataToSource(sourceParam) : sourceParam;
    this._source = source;
    const data = this._data = source.data;
    const sourceFormat = source.sourceFormat;
    if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {
      if (__DEV__) {
        if (dimSize == null) {
          throw new Error("Typed array data must specify dimension size");
        }
      }
      this._offset = 0;
      this._dimSize = dimSize;
      this._data = data;
    }
    const methods3 = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + "_" + source.seriesLayoutBy : sourceFormat];
    if (__DEV__) {
      assert(methods3, "Invalide sourceFormat: " + sourceFormat);
    }
    extend(this, methods3);
  }
  getSource() {
    return this._source;
  }
  count() {
    return 0;
  }
  getItem(idx) {
    return;
  }
  appendData(newData) {
  }
  clean() {
  }
}
DefaultDataProvider.protoInitialize = function() {
  const proto2 = DefaultDataProvider.prototype;
  proto2.pure = false;
  proto2.persistent = true;
}();
DefaultDataProvider.internalField = function() {
  providerMethods = {
    [SOURCE_FORMAT_ARRAY_ROWS + "_" + SERIES_LAYOUT_BY_COLUMN]: {
      pure: true,
      count: function() {
        return Math.max(0, this._data.length - this._source.startIndex);
      },
      getItem: function(idx) {
        return this._data[idx + this._source.startIndex];
      },
      appendData: appendDataSimply
    },
    [SOURCE_FORMAT_ARRAY_ROWS + "_" + SERIES_LAYOUT_BY_ROW]: {
      pure: true,
      count: function() {
        const row = this._data[0];
        return row ? Math.max(0, row.length - this._source.startIndex) : 0;
      },
      getItem: function(idx) {
        idx += this._source.startIndex;
        const item = [];
        const data = this._data;
        for (let i = 0; i < data.length; i++) {
          const row = data[i];
          item.push(row ? row[idx] : null);
        }
        return item;
      },
      appendData: function() {
        throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
      }
    },
    [SOURCE_FORMAT_OBJECT_ROWS]: {
      pure: true,
      count: countSimply,
      getItem: getItemSimply,
      appendData: appendDataSimply
    },
    [SOURCE_FORMAT_KEYED_COLUMNS]: {
      pure: true,
      count: function() {
        const dimName = this._source.dimensionsDefine[0].name;
        const col = this._data[dimName];
        return col ? col.length : 0;
      },
      getItem: function(idx) {
        const item = [];
        const dims = this._source.dimensionsDefine;
        for (let i = 0; i < dims.length; i++) {
          const col = this._data[dims[i].name];
          item.push(col ? col[idx] : null);
        }
        return item;
      },
      appendData: function(newData) {
        const data = this._data;
        each(newData, function(newCol, key) {
          const oldCol = data[key] || (data[key] = []);
          for (let i = 0; i < (newCol || []).length; i++) {
            oldCol.push(newCol[i]);
          }
        });
      }
    },
    [SOURCE_FORMAT_ORIGINAL]: {
      count: countSimply,
      getItem: getItemSimply,
      appendData: appendDataSimply
    },
    [SOURCE_FORMAT_TYPED_ARRAY]: {
      persistent: false,
      pure: true,
      count: function() {
        return this._data ? this._data.length / this._dimSize : 0;
      },
      getItem: function(idx, out2) {
        idx = idx - this._offset;
        out2 = out2 || [];
        const offset = this._dimSize * idx;
        for (let i = 0; i < this._dimSize; i++) {
          out2[i] = this._data[offset + i];
        }
        return out2;
      },
      appendData: function(newData) {
        if (__DEV__) {
          assert(isTypedArray(newData), "Added data must be TypedArray if data in initialization is TypedArray");
        }
        this._data = newData;
      },
      clean: function() {
        this._offset += this.count();
        this._data = null;
      }
    }
  };
  function countSimply() {
    return this._data.length;
  }
  function getItemSimply(idx) {
    return this._data[idx];
  }
  function appendDataSimply(newData) {
    for (let i = 0; i < newData.length; i++) {
      this._data.push(newData[i]);
    }
  }
}();
const rawValueGetters = {
  [SOURCE_FORMAT_ARRAY_ROWS]: getRawValueSimply,
  [SOURCE_FORMAT_OBJECT_ROWS]: function(dataItem, dataIndex, dimIndex, dimName) {
    return dimIndex != null ? dataItem[dimName] : dataItem;
  },
  [SOURCE_FORMAT_KEYED_COLUMNS]: getRawValueSimply,
  [SOURCE_FORMAT_ORIGINAL]: function(dataItem, dataIndex, dimIndex, dimName) {
    const value = getDataItemValue(dataItem);
    return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];
  },
  [SOURCE_FORMAT_TYPED_ARRAY]: getRawValueSimply
};
function getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {
  return dimIndex != null ? dataItem[dimIndex] : dataItem;
}
function retrieveRawValue(data, dataIndex, dim) {
  if (!data) {
    return;
  }
  const dataItem = data.getRawDataItem(dataIndex);
  if (dataItem == null) {
    return;
  }
  const sourceFormat = data.getProvider().getSource().sourceFormat;
  let dimName;
  let dimIndex;
  const dimInfo = data.getDimensionInfo(dim);
  if (dimInfo) {
    dimName = dimInfo.name;
    dimIndex = dimInfo.index;
  }
  return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);
}

// src/model/mixin/dataFormat.ts
const DIMENSION_LABEL_REG = /\{@(.+?)\}/g;
class DataFormatMixin {
  getDataParams(dataIndex, dataType) {
    const data = this.getData(dataType);
    const rawValue = this.getRawValue(dataIndex, dataType);
    const rawDataIndex = data.getRawIndex(dataIndex);
    const name = data.getName(dataIndex);
    const itemOpt = data.getRawDataItem(dataIndex);
    const style2 = data.getItemVisual(dataIndex, "style");
    const color8 = style2 && style2[data.getItemVisual(dataIndex, "drawType") || "fill"];
    const borderColor = style2 && style2.stroke;
    const mainType = this.mainType;
    const isSeries = mainType === "series";
    const userOutput = data.userOutput;
    return {
      componentType: mainType,
      componentSubType: this.subType,
      componentIndex: this.componentIndex,
      seriesType: isSeries ? this.subType : null,
      seriesIndex: this.seriesIndex,
      seriesId: isSeries ? this.id : null,
      seriesName: isSeries ? this.name : null,
      name,
      dataIndex: rawDataIndex,
      data: itemOpt,
      dataType,
      value: rawValue,
      color: color8,
      borderColor,
      dimensionNames: userOutput ? userOutput.dimensionNames : null,
      encode: userOutput ? userOutput.encode : null,
      $vars: ["seriesName", "name", "value"]
    };
  }
  getFormattedLabel(dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {
    status = status || "normal";
    const data = this.getData(dataType);
    const params = this.getDataParams(dataIndex, dataType);
    if (extendParams) {
      extend(params, extendParams);
    }
    if (labelDimIndex != null && params.value instanceof Array) {
      params.value = params.value[labelDimIndex];
    }
    if (!formatter) {
      const itemModel = data.getItemModel(dataIndex);
      formatter = itemModel.get(status === "normal" ? ["label", "formatter"] : [status, "label", "formatter"]);
    }
    if (typeof formatter === "function") {
      params.status = status;
      params.dimensionIndex = labelDimIndex;
      return formatter(params);
    } else if (typeof formatter === "string") {
      const str = formatTpl(formatter, params);
      return str.replace(DIMENSION_LABEL_REG, function(origin, dim) {
        const len2 = dim.length;
        if (dim.charAt(0) === "[" && dim.charAt(len2 - 1) === "]") {
          dim = +dim.slice(1, len2 - 1);
        }
        return retrieveRawValue(data, dataIndex, dim);
      });
    }
  }
  getRawValue(idx, dataType) {
    return retrieveRawValue(this.getData(dataType), idx);
  }
  formatTooltip(dataIndex, multipleSeries, dataType, renderMode) {
    return;
  }
}
const dataFormat_default = DataFormatMixin;

// src/stream/task.ts
function createTask(define) {
  return new Task2(define);
}
class Task2 {
  constructor(define) {
    define = define || {};
    this._reset = define.reset;
    this._plan = define.plan;
    this._count = define.count;
    this._onDirty = define.onDirty;
    this._dirty = true;
  }
  perform(performArgs) {
    const upTask = this._upstream;
    const skip = performArgs && performArgs.skip;
    if (this._dirty && upTask) {
      const context = this.context;
      context.data = context.outputData = upTask.context.outputData;
    }
    if (this.__pipeline) {
      this.__pipeline.currentTask = this;
    }
    let planResult;
    if (this._plan && !skip) {
      planResult = this._plan(this.context);
    }
    const lastModBy = normalizeModBy(this._modBy);
    const lastModDataCount = this._modDataCount || 0;
    const modBy = normalizeModBy(performArgs && performArgs.modBy);
    const modDataCount = performArgs && performArgs.modDataCount || 0;
    if (lastModBy !== modBy || lastModDataCount !== modDataCount) {
      planResult = "reset";
    }
    function normalizeModBy(val) {
      !(val >= 1) && (val = 1);
      return val;
    }
    let forceFirstProgress;
    if (this._dirty || planResult === "reset") {
      this._dirty = false;
      forceFirstProgress = this._doReset(skip);
    }
    this._modBy = modBy;
    this._modDataCount = modDataCount;
    const step2 = performArgs && performArgs.step;
    if (upTask) {
      if (__DEV__) {
        assert(upTask._outputDueEnd != null);
      }
      this._dueEnd = upTask._outputDueEnd;
    } else {
      if (__DEV__) {
        assert(!this._progress || this._count);
      }
      this._dueEnd = this._count ? this._count(this.context) : Infinity;
    }
    if (this._progress) {
      const start2 = this._dueIndex;
      const end2 = Math.min(step2 != null ? this._dueIndex + step2 : Infinity, this._dueEnd);
      if (!skip && (forceFirstProgress || start2 < end2)) {
        const progress = this._progress;
        if (isArray(progress)) {
          for (let i = 0; i < progress.length; i++) {
            this._doProgress(progress[i], start2, end2, modBy, modDataCount);
          }
        } else {
          this._doProgress(progress, start2, end2, modBy, modDataCount);
        }
      }
      this._dueIndex = end2;
      const outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end2;
      if (__DEV__) {
        assert(outputDueEnd >= this._outputDueEnd);
      }
      this._outputDueEnd = outputDueEnd;
    } else {
      this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;
    }
    return this.unfinished();
  }
  dirty() {
    this._dirty = true;
    this._onDirty && this._onDirty(this.context);
  }
  _doProgress(progress, start2, end2, modBy, modDataCount) {
    iterator.reset(start2, end2, modBy, modDataCount);
    this._callingProgress = progress;
    this._callingProgress({
      start: start2,
      end: end2,
      count: end2 - start2,
      next: iterator.next
    }, this.context);
  }
  _doReset(skip) {
    this._dueIndex = this._outputDueEnd = this._dueEnd = 0;
    this._settedOutputEnd = null;
    let progress;
    let forceFirstProgress;
    if (!skip && this._reset) {
      progress = this._reset(this.context);
      if (progress && progress.progress) {
        forceFirstProgress = progress.forceFirstProgress;
        progress = progress.progress;
      }
      if (isArray(progress) && !progress.length) {
        progress = null;
      }
    }
    this._progress = progress;
    this._modBy = this._modDataCount = null;
    const downstream = this._downstream;
    downstream && downstream.dirty();
    return forceFirstProgress;
  }
  unfinished() {
    return this._progress && this._dueIndex < this._dueEnd;
  }
  pipe(downTask) {
    if (__DEV__) {
      assert(downTask && !downTask._disposed && downTask !== this);
    }
    if (this._downstream !== downTask || this._dirty) {
      this._downstream = downTask;
      downTask._upstream = this;
      downTask.dirty();
    }
  }
  dispose() {
    if (this._disposed) {
      return;
    }
    this._upstream && (this._upstream._downstream = null);
    this._downstream && (this._downstream._upstream = null);
    this._dirty = false;
    this._disposed = true;
  }
  getUpstream() {
    return this._upstream;
  }
  getDownstream() {
    return this._downstream;
  }
  setOutputEnd(end2) {
    this._outputDueEnd = this._settedOutputEnd = end2;
  }
}
const iterator = function() {
  let end2;
  let current;
  let modBy;
  let modDataCount;
  let winCount;
  const it = {
    reset: function(s, e, sStep, sCount) {
      current = s;
      end2 = e;
      modBy = sStep;
      modDataCount = sCount;
      winCount = Math.ceil(modDataCount / modBy);
      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;
    }
  };
  return it;
  function sequentialNext() {
    return current < end2 ? current++ : null;
  }
  function modNext() {
    const dataIndex = current % winCount * modBy + Math.ceil(current / winCount);
    const result = current >= end2 ? null : dataIndex < modDataCount ? dataIndex : current;
    current++;
    return result;
  }
}();

// src/model/Series.ts
const inner20 = makeInner();
function getSelectionKey(data, dataIndex) {
  return data.getName(dataIndex) || data.getId(dataIndex);
}
class SeriesModel42 extends Component_default {
  constructor() {
    super(...arguments);
    this._selectedDataIndicesMap = {};
  }
  init(option, parentModel, ecModel) {
    this.seriesIndex = this.componentIndex;
    this.dataTask = createTask({
      count: dataTaskCount,
      reset: dataTaskReset
    });
    this.dataTask.context = {
      model: this
    };
    this.mergeDefaultAndTheme(option, ecModel);
    prepareSource(this);
    const data = this.getInitialData(option, ecModel);
    wrapData(data, this);
    this.dataTask.context.data = data;
    if (__DEV__) {
      assert(data, "getInitialData returned invalid data.");
    }
    inner20(this).dataBeforeProcessed = data;
    autoSeriesName(this);
    this._initSelectedMapFromData(data);
  }
  mergeDefaultAndTheme(option, ecModel) {
    const layoutMode = fetchLayoutMode(this);
    const inputPositionParams = layoutMode ? getLayoutParams(option) : {};
    let themeSubType = this.subType;
    if (Component_default.hasClass(themeSubType)) {
      themeSubType += "Series";
    }
    merge(option, ecModel.getTheme().get(this.subType));
    merge(option, this.getDefaultOption());
    defaultEmphasis(option, "label", ["show"]);
    this.fillDataTextStyle(option.data);
    if (layoutMode) {
      mergeLayoutParam(option, inputPositionParams, layoutMode);
    }
  }
  mergeOption(newSeriesOption, ecModel) {
    newSeriesOption = merge(this.option, newSeriesOption, true);
    this.fillDataTextStyle(newSeriesOption.data);
    const layoutMode = fetchLayoutMode(this);
    if (layoutMode) {
      mergeLayoutParam(this.option, newSeriesOption, layoutMode);
    }
    prepareSource(this);
    const data = this.getInitialData(newSeriesOption, ecModel);
    wrapData(data, this);
    this.dataTask.dirty();
    this.dataTask.context.data = data;
    inner20(this).dataBeforeProcessed = data;
    autoSeriesName(this);
    this._initSelectedMapFromData(data);
  }
  fillDataTextStyle(data) {
    if (data && !isTypedArray(data)) {
      const props = ["show"];
      for (let i = 0; i < data.length; i++) {
        if (data[i] && data[i].label) {
          defaultEmphasis(data[i], "label", props);
        }
      }
    }
  }
  getInitialData(option, ecModel) {
    return;
  }
  appendData(params) {
    const data = this.getRawData();
    data.appendData(params.data);
  }
  getData(dataType) {
    const task6 = getCurrentTask(this);
    if (task6) {
      const data = task6.context.data;
      return dataType == null ? data : data.getLinkedData(dataType);
    } else {
      return inner20(this).data;
    }
  }
  getAllData() {
    const mainData = this.getData();
    return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [{
      data: mainData
    }];
  }
  setData(data) {
    const task6 = getCurrentTask(this);
    if (task6) {
      const context = task6.context;
      context.outputData = data;
      if (task6 !== this.dataTask) {
        context.data = data;
      }
    }
    inner20(this).data = data;
  }
  getSource() {
    return getSource(this);
  }
  getRawData() {
    return inner20(this).dataBeforeProcessed;
  }
  getBaseAxis() {
    const coordSys = this.coordinateSystem;
    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
  }
  formatTooltip(dataIndex, multipleSeries, dataType, renderMode) {
    const series = this;
    renderMode = renderMode || "html";
    const newLine = renderMode === "html" ? "<br/>" : "\n";
    const isRichText = renderMode === "richText";
    const markers = {};
    let markerId = 0;
    function formatArrayValue(value2) {
      const vertially = reduce(value2, function(vertially2, val, idx) {
        const dimItem = data.getDimensionInfo(idx);
        return vertially2 |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;
      }, 0);
      const result = [];
      tooltipDims.length ? each(tooltipDims, function(dim) {
        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);
      }) : each(value2, setEachItem);
      function setEachItem(val, dim) {
        const dimInfo = data.getDimensionInfo(dim);
        if (!dimInfo || dimInfo.otherDims.tooltip === false) {
          return;
        }
        const dimType = dimInfo.type;
        const markName2 = "sub" + series.seriesIndex + "at" + markerId;
        const dimHead = getTooltipMarker({
          color: colorStr,
          type: "subItem",
          renderMode,
          markerId: markName2
        });
        const dimHeadStr = typeof dimHead === "string" ? dimHead : dimHead.content;
        const valStr = (vertially ? dimHeadStr + encodeHTML(dimInfo.displayName || "-") + ": " : "") + encodeHTML(dimType === "ordinal" ? val + "" : dimType === "time" ? multipleSeries ? "" : formatTime("yyyy/MM/dd hh:mm:ss", val) : addCommas(val));
        valStr && result.push(valStr);
        if (isRichText) {
          markers[markName2] = colorStr;
          ++markerId;
        }
      }
      const newLine2 = vertially ? isRichText ? "\n" : "<br/>" : "";
      const content2 = newLine2 + result.join(newLine2 || ", ");
      return {
        renderMode,
        content: content2,
        style: markers
      };
    }
    function formatSingleValue(val) {
      return {
        renderMode,
        content: encodeHTML(addCommas(val)),
        style: markers
      };
    }
    const data = this.getData();
    const tooltipDims = data.mapDimensionsAll("defaultedTooltip");
    const tooltipDimLen = tooltipDims.length;
    const value = this.getRawValue(dataIndex);
    const isValueArr = isArray(value);
    const style2 = data.getItemVisual(dataIndex, "style");
    const color8 = style2[this.visualDrawType];
    let colorStr;
    if (isString(color8)) {
      colorStr = color8;
    } else if (color8 && color8.colorStops) {
      colorStr = (color8.colorStops[0] || {}).color;
    }
    colorStr = colorStr || "transparent";
    const formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);
    const content = formattedValue.content;
    const markName = series.seriesIndex + "at" + markerId;
    const colorEl = getTooltipMarker({
      color: colorStr,
      type: "item",
      renderMode,
      markerId: markName
    });
    markers[markName] = colorStr;
    ++markerId;
    const name = data.getName(dataIndex);
    let seriesName = this.name;
    if (!isNameSpecified(this)) {
      seriesName = "";
    }
    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? newLine : ": ") : "";
    colorStr = typeof colorEl === "string" ? colorEl : colorEl.content;
    const html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML(name) + ": " + content : content) : colorStr + seriesName + content;
    return {
      html,
      markers
    };
  }
  isAnimationEnabled() {
    if (env_default.node) {
      return false;
    }
    let animationEnabled = this.getShallow("animation");
    if (animationEnabled) {
      if (this.getData().count() > this.getShallow("animationThreshold")) {
        animationEnabled = false;
      }
    }
    return !!animationEnabled;
  }
  restoreData() {
    this.dataTask.dirty();
  }
  getColorFromPalette(name, scope, requestColorNum) {
    const ecModel = this.ecModel;
    let color8 = ColorPaletteMixin.prototype.getColorFromPalette.call(this, name, scope, requestColorNum);
    if (!color8) {
      color8 = ecModel.getColorFromPalette(name, scope, requestColorNum);
    }
    return color8;
  }
  coordDimToDataDim(coordDim) {
    return this.getRawData().mapDimensionsAll(coordDim);
  }
  getProgressive() {
    return this.get("progressive");
  }
  getProgressiveThreshold() {
    return this.get("progressiveThreshold");
  }
  select(innerDataIndices, dataType) {
    this._innerSelect(this.getData(dataType), innerDataIndices);
  }
  unselect(innerDataIndices, dataType) {
    const selectedMap = this.option.selectedMap;
    if (!selectedMap) {
      return;
    }
    const data = this.getData(dataType);
    for (let i = 0; i < innerDataIndices.length; i++) {
      const dataIndex = innerDataIndices[i];
      const nameOrId = getSelectionKey(data, dataIndex);
      selectedMap[nameOrId] = false;
      this._selectedDataIndicesMap[nameOrId] = -1;
    }
  }
  toggleSelect(innerDataIndices, dataType) {
    const tmpArr2 = [];
    for (let i = 0; i < innerDataIndices.length; i++) {
      tmpArr2[0] = innerDataIndices[i];
      this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr2, dataType) : this.select(tmpArr2, dataType);
    }
  }
  getSelectedDataIndices() {
    const selectedDataIndicesMap = this._selectedDataIndicesMap;
    const nameOrIds = keys(selectedDataIndicesMap);
    const dataIndices = [];
    for (let i = 0; i < nameOrIds.length; i++) {
      const dataIndex = selectedDataIndicesMap[nameOrIds[i]];
      if (dataIndex >= 0) {
        dataIndices.push(dataIndex);
      }
    }
    return dataIndices;
  }
  isSelected(dataIndex, dataType) {
    const selectedMap = this.option.selectedMap;
    if (!selectedMap) {
      return false;
    }
    const data = this.getData(dataType);
    const nameOrId = getSelectionKey(data, dataIndex);
    return selectedMap[nameOrId] || false;
  }
  _innerSelect(data, innerDataIndices) {
    const selectedMode = this.option.selectedMode;
    const len2 = innerDataIndices.length;
    if (!selectedMode || !len2) {
      return;
    }
    if (selectedMode === "multiple") {
      const selectedMap = this.option.selectedMap || (this.option.selectedMap = {});
      for (let i = 0; i < len2; i++) {
        const dataIndex = innerDataIndices[i];
        const nameOrId = getSelectionKey(data, dataIndex);
        selectedMap[nameOrId] = true;
        this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);
      }
    } else if (selectedMode === "single" || selectedMode === true) {
      const lastDataIndex = innerDataIndices[len2 - 1];
      const nameOrId = getSelectionKey(data, lastDataIndex);
      this.option.selectedMap = {
        [nameOrId]: true
      };
      this._selectedDataIndicesMap = {
        [nameOrId]: data.getRawIndex(lastDataIndex)
      };
    }
  }
  _initSelectedMapFromData(data) {
    if (this.option.selectedMap) {
      return;
    }
    const dataIndices = [];
    if (data.hasItemOption) {
      data.each(function(idx) {
        const rawItem = data.getRawDataItem(idx);
        if (typeof rawItem === "object" && rawItem.selected) {
          dataIndices.push(idx);
        }
      });
    }
    if (dataIndices.length > 0) {
      this._innerSelect(data, dataIndices);
    }
  }
  static registerClass(clz) {
    return Component_default.registerClass(clz);
  }
}
SeriesModel42.protoInitialize = function() {
  const proto2 = SeriesModel42.prototype;
  proto2.type = "series.__base__";
  proto2.seriesIndex = 0;
  proto2.useColorPaletteOnData = false;
  proto2.ignoreStyleOnData = false;
  proto2.hasSymbolVisual = false;
  proto2.defaultSymbol = "circle";
  proto2.visualStyleAccessPath = "itemStyle";
  proto2.visualDrawType = "fill";
}();
mixin(SeriesModel42, dataFormat_default);
mixin(SeriesModel42, ColorPaletteMixin);
mountExtend(SeriesModel42, Component_default);
function autoSeriesName(seriesModel) {
  const name = seriesModel.name;
  if (!isNameSpecified(seriesModel)) {
    seriesModel.name = getSeriesAutoName(seriesModel) || name;
  }
}
function getSeriesAutoName(seriesModel) {
  const data = seriesModel.getRawData();
  const dataDims = data.mapDimensionsAll("seriesName");
  const nameArr = [];
  each(dataDims, function(dataDim) {
    const dimInfo = data.getDimensionInfo(dataDim);
    dimInfo.displayName && nameArr.push(dimInfo.displayName);
  });
  return nameArr.join(" ");
}
function dataTaskCount(context) {
  return context.model.getRawData().count();
}
function dataTaskReset(context) {
  const seriesModel = context.model;
  seriesModel.setData(seriesModel.getRawData().cloneShallow());
  return dataTaskProgress;
}
function dataTaskProgress(param, context) {
  if (context.outputData && param.end > context.outputData.count()) {
    context.model.getRawData().cloneShallow(context.outputData);
  }
}
function wrapData(data, seriesModel) {
  each(data.CHANGABLE_METHODS, function(methodName) {
    data.wrapMethod(methodName, curry(onDataSelfChange, seriesModel));
  });
}
function onDataSelfChange(seriesModel) {
  const task6 = getCurrentTask(seriesModel);
  if (task6) {
    task6.setOutputEnd(this.count());
  }
}
function getCurrentTask(seriesModel) {
  const scheduler = (seriesModel.ecModel || {}).scheduler;
  const pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);
  if (pipeline) {
    let task6 = pipeline.currentTask;
    if (task6) {
      const agentStubMap = task6.agentStubMap;
      if (agentStubMap) {
        task6 = agentStubMap.get(seriesModel.uid);
      }
    }
    return task6;
  }
}
const Series_default = SeriesModel42;

// src/view/Component.ts
class ComponentView2 {
  constructor() {
    this.group = new Group_default();
    this.uid = getUID("viewComponent");
  }
  init(ecModel, api) {
  }
  render(model65, ecModel, api, payload) {
  }
  dispose(ecModel, api) {
  }
  updateView(model65, ecModel, api, payload) {
  }
  updateLayout(model65, ecModel, api, payload) {
  }
  updateVisual(model65, ecModel, api, payload) {
  }
  blurSeries(seriesModels, ecModel) {
  }
}
enableClassExtend(ComponentView2);
enableClassManagement(ComponentView2, {
  registerWhenExtend: true
});
const Component_default2 = ComponentView2;

// src/chart/helper/createRenderPlanner.ts
function createRenderPlanner_default() {
  const inner24 = makeInner();
  return function(seriesModel) {
    const fields = inner24(seriesModel);
    const pipelineContext = seriesModel.pipelineContext;
    const originalLarge = fields.large;
    const originalProgressive = fields.progressiveRender;
    const large = fields.large = pipelineContext && pipelineContext.large;
    const progressive = fields.progressiveRender = pipelineContext && pipelineContext.progressiveRender;
    return !!(originalLarge ^ large || originalProgressive ^ progressive) && "reset";
  };
}

// src/view/Chart.ts
const inner22 = makeInner();
const renderPlanner = createRenderPlanner_default();
class ChartView4 {
  constructor() {
    this.group = new Group_default();
    this.uid = getUID("viewChart");
    this.renderTask = createTask({
      plan: renderTaskPlan,
      reset: renderTaskReset
    });
    this.renderTask.context = {
      view: this
    };
  }
  init(ecModel, api) {
  }
  render(seriesModel, ecModel, api, payload) {
  }
  highlight(seriesModel, ecModel, api, payload) {
    toggleHighlight(seriesModel.getData(), payload, "emphasis");
  }
  downplay(seriesModel, ecModel, api, payload) {
    toggleHighlight(seriesModel.getData(), payload, "normal");
  }
  remove(ecModel, api) {
    this.group.removeAll();
  }
  dispose(ecModel, api) {
  }
  updateView(seriesModel, ecModel, api, payload) {
    this.render(seriesModel, ecModel, api, payload);
  }
  updateLayout(seriesModel, ecModel, api, payload) {
    this.render(seriesModel, ecModel, api, payload);
  }
  updateVisual(seriesModel, ecModel, api, payload) {
    this.render(seriesModel, ecModel, api, payload);
  }
  static markUpdateMethod(payload, methodName) {
    inner22(payload).updateMethod = methodName;
  }
}
ChartView4.protoInitialize = function() {
  const proto2 = ChartView4.prototype;
  proto2.type = "chart";
}();
function elSetState(el, state, highlightDigit) {
  if (el) {
    (state === "emphasis" ? enterEmphasis : leaveEmphasis)(el, highlightDigit);
  }
}
function toggleHighlight(data, payload, state) {
  const dataIndex = queryDataIndex(data, payload);
  const highlightDigit = payload && payload.highlightKey != null ? getHighlightDigit(payload.highlightKey) : null;
  if (dataIndex != null) {
    each(normalizeToArray(dataIndex), function(dataIdx) {
      elSetState(data.getItemGraphicEl(dataIdx), state, highlightDigit);
    });
  } else {
    data.eachItemGraphicEl(function(el) {
      elSetState(el, state, highlightDigit);
    });
  }
}
enableClassExtend(ChartView4, ["dispose"]);
enableClassManagement(ChartView4, {
  registerWhenExtend: true
});
function renderTaskPlan(context) {
  return renderPlanner(context.model);
}
function renderTaskReset(context) {
  const seriesModel = context.model;
  const ecModel = context.ecModel;
  const api = context.api;
  const payload = context.payload;
  const progressiveRender = seriesModel.pipelineContext.progressiveRender;
  const view = context.view;
  const updateMethod = payload && inner22(payload).updateMethod;
  const methodName = progressiveRender ? "incrementalPrepareRender" : updateMethod && view[updateMethod] ? updateMethod : "render";
  if (methodName !== "render") {
    view[methodName](seriesModel, ecModel, api, payload);
  }
  return progressMethodMap[methodName];
}
const progressMethodMap = {
  incrementalPrepareRender: {
    progress: function(params, context) {
      context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);
    }
  },
  render: {
    forceFirstProgress: true,
    progress: function(params, context) {
      context.view.render(context.model, context.ecModel, context.api, context.payload);
    }
  }
};
const Chart_default = ChartView4;

// src/util/throttle.ts
const ORIGIN_METHOD = "\0__throttleOriginMethod";
const RATE = "\0__throttleRate";
const THROTTLE_TYPE = "\0__throttleType";
function throttle2(fn, delay, debounce) {
  let currCall;
  let lastCall = 0;
  let lastExec = 0;
  let timer = null;
  let diff2;
  let scope;
  let args;
  let debounceNextCall;
  delay = delay || 0;
  function exec() {
    lastExec = new Date().getTime();
    timer = null;
    fn.apply(scope, args || []);
  }
  const cb = function(...cbArgs) {
    currCall = new Date().getTime();
    scope = this;
    args = cbArgs;
    const thisDelay = debounceNextCall || delay;
    const thisDebounce = debounceNextCall || debounce;
    debounceNextCall = null;
    diff2 = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
    clearTimeout(timer);
    if (thisDebounce) {
      timer = setTimeout(exec, thisDelay);
    } else {
      if (diff2 >= 0) {
        exec();
      } else {
        timer = setTimeout(exec, -diff2);
      }
    }
    lastCall = currCall;
  };
  cb.clear = function() {
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
  };
  cb.debounceNextCall = function(debounceDelay) {
    debounceNextCall = debounceDelay;
  };
  return cb;
}
function createOrUpdate(obj, fnAttr, rate, throttleType) {
  let fn = obj[fnAttr];
  if (!fn) {
    return;
  }
  const originFn = fn[ORIGIN_METHOD] || fn;
  const lastThrottleType = fn[THROTTLE_TYPE];
  const lastRate = fn[RATE];
  if (lastRate !== rate || lastThrottleType !== throttleType) {
    if (rate == null || !throttleType) {
      return obj[fnAttr] = originFn;
    }
    fn = obj[fnAttr] = throttle2(originFn, rate, throttleType === "debounce");
    fn[ORIGIN_METHOD] = originFn;
    fn[THROTTLE_TYPE] = throttleType;
    fn[RATE] = rate;
  }
  return fn;
}
function clear(obj, fnAttr) {
  const fn = obj[fnAttr];
  if (fn && fn[ORIGIN_METHOD]) {
    obj[fnAttr] = fn[ORIGIN_METHOD];
  }
}

// src/visual/style.ts
const inner23 = makeInner();
const defaultStyleMappers = {
  itemStyle: makeStyleMapper_default(ITEM_STYLE_KEY_MAP, true),
  lineStyle: makeStyleMapper_default(LINE_STYLE_KEY_MAP, true)
};
const defaultColorKey = {
  lineStyle: "stroke",
  itemStyle: "fill"
};
function getStyleMapper(seriesModel, stylePath) {
  const styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];
  if (!styleMapper) {
    console.warn(`Unkown style type '${stylePath}'.`);
    return defaultStyleMappers.itemStyle;
  }
  return styleMapper;
}
function getDefaultColorKey(seriesModel, stylePath) {
  const colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];
  if (!colorKey) {
    console.warn(`Unkown style type '${stylePath}'.`);
    return "fill";
  }
  return colorKey;
}
const seriesStyleTask = {
  createOnAllSeries: true,
  performRawSeries: true,
  reset(seriesModel, ecModel) {
    const data = seriesModel.getData();
    const stylePath = seriesModel.visualStyleAccessPath || "itemStyle";
    const styleModel = seriesModel.getModel(stylePath);
    const getStyle2 = getStyleMapper(seriesModel, stylePath);
    const globalStyle = getStyle2(styleModel);
    const colorKey = getDefaultColorKey(seriesModel, stylePath);
    const color8 = globalStyle[colorKey];
    const colorCallback = isFunction(color8) ? color8 : null;
    if (!globalStyle[colorKey] || colorCallback) {
      globalStyle[colorKey] = seriesModel.getColorFromPalette(seriesModel.name, null, ecModel.getSeriesCount());
      data.setVisual("colorFromPalette", true);
    }
    data.setVisual("style", globalStyle);
    data.setVisual("drawType", colorKey);
    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {
      data.setVisual("colorFromPalette", false);
      return {
        dataEach(data2, idx) {
          const dataParams = seriesModel.getDataParams(idx);
          const itemStyle5 = extend({}, globalStyle);
          itemStyle5[colorKey] = colorCallback(dataParams);
          data2.setItemVisual(idx, "style", itemStyle5);
        }
      };
    }
  }
};
const sharedModel = new Model_default();
const dataStyleTask = {
  createOnAllSeries: true,
  performRawSeries: true,
  reset(seriesModel, ecModel) {
    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {
      return;
    }
    const data = seriesModel.getData();
    const stylePath = seriesModel.visualStyleAccessPath || "itemStyle";
    const getStyle2 = getStyleMapper(seriesModel, stylePath);
    const colorKey = data.getVisual("drawType");
    return {
      dataEach: data.hasItemOption ? function(data2, idx) {
        const rawItem = data2.getRawDataItem(idx);
        if (rawItem && rawItem[stylePath]) {
          sharedModel.option = rawItem[stylePath];
          const style2 = getStyle2(sharedModel);
          const existsStyle = data2.ensureUniqueItemVisual(idx, "style");
          extend(existsStyle, style2);
          if (colorKey in style2) {
            data2.setItemVisual(idx, "colorFromPalette", false);
          }
        }
      } : null
    };
  }
};
const dataColorPaletteTask = {
  createOnAllSeries: true,
  performRawSeries: true,
  overallReset(ecModel) {
    const paletteScopeGroupByType = createHashMap();
    ecModel.eachSeries(function(seriesModel) {
      if (!seriesModel.useColorPaletteOnData) {
        return;
      }
      let colorScope = paletteScopeGroupByType.get(seriesModel.type);
      if (!colorScope) {
        colorScope = {};
        paletteScopeGroupByType.set(seriesModel.type, colorScope);
      }
      inner23(seriesModel).scope = colorScope;
    });
    ecModel.eachSeries(function(seriesModel) {
      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {
        return;
      }
      const dataAll = seriesModel.getRawData();
      const idxMap = {};
      const data = seriesModel.getData();
      const colorScope = inner23(seriesModel).scope;
      const stylePath = seriesModel.visualStyleAccessPath || "itemStyle";
      const colorKey = getDefaultColorKey(seriesModel, stylePath);
      data.each(function(idx) {
        const rawIdx = data.getRawIndex(idx);
        idxMap[rawIdx] = idx;
      });
      dataAll.each(function(rawIdx) {
        const idx = idxMap[rawIdx];
        const fromPalette = data.getItemVisual(idx, "colorFromPalette");
        if (fromPalette) {
          const itemStyle5 = data.ensureUniqueItemVisual(idx, "style");
          itemStyle5[colorKey] = seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + "", colorScope, dataAll.count());
        }
      });
    });
  }
};

// src/lang.ts
const lang_default = {
  legend: {
    selector: {
      all: "全选",
      inverse: "反选"
    }
  },
  toolbox: {
    brush: {
      title: {
        rect: "矩形选择",
        polygon: "圈选",
        lineX: "横向选择",
        lineY: "纵向选择",
        keep: "保持选择",
        clear: "清除选择"
      }
    },
    dataView: {
      title: "数据视图",
      lang: ["数据视图", "关闭", "刷新"]
    },
    dataZoom: {
      title: {
        zoom: "区域缩放",
        back: "区域缩放还原"
      }
    },
    magicType: {
      title: {
        line: "切换为折线图",
        bar: "切换为柱状图",
        stack: "切换为堆叠",
        tiled: "切换为平铺"
      }
    },
    restore: {
      title: "还原"
    },
    saveAsImage: {
      title: "保存为图片",
      lang: ["右键另存为图片"]
    }
  },
  series: {
    typeNames: {
      pie: "饼图",
      bar: "柱状图",
      line: "折线图",
      scatter: "散点图",
      effectScatter: "涟漪散点图",
      radar: "雷达图",
      tree: "树图",
      treemap: "矩形树图",
      boxplot: "箱型图",
      candlestick: "K线图",
      k: "K线图",
      heatmap: "热力图",
      map: "地图",
      parallel: "平行坐标图",
      lines: "线图",
      graph: "关系图",
      sankey: "桑基图",
      funnel: "漏斗图",
      gauge: "仪表盘图",
      pictorialBar: "象形柱图",
      themeRiver: "主题河流图",
      sunburst: "旭日图"
    }
  },
  aria: {
    general: {
      withTitle: "这是一个关于“{title}”的图表。",
      withoutTitle: "这是一个图表，"
    },
    series: {
      single: {
        prefix: "",
        withName: "图表类型是{seriesType}，表示{seriesName}。",
        withoutName: "图表类型是{seriesType}。"
      },
      multiple: {
        prefix: "它由{seriesCount}个图表系列组成。",
        withName: "第{seriesId}个系列是一个表示{seriesName}的{seriesType}，",
        withoutName: "第{seriesId}个系列是一个{seriesType}，",
        separator: {
          middle: "；",
          end: "。"
        }
      }
    },
    data: {
      allData: "其数据是——",
      partialData: "其中，前{displayCnt}项是——",
      withName: "{name}的数据是{value}",
      withoutName: "{value}",
      separator: {
        middle: "，",
        end: ""
      }
    }
  }
};

// src/visual/aria.ts
function aria_default(dom2, ecModel) {
  const ariaModel = ecModel.getModel("aria");
  if (!ariaModel.get("show")) {
    return;
  } else if (ariaModel.get("description")) {
    dom2.setAttribute("aria-label", ariaModel.get("description"));
    return;
  }
  let seriesCnt = 0;
  ecModel.eachSeries(function(seriesModel, idx) {
    ++seriesCnt;
  }, this);
  const maxDataCnt = ariaModel.get("data.maxCount") || 10;
  const maxSeriesCnt = ariaModel.get("series.maxCount") || 10;
  const displaySeriesCnt = Math.min(seriesCnt, maxSeriesCnt);
  let ariaLabel;
  if (seriesCnt < 1) {
    return;
  } else {
    const title2 = getTitle();
    if (title2) {
      ariaLabel = replace(getConfig("general.withTitle"), {
        title: title2
      });
    } else {
      ariaLabel = getConfig("general.withoutTitle");
    }
    const seriesLabels = [];
    const prefix = seriesCnt > 1 ? "series.multiple.prefix" : "series.single.prefix";
    ariaLabel += replace(getConfig(prefix), {
      seriesCount: seriesCnt
    });
    ecModel.eachSeries(function(seriesModel, idx) {
      if (idx < displaySeriesCnt) {
        let seriesLabel;
        const seriesName = seriesModel.get("name");
        const seriesTpl = "series." + (seriesCnt > 1 ? "multiple" : "single") + ".";
        seriesLabel = getConfig(seriesName ? seriesTpl + "withName" : seriesTpl + "withoutName");
        seriesLabel = replace(seriesLabel, {
          seriesId: seriesModel.seriesIndex,
          seriesName: seriesModel.get("name"),
          seriesType: getSeriesTypeName(seriesModel.subType)
        });
        const data = seriesModel.getData();
        window.data = data;
        if (data.count() > maxDataCnt) {
          seriesLabel += replace(getConfig("data.partialData"), {
            displayCnt: maxDataCnt
          });
        } else {
          seriesLabel += getConfig("data.allData");
        }
        const dataLabels = [];
        for (let i = 0; i < data.count(); i++) {
          if (i < maxDataCnt) {
            const name = data.getName(i);
            const value = retrieveRawValue(data, i);
            dataLabels.push(replace(name ? getConfig("data.withName") : getConfig("data.withoutName"), {
              name,
              value
            }));
          }
        }
        seriesLabel += dataLabels.join(getConfig("data.separator.middle")) + getConfig("data.separator.end");
        seriesLabels.push(seriesLabel);
      }
    });
    ariaLabel += seriesLabels.join(getConfig("series.multiple.separator.middle")) + getConfig("series.multiple.separator.end");
    dom2.setAttribute("aria-label", ariaLabel);
  }
  function replace(str, keyValues) {
    if (typeof str !== "string") {
      return str;
    }
    let result = str;
    each(keyValues, function(value, key) {
      result = result.replace(new RegExp("\\{\\s*" + key + "\\s*\\}", "g"), value);
    });
    return result;
  }
  function getConfig(path2) {
    const userConfig = ariaModel.get(path2);
    if (userConfig == null) {
      const pathArr = path2.split(".");
      let result = lang_default.aria;
      for (let i = 0; i < pathArr.length; ++i) {
        result = result[pathArr[i]];
      }
      return result;
    } else {
      return userConfig;
    }
  }
  function getTitle() {
    let title2 = ecModel.getModel("title").option;
    if (title2 && title2.length) {
      title2 = title2[0];
    }
    return title2 && title2.text;
  }
  function getSeriesTypeName(type) {
    return lang_default.series.typeNames[type] || "自定义图";
  }
}

// src/loading/default.ts
const PI11 = Math.PI;
function default_default(api, opts) {
  opts = opts || {};
  defaults(opts, {
    text: "loading",
    textColor: "#000",
    fontSize: "12px",
    maskColor: "rgba(255, 255, 255, 0.8)",
    showSpinner: true,
    color: "#c23531",
    spinnerRadius: 10,
    lineWidth: 5,
    zlevel: 0
  });
  const group = new Group_default();
  const mask = new Rect_default({
    style: {
      fill: opts.maskColor
    },
    zlevel: opts.zlevel,
    z: 10000
  });
  group.add(mask);
  const font = opts.fontSize + " sans-serif";
  const labelRect = new Rect_default({
    style: {
      fill: "none"
    },
    textContent: new Text_default({
      style: {
        text: opts.text,
        fill: opts.textColor,
        font
      }
    }),
    textConfig: {
      position: "right",
      distance: 10
    },
    zlevel: opts.zlevel,
    z: 10001
  });
  group.add(labelRect);
  let arc2;
  if (opts.showSpinner) {
    arc2 = new Arc_default({
      shape: {
        startAngle: -PI11 / 2,
        endAngle: -PI11 / 2 + 0.1,
        r: opts.spinnerRadius
      },
      style: {
        stroke: opts.color,
        lineCap: "round",
        lineWidth: opts.lineWidth
      },
      zlevel: opts.zlevel,
      z: 10001
    });
    arc2.animateShape(true).when(1000, {
      endAngle: PI11 * 3 / 2
    }).start("circularInOut");
    arc2.animateShape(true).when(1000, {
      startAngle: PI11 * 3 / 2
    }).delay(300).start("circularInOut");
    group.add(arc2);
  }
  group.resize = function() {
    const textWidth = getWidth(opts.text, font);
    const r = opts.showSpinner ? opts.spinnerRadius : 0;
    const cx = (api.getWidth() - r * 2 - (opts.showSpinner && textWidth ? 10 : 0) - textWidth) / 2 - (opts.showSpinner ? 0 : textWidth / 2);
    const cy = api.getHeight() / 2;
    opts.showSpinner && arc2.setShape({
      cx,
      cy
    });
    labelRect.setShape({
      x: cx - r,
      y: cy - r,
      width: r * 2,
      height: r * 2
    });
    mask.setShape({
      x: 0,
      y: 0,
      width: api.getWidth(),
      height: api.getHeight()
    });
  };
  group.resize();
  return group;
}

// src/stream/Scheduler.ts
class Scheduler5 {
  constructor(ecInstance, api, dataProcessorHandlers, visualHandlers) {
    this._stageTaskMap = createHashMap();
    this.ecInstance = ecInstance;
    this.api = api;
    dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();
    visualHandlers = this._visualHandlers = visualHandlers.slice();
    this._allHandlers = dataProcessorHandlers.concat(visualHandlers);
  }
  restoreData(ecModel, payload) {
    ecModel.restoreData(payload);
    this._stageTaskMap.each(function(taskRecord) {
      const overallTask = taskRecord.overallTask;
      overallTask && overallTask.dirty();
    });
  }
  getPerformArgs(task6, isBlock) {
    if (!task6.__pipeline) {
      return;
    }
    const pipeline = this._pipelineMap.get(task6.__pipeline.id);
    const pCtx = pipeline.context;
    const incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task6.__idxInPipeline > pipeline.blockIndex;
    const step2 = incremental ? pipeline.step : null;
    const modDataCount = pCtx && pCtx.modDataCount;
    const modBy = modDataCount != null ? Math.ceil(modDataCount / step2) : null;
    return {
      step: step2,
      modBy,
      modDataCount
    };
  }
  getPipeline(pipelineId) {
    return this._pipelineMap.get(pipelineId);
  }
  updateStreamModes(seriesModel, view) {
    const pipeline = this._pipelineMap.get(seriesModel.uid);
    const data = seriesModel.getData();
    const dataLen = data.count();
    const progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;
    const large = seriesModel.get("large") && dataLen >= seriesModel.get("largeThreshold");
    const modDataCount = seriesModel.get("progressiveChunkMode") === "mod" ? dataLen : null;
    seriesModel.pipelineContext = pipeline.context = {
      progressiveRender,
      modDataCount,
      large
    };
  }
  restorePipelines(ecModel) {
    const scheduler = this;
    const pipelineMap = scheduler._pipelineMap = createHashMap();
    ecModel.eachSeries(function(seriesModel) {
      const progressive = seriesModel.getProgressive();
      const pipelineId = seriesModel.uid;
      pipelineMap.set(pipelineId, {
        id: pipelineId,
        head: null,
        tail: null,
        threshold: seriesModel.getProgressiveThreshold(),
        progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),
        blockIndex: -1,
        step: Math.round(progressive || 700),
        count: 0
      });
      scheduler._pipe(seriesModel, seriesModel.dataTask);
    });
  }
  prepareStageTasks() {
    const stageTaskMap = this._stageTaskMap;
    const ecModel = this.ecInstance.getModel();
    const api = this.api;
    each(this._allHandlers, function(handler) {
      const record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, {});
      handler.reset && this._createSeriesStageTask(handler, record, ecModel, api);
      handler.overallReset && this._createOverallStageTask(handler, record, ecModel, api);
    }, this);
  }
  prepareView(view, model65, ecModel, api) {
    const renderTask = view.renderTask;
    const context = renderTask.context;
    context.model = model65;
    context.ecModel = ecModel;
    context.api = api;
    renderTask.__block = !view.incrementalPrepareRender;
    this._pipe(model65, renderTask);
  }
  performDataProcessorTasks(ecModel, payload) {
    this._performStageTasks(this._dataProcessorHandlers, ecModel, payload, {
      block: true
    });
  }
  performVisualTasks(ecModel, payload, opt) {
    this._performStageTasks(this._visualHandlers, ecModel, payload, opt);
  }
  _performStageTasks(stageHandlers, ecModel, payload, opt) {
    opt = opt || {};
    let unfinished = false;
    const scheduler = this;
    each(stageHandlers, function(stageHandler, idx) {
      if (opt.visualType && opt.visualType !== stageHandler.visualType) {
        return;
      }
      const stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);
      const seriesTaskMap = stageHandlerRecord.seriesTaskMap;
      const overallTask = stageHandlerRecord.overallTask;
      if (overallTask) {
        let overallNeedDirty;
        const agentStubMap = overallTask.agentStubMap;
        agentStubMap.each(function(stub) {
          if (needSetDirty(opt, stub)) {
            stub.dirty();
            overallNeedDirty = true;
          }
        });
        overallNeedDirty && overallTask.dirty();
        scheduler.updatePayload(overallTask, payload);
        const performArgs = scheduler.getPerformArgs(overallTask, opt.block);
        agentStubMap.each(function(stub) {
          stub.perform(performArgs);
        });
        if (overallTask.perform(performArgs)) {
          unfinished = true;
        }
      } else if (seriesTaskMap) {
        seriesTaskMap.each(function(task6, pipelineId) {
          if (needSetDirty(opt, task6)) {
            task6.dirty();
          }
          const performArgs = scheduler.getPerformArgs(task6, opt.block);
          performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task6.context.model);
          scheduler.updatePayload(task6, payload);
          if (task6.perform(performArgs)) {
            unfinished = true;
          }
        });
      }
    });
    function needSetDirty(opt2, task6) {
      return opt2.setDirty && (!opt2.dirtyMap || opt2.dirtyMap.get(task6.__pipeline.id));
    }
    this.unfinished = unfinished || this.unfinished;
  }
  performSeriesTasks(ecModel) {
    let unfinished;
    ecModel.eachSeries(function(seriesModel) {
      unfinished = seriesModel.dataTask.perform() || unfinished;
    });
    this.unfinished = unfinished || this.unfinished;
  }
  plan() {
    this._pipelineMap.each(function(pipeline) {
      let task6 = pipeline.tail;
      do {
        if (task6.__block) {
          pipeline.blockIndex = task6.__idxInPipeline;
          break;
        }
        task6 = task6.getUpstream();
      } while (task6);
    });
  }
  updatePayload(task6, payload) {
    payload !== "remain" && (task6.context.payload = payload);
  }
  _createSeriesStageTask(stageHandler, stageHandlerRecord, ecModel, api) {
    const scheduler = this;
    const seriesTaskMap = stageHandlerRecord.seriesTaskMap || (stageHandlerRecord.seriesTaskMap = createHashMap());
    const seriesType2 = stageHandler.seriesType;
    const getTargetSeries = stageHandler.getTargetSeries;
    if (stageHandler.createOnAllSeries) {
      ecModel.eachRawSeries(create5);
    } else if (seriesType2) {
      ecModel.eachRawSeriesByType(seriesType2, create5);
    } else if (getTargetSeries) {
      getTargetSeries(ecModel, api).each(create5);
    }
    function create5(seriesModel) {
      const pipelineId = seriesModel.uid;
      const task6 = seriesTaskMap.get(pipelineId) || seriesTaskMap.set(pipelineId, createTask({
        plan: seriesTaskPlan,
        reset: seriesTaskReset,
        count: seriesTaskCount
      }));
      task6.context = {
        model: seriesModel,
        ecModel,
        api,
        useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,
        plan: stageHandler.plan,
        reset: stageHandler.reset,
        scheduler
      };
      scheduler._pipe(seriesModel, task6);
    }
    const pipelineMap = scheduler._pipelineMap;
    seriesTaskMap.each(function(task6, pipelineId) {
      if (!pipelineMap.get(pipelineId)) {
        task6.dispose();
        seriesTaskMap.removeKey(pipelineId);
      }
    });
  }
  _createOverallStageTask(stageHandler, stageHandlerRecord, ecModel, api) {
    const scheduler = this;
    const overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask || createTask({
      reset: overallTaskReset
    });
    overallTask.context = {
      ecModel,
      api,
      overallReset: stageHandler.overallReset,
      scheduler
    };
    const agentStubMap = overallTask.agentStubMap = overallTask.agentStubMap || createHashMap();
    const seriesType2 = stageHandler.seriesType;
    const getTargetSeries = stageHandler.getTargetSeries;
    let overallProgress = true;
    if (seriesType2) {
      ecModel.eachRawSeriesByType(seriesType2, createStub);
    } else if (getTargetSeries) {
      getTargetSeries(ecModel, api).each(createStub);
    } else {
      overallProgress = false;
      each(ecModel.getSeries(), createStub);
    }
    function createStub(seriesModel) {
      const pipelineId = seriesModel.uid;
      let stub = agentStubMap.get(pipelineId);
      if (!stub) {
        stub = agentStubMap.set(pipelineId, createTask({
          reset: stubReset,
          onDirty: stubOnDirty
        }));
        overallTask.dirty();
      }
      stub.context = {
        model: seriesModel,
        overallProgress
      };
      stub.agent = overallTask;
      stub.__block = overallProgress;
      scheduler._pipe(seriesModel, stub);
    }
    const pipelineMap = scheduler._pipelineMap;
    agentStubMap.each(function(stub, pipelineId) {
      if (!pipelineMap.get(pipelineId)) {
        stub.dispose();
        overallTask.dirty();
        agentStubMap.removeKey(pipelineId);
      }
    });
  }
  _pipe(seriesModel, task6) {
    const pipelineId = seriesModel.uid;
    const pipeline = this._pipelineMap.get(pipelineId);
    !pipeline.head && (pipeline.head = task6);
    pipeline.tail && pipeline.tail.pipe(task6);
    pipeline.tail = task6;
    task6.__idxInPipeline = pipeline.count++;
    task6.__pipeline = pipeline;
  }
  static wrapStageHandler(stageHandler, visualType) {
    if (isFunction(stageHandler)) {
      stageHandler = {
        overallReset: stageHandler,
        seriesType: detectSeriseType(stageHandler)
      };
    }
    stageHandler.uid = getUID("stageHandler");
    visualType && (stageHandler.visualType = visualType);
    return stageHandler;
  }
}
function overallTaskReset(context) {
  context.overallReset(context.ecModel, context.api, context.payload);
}
function stubReset(context) {
  return context.overallProgress && stubProgress;
}
function stubProgress() {
  this.agent.dirty();
  this.getDownstream().dirty();
}
function stubOnDirty() {
  this.agent && this.agent.dirty();
}
function seriesTaskPlan(context) {
  return context.plan ? context.plan(context.model, context.ecModel, context.api, context.payload) : null;
}
function seriesTaskReset(context) {
  if (context.useClearVisual) {
    context.data.clearAllVisual();
  }
  const resetDefines = context.resetDefines = normalizeToArray(context.reset(context.model, context.ecModel, context.api, context.payload));
  return resetDefines.length > 1 ? map2(resetDefines, function(v4, idx) {
    return makeSeriesTaskProgress(idx);
  }) : singleSeriesTaskProgress;
}
const singleSeriesTaskProgress = makeSeriesTaskProgress(0);
function makeSeriesTaskProgress(resetDefineIdx) {
  return function(params, context) {
    const data = context.data;
    const resetDefine = context.resetDefines[resetDefineIdx];
    if (resetDefine && resetDefine.dataEach) {
      for (let i = params.start; i < params.end; i++) {
        resetDefine.dataEach(data, i);
      }
    } else if (resetDefine && resetDefine.progress) {
      resetDefine.progress(params, data);
    }
  };
}
function seriesTaskCount(context) {
  return context.data.count();
}
function detectSeriseType(legacyFunc) {
  seriesType = null;
  try {
    legacyFunc(ecModelMock, apiMock);
  } catch (e) {
  }
  return seriesType;
}
const ecModelMock = {};
const apiMock = {};
let seriesType;
mockMethods(ecModelMock, Global_default);
mockMethods(apiMock, ExtensionAPI_default);
ecModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function(type) {
  seriesType = type;
};
ecModelMock.eachComponent = function(cond) {
  if (cond.mainType === "series" && cond.subType) {
    seriesType = cond.subType;
  }
};
function mockMethods(target, Clz) {
  for (let name in Clz.prototype) {
    target[name] = noop;
  }
}
const Scheduler_default = Scheduler5;

// src/theme/light.ts
const colorAll = ["#37A2DA", "#32C5E9", "#67E0E3", "#9FE6B8", "#FFDB5C", "#ff9f7f", "#fb7293", "#E062AE", "#E690D1", "#e7bcf3", "#9d96f5", "#8378EA", "#96BFFF"];
const light_default = {
  color: colorAll,
  colorLayer: [["#37A2DA", "#ffd85c", "#fd7b5f"], ["#37A2DA", "#67E0E3", "#FFDB5C", "#ff9f7f", "#E062AE", "#9d96f5"], ["#37A2DA", "#32C5E9", "#9FE6B8", "#FFDB5C", "#ff9f7f", "#fb7293", "#e7bcf3", "#8378EA", "#96BFFF"], colorAll]
};

// src/theme/dark.ts
const contrastColor = "#eee";
const axisCommon = function() {
  return {
    axisLine: {
      lineStyle: {
        color: contrastColor
      }
    },
    axisTick: {
      lineStyle: {
        color: contrastColor
      }
    },
    axisLabel: {
      textStyle: {
        color: contrastColor
      }
    },
    splitLine: {
      lineStyle: {
        type: "dashed",
        color: "#aaa"
      }
    },
    splitArea: {
      areaStyle: {
        color: contrastColor
      }
    }
  };
};
const colorPalette3 = ["#dd6b66", "#759aa0", "#e69d87", "#8dc1a9", "#ea7e53", "#eedd78", "#73a373", "#73b9bc", "#7289ab", "#91ca8c", "#f49f42"];
const theme = {
  darkMode: true,
  color: colorPalette3,
  backgroundColor: "#333",
  tooltip: {
    axisPointer: {
      lineStyle: {
        color: contrastColor
      },
      crossStyle: {
        color: contrastColor
      },
      label: {
        color: "#000"
      }
    }
  },
  legend: {
    textStyle: {
      color: contrastColor
    }
  },
  textStyle: {
    color: contrastColor
  },
  title: {
    textStyle: {
      color: contrastColor
    }
  },
  toolbox: {
    iconStyle: {
      normal: {
        borderColor: contrastColor
      }
    }
  },
  dataZoom: {
    textStyle: {
      color: contrastColor
    }
  },
  visualMap: {
    textStyle: {
      color: contrastColor
    }
  },
  timeline: {
    lineStyle: {
      color: contrastColor
    },
    itemStyle: {
      normal: {
        color: colorPalette3[1]
      }
    },
    label: {
      normal: {
        textStyle: {
          color: contrastColor
        }
      }
    },
    controlStyle: {
      normal: {
        color: contrastColor,
        borderColor: contrastColor
      }
    }
  },
  timeAxis: axisCommon(),
  logAxis: axisCommon(),
  valueAxis: axisCommon(),
  categoryAxis: axisCommon(),
  line: {
    symbol: "circle"
  },
  graph: {
    color: colorPalette3
  },
  gauge: {
    title: {
      textStyle: {
        color: contrastColor
      }
    }
  },
  candlestick: {
    itemStyle: {
      normal: {
        color: "#FD1050",
        color0: "#0CF49B",
        borderColor: "#FD1050",
        borderColor0: "#0CF49B"
      }
    }
  }
};
theme.categoryAxis.splitLine.show = false;
const dark_default = theme;

// src/component/dataset.ts
class DatasetModel extends Component_default {
  constructor() {
    super(...arguments);
    this.type = "dataset";
  }
  optionUpdated() {
    detectSourceFormat(this);
  }
}
DatasetModel.type = "dataset";
DatasetModel.defaultOption = {
  seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN
};
Component_default.registerClass(DatasetModel);
class DatasetView extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = "dataset";
  }
}
DatasetView.type = "dataset";
Component_default2.registerClass(DatasetView);

// src/coord/geo/mapDataStorage.ts
const storage = createHashMap();
const mapDataStorage_default = {
  registerMap: function(mapName, rawDef, rawSpecialAreas) {
    let records;
    if (isArray(rawDef)) {
      records = rawDef;
    } else if (rawDef.svg) {
      records = [{
        type: "svg",
        source: rawDef.svg,
        specialAreas: rawDef.specialAreas
      }];
    } else {
      const geoSource = rawDef.geoJson || rawDef.geoJSON;
      if (geoSource && !rawDef.features) {
        rawSpecialAreas = rawDef.specialAreas;
        rawDef = geoSource;
      }
      records = [{
        type: "geoJSON",
        source: rawDef,
        specialAreas: rawSpecialAreas
      }];
    }
    each(records, function(record) {
      let type = record.type;
      type === "geoJson" && (type = record.type = "geoJSON");
      const parse2 = parsers[type];
      if (__DEV__) {
        assert(parse2, "Illegal map type: " + type);
      }
      parse2(record);
    });
    return storage.set(mapName, records);
  },
  retrieveMap: function(mapName) {
    return storage.get(mapName);
  }
};
const parsers = {
  geoJSON: function(record) {
    const source = record.source;
    record.geoJSON = !isString(source) ? source : typeof JSON !== "undefined" && JSON.parse ? JSON.parse(source) : new Function("return (" + source + ");")();
  },
  svg: function(record) {
    record.svgXML = parseXML(record.source);
  }
};

// src/util/ECEventProcessor.ts
class ECEventProcessor2 {
  normalizeQuery(query) {
    const cptQuery = {};
    const dataQuery = {};
    const otherQuery = {};
    if (isString(query)) {
      const condCptType = parseClassType(query);
      cptQuery.mainType = condCptType.main || null;
      cptQuery.subType = condCptType.sub || null;
    } else {
      const suffixes = ["Index", "Name", "Id"];
      const dataKeys = {
        name: 1,
        dataIndex: 1,
        dataType: 1
      };
      each(query, function(val, key) {
        let reserved = false;
        for (let i = 0; i < suffixes.length; i++) {
          const propSuffix = suffixes[i];
          const suffixPos = key.lastIndexOf(propSuffix);
          if (suffixPos > 0 && suffixPos === key.length - propSuffix.length) {
            const mainType = key.slice(0, suffixPos);
            if (mainType !== "data") {
              cptQuery.mainType = mainType;
              cptQuery[propSuffix.toLowerCase()] = val;
              reserved = true;
            }
          }
        }
        if (dataKeys.hasOwnProperty(key)) {
          dataQuery[key] = val;
          reserved = true;
        }
        if (!reserved) {
          otherQuery[key] = val;
        }
      });
    }
    return {
      cptQuery,
      dataQuery,
      otherQuery
    };
  }
  filter(eventType, query) {
    const eventInfo = this.eventInfo;
    if (!eventInfo) {
      return true;
    }
    const targetEl = eventInfo.targetEl;
    const packedEvent = eventInfo.packedEvent;
    const model65 = eventInfo.model;
    const view = eventInfo.view;
    if (!model65 || !view) {
      return true;
    }
    const cptQuery = query.cptQuery;
    const dataQuery = query.dataQuery;
    return check(cptQuery, model65, "mainType") && check(cptQuery, model65, "subType") && check(cptQuery, model65, "index", "componentIndex") && check(cptQuery, model65, "name") && check(cptQuery, model65, "id") && check(dataQuery, packedEvent, "name") && check(dataQuery, packedEvent, "dataIndex") && check(dataQuery, packedEvent, "dataType") && (!view.filterForExposedEvent || view.filterForExposedEvent(eventType, query.otherQuery, targetEl, packedEvent));
    function check(query2, host, prop, propOnHost) {
      return query2[prop] == null || host[propOnHost || prop] === query2[prop];
    }
  }
  afterTrigger() {
    this.eventInfo = null;
  }
}

// src/visual/symbol.ts
const seriesSymbolTask = {
  createOnAllSeries: true,
  performRawSeries: true,
  reset: function(seriesModel, ecModel) {
    const data = seriesModel.getData();
    if (seriesModel.legendSymbol) {
      data.setVisual("legendSymbol", seriesModel.legendSymbol);
    }
    if (!seriesModel.hasSymbolVisual) {
      return;
    }
    const symbolType = seriesModel.get("symbol");
    const symbolSize = seriesModel.get("symbolSize");
    const keepAspect = seriesModel.get("symbolKeepAspect");
    const symbolRotate = seriesModel.get("symbolRotate");
    const hasSymbolTypeCallback = isFunction(symbolType);
    const hasSymbolSizeCallback = isFunction(symbolSize);
    const hasSymbolRotateCallback = isFunction(symbolRotate);
    const hasCallback = hasSymbolTypeCallback || hasSymbolSizeCallback || hasSymbolRotateCallback;
    const seriesSymbol = !hasSymbolTypeCallback && symbolType ? symbolType : seriesModel.defaultSymbol;
    const seriesSymbolSize = !hasSymbolSizeCallback ? symbolSize : null;
    const seriesSymbolRotate = !hasSymbolRotateCallback ? symbolRotate : null;
    data.setVisual({
      legendSymbol: seriesModel.legendSymbol || seriesSymbol,
      symbol: seriesSymbol,
      symbolSize: seriesSymbolSize,
      symbolKeepAspect: keepAspect,
      symbolRotate: seriesSymbolRotate
    });
    if (ecModel.isSeriesFiltered(seriesModel)) {
      return;
    }
    function dataEach(data2, idx) {
      const rawValue = seriesModel.getRawValue(idx);
      const params = seriesModel.getDataParams(idx);
      hasSymbolTypeCallback && data2.setItemVisual(idx, "symbol", symbolType(rawValue, params));
      hasSymbolSizeCallback && data2.setItemVisual(idx, "symbolSize", symbolSize(rawValue, params));
      hasSymbolRotateCallback && data2.setItemVisual(idx, "symbolRotate", symbolRotate(rawValue, params));
    }
    return {
      dataEach: hasCallback ? dataEach : null
    };
  }
};
const dataSymbolTask = {
  createOnAllSeries: true,
  performRawSeries: true,
  reset: function(seriesModel, ecModel) {
    if (!seriesModel.hasSymbolVisual) {
      return;
    }
    if (ecModel.isSeriesFiltered(seriesModel)) {
      return;
    }
    const data = seriesModel.getData();
    function dataEach(data2, idx) {
      const itemModel = data2.getItemModel(idx);
      const itemSymbolType = itemModel.getShallow("symbol", true);
      const itemSymbolSize = itemModel.getShallow("symbolSize", true);
      const itemSymbolRotate = itemModel.getShallow("symbolRotate", true);
      const itemSymbolKeepAspect = itemModel.getShallow("symbolKeepAspect", true);
      if (itemSymbolType != null) {
        data2.setItemVisual(idx, "symbol", itemSymbolType);
      }
      if (itemSymbolSize != null) {
        data2.setItemVisual(idx, "symbolSize", itemSymbolSize);
      }
      if (itemSymbolRotate != null) {
        data2.setItemVisual(idx, "symbolRotate", itemSymbolRotate);
      }
      if (itemSymbolKeepAspect != null) {
        data2.setItemVisual(idx, "symbolKeepAspect", itemSymbolKeepAspect);
      }
    }
    return {
      dataEach: data.hasItemOption ? dataEach : null
    };
  }
};

// src/visual/helper.ts
function getItemVisualFromData(data, dataIndex, key) {
  switch (key) {
    case "color":
      const style2 = data.getItemVisual(dataIndex, "style");
      return style2[data.getVisual("drawType")];
    case "opacity":
      return data.getItemVisual(dataIndex, "style").opacity;
    case "symbol":
    case "symbolSize":
    case "liftZ":
      return data.getItemVisual(dataIndex, key);
    default:
      if (__DEV__) {
        console.warn(`Unknown visual type ${key}`);
      }
  }
}
function getVisualFromData(data, key) {
  switch (key) {
    case "color":
      const style2 = data.getVisual("style");
      return style2[data.getVisual("drawType")];
    case "opacity":
      return data.getVisual("style").opacity;
    case "symbol":
    case "symbolSize":
    case "liftZ":
      return data.getVisual(key);
    default:
      if (__DEV__) {
        console.warn(`Unknown visual type ${key}`);
      }
  }
}
function setItemVisualFromData(data, dataIndex, key, value) {
  switch (key) {
    case "color":
      const style2 = data.ensureUniqueItemVisual(dataIndex, "style");
      style2[data.getVisual("drawType")] = value;
      data.setItemVisual(dataIndex, "colorFromPalette", false);
      break;
    case "opacity":
      data.ensureUniqueItemVisual(dataIndex, "style").opacity = value;
      break;
    case "symbol":
    case "symbolSize":
    case "liftZ":
      data.setItemVisual(dataIndex, key, value);
      break;
    default:
      if (__DEV__) {
        console.warn(`Unknown visual type ${key}`);
      }
  }
}

// src/label/labelGuideHelper.ts
const PI29 = Math.PI * 2;
const CMD5 = PathProxy2.CMD;
const DEFAULT_SEARCH_SPACE = ["top", "right", "bottom", "left"];
function getCandidateAnchor(pos, distance2, rect, outPt, outDir) {
  const width = rect.width;
  const height = rect.height;
  switch (pos) {
    case "top":
      outPt.set(rect.x + width / 2, rect.y - distance2);
      outDir.set(0, -1);
      break;
    case "bottom":
      outPt.set(rect.x + width / 2, rect.y + height + distance2);
      outDir.set(0, 1);
      break;
    case "left":
      outPt.set(rect.x - distance2, rect.y + height / 2);
      outDir.set(-1, 0);
      break;
    case "right":
      outPt.set(rect.x + width + distance2, rect.y + height / 2);
      outDir.set(1, 0);
      break;
  }
}
function projectPointToArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y, out2) {
  x -= cx;
  y -= cy;
  const d = Math.sqrt(x * x + y * y);
  x /= d;
  y /= d;
  const ox = x * r + cx;
  const oy = y * r + cy;
  if (Math.abs(startAngle - endAngle) % PI29 < 0.0001) {
    out2[0] = ox;
    out2[1] = oy;
    return d - r;
  }
  if (anticlockwise) {
    const tmp = startAngle;
    startAngle = normalizeRadian(endAngle);
    endAngle = normalizeRadian(tmp);
  } else {
    startAngle = normalizeRadian(startAngle);
    endAngle = normalizeRadian(endAngle);
  }
  if (startAngle > endAngle) {
    endAngle += PI29;
  }
  let angle = Math.atan2(y, x);
  if (angle < 0) {
    angle += PI29;
  }
  if (angle >= startAngle && angle <= endAngle || angle + PI29 >= startAngle && angle + PI29 <= endAngle) {
    out2[0] = ox;
    out2[1] = oy;
    return d - r;
  }
  const x1 = r * Math.cos(startAngle) + cx;
  const y1 = r * Math.sin(startAngle) + cy;
  const x2 = r * Math.cos(endAngle) + cx;
  const y2 = r * Math.sin(endAngle) + cy;
  const d1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y);
  const d2 = (x2 - x) * (x2 - x) + (y2 - y) * (y2 - y);
  if (d1 < d2) {
    out2[0] = x1;
    out2[1] = y1;
    return Math.sqrt(d1);
  } else {
    out2[0] = x2;
    out2[1] = y2;
    return Math.sqrt(d2);
  }
}
function projectPointToLine(x1, y1, x2, y2, x, y, out2, limitToEnds) {
  const dx = x - x1;
  const dy = y - y1;
  let dx1 = x2 - x1;
  let dy1 = y2 - y1;
  const lineLen = Math.sqrt(dx1 * dx1 + dy1 * dy1);
  dx1 /= lineLen;
  dy1 /= lineLen;
  const projectedLen = dx * dx1 + dy * dy1;
  let t = projectedLen / lineLen;
  if (limitToEnds) {
    t = Math.min(Math.max(t, 0), 1);
  }
  t *= lineLen;
  const ox = out2[0] = x1 + t * dx1;
  const oy = out2[1] = y1 + t * dy1;
  return Math.sqrt((ox - x) * (ox - x) + (oy - y) * (oy - y));
}
function projectPointToRect(x1, y1, width, height, x, y, out2) {
  if (width < 0) {
    x1 = x1 + width;
    width = -width;
  }
  if (height < 0) {
    y1 = y1 + height;
    height = -height;
  }
  const x2 = x1 + width;
  const y2 = y1 + height;
  const ox = out2[0] = Math.min(Math.max(x, x1), x2);
  const oy = out2[1] = Math.min(Math.max(y, y1), y2);
  return Math.sqrt((ox - x) * (ox - x) + (oy - y) * (oy - y));
}
const tmpPt = [];
function nearestPointOnRect(pt, rect, out2) {
  const dist3 = projectPointToRect(rect.x, rect.y, rect.width, rect.height, pt.x, pt.y, tmpPt);
  out2.set(tmpPt[0], tmpPt[1]);
  return dist3;
}
function nearestPointOnPath(pt, path2, out2) {
  let xi = 0;
  let yi = 0;
  let x0 = 0;
  let y0 = 0;
  let x1;
  let y1;
  let minDist = Infinity;
  const data = path2.data;
  const x = pt.x;
  const y = pt.y;
  for (let i = 0; i < data.length; ) {
    const cmd = data[i++];
    if (i === 1) {
      xi = data[i];
      yi = data[i + 1];
      x0 = xi;
      y0 = yi;
    }
    let d = minDist;
    switch (cmd) {
      case CMD5.M:
        x0 = data[i++];
        y0 = data[i++];
        xi = x0;
        yi = y0;
        break;
      case CMD5.L:
        d = projectPointToLine(xi, yi, data[i], data[i + 1], x, y, tmpPt, true);
        xi = data[i++];
        yi = data[i++];
        break;
      case CMD5.C:
        d = cubicProjectPoint(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y, tmpPt);
        xi = data[i++];
        yi = data[i++];
        break;
      case CMD5.Q:
        d = quadraticProjectPoint(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y, tmpPt);
        xi = data[i++];
        yi = data[i++];
        break;
      case CMD5.A:
        const cx = data[i++];
        const cy = data[i++];
        const rx = data[i++];
        const ry = data[i++];
        const theta = data[i++];
        const dTheta = data[i++];
        i += 1;
        const anticlockwise = !!(1 - data[i++]);
        x1 = Math.cos(theta) * rx + cx;
        y1 = Math.sin(theta) * ry + cy;
        if (i <= 1) {
          x0 = x1;
          y0 = y1;
        }
        const _x = (x - cx) * ry / rx + cx;
        d = projectPointToArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y, tmpPt);
        xi = Math.cos(theta + dTheta) * rx + cx;
        yi = Math.sin(theta + dTheta) * ry + cy;
        break;
      case CMD5.R:
        x0 = xi = data[i++];
        y0 = yi = data[i++];
        const width = data[i++];
        const height = data[i++];
        d = projectPointToRect(x0, y0, width, height, x, y, tmpPt);
        break;
      case CMD5.Z:
        d = projectPointToLine(xi, yi, x0, y0, x, y, tmpPt, true);
        xi = x0;
        yi = y0;
        break;
    }
    if (d < minDist) {
      minDist = d;
      out2.set(tmpPt[0], tmpPt[1]);
    }
  }
  return minDist;
}
const pt0 = new Point4();
const pt1 = new Point4();
const pt2 = new Point4();
const dir = new Point4();
const dir2 = new Point4();
function updateLabelLinePoints(target, labelLineModel) {
  if (!target) {
    return;
  }
  const labelLine = target.getTextGuideLine();
  const label = target.getTextContent();
  if (!(label && labelLine)) {
    return;
  }
  const labelGuideConfig = target.textGuideLineConfig || {};
  const points9 = [[0, 0], [0, 0], [0, 0]];
  const searchSpace = labelGuideConfig.candidates || DEFAULT_SEARCH_SPACE;
  const labelRect = label.getBoundingRect().clone();
  labelRect.applyTransform(label.getComputedTransform());
  let minDist = Infinity;
  const anchorPoint = labelGuideConfig && labelGuideConfig.anchor;
  const targetTransform = target.getComputedTransform();
  const targetInversedTransform = targetTransform && invert([], targetTransform);
  const len2 = labelLineModel.get("length2") || 0;
  if (anchorPoint) {
    pt2.copy(anchorPoint);
  }
  for (let i = 0; i < searchSpace.length; i++) {
    const candidate = searchSpace[i];
    getCandidateAnchor(candidate, 0, labelRect, pt0, dir);
    Point4.scaleAndAdd(pt1, pt0, dir, len2);
    pt1.transform(targetInversedTransform);
    const boundingRect = target.getBoundingRect();
    const dist3 = anchorPoint ? anchorPoint.distance(pt1) : target instanceof Path_default ? nearestPointOnPath(pt1, target.path, pt2) : nearestPointOnRect(pt1, boundingRect, pt2);
    if (dist3 < minDist) {
      minDist = dist3;
      pt1.transform(targetTransform);
      pt2.transform(targetTransform);
      pt2.toArray(points9[0]);
      pt1.toArray(points9[1]);
      pt0.toArray(points9[2]);
    }
  }
  limitTurnAngle(points9, labelLineModel.get("minTurnAngle"));
  labelLine.setShape({
    points: points9
  });
}
const tmpArr = [];
const tmpProjPoint = new Point4();
function limitTurnAngle(linePoints, minTurnAngle) {
  if (!(minTurnAngle <= 180 && minTurnAngle > 0)) {
    return;
  }
  minTurnAngle = minTurnAngle / 180 * Math.PI;
  pt0.fromArray(linePoints[0]);
  pt1.fromArray(linePoints[1]);
  pt2.fromArray(linePoints[2]);
  Point4.sub(dir, pt0, pt1);
  Point4.sub(dir2, pt2, pt1);
  const len1 = dir.len();
  const len2 = dir2.len();
  if (len1 < 0.001 || len2 < 0.001) {
    return;
  }
  dir.scale(1 / len1);
  dir2.scale(1 / len2);
  const angleCos = dir.dot(dir2);
  const minTurnAngleCos = Math.cos(minTurnAngle);
  if (minTurnAngleCos < angleCos) {
    const d = projectPointToLine(pt1.x, pt1.y, pt2.x, pt2.y, pt0.x, pt0.y, tmpArr, false);
    tmpProjPoint.fromArray(tmpArr);
    tmpProjPoint.scaleAndAdd(dir2, d / Math.tan(Math.PI - minTurnAngle));
    const t = pt2.x !== pt1.x ? (tmpProjPoint.x - pt1.x) / (pt2.x - pt1.x) : (tmpProjPoint.y - pt1.y) / (pt2.y - pt1.y);
    if (isNaN(t)) {
      return;
    }
    if (t < 0) {
      Point4.copy(tmpProjPoint, pt1);
    } else if (t > 1) {
      Point4.copy(tmpProjPoint, pt2);
    }
    tmpProjPoint.toArray(linePoints[1]);
  }
}
function limitSurfaceAngle(linePoints, surfaceNormal, maxSurfaceAngle) {
  if (!(maxSurfaceAngle <= 180 && maxSurfaceAngle > 0)) {
    return;
  }
  maxSurfaceAngle = maxSurfaceAngle / 180 * Math.PI;
  pt0.fromArray(linePoints[0]);
  pt1.fromArray(linePoints[1]);
  pt2.fromArray(linePoints[2]);
  Point4.sub(dir, pt1, pt0);
  Point4.sub(dir2, pt2, pt1);
  const len1 = dir.len();
  const len2 = dir2.len();
  if (len1 < 0.001 || len2 < 0.001) {
    return;
  }
  dir.scale(1 / len1);
  dir2.scale(1 / len2);
  const angleCos = dir.dot(surfaceNormal);
  const maxSurfaceAngleCos = Math.cos(maxSurfaceAngle);
  if (angleCos < maxSurfaceAngleCos) {
    const d = projectPointToLine(pt1.x, pt1.y, pt2.x, pt2.y, pt0.x, pt0.y, tmpArr, false);
    tmpProjPoint.fromArray(tmpArr);
    const HALF_PI = Math.PI / 2;
    const angle2 = Math.acos(dir2.dot(surfaceNormal));
    const newAngle = HALF_PI + angle2 - maxSurfaceAngle;
    if (newAngle >= HALF_PI) {
      Point4.copy(tmpProjPoint, pt2);
    } else {
      tmpProjPoint.scaleAndAdd(dir2, d / Math.tan(Math.PI / 2 - newAngle));
      const t = pt2.x !== pt1.x ? (tmpProjPoint.x - pt1.x) / (pt2.x - pt1.x) : (tmpProjPoint.y - pt1.y) / (pt2.y - pt1.y);
      if (isNaN(t)) {
        return;
      }
      if (t < 0) {
        Point4.copy(tmpProjPoint, pt1);
      } else if (t > 1) {
        Point4.copy(tmpProjPoint, pt2);
      }
    }
    tmpProjPoint.toArray(linePoints[1]);
  }
}
function setLabelLineState(labelLine, ignore, stateName, stateModel) {
  const isNormal = stateName === "normal";
  const stateObj = isNormal ? labelLine : labelLine.ensureState(stateName);
  stateObj.ignore = ignore;
  let smooth = stateModel.get("smooth");
  if (smooth && smooth === true) {
    smooth = 0.3;
  }
  stateObj.shape = stateObj.shape || {};
  if (smooth > 0) {
    stateObj.shape.smooth = smooth;
  }
  const styleObj = stateModel.getModel("lineStyle").getLineStyle();
  isNormal ? labelLine.useStyle(styleObj) : stateObj.style = styleObj;
}
function buildLabelLinePath(path2, shape) {
  const smooth = shape.smooth;
  const points9 = shape.points;
  if (!points9) {
    return;
  }
  path2.moveTo(points9[0][0], points9[0][1]);
  if (smooth > 0 && points9.length >= 3) {
    const len1 = dist(points9[0], points9[1]);
    const len2 = dist(points9[1], points9[2]);
    if (!len1 || !len2) {
      path2.lineTo(points9[1][0], points9[1][1]);
      path2.lineTo(points9[2][0], points9[2][1]);
      return;
    }
    const moveLen = Math.min(len1, len2) * smooth;
    const midPoint0 = lerp([], points9[1], points9[0], moveLen / len1);
    const midPoint2 = lerp([], points9[1], points9[2], moveLen / len2);
    const midPoint1 = lerp([], midPoint0, midPoint2, 0.5);
    path2.bezierCurveTo(midPoint0[0], midPoint0[1], midPoint0[0], midPoint0[1], midPoint1[0], midPoint1[1]);
    path2.bezierCurveTo(midPoint2[0], midPoint2[1], midPoint2[0], midPoint2[1], points9[2][0], points9[2][1]);
  } else {
    for (let i = 1; i < points9.length; i++) {
      path2.lineTo(points9[i][0], points9[i][1]);
    }
  }
}
function setLabelLineStyle(targetEl, statesModels, defaultStyle) {
  let labelLine = targetEl.getTextGuideLine();
  const label = targetEl.getTextContent();
  if (!label) {
    if (labelLine) {
      targetEl.removeTextGuideLine();
    }
    return;
  }
  const normalModel = statesModels.normal;
  const showNormal = normalModel.get("show");
  const labelIgnoreNormal = label.ignore;
  for (let i = 0; i < DISPLAY_STATES.length; i++) {
    const stateName = DISPLAY_STATES[i];
    const stateModel = statesModels[stateName];
    const isNormal = stateName === "normal";
    if (stateModel) {
      const stateShow = stateModel.get("show");
      const isLabelIgnored = isNormal ? labelIgnoreNormal : retrieve2(label.states[stateName] && label.states[stateName].ignore, labelIgnoreNormal);
      if (isLabelIgnored || !retrieve2(stateShow, showNormal)) {
        const stateObj = isNormal ? labelLine : labelLine && labelLine.states.normal;
        if (stateObj) {
          stateObj.ignore = true;
        }
        continue;
      }
      if (!labelLine) {
        labelLine = new Polyline_default();
        targetEl.setTextGuideLine(labelLine);
        if (!isNormal && (labelIgnoreNormal || !showNormal)) {
          setLabelLineState(labelLine, true, "normal", statesModels.normal);
        }
        if (targetEl.stateProxy) {
          labelLine.stateProxy = targetEl.stateProxy;
        }
      }
      setLabelLineState(labelLine, false, stateName, stateModel);
    }
  }
  if (labelLine) {
    defaults(labelLine.style, defaultStyle);
    labelLine.style.fill = null;
    labelLine.buildPath = buildLabelLinePath;
  }
}
function getLabelLineStatesModels(itemModel, labelLineName) {
  labelLineName = labelLineName || "labelLine";
  const statesModels = {
    normal: itemModel.getModel(labelLineName)
  };
  for (let i = 0; i < SPECIAL_STATES.length; i++) {
    const stateName = SPECIAL_STATES[i];
    statesModels[stateName] = itemModel.getModel([stateName, labelLineName]);
  }
  return statesModels;
}

// src/label/labelLayoutHelper.ts
function prepareLayoutList(input) {
  const list = [];
  for (let i = 0; i < input.length; i++) {
    const rawItem = input[i];
    if (rawItem.defaultAttr.ignore) {
      continue;
    }
    const label = rawItem.label;
    const transform = label.getComputedTransform();
    const localRect = label.getBoundingRect();
    const isAxisAligned = !transform || transform[1] < 1e-05 && transform[2] < 1e-05;
    const minMargin = label.style.margin || 0;
    const globalRect = localRect.clone();
    globalRect.applyTransform(transform);
    globalRect.x -= minMargin / 2;
    globalRect.y -= minMargin / 2;
    globalRect.width += minMargin;
    globalRect.height += minMargin;
    const obb = isAxisAligned ? new OrientedBoundingRect_default(localRect, transform) : null;
    list.push({
      label,
      labelLine: rawItem.labelLine,
      rect: globalRect,
      localRect,
      obb,
      priority: rawItem.priority,
      defaultAttr: rawItem.defaultAttr,
      layoutOption: rawItem.computedLayoutOption,
      axisAligned: isAxisAligned,
      transform
    });
  }
  return list;
}
function shiftLayout(list, xyDim, sizeDim, minBound, maxBound, balanceShift) {
  const len2 = list.length;
  if (len2 < 2) {
    return;
  }
  list.sort(function(a, b) {
    return a.rect[xyDim] - b.rect[xyDim];
  });
  let lastPos = 0;
  let delta;
  let adjusted = false;
  const shifts = [];
  let totalShifts = 0;
  for (let i = 0; i < len2; i++) {
    const item = list[i];
    const rect = item.rect;
    delta = rect[xyDim] - lastPos;
    if (delta < 0) {
      rect[xyDim] -= delta;
      item.label[xyDim] -= delta;
      adjusted = true;
    }
    const shift = Math.max(-delta, 0);
    shifts.push(shift);
    totalShifts += shift;
    lastPos = rect[xyDim] + rect[sizeDim];
  }
  if (totalShifts > 0 && balanceShift) {
    shiftList(-totalShifts / len2, 0, len2);
  }
  const first = list[0];
  const last = list[len2 - 1];
  let minGap;
  let maxGap;
  updateMinMaxGap();
  minGap < 0 && squeezeGaps(-minGap, 0.8);
  maxGap < 0 && squeezeGaps(maxGap, 0.8);
  updateMinMaxGap();
  takeBoundsGap(minGap, maxGap, 1);
  takeBoundsGap(maxGap, minGap, -1);
  updateMinMaxGap();
  if (minGap < 0) {
    squeezeWhenBailout(-minGap);
  }
  if (maxGap < 0) {
    squeezeWhenBailout(maxGap);
  }
  function updateMinMaxGap() {
    minGap = first.rect[xyDim] - minBound;
    maxGap = maxBound - last.rect[xyDim] - last.rect[sizeDim];
  }
  function takeBoundsGap(gapThisBound, gapOtherBound, moveDir) {
    if (gapThisBound < 0) {
      const moveFromMaxGap = Math.min(gapOtherBound, -gapThisBound);
      if (moveFromMaxGap > 0) {
        shiftList(moveFromMaxGap * moveDir, 0, len2);
        const remained = moveFromMaxGap + gapThisBound;
        if (remained < 0) {
          squeezeGaps(-remained * moveDir, 1);
        }
      } else {
        squeezeGaps(-gapThisBound * moveDir, 1);
      }
    }
  }
  function shiftList(delta2, start2, end2) {
    if (delta2 !== 0) {
      adjusted = true;
    }
    for (let i = start2; i < end2; i++) {
      const item = list[i];
      const rect = item.rect;
      rect[xyDim] += delta2;
      item.label[xyDim] += delta2;
    }
  }
  function squeezeGaps(delta2, maxSqeezePercent) {
    const gaps = [];
    let totalGaps = 0;
    for (let i = 1; i < len2; i++) {
      const prevItemRect = list[i - 1].rect;
      const gap = Math.max(list[i].rect[xyDim] - prevItemRect[xyDim] - prevItemRect[sizeDim], 0);
      gaps.push(gap);
      totalGaps += gap;
    }
    if (!totalGaps) {
      return;
    }
    const squeezePercent = Math.min(Math.abs(delta2) / totalGaps, maxSqeezePercent);
    if (delta2 > 0) {
      for (let i = 0; i < len2 - 1; i++) {
        const movement = gaps[i] * squeezePercent;
        shiftList(movement, 0, i + 1);
      }
    } else {
      for (let i = len2 - 1; i > 0; i--) {
        const movement = gaps[i - 1] * squeezePercent;
        shiftList(-movement, i, len2);
      }
    }
  }
  function squeezeWhenBailout(delta2) {
    const dir3 = delta2 < 0 ? -1 : 1;
    delta2 = Math.abs(delta2);
    const moveForEachLabel = Math.ceil(delta2 / (len2 - 1));
    for (let i = 0; i < len2 - 1; i++) {
      if (dir3 > 0) {
        shiftList(moveForEachLabel, 0, i + 1);
      } else {
        shiftList(-moveForEachLabel, len2 - i - 1, len2);
      }
      delta2 -= moveForEachLabel;
      if (delta2 <= 0) {
        return;
      }
    }
  }
  return adjusted;
}
function shiftLayoutOnX(list, leftBound, rightBound, balanceShift) {
  return shiftLayout(list, "x", "width", leftBound, rightBound, balanceShift);
}
function shiftLayoutOnY(list, topBound, bottomBound, balanceShift) {
  return shiftLayout(list, "y", "height", topBound, bottomBound, balanceShift);
}
function hideOverlap(labelList) {
  const displayedLabels = [];
  labelList.sort(function(a, b) {
    return b.priority - a.priority;
  });
  const globalRect = new BoundingRect_default(0, 0, 0, 0);
  for (let i = 0; i < labelList.length; i++) {
    const labelItem = labelList[i];
    const isAxisAligned = labelItem.axisAligned;
    const localRect = labelItem.localRect;
    const transform = labelItem.transform;
    const label = labelItem.label;
    const labelLine = labelItem.labelLine;
    globalRect.copy(labelItem.rect);
    globalRect.width -= 0.1;
    globalRect.height -= 0.1;
    globalRect.x += 0.05;
    globalRect.y += 0.05;
    let obb = labelItem.obb;
    let overlapped = false;
    for (let j = 0; j < displayedLabels.length; j++) {
      const existsTextCfg = displayedLabels[j];
      if (!globalRect.intersect(existsTextCfg.rect)) {
        continue;
      }
      if (isAxisAligned && existsTextCfg.axisAligned) {
        overlapped = true;
        break;
      }
      if (!existsTextCfg.obb) {
        existsTextCfg.obb = new OrientedBoundingRect_default(existsTextCfg.localRect, existsTextCfg.transform);
      }
      if (!obb) {
        obb = new OrientedBoundingRect_default(localRect, transform);
      }
      if (obb.intersect(existsTextCfg.obb)) {
        overlapped = true;
        break;
      }
    }
    if (overlapped) {
      label.hide();
      labelLine && labelLine.hide();
    } else {
      label.attr("ignore", labelItem.defaultAttr.ignore);
      labelLine && labelLine.attr("ignore", labelItem.defaultAttr.labelGuideIgnore);
      displayedLabels.push(labelItem);
    }
  }
}

// src/label/LabelManager.ts
function cloneArr(points9) {
  if (points9) {
    const newPoints = [];
    for (let i = 0; i < points9.length; i++) {
      newPoints.push(points9[i].slice());
    }
    return newPoints;
  }
}
function prepareLayoutCallbackParams(labelItem, hostEl) {
  const labelAttr = labelItem.defaultAttr;
  const label = labelItem.label;
  const labelLine = hostEl && hostEl.getTextGuideLine();
  return {
    dataIndex: labelItem.dataIndex,
    dataType: labelItem.dataType,
    seriesIndex: labelItem.seriesModel.seriesIndex,
    text: labelItem.label.style.text,
    rect: labelItem.hostRect,
    labelRect: labelAttr.rect,
    align: label.style.align,
    verticalAlign: label.style.verticalAlign,
    labelLinePoints: cloneArr(labelLine && labelLine.shape.points)
  };
}
const LABEL_OPTION_TO_STYLE_KEYS = ["align", "verticalAlign", "width", "height", "fontSize"];
const dummyTransformable = new Transformable_default();
const labelLayoutInnerStore = makeInner();
const labelLineAnimationStore = makeInner();
function extendWithKeys(target, source, keys2) {
  for (let i = 0; i < keys2.length; i++) {
    const key = keys2[i];
    if (source[key] != null) {
      target[key] = source[key];
    }
  }
}
const LABEL_LAYOUT_PROPS = ["x", "y", "rotation"];
class LabelManager2 {
  constructor() {
    this._labelList = [];
    this._chartViewList = [];
  }
  clearLabels() {
    this._labelList = [];
    this._chartViewList = [];
  }
  _addLabel(dataIndex, dataType, seriesModel, label, layoutOption) {
    const labelStyle28 = label.style;
    const hostEl = label.__hostTarget;
    const textConfig = hostEl.textConfig || {};
    const labelTransform = label.getComputedTransform();
    const labelRect = label.getBoundingRect().plain();
    BoundingRect_default.applyTransform(labelRect, labelRect, labelTransform);
    if (labelTransform) {
      dummyTransformable.setLocalTransform(labelTransform);
    } else {
      dummyTransformable.x = dummyTransformable.y = dummyTransformable.rotation = dummyTransformable.originX = dummyTransformable.originY = 0;
      dummyTransformable.scaleX = dummyTransformable.scaleY = 1;
    }
    const host = label.__hostTarget;
    let hostRect;
    if (host) {
      hostRect = host.getBoundingRect().plain();
      const transform = host.getComputedTransform();
      BoundingRect_default.applyTransform(hostRect, hostRect, transform);
    }
    const labelGuide = hostRect && host.getTextGuideLine();
    this._labelList.push({
      label,
      labelLine: labelGuide,
      seriesModel,
      dataIndex,
      dataType,
      layoutOption,
      computedLayoutOption: null,
      hostRect,
      priority: hostRect ? hostRect.width * hostRect.height : 0,
      defaultAttr: {
        ignore: label.ignore,
        labelGuideIgnore: labelGuide && labelGuide.ignore,
        x: dummyTransformable.x,
        y: dummyTransformable.y,
        rotation: dummyTransformable.rotation,
        rect: labelRect,
        style: {
          x: labelStyle28.x,
          y: labelStyle28.y,
          align: labelStyle28.align,
          verticalAlign: labelStyle28.verticalAlign,
          width: labelStyle28.width,
          height: labelStyle28.height,
          fontSize: labelStyle28.fontSize
        },
        cursor: label.cursor,
        attachedPos: textConfig.position,
        attachedRot: textConfig.rotation
      }
    });
  }
  addLabelsOfSeries(chartView) {
    this._chartViewList.push(chartView);
    const seriesModel = chartView.__model;
    const layoutOption = seriesModel.get("labelLayout");
    if (!(isFunction(layoutOption) || keys(layoutOption).length)) {
      return;
    }
    chartView.group.traverse((child) => {
      if (child.ignore) {
        return true;
      }
      const textEl = child.getTextContent();
      const ecData = getECData(child);
      const dataIndex = ecData.dataIndex;
      if (textEl && dataIndex != null && !textEl.disableLabelLayout) {
        this._addLabel(dataIndex, ecData.dataType, seriesModel, textEl, layoutOption);
      }
    });
  }
  updateLayoutConfig(api) {
    const width = api.getWidth();
    const height = api.getHeight();
    function createDragHandler(el, labelLineModel) {
      return function() {
        updateLabelLinePoints(el, labelLineModel);
      };
    }
    for (let i = 0; i < this._labelList.length; i++) {
      const labelItem = this._labelList[i];
      const label = labelItem.label;
      const hostEl = label.__hostTarget;
      const defaultLabelAttr = labelItem.defaultAttr;
      let layoutOption;
      if (typeof labelItem.layoutOption === "function") {
        layoutOption = labelItem.layoutOption(prepareLayoutCallbackParams(labelItem, hostEl));
      } else {
        layoutOption = labelItem.layoutOption;
      }
      layoutOption = layoutOption || {};
      labelItem.computedLayoutOption = layoutOption;
      const degreeToRadian = Math.PI / 180;
      if (hostEl) {
        hostEl.setTextConfig({
          local: false,
          position: layoutOption.x != null || layoutOption.y != null ? null : defaultLabelAttr.attachedPos,
          rotation: layoutOption.rotate != null ? layoutOption.rotate * degreeToRadian : defaultLabelAttr.attachedRot,
          offset: [layoutOption.dx || 0, layoutOption.dy || 0]
        });
      }
      let needsUpdateLabelLine = false;
      if (layoutOption.x != null) {
        label.x = parsePercent3(layoutOption.x, width);
        label.setStyle("x", 0);
        needsUpdateLabelLine = true;
      } else {
        label.x = defaultLabelAttr.x;
        label.setStyle("x", defaultLabelAttr.style.x);
      }
      if (layoutOption.y != null) {
        label.y = parsePercent3(layoutOption.y, height);
        label.setStyle("y", 0);
        needsUpdateLabelLine = true;
      } else {
        label.y = defaultLabelAttr.y;
        label.setStyle("y", defaultLabelAttr.style.y);
      }
      if (layoutOption.labelLinePoints) {
        const guideLine = hostEl.getTextGuideLine();
        if (guideLine) {
          guideLine.setShape({
            points: layoutOption.labelLinePoints
          });
          needsUpdateLabelLine = false;
        }
      }
      const labelLayoutStore = labelLayoutInnerStore(label);
      labelLayoutStore.needsUpdateLabelLine = needsUpdateLabelLine;
      label.rotation = layoutOption.rotate != null ? layoutOption.rotate * degreeToRadian : defaultLabelAttr.rotation;
      for (let k = 0; k < LABEL_OPTION_TO_STYLE_KEYS.length; k++) {
        const key = LABEL_OPTION_TO_STYLE_KEYS[k];
        label.setStyle(key, layoutOption[key] != null ? layoutOption[key] : defaultLabelAttr.style[key]);
      }
      if (layoutOption.draggable) {
        label.draggable = true;
        label.cursor = "move";
        if (hostEl) {
          const data = labelItem.seriesModel.getData(labelItem.dataType);
          const itemModel = data.getItemModel(labelItem.dataIndex);
          label.on("drag", createDragHandler(hostEl, itemModel.getModel("labelLine")));
        }
      } else {
        label.off("drag");
        label.cursor = defaultLabelAttr.cursor;
      }
    }
  }
  layout(api) {
    const width = api.getWidth();
    const height = api.getHeight();
    const labelList = prepareLayoutList(this._labelList);
    const labelsNeedsAdjustOnX = filter(labelList, function(item) {
      return item.layoutOption.moveOverlap === "shift-x";
    });
    const labelsNeedsAdjustOnY = filter(labelList, function(item) {
      return item.layoutOption.moveOverlap === "shift-y";
    });
    shiftLayoutOnX(labelsNeedsAdjustOnX, 0, width);
    shiftLayoutOnY(labelsNeedsAdjustOnY, 0, height);
    const labelsNeedsHideOverlap = filter(labelList, function(item) {
      return item.layoutOption.hideOverlap;
    });
    hideOverlap(labelsNeedsHideOverlap);
  }
  processLabelsOverall() {
    each(this._chartViewList, (chartView) => {
      const seriesModel = chartView.__model;
      const ignoreLabelLineUpdate = chartView.ignoreLabelLineUpdate;
      const animationEnabled = seriesModel.isAnimationEnabled();
      chartView.group.traverse((child) => {
        if (child.ignore) {
          return true;
        }
        let needsUpdateLabelLine = !ignoreLabelLineUpdate;
        const label = child.getTextContent();
        if (!needsUpdateLabelLine && label) {
          needsUpdateLabelLine = labelLayoutInnerStore(label).needsUpdateLabelLine;
        }
        if (needsUpdateLabelLine) {
          this._updateLabelLine(child, seriesModel);
        }
        if (animationEnabled) {
          this._animateLabels(child, seriesModel);
        }
      });
    });
  }
  _updateLabelLine(el, seriesModel) {
    const textEl = el.getTextContent();
    const ecData = getECData(el);
    const dataIndex = ecData.dataIndex;
    if (textEl && dataIndex != null) {
      const data = seriesModel.getData(ecData.dataType);
      const itemModel = data.getItemModel(dataIndex);
      const defaultStyle = {};
      const visualStyle = data.getItemVisual(dataIndex, "style");
      const visualType = data.getVisual("drawType");
      defaultStyle.stroke = visualStyle[visualType];
      const labelLineModel = itemModel.getModel("labelLine");
      setLabelLineStyle(el, getLabelLineStatesModels(itemModel), defaultStyle);
      updateLabelLinePoints(el, labelLineModel);
    }
  }
  _animateLabels(el, seriesModel) {
    const textEl = el.getTextContent();
    const guideLine = el.getTextGuideLine();
    if (textEl && !textEl.ignore && !textEl.invisible && !el.disableLabelAnimation) {
      const layoutStore = labelLayoutInnerStore(textEl);
      const oldLayout = layoutStore.oldLayout;
      const newProps = {
        x: textEl.x,
        y: textEl.y,
        rotation: textEl.rotation
      };
      if (!oldLayout) {
        textEl.attr(newProps);
        const oldOpacity = retrieve2(textEl.style.opacity, 1);
        textEl.style.opacity = 0;
        initProps(textEl, {
          style: {
            opacity: oldOpacity
          }
        }, seriesModel);
      } else {
        textEl.attr(oldLayout);
        const prevStates = el.prevStates;
        if (prevStates) {
          if (indexOf(prevStates, "select") >= 0) {
            textEl.attr(layoutStore.oldLayoutSelect);
          }
          if (indexOf(prevStates, "emphasis") >= 0) {
            textEl.attr(layoutStore.oldLayoutEmphasis);
          }
        }
        updateProps(textEl, newProps, seriesModel);
      }
      layoutStore.oldLayout = newProps;
      if (textEl.states.select) {
        const layoutSelect = layoutStore.oldLayoutSelect = {};
        extendWithKeys(layoutSelect, newProps, LABEL_LAYOUT_PROPS);
        extendWithKeys(layoutSelect, textEl.states.select, LABEL_LAYOUT_PROPS);
      }
      if (textEl.states.emphasis) {
        const layoutEmphasis = layoutStore.oldLayoutEmphasis = {};
        extendWithKeys(layoutEmphasis, newProps, LABEL_LAYOUT_PROPS);
        extendWithKeys(layoutEmphasis, textEl.states.emphasis, LABEL_LAYOUT_PROPS);
      }
    }
    if (guideLine && !guideLine.ignore && !guideLine.invisible) {
      const layoutStore = labelLineAnimationStore(guideLine);
      const oldLayout = layoutStore.oldLayout;
      const newLayout = {
        points: guideLine.shape.points
      };
      if (!oldLayout) {
        guideLine.setShape(newLayout);
        guideLine.style.strokePercent = 0;
        initProps(guideLine, {
          style: {
            strokePercent: 1
          }
        }, seriesModel);
      } else {
        guideLine.attr({
          shape: oldLayout
        });
        updateProps(guideLine, {
          shape: newLayout
        }, seriesModel);
      }
      layoutStore.oldLayout = newLayout;
    }
  }
}
const LabelManager_default = LabelManager2;

// src/legacy/dataSelectAction.ts
function createLegacyDataSelectAction(seriesType2, ecRegisterAction) {
  function getSeriesIndices(ecModel, payload) {
    const seriesIndices = [];
    ecModel.eachComponent({
      mainType: "series",
      subType: seriesType2,
      query: payload
    }, function(seriesModel) {
      seriesIndices.push(seriesModel.seriesIndex);
    });
    return seriesIndices;
  }
  each([[seriesType2 + "ToggleSelect", "toggleSelect"], [seriesType2 + "Select", "select"], [seriesType2 + "UnSelect", "unselect"]], function(eventsMap) {
    ecRegisterAction(eventsMap[0], function(payload, ecModel, api) {
      payload = extend({}, payload);
      if (__DEV__) {
        deprecateReplaceLog(payload.type, eventsMap[1]);
      }
      api.dispatchAction(extend(payload, {
        type: eventsMap[1],
        seriesIndex: getSeriesIndices(ecModel, payload)
      }));
    });
  });
}
function handleSeriesLegacySelectEvents(type, eventPostfix, ecIns, payload) {
  const legacyEventName = type + eventPostfix;
  if (!ecIns.isSilent(legacyEventName)) {
    if (__DEV__) {
      deprecateLog(`event ${legacyEventName} is deprecated.`);
    }
    const ecModel = ecIns.getModel();
    ecModel.eachComponent({
      mainType: "series",
      subType: "pie"
    }, function(seriesModel) {
      const seriesIndex = seriesModel.seriesIndex;
      const selected = payload.selected;
      for (let i = 0; i < selected.length; i++) {
        if (selected[i].seriesIndex === seriesIndex) {
          const data = seriesModel.getData();
          const dataIndex = queryDataIndex(data, payload.fromActionPayload);
          ecIns.trigger(legacyEventName, {
            type: legacyEventName,
            seriesId: seriesModel.id,
            name: isArray(dataIndex) ? data.getName(dataIndex[0]) : data.getName(dataIndex),
            selected: extend({}, seriesModel.option.selectedMap)
          });
        }
      }
    });
  }
}
function handleLegacySelectEvents(messageCenter, ecIns) {
  messageCenter.on("selectchanged", function(params) {
    if (params.isFromClick) {
      handleSeriesLegacySelectEvents("map", "selectchanged", ecIns, params);
      handleSeriesLegacySelectEvents("pie", "selectchanged", ecIns, params);
    } else if (params.fromAction === "select") {
      handleSeriesLegacySelectEvents("map", "selected", ecIns, params);
      handleSeriesLegacySelectEvents("pie", "selected", ecIns, params);
    } else if (params.fromAction === "unselect") {
      handleSeriesLegacySelectEvents("map", "unselected", ecIns, params);
      handleSeriesLegacySelectEvents("pie", "unselected", ecIns, params);
    }
  });
}

// node_modules/zrender/src/canvas/helper.ts
function createLinearGradient(ctx, obj, rect) {
  let x = obj.x == null ? 0 : obj.x;
  let x2 = obj.x2 == null ? 1 : obj.x2;
  let y = obj.y == null ? 0 : obj.y;
  let y2 = obj.y2 == null ? 0 : obj.y2;
  if (!obj.global) {
    x = x * rect.width + rect.x;
    x2 = x2 * rect.width + rect.x;
    y = y * rect.height + rect.y;
    y2 = y2 * rect.height + rect.y;
  }
  x = isNaN(x) ? 0 : x;
  x2 = isNaN(x2) ? 1 : x2;
  y = isNaN(y) ? 0 : y;
  y2 = isNaN(y2) ? 0 : y2;
  const canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
  return canvasGradient;
}
function createRadialGradient(ctx, obj, rect) {
  const width = rect.width;
  const height = rect.height;
  const min4 = Math.min(width, height);
  let x = obj.x == null ? 0.5 : obj.x;
  let y = obj.y == null ? 0.5 : obj.y;
  let r = obj.r == null ? 0.5 : obj.r;
  if (!obj.global) {
    x = x * width + rect.x;
    y = y * height + rect.y;
    r = r * min4;
  }
  const canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
  return canvasGradient;
}
function getCanvasGradient(ctx, obj, rect) {
  const canvasGradient = obj.type === "radial" ? createRadialGradient(ctx, obj, rect) : createLinearGradient(ctx, obj, rect);
  const colorStops = obj.colorStops;
  for (let i = 0; i < colorStops.length; i++) {
    canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
  }
  return canvasGradient;
}

// node_modules/zrender/src/canvas/graphic.ts
const pathProxyForDraw = new PathProxy2(true);
function styleHasStroke(style2) {
  const stroke = style2.stroke;
  return !(stroke == null || stroke === "none" || !(style2.lineWidth > 0));
}
function styleHasFill(style2) {
  const fill = style2.fill;
  return fill != null && fill !== "none";
}
function doFillPath(ctx, style2) {
  if (style2.fillOpacity != null && style2.fillOpacity !== 1) {
    const originalGlobalAlpha = ctx.globalAlpha;
    ctx.globalAlpha = style2.fillOpacity * style2.opacity;
    ctx.fill();
    ctx.globalAlpha = originalGlobalAlpha;
  } else {
    ctx.fill();
  }
}
function doStrokePath(ctx, style2) {
  if (style2.strokeOpacity != null && style2.strokeOpacity !== 1) {
    const originalGlobalAlpha = ctx.globalAlpha;
    ctx.globalAlpha = style2.strokeOpacity * style2.opacity;
    ctx.stroke();
    ctx.globalAlpha = originalGlobalAlpha;
  } else {
    ctx.stroke();
  }
}
function createCanvasPattern(ctx, pattern, el) {
  const image2 = createOrUpdateImage(pattern.image, pattern.__image, el);
  if (isImageReady(image2)) {
    return ctx.createPattern(image2, pattern.repeat || "repeat");
  }
}
function brushPath(ctx, el, style2, inBatch) {
  let hasStroke = styleHasStroke(style2);
  let hasFill = styleHasFill(style2);
  const strokePercent = style2.strokePercent;
  const strokePart = strokePercent < 1;
  const firstDraw = !el.path;
  if ((!el.silent || strokePart) && firstDraw) {
    el.createPathProxy();
  }
  const path2 = el.path || pathProxyForDraw;
  if (!inBatch) {
    const fill = style2.fill;
    const stroke = style2.stroke;
    const hasFillGradient = hasFill && !!fill.colorStops;
    const hasStrokeGradient = hasStroke && !!stroke.colorStops;
    const hasFillPattern = hasFill && !!fill.image;
    const hasStrokePattern = hasStroke && !!stroke.image;
    let fillGradient;
    let strokeGradient;
    let fillPattern;
    let strokePattern;
    let rect;
    if (hasFillGradient || hasStrokeGradient) {
      rect = el.getBoundingRect();
    }
    if (hasFillGradient) {
      fillGradient = el.__dirty ? getCanvasGradient(ctx, fill, rect) : el.__canvasFillGradient;
      el.__canvasFillGradient = fillGradient;
    }
    if (hasStrokeGradient) {
      strokeGradient = el.__dirty ? getCanvasGradient(ctx, stroke, rect) : el.__canvasStrokeGradient;
      el.__canvasStrokeGradient = strokeGradient;
    }
    if (hasFillPattern) {
      fillPattern = el.__dirty || !el.__canvasFillPattern ? createCanvasPattern(ctx, fill, el) : el.__canvasFillPattern;
      el.__canvasFillPattern = fillPattern;
    }
    if (hasStrokePattern) {
      strokePattern = el.__dirty || !el.__canvasStrokePattern ? createCanvasPattern(ctx, stroke, el) : el.__canvasStrokePattern;
      el.__canvasStrokePattern = fillPattern;
    }
    if (hasFillGradient) {
      ctx.fillStyle = fillGradient;
    } else if (hasFillPattern) {
      if (fillPattern) {
        ctx.fillStyle = fillPattern;
      } else {
        hasFill = false;
      }
    }
    if (hasStrokeGradient) {
      ctx.strokeStyle = strokeGradient;
    } else if (hasStrokePattern) {
      if (strokePattern) {
        ctx.strokeStyle = strokePattern;
      } else {
        hasStroke = false;
      }
    }
  }
  const lineDash = style2.lineDash;
  const lineDashOffset = style2.lineDashOffset;
  const ctxLineDash = !!ctx.setLineDash;
  const scale4 = el.getGlobalScale();
  path2.setScale(scale4[0], scale4[1], el.segmentIgnoreThreshold);
  let needsRebuild = true;
  if (firstDraw || el.__dirty & Path_default.SHAPE_CHANGED_BIT || lineDash && !ctxLineDash && hasStroke) {
    path2.setDPR(ctx.dpr);
    if (strokePart) {
      path2.setContext(null);
    } else {
      path2.setContext(ctx);
      needsRebuild = false;
    }
    path2.reset();
    if (lineDash && !ctxLineDash) {
      path2.setLineDash(lineDash);
      path2.setLineDashOffset(lineDashOffset);
    }
    el.buildPath(path2, el.shape, inBatch);
    path2.toStatic();
    el.pathUpdated();
  }
  if (needsRebuild) {
    path2.rebuildPath(ctx, strokePart ? strokePercent : 1);
  }
  if (lineDash && ctxLineDash) {
    ctx.setLineDash(lineDash);
    ctx.lineDashOffset = lineDashOffset;
  }
  if (!inBatch) {
    if (style2.strokeFirst) {
      if (hasStroke) {
        doStrokePath(ctx, style2);
      }
      if (hasFill) {
        doFillPath(ctx, style2);
      }
    } else {
      if (hasFill) {
        doFillPath(ctx, style2);
      }
      if (hasStroke) {
        doStrokePath(ctx, style2);
      }
    }
  }
  if (lineDash && ctxLineDash) {
    ctx.setLineDash([]);
  }
}
function brushImage(ctx, el, style2) {
  const image2 = el.__image = createOrUpdateImage(style2.image, el.__image, el, el.onload);
  if (!image2 || !isImageReady(image2)) {
    return;
  }
  const x = style2.x || 0;
  const y = style2.y || 0;
  let width = style2.width;
  let height = style2.height;
  const aspect = image2.width / image2.height;
  if (width == null && height != null) {
    width = height * aspect;
  } else if (height == null && width != null) {
    height = width / aspect;
  } else if (width == null && height == null) {
    width = image2.width;
    height = image2.height;
  }
  if (style2.sWidth && style2.sHeight) {
    const sx = style2.sx || 0;
    const sy = style2.sy || 0;
    ctx.drawImage(image2, sx, sy, style2.sWidth, style2.sHeight, x, y, width, height);
  } else if (style2.sx && style2.sy) {
    const sx = style2.sx;
    const sy = style2.sy;
    const sWidth = width - sx;
    const sHeight = height - sy;
    ctx.drawImage(image2, sx, sy, sWidth, sHeight, x, y, width, height);
  } else {
    ctx.drawImage(image2, x, y, width, height);
  }
}
function brushText(ctx, el, style2) {
  let text11 = style2.text;
  text11 != null && (text11 += "");
  if (text11) {
    ctx.font = style2.font || DEFAULT_FONT;
    ctx.textAlign = style2.textAlign;
    ctx.textBaseline = style2.textBaseline;
    if (style2.strokeFirst) {
      if (styleHasStroke(style2)) {
        ctx.strokeText(text11, style2.x, style2.y);
      }
      if (styleHasFill(style2)) {
        ctx.fillText(text11, style2.x, style2.y);
      }
    } else {
      if (styleHasFill(style2)) {
        ctx.fillText(text11, style2.x, style2.y);
      }
      if (styleHasStroke(style2)) {
        ctx.strokeText(text11, style2.x, style2.y);
      }
    }
  }
}
const SHADOW_NUMBER_PROPS = ["shadowBlur", "shadowOffsetX", "shadowOffsetY"];
const STROKE_PROPS = [["lineCap", "butt"], ["lineJoin", "miter"], ["miterLimit", 10]];
function bindCommonProps(ctx, style2, prevStyle, forceSetAll, scope) {
  let styleChanged = false;
  if (!forceSetAll) {
    prevStyle = prevStyle || {};
    if (style2 === prevStyle) {
      return false;
    }
  }
  if (forceSetAll || style2.opacity !== prevStyle.opacity) {
    if (!styleChanged) {
      flushPathDrawn(ctx, scope);
      styleChanged = true;
    }
    ctx.globalAlpha = style2.opacity == null ? DEFAULT_COMMON_STYLE.opacity : style2.opacity;
  }
  if (forceSetAll || style2.blend !== prevStyle.blend) {
    if (!styleChanged) {
      flushPathDrawn(ctx, scope);
      styleChanged = true;
    }
    ctx.globalCompositeOperation = style2.blend || DEFAULT_COMMON_STYLE.blend;
  }
  for (let i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {
    const propName = SHADOW_NUMBER_PROPS[i];
    if (forceSetAll || style2[propName] !== prevStyle[propName]) {
      if (!styleChanged) {
        flushPathDrawn(ctx, scope);
        styleChanged = true;
      }
      ctx[propName] = ctx.dpr * (style2[propName] || 0);
    }
  }
  if (forceSetAll || style2.shadowColor !== prevStyle.shadowColor) {
    if (!styleChanged) {
      flushPathDrawn(ctx, scope);
      styleChanged = true;
    }
    ctx.shadowColor = style2.shadowColor || DEFAULT_COMMON_STYLE.shadowColor;
  }
  return styleChanged;
}
function bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {
  const style2 = getStyle(el, scope.inHover);
  const prevStyle = forceSetAll ? null : prevEl && getStyle(prevEl, scope.inHover) || {};
  if (style2 === prevStyle) {
    return false;
  }
  let styleChanged = bindCommonProps(ctx, style2, prevStyle, forceSetAll, scope);
  if (forceSetAll || style2.fill !== prevStyle.fill) {
    if (!styleChanged) {
      flushPathDrawn(ctx, scope);
      styleChanged = true;
    }
    ctx.fillStyle = style2.fill;
  }
  if (forceSetAll || style2.stroke !== prevStyle.stroke) {
    if (!styleChanged) {
      flushPathDrawn(ctx, scope);
      styleChanged = true;
    }
    ctx.strokeStyle = style2.stroke;
  }
  if (forceSetAll || style2.opacity !== prevStyle.opacity) {
    if (!styleChanged) {
      flushPathDrawn(ctx, scope);
      styleChanged = true;
    }
    ctx.globalAlpha = style2.opacity == null ? 1 : style2.opacity;
  }
  if (el.hasStroke()) {
    const lineWidth = style2.lineWidth;
    const newLineWidth = lineWidth / (style2.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
    if (ctx.lineWidth !== newLineWidth) {
      if (!styleChanged) {
        flushPathDrawn(ctx, scope);
        styleChanged = true;
      }
      ctx.lineWidth = newLineWidth;
    }
  }
  for (let i = 0; i < STROKE_PROPS.length; i++) {
    const prop = STROKE_PROPS[i];
    const propName = prop[0];
    if (forceSetAll || style2[propName] !== prevStyle[propName]) {
      if (!styleChanged) {
        flushPathDrawn(ctx, scope);
        styleChanged = true;
      }
      ctx[propName] = style2[propName] || prop[1];
    }
  }
  return styleChanged;
}
function bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {
  return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);
}
function setContextTransform(ctx, el) {
  const m2 = el.transform;
  const dpr2 = ctx.dpr || 1;
  if (m2) {
    ctx.setTransform(dpr2 * m2[0], dpr2 * m2[1], dpr2 * m2[2], dpr2 * m2[3], dpr2 * m2[4], dpr2 * m2[5]);
  } else {
    ctx.setTransform(dpr2, 0, 0, dpr2, 0, 0);
  }
}
const tmpRect = new BoundingRect_default(0, 0, 0, 0);
const viewRect = new BoundingRect_default(0, 0, 0, 0);
function isDisplayableCulled(el, width, height) {
  tmpRect.copy(el.getBoundingRect());
  if (el.transform) {
    tmpRect.applyTransform(el.transform);
  }
  viewRect.width = width;
  viewRect.height = height;
  return !tmpRect.intersect(viewRect);
}
function isClipPathChanged(clipPaths, prevClipPaths) {
  if (clipPaths === prevClipPaths || !clipPaths && !prevClipPaths) {
    return false;
  }
  if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
    return true;
  }
  for (let i = 0; i < clipPaths.length; i++) {
    if (clipPaths[i] !== prevClipPaths[i]) {
      return true;
    }
  }
  return false;
}
function updateClipStatus(clipPaths, ctx, scope) {
  let allClipped = false;
  for (let i = 0; i < clipPaths.length; i++) {
    const clipPath = clipPaths[i];
    allClipped = allClipped || clipPath.isZeroArea();
    setContextTransform(ctx, clipPath);
    ctx.beginPath();
    clipPath.buildPath(ctx, clipPath.shape);
    ctx.clip();
  }
  scope.allClipped = allClipped;
}
function isTransformChanged(m0, m1) {
  if (m0 && m1) {
    return m0[0] !== m1[0] || m0[1] !== m1[1] || m0[2] !== m1[2] || m0[3] !== m1[3] || m0[4] !== m1[4] || m0[5] !== m1[5];
  } else if (!m0 && !m1) {
    return false;
  }
  return true;
}
const DRAW_TYPE_PATH = 1;
const DRAW_TYPE_IMAGE = 2;
const DRAW_TYPE_TEXT = 3;
const DRAW_TYPE_INCREMENTAL = 4;
function canPathBatch(style2) {
  const hasFill = styleHasFill(style2);
  const hasStroke = styleHasStroke(style2);
  return !(style2.lineDash || !(+hasFill ^ +hasStroke) || hasFill && typeof style2.fill !== "string" || hasStroke && typeof style2.stroke !== "string" || style2.strokePercent < 1 || style2.strokeOpacity < 1 || style2.fillOpacity < 1);
}
function flushPathDrawn(ctx, scope) {
  scope.batchFill && ctx.fill();
  scope.batchStroke && ctx.stroke();
  scope.batchFill = "";
  scope.batchStroke = "";
}
function getStyle(el, inHover) {
  return inHover ? el.__hoverStyle || el.style : el.style;
}
function brush2(ctx, el, scope, isLast) {
  const m2 = el.transform;
  if (el.invisible || el.style.opacity === 0 || el.culling && isDisplayableCulled(el, scope.viewWidth, scope.viewHeight) || m2 && !m2[0] && !m2[3]) {
    el.__dirty = 0;
    return;
  }
  const clipPaths = el.__clipPaths;
  const prevElClipPaths = scope.prevElClipPaths;
  let forceSetTransform = false;
  let forceSetStyle = false;
  if (!prevElClipPaths || isClipPathChanged(clipPaths, prevElClipPaths)) {
    if (prevElClipPaths && prevElClipPaths.length) {
      flushPathDrawn(ctx, scope);
      ctx.restore();
      forceSetStyle = forceSetTransform = true;
      scope.prevElClipPaths = null;
      scope.allClipped = false;
      scope.prevEl = null;
    }
    if (clipPaths && clipPaths.length) {
      flushPathDrawn(ctx, scope);
      ctx.save();
      updateClipStatus(clipPaths, ctx, scope);
      forceSetTransform = true;
    }
    scope.prevElClipPaths = clipPaths;
  }
  if (scope.allClipped) {
    return;
  }
  el.beforeBrush && el.beforeBrush();
  el.innerBeforeBrush();
  const prevEl = scope.prevEl;
  if (!prevEl) {
    forceSetStyle = forceSetTransform = true;
  }
  let canBatchPath = el instanceof Path_default && el.autoBatch && canPathBatch(el.style);
  if (forceSetTransform || isTransformChanged(m2, prevEl.transform)) {
    flushPathDrawn(ctx, scope);
    setContextTransform(ctx, el);
  } else if (!canBatchPath) {
    flushPathDrawn(ctx, scope);
  }
  const style2 = getStyle(el, scope.inHover);
  if (el instanceof Path_default) {
    if (scope.lastDrawType !== DRAW_TYPE_PATH) {
      forceSetStyle = true;
      scope.lastDrawType = DRAW_TYPE_PATH;
    }
    bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);
    if (!canBatchPath || !scope.batchFill && !scope.batchStroke) {
      ctx.beginPath();
    }
    brushPath(ctx, el, style2, canBatchPath);
    if (canBatchPath) {
      scope.batchFill = style2.fill || "";
      scope.batchStroke = style2.stroke || "";
    }
  } else {
    if (el instanceof TSpan_default) {
      if (scope.lastDrawType !== DRAW_TYPE_TEXT) {
        forceSetStyle = true;
        scope.lastDrawType = DRAW_TYPE_TEXT;
      }
      bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);
      brushText(ctx, el, style2);
    } else if (el instanceof Image_default) {
      if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {
        forceSetStyle = true;
        scope.lastDrawType = DRAW_TYPE_IMAGE;
      }
      bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);
      brushImage(ctx, el, style2);
    } else if (el instanceof IncrementalDisplayble) {
      if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {
        forceSetStyle = true;
        scope.lastDrawType = DRAW_TYPE_INCREMENTAL;
      }
      brushIncremental(ctx, el, scope);
    }
  }
  if (canBatchPath && isLast) {
    flushPathDrawn(ctx, scope);
  }
  el.innerAfterBrush();
  el.afterBrush && el.afterBrush();
  scope.prevEl = el;
  el.__dirty = 0;
}
function brushIncremental(ctx, el, scope) {
  let displayables = el.getDisplayables();
  let temporalDisplayables = el.getTemporalDisplayables();
  ctx.save();
  let innerScope = {
    prevElClipPaths: null,
    prevEl: null,
    allClipped: false,
    viewWidth: scope.viewWidth,
    viewHeight: scope.viewHeight,
    inHover: scope.inHover
  };
  let i;
  let len2;
  for (i = el.getCursor(), len2 = displayables.length; i < len2; i++) {
    const displayable = displayables[i];
    displayable.beforeBrush && displayable.beforeBrush();
    displayable.innerBeforeBrush();
    brush2(ctx, displayable, innerScope, i === len2 - 1);
    displayable.innerAfterBrush();
    displayable.afterBrush && displayable.afterBrush();
    innerScope.prevEl = displayable;
  }
  for (let i2 = 0, len3 = temporalDisplayables.length - 1; i2 < len3; i2++) {
    const displayable = temporalDisplayables[i2];
    displayable.beforeBrush && displayable.beforeBrush();
    displayable.innerBeforeBrush();
    brush2(ctx, displayable, innerScope, i2 === len3 - 1);
    displayable.innerAfterBrush();
    displayable.afterBrush && displayable.afterBrush();
    innerScope.prevEl = displayable;
  }
  el.clearTemporalDisplayables();
  el.notClear = true;
  ctx.restore();
}

// node_modules/zrender/src/canvas/Layer.ts
function returnFalse() {
  return false;
}
function createDom(id, painter, dpr2) {
  const newDom = createCanvas();
  const width = painter.getWidth();
  const height = painter.getHeight();
  const newDomStyle = newDom.style;
  if (newDomStyle) {
    newDomStyle.position = "absolute";
    newDomStyle.left = "0";
    newDomStyle.top = "0";
    newDomStyle.width = width + "px";
    newDomStyle.height = height + "px";
    newDom.setAttribute("data-zr-dom-id", id);
  }
  newDom.width = width * dpr2;
  newDom.height = height * dpr2;
  return newDom;
}
class Layer extends Eventful2 {
  constructor(id, painter, dpr2) {
    super();
    this.motionBlur = false;
    this.lastFrameAlpha = 0.7;
    this.dpr = 1;
    this.virtual = false;
    this.config = {};
    this.incremental = false;
    this.zlevel = 0;
    this.__dirty = true;
    this.__used = false;
    this.__drawIndex = 0;
    this.__startIndex = 0;
    this.__endIndex = 0;
    let dom2;
    dpr2 = dpr2 || devicePixelRatio;
    if (typeof id === "string") {
      dom2 = createDom(id, painter, dpr2);
    } else if (isObject(id)) {
      dom2 = id;
      id = dom2.id;
    }
    this.id = id;
    this.dom = dom2;
    const domStyle = dom2.style;
    if (domStyle) {
      dom2.onselectstart = returnFalse;
      domStyle.webkitUserSelect = "none";
      domStyle.userSelect = "none";
      domStyle.webkitTapHighlightColor = "rgba(0,0,0,0)";
      domStyle["-webkit-touch-callout"] = "none";
      domStyle.padding = "0";
      domStyle.margin = "0";
      domStyle.borderWidth = "0";
    }
    this.domBack = null;
    this.ctxBack = null;
    this.painter = painter;
    this.config = null;
    this.dpr = dpr2;
  }
  getElementCount() {
    return this.__endIndex - this.__startIndex;
  }
  initContext() {
    this.ctx = this.dom.getContext("2d");
    this.ctx.dpr = this.dpr;
  }
  createBackBuffer() {
    const dpr2 = this.dpr;
    this.domBack = createDom("back-" + this.id, this.painter, dpr2);
    this.ctxBack = this.domBack.getContext("2d");
    if (dpr2 !== 1) {
      this.ctxBack.scale(dpr2, dpr2);
    }
  }
  resize(width, height) {
    const dpr2 = this.dpr;
    const dom2 = this.dom;
    const domStyle = dom2.style;
    const domBack = this.domBack;
    if (domStyle) {
      domStyle.width = width + "px";
      domStyle.height = height + "px";
    }
    dom2.width = width * dpr2;
    dom2.height = height * dpr2;
    if (domBack) {
      domBack.width = width * dpr2;
      domBack.height = height * dpr2;
      if (dpr2 !== 1) {
        this.ctxBack.scale(dpr2, dpr2);
      }
    }
  }
  clear(clearAll, clearColor) {
    const dom2 = this.dom;
    const ctx = this.ctx;
    const width = dom2.width;
    const height = dom2.height;
    clearColor = clearColor || this.clearColor;
    const haveMotionBLur = this.motionBlur && !clearAll;
    const lastFrameAlpha = this.lastFrameAlpha;
    const dpr2 = this.dpr;
    const self2 = this;
    if (haveMotionBLur) {
      if (!this.domBack) {
        this.createBackBuffer();
      }
      this.ctxBack.globalCompositeOperation = "copy";
      this.ctxBack.drawImage(dom2, 0, 0, width / dpr2, height / dpr2);
    }
    ctx.clearRect(0, 0, width, height);
    if (clearColor && clearColor !== "transparent") {
      let clearColorGradientOrPattern;
      if (isGradientObject(clearColor)) {
        clearColorGradientOrPattern = clearColor.__canvasGradient || getCanvasGradient(ctx, clearColor, {
          x: 0,
          y: 0,
          width,
          height
        });
        clearColor.__canvasGradient = clearColorGradientOrPattern;
      } else if (isPatternObject(clearColor)) {
        clearColorGradientOrPattern = createCanvasPattern(ctx, clearColor, {
          dirty: function() {
            self2.__painter.refresh();
          }
        });
      }
      ctx.save();
      ctx.fillStyle = clearColorGradientOrPattern || clearColor;
      ctx.fillRect(0, 0, width, height);
      ctx.restore();
    }
    if (haveMotionBLur) {
      const domBack = this.domBack;
      ctx.save();
      ctx.globalAlpha = lastFrameAlpha;
      ctx.drawImage(domBack, 0, 0, width, height);
      ctx.restore();
    }
  }
}

// node_modules/zrender/src/canvas/Painter.ts
const HOVER_LAYER_ZLEVEL = 100000;
const CANVAS_ZLEVEL = 314159;
const EL_AFTER_INCREMENTAL_INC = 0.01;
const INCREMENTAL_INC = 0.001;
function parseInt10(val) {
  return parseInt(val, 10);
}
function isLayerValid(layer) {
  if (!layer) {
    return false;
  }
  if (layer.__builtin__) {
    return true;
  }
  if (typeof layer.resize !== "function" || typeof layer.refresh !== "function") {
    return false;
  }
  return true;
}
function createRoot(width, height) {
  const domRoot = document.createElement("div");
  domRoot.style.cssText = ["position:relative", "width:" + width + "px", "height:" + height + "px", "padding:0", "margin:0", "border-width:0"].join(";") + ";";
  return domRoot;
}
class CanvasPainter3 {
  constructor(root, storage2, opts, id) {
    this.type = "canvas";
    this._zlevelList = [];
    this._layers = {};
    this._layerConfig = {};
    this._needsManuallyCompositing = false;
    this.type = "canvas";
    const singleCanvas = !root.nodeName || root.nodeName.toUpperCase() === "CANVAS";
    this._opts = opts = extend({}, opts || {});
    this.dpr = opts.devicePixelRatio || devicePixelRatio;
    this._singleCanvas = singleCanvas;
    this.root = root;
    const rootStyle = root.style;
    if (rootStyle) {
      rootStyle.webkitTapHighlightColor = "transparent";
      rootStyle.webkitUserSelect = "none";
      rootStyle.userSelect = "none";
      rootStyle["-webkit-touch-callout"] = "none";
      root.innerHTML = "";
    }
    this.storage = storage2;
    const zlevelList = this._zlevelList;
    const layers = this._layers;
    if (!singleCanvas) {
      this._width = this._getSize(0);
      this._height = this._getSize(1);
      const domRoot = this._domRoot = createRoot(this._width, this._height);
      root.appendChild(domRoot);
    } else {
      const rootCanvas = root;
      let width = rootCanvas.width;
      let height = rootCanvas.height;
      if (opts.width != null) {
        width = opts.width;
      }
      if (opts.height != null) {
        height = opts.height;
      }
      this.dpr = opts.devicePixelRatio || 1;
      rootCanvas.width = width * this.dpr;
      rootCanvas.height = height * this.dpr;
      this._width = width;
      this._height = height;
      const mainLayer = new Layer(rootCanvas, this, this.dpr);
      mainLayer.__builtin__ = true;
      mainLayer.initContext();
      layers[CANVAS_ZLEVEL] = mainLayer;
      mainLayer.zlevel = CANVAS_ZLEVEL;
      zlevelList.push(CANVAS_ZLEVEL);
      this._domRoot = root;
    }
  }
  getType() {
    return "canvas";
  }
  isSingleCanvas() {
    return this._singleCanvas;
  }
  getViewportRoot() {
    return this._domRoot;
  }
  getViewportRootOffset() {
    const viewportRoot = this.getViewportRoot();
    if (viewportRoot) {
      return {
        offsetLeft: viewportRoot.offsetLeft || 0,
        offsetTop: viewportRoot.offsetTop || 0
      };
    }
  }
  refresh(paintAll) {
    const list = this.storage.getDisplayList(true);
    const zlevelList = this._zlevelList;
    this._redrawId = Math.random();
    this._paintList(list, paintAll, this._redrawId);
    for (let i = 0; i < zlevelList.length; i++) {
      const z = zlevelList[i];
      const layer = this._layers[z];
      if (!layer.__builtin__ && layer.refresh) {
        const clearColor = i === 0 ? this._backgroundColor : null;
        layer.refresh(clearColor);
      }
    }
    return this;
  }
  refreshHover() {
    this._paintHoverList(this.storage.getDisplayList(false));
  }
  _paintHoverList(list) {
    let len2 = list.length;
    let hoverLayer = this._hoverlayer;
    hoverLayer && hoverLayer.clear();
    if (!len2) {
      return;
    }
    if (!hoverLayer) {
      hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);
    }
    const scope = {
      inHover: true,
      viewWidth: this._width,
      viewHeight: this._height
    };
    const ctx = hoverLayer.ctx;
    ctx.save();
    for (let i = 0; i < len2; i++) {
      const el = list[i];
      if (el.__inHover) {
        brush2(ctx, el, scope, i === len2 - 1);
      }
    }
    ctx.restore();
  }
  getHoverLayer() {
    return this.getLayer(HOVER_LAYER_ZLEVEL);
  }
  _paintList(list, paintAll, redrawId) {
    if (this._redrawId !== redrawId) {
      return;
    }
    paintAll = paintAll || false;
    this._updateLayerStatus(list);
    const {finished, needsRefreshHover} = this._doPaintList(list, paintAll);
    if (this._needsManuallyCompositing) {
      this._compositeManually();
    }
    if (needsRefreshHover) {
      this._paintHoverList(list);
    }
    if (!finished) {
      const self2 = this;
      requestAnimationFrame_default(function() {
        self2._paintList(list, paintAll, redrawId);
      });
    }
  }
  _compositeManually() {
    const ctx = this.getLayer(CANVAS_ZLEVEL).ctx;
    const width = this._domRoot.width;
    const height = this._domRoot.height;
    ctx.clearRect(0, 0, width, height);
    this.eachBuiltinLayer(function(layer) {
      if (layer.virtual) {
        ctx.drawImage(layer.dom, 0, 0, width, height);
      }
    });
  }
  _doPaintList(list, paintAll) {
    const layerList = [];
    for (let zi = 0; zi < this._zlevelList.length; zi++) {
      const zlevel = this._zlevelList[zi];
      const layer = this._layers[zlevel];
      if (layer.__builtin__ && layer !== this._hoverlayer && (layer.__dirty || paintAll)) {
        layerList.push(layer);
      }
    }
    let finished = true;
    let needsRefreshHover = false;
    for (let k = 0; k < layerList.length; k++) {
      const layer = layerList[k];
      const ctx = layer.ctx;
      const scope = {
        inHover: false,
        allClipped: false,
        prevEl: null,
        viewWidth: this._width,
        viewHeight: this._height
      };
      ctx.save();
      let start2 = paintAll ? layer.__startIndex : layer.__drawIndex;
      const useTimer = !paintAll && layer.incremental && Date.now;
      const startTime = useTimer && Date.now();
      const clearColor = layer.zlevel === this._zlevelList[0] ? this._backgroundColor : null;
      if (layer.__startIndex === layer.__endIndex) {
        layer.clear(false, clearColor);
      } else if (start2 === layer.__startIndex) {
        const firstEl = list[start2];
        if (!firstEl.incremental || !firstEl.notClear || paintAll) {
          layer.clear(false, clearColor);
        }
      }
      if (start2 === -1) {
        console.error("For some unknown reason. drawIndex is -1");
        start2 = layer.__startIndex;
      }
      let i;
      for (i = start2; i < layer.__endIndex; i++) {
        const el = list[i];
        if (el.__inHover) {
          needsRefreshHover = true;
        }
        brush2(ctx, el, scope, i === layer.__endIndex - 1);
        if (useTimer) {
          const dTime = Date.now() - startTime;
          if (dTime > 15) {
            break;
          }
        }
      }
      layer.__drawIndex = i;
      if (layer.__drawIndex < layer.__endIndex) {
        finished = false;
      }
      if (scope.prevElClipPaths) {
        ctx.restore();
      }
      ctx.restore();
    }
    if (env_default.wxa) {
      each(this._layers, function(layer) {
        if (layer && layer.ctx && layer.ctx.draw) {
          layer.ctx.draw();
        }
      });
    }
    return {
      finished,
      needsRefreshHover
    };
  }
  getLayer(zlevel, virtual) {
    if (this._singleCanvas && !this._needsManuallyCompositing) {
      zlevel = CANVAS_ZLEVEL;
    }
    let layer = this._layers[zlevel];
    if (!layer) {
      layer = new Layer("zr_" + zlevel, this, this.dpr);
      layer.zlevel = zlevel;
      layer.__builtin__ = true;
      if (this._layerConfig[zlevel]) {
        merge(layer, this._layerConfig[zlevel], true);
      } else if (this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC]) {
        merge(layer, this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC], true);
      }
      if (virtual) {
        layer.virtual = virtual;
      }
      this.insertLayer(zlevel, layer);
      layer.initContext();
    }
    return layer;
  }
  insertLayer(zlevel, layer) {
    const layersMap = this._layers;
    const zlevelList = this._zlevelList;
    const len2 = zlevelList.length;
    const domRoot = this._domRoot;
    let prevLayer = null;
    let i = -1;
    if (layersMap[zlevel]) {
      logError("ZLevel " + zlevel + " has been used already");
      return;
    }
    if (!isLayerValid(layer)) {
      logError("Layer of zlevel " + zlevel + " is not valid");
      return;
    }
    if (len2 > 0 && zlevel > zlevelList[0]) {
      for (i = 0; i < len2 - 1; i++) {
        if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
          break;
        }
      }
      prevLayer = layersMap[zlevelList[i]];
    }
    zlevelList.splice(i + 1, 0, zlevel);
    layersMap[zlevel] = layer;
    if (!layer.virtual) {
      if (prevLayer) {
        const prevDom = prevLayer.dom;
        if (prevDom.nextSibling) {
          domRoot.insertBefore(layer.dom, prevDom.nextSibling);
        } else {
          domRoot.appendChild(layer.dom);
        }
      } else {
        if (domRoot.firstChild) {
          domRoot.insertBefore(layer.dom, domRoot.firstChild);
        } else {
          domRoot.appendChild(layer.dom);
        }
      }
    }
    layer.__painter = this;
  }
  eachLayer(cb, context) {
    const zlevelList = this._zlevelList;
    for (let i = 0; i < zlevelList.length; i++) {
      const z = zlevelList[i];
      cb.call(context, this._layers[z], z);
    }
  }
  eachBuiltinLayer(cb, context) {
    const zlevelList = this._zlevelList;
    for (let i = 0; i < zlevelList.length; i++) {
      const z = zlevelList[i];
      const layer = this._layers[z];
      if (layer.__builtin__) {
        cb.call(context, layer, z);
      }
    }
  }
  eachOtherLayer(cb, context) {
    const zlevelList = this._zlevelList;
    for (let i = 0; i < zlevelList.length; i++) {
      const z = zlevelList[i];
      const layer = this._layers[z];
      if (!layer.__builtin__) {
        cb.call(context, layer, z);
      }
    }
  }
  getLayers() {
    return this._layers;
  }
  _updateLayerStatus(list) {
    this.eachBuiltinLayer(function(layer, z) {
      layer.__dirty = layer.__used = false;
    });
    function updatePrevLayer(idx) {
      if (prevLayer) {
        if (prevLayer.__endIndex !== idx) {
          prevLayer.__dirty = true;
        }
        prevLayer.__endIndex = idx;
      }
    }
    if (this._singleCanvas) {
      for (let i2 = 1; i2 < list.length; i2++) {
        const el = list[i2];
        if (el.zlevel !== list[i2 - 1].zlevel || el.incremental) {
          this._needsManuallyCompositing = true;
          break;
        }
      }
    }
    let prevLayer = null;
    let incrementalLayerCount = 0;
    let prevZlevel;
    let i;
    for (i = 0; i < list.length; i++) {
      const el = list[i];
      const zlevel = el.zlevel;
      let layer;
      if (prevZlevel !== zlevel) {
        prevZlevel = zlevel;
        incrementalLayerCount = 0;
      }
      if (el.incremental) {
        layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);
        layer.incremental = true;
        incrementalLayerCount = 1;
      } else {
        layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);
      }
      if (!layer.__builtin__) {
        logError("ZLevel " + zlevel + " has been used by unkown layer " + layer.id);
      }
      if (layer !== prevLayer) {
        layer.__used = true;
        if (layer.__startIndex !== i) {
          layer.__dirty = true;
        }
        layer.__startIndex = i;
        if (!layer.incremental) {
          layer.__drawIndex = i;
        } else {
          layer.__drawIndex = -1;
        }
        updatePrevLayer(i);
        prevLayer = layer;
      }
      if (el.__dirty & Element_default.REDARAW_BIT && !el.__inHover) {
        layer.__dirty = true;
        if (layer.incremental && layer.__drawIndex < 0) {
          layer.__drawIndex = i;
        }
      }
    }
    updatePrevLayer(i);
    this.eachBuiltinLayer(function(layer, z) {
      if (!layer.__used && layer.getElementCount() > 0) {
        layer.__dirty = true;
        layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;
      }
      if (layer.__dirty && layer.__drawIndex < 0) {
        layer.__drawIndex = layer.__startIndex;
      }
    });
  }
  clear() {
    this.eachBuiltinLayer(this._clearLayer);
    return this;
  }
  _clearLayer(layer) {
    layer.clear();
  }
  setBackgroundColor(backgroundColor) {
    this._backgroundColor = backgroundColor;
  }
  configLayer(zlevel, config58) {
    if (config58) {
      const layerConfig = this._layerConfig;
      if (!layerConfig[zlevel]) {
        layerConfig[zlevel] = config58;
      } else {
        merge(layerConfig[zlevel], config58, true);
      }
      for (let i = 0; i < this._zlevelList.length; i++) {
        const _zlevel = this._zlevelList[i];
        if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {
          const layer = this._layers[_zlevel];
          merge(layer, layerConfig[zlevel], true);
        }
      }
    }
  }
  delLayer(zlevel) {
    const layers = this._layers;
    const zlevelList = this._zlevelList;
    const layer = layers[zlevel];
    if (!layer) {
      return;
    }
    layer.dom.parentNode.removeChild(layer.dom);
    delete layers[zlevel];
    zlevelList.splice(indexOf(zlevelList, zlevel), 1);
  }
  resize(width, height) {
    if (!this._domRoot.style) {
      if (width == null || height == null) {
        return;
      }
      this._width = width;
      this._height = height;
      this.getLayer(CANVAS_ZLEVEL).resize(width, height);
    } else {
      const domRoot = this._domRoot;
      domRoot.style.display = "none";
      const opts = this._opts;
      width != null && (opts.width = width);
      height != null && (opts.height = height);
      width = this._getSize(0);
      height = this._getSize(1);
      domRoot.style.display = "";
      if (this._width !== width || height !== this._height) {
        domRoot.style.width = width + "px";
        domRoot.style.height = height + "px";
        for (let id in this._layers) {
          if (this._layers.hasOwnProperty(id)) {
            this._layers[id].resize(width, height);
          }
        }
        this.refresh(true);
      }
      this._width = width;
      this._height = height;
    }
    return this;
  }
  clearLayer(zlevel) {
    const layer = this._layers[zlevel];
    if (layer) {
      layer.clear();
    }
  }
  dispose() {
    this.root.innerHTML = "";
    this.root = this.storage = this._domRoot = this._layers = null;
  }
  getRenderedCanvas(opts) {
    opts = opts || {};
    if (this._singleCanvas && !this._compositeManually) {
      return this._layers[CANVAS_ZLEVEL].dom;
    }
    const imageLayer = new Layer("image", this, opts.pixelRatio || this.dpr);
    const ctx = imageLayer.ctx;
    imageLayer.initContext();
    imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);
    if (opts.pixelRatio <= this.dpr) {
      this.refresh();
      const width = imageLayer.dom.width;
      const height = imageLayer.dom.height;
      const ctx2 = imageLayer.ctx;
      this.eachLayer(function(layer) {
        if (layer.__builtin__) {
          ctx2.drawImage(layer.dom, 0, 0, width, height);
        } else if (layer.renderToCanvas) {
          imageLayer.ctx.save();
          layer.renderToCanvas(imageLayer.ctx);
          imageLayer.ctx.restore();
        }
      });
    } else {
      const scope = {
        inHover: false,
        viewWidth: this._width,
        viewHeight: this._height
      };
      const displayList = this.storage.getDisplayList(true);
      for (let i = 0, len2 = displayList.length; i < len2; i++) {
        const el = displayList[i];
        brush2(ctx, el, scope, i === len2 - 1);
      }
    }
    return imageLayer.dom;
  }
  getWidth() {
    return this._width;
  }
  getHeight() {
    return this._height;
  }
  _getSize(whIdx) {
    const opts = this._opts;
    const wh = ["width", "height"][whIdx];
    const cwh = ["clientWidth", "clientHeight"][whIdx];
    const plt = ["paddingLeft", "paddingTop"][whIdx];
    const prb = ["paddingRight", "paddingBottom"][whIdx];
    if (opts[wh] != null && opts[wh] !== "auto") {
      return parseFloat(opts[wh]);
    }
    const root = this.root;
    const stl = document.defaultView.getComputedStyle(root);
    return (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh])) - (parseInt10(stl[plt]) || 0) - (parseInt10(stl[prb]) || 0) | 0;
  }
  pathToImage(path2, dpr2) {
    dpr2 = dpr2 || this.dpr;
    const canvas2 = document.createElement("canvas");
    const ctx = canvas2.getContext("2d");
    const rect = path2.getBoundingRect();
    const style2 = path2.style;
    const shadowBlurSize = style2.shadowBlur * dpr2;
    const shadowOffsetX = style2.shadowOffsetX * dpr2;
    const shadowOffsetY = style2.shadowOffsetY * dpr2;
    const lineWidth = path2.hasStroke() ? style2.lineWidth : 0;
    const leftMargin = Math.max(lineWidth / 2, -shadowOffsetX + shadowBlurSize);
    const rightMargin = Math.max(lineWidth / 2, shadowOffsetX + shadowBlurSize);
    const topMargin = Math.max(lineWidth / 2, -shadowOffsetY + shadowBlurSize);
    const bottomMargin = Math.max(lineWidth / 2, shadowOffsetY + shadowBlurSize);
    const width = rect.width + leftMargin + rightMargin;
    const height = rect.height + topMargin + bottomMargin;
    canvas2.width = width * dpr2;
    canvas2.height = height * dpr2;
    ctx.scale(dpr2, dpr2);
    ctx.clearRect(0, 0, width, height);
    ctx.dpr = dpr2;
    const pathTransform = {
      x: path2.x,
      y: path2.y,
      scaleX: path2.scaleX,
      scaleY: path2.scaleY,
      rotation: path2.rotation,
      originX: path2.originX,
      originY: path2.originY
    };
    path2.x = leftMargin - rect.x;
    path2.y = topMargin - rect.y;
    path2.rotation = 0;
    path2.scaleX = 1;
    path2.scaleY = 1;
    path2.updateTransform();
    if (path2) {
      brush2(ctx, path2, {
        inHover: false,
        viewWidth: this._width,
        viewHeight: this._height
      }, true);
    }
    const imgShape = new Image_default({
      style: {
        x: 0,
        y: 0,
        image: canvas2
      }
    });
    extend(path2, pathTransform);
    return imgShape;
  }
}

// node_modules/zrender/src/canvas/canvas.ts
registerPainter("canvas", CanvasPainter3);

// src/echarts.ts
const assert2 = assert;
const each16 = each;
const isFunction2 = isFunction;
const isObject3 = isObject;
const getECData3 = getECData;
const version2 = "4.8.0";
const dependencies = {
  zrender: "4.3.1"
};
const TEST_FRAME_REMAIN_TIME = 1;
const PRIORITY_PROCESSOR_SERIES_FILTER = 800;
const PRIORITY_PROCESSOR_DATASTACK = 900;
const PRIORITY_PROCESSOR_FILTER = 1000;
const PRIORITY_PROCESSOR_DEFAULT = 2000;
const PRIORITY_PROCESSOR_STATISTIC = 5000;
const PRIORITY_VISUAL_LAYOUT = 1000;
const PRIORITY_VISUAL_PROGRESSIVE_LAYOUT = 1100;
const PRIORITY_VISUAL_GLOBAL = 2000;
const PRIORITY_VISUAL_CHART = 3000;
const PRIORITY_VISUAL_POST_CHART_LAYOUT = 3500;
const PRIORITY_VISUAL_COMPONENT = 4000;
const PRIORITY_VISUAL_CHART_DATA_CUSTOM = 4500;
const PRIORITY_VISUAL_BRUSH = 5000;
const PRIORITY = {
  PROCESSOR: {
    FILTER: PRIORITY_PROCESSOR_FILTER,
    SERIES_FILTER: PRIORITY_PROCESSOR_SERIES_FILTER,
    STATISTIC: PRIORITY_PROCESSOR_STATISTIC
  },
  VISUAL: {
    LAYOUT: PRIORITY_VISUAL_LAYOUT,
    PROGRESSIVE_LAYOUT: PRIORITY_VISUAL_PROGRESSIVE_LAYOUT,
    GLOBAL: PRIORITY_VISUAL_GLOBAL,
    CHART: PRIORITY_VISUAL_CHART,
    POST_CHART_LAYOUT: PRIORITY_VISUAL_POST_CHART_LAYOUT,
    COMPONENT: PRIORITY_VISUAL_COMPONENT,
    BRUSH: PRIORITY_VISUAL_BRUSH,
    CHART_ITEM: PRIORITY_VISUAL_CHART_DATA_CUSTOM
  }
};
const IN_MAIN_PROCESS_KEY = "__flagInMainProcess";
const OPTION_UPDATED_KEY = "__optionUpdated";
const STATUS_NEEDS_UPDATE_KEY = "__needsUpdateStatus";
const ACTION_REG = /^[a-zA-Z0-9_]+$/;
const CONNECT_STATUS_KEY = "__connectUpdateStatus";
const CONNECT_STATUS_PENDING = 0;
const CONNECT_STATUS_UPDATING = 1;
const CONNECT_STATUS_UPDATED = 2;
function createRegisterEventWithLowercaseECharts(method) {
  return function(...args) {
    if (this.isDisposed()) {
      disposedWarning(this.id);
      return;
    }
    return toLowercaseNameAndCallEventful(this, method, args);
  };
}
function createRegisterEventWithLowercaseMessageCenter(method) {
  return function(...args) {
    return toLowercaseNameAndCallEventful(this, method, args);
  };
}
function toLowercaseNameAndCallEventful(host, method, args) {
  args[0] = args[0] && args[0].toLowerCase();
  return Eventful2.prototype[method].apply(host, args);
}
class MessageCenter extends Eventful2 {
}
const messageCenterProto = MessageCenter.prototype;
messageCenterProto.on = createRegisterEventWithLowercaseMessageCenter("on");
messageCenterProto.off = createRegisterEventWithLowercaseMessageCenter("off");
let prepare;
let prepareView;
let updateDirectly;
let updateMethods;
let doConvertPixel;
let updateStreamModes;
let doDispatchAction;
let flushPendingActions;
let triggerUpdatedEvent;
let bindRenderedEvent;
let bindMouseEvent;
let clearColorPalette;
let render;
let renderComponents;
let renderSeries;
let performPostUpdateFuncs;
let createExtensionAPI;
let enableConnect;
let markStatusToUpdate;
let applyChangedStates;
class ECharts extends Eventful2 {
  constructor(dom2, theme2, opts) {
    super(new ECEventProcessor2());
    this._chartsViews = [];
    this._chartsMap = {};
    this._componentsViews = [];
    this._componentsMap = {};
    this._pendingActions = [];
    opts = opts || {};
    if (typeof theme2 === "string") {
      theme2 = themeStorage[theme2];
    }
    this._dom = dom2;
    let defaultRenderer = "canvas";
    if (__DEV__) {
      defaultRenderer = (typeof window === "undefined" ? global : window).__ECHARTS__DEFAULT__RENDERER__ || defaultRenderer;
    }
    const zr = this._zr = init(dom2, {
      renderer: opts.renderer || defaultRenderer,
      devicePixelRatio: opts.devicePixelRatio,
      width: opts.width,
      height: opts.height
    });
    this._throttledZrFlush = throttle2(bind(zr.flush, zr), 17);
    theme2 = clone2(theme2);
    theme2 && backwardCompat_default2(theme2, true);
    this._theme = theme2;
    this._coordSysMgr = new CoordinateSystem_default();
    const api = this._api = createExtensionAPI(this);
    function prioritySortFunc(a, b) {
      return a.__prio - b.__prio;
    }
    sort(visualFuncs, prioritySortFunc);
    sort(dataProcessorFuncs, prioritySortFunc);
    this._scheduler = new Scheduler_default(this, api, dataProcessorFuncs, visualFuncs);
    this._messageCenter = new MessageCenter();
    this._labelManager = new LabelManager_default();
    this._initEvents();
    this.resize = bind(this.resize, this);
    zr.animation.on("frame", this._onframe, this);
    bindRenderedEvent(zr, this);
    bindMouseEvent(zr, this);
    setAsPrimitive(this);
  }
  _onframe() {
    if (this._disposed) {
      return;
    }
    applyChangedStates(this);
    const scheduler = this._scheduler;
    if (this[OPTION_UPDATED_KEY]) {
      const silent = this[OPTION_UPDATED_KEY].silent;
      this[IN_MAIN_PROCESS_KEY] = true;
      prepare(this);
      updateMethods.update.call(this);
      this[IN_MAIN_PROCESS_KEY] = false;
      this[OPTION_UPDATED_KEY] = false;
      flushPendingActions.call(this, silent);
      triggerUpdatedEvent.call(this, silent);
    } else if (scheduler.unfinished) {
      let remainTime = TEST_FRAME_REMAIN_TIME;
      const ecModel = this._model;
      const api = this._api;
      scheduler.unfinished = false;
      do {
        const startTime = +new Date();
        scheduler.performSeriesTasks(ecModel);
        scheduler.performDataProcessorTasks(ecModel);
        updateStreamModes(this, ecModel);
        scheduler.performVisualTasks(ecModel);
        renderSeries(this, this._model, api, "remain");
        remainTime -= +new Date() - startTime;
      } while (remainTime > 0 && scheduler.unfinished);
      if (!scheduler.unfinished) {
        this._zr.flush();
      }
    }
  }
  getDom() {
    return this._dom;
  }
  getId() {
    return this.id;
  }
  getZr() {
    return this._zr;
  }
  setOption(option, notMerge, lazyUpdate) {
    if (__DEV__) {
      assert2(!this[IN_MAIN_PROCESS_KEY], "`setOption` should not be called during main process.");
    }
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    let silent;
    let replaceMerge;
    if (isObject3(notMerge)) {
      lazyUpdate = notMerge.lazyUpdate;
      silent = notMerge.silent;
      replaceMerge = notMerge.replaceMerge;
      notMerge = notMerge.notMerge;
    }
    this[IN_MAIN_PROCESS_KEY] = true;
    if (!this._model || notMerge) {
      const optionManager = new OptionManager_default(this._api);
      const theme2 = this._theme;
      const ecModel = this._model = new Global_default();
      ecModel.scheduler = this._scheduler;
      ecModel.init(null, null, null, theme2, optionManager);
    }
    this._model.setOption(option, {
      replaceMerge
    }, optionPreprocessorFuncs);
    if (lazyUpdate) {
      this[OPTION_UPDATED_KEY] = {
        silent
      };
      this[IN_MAIN_PROCESS_KEY] = false;
    } else {
      prepare(this);
      updateMethods.update.call(this);
      this._zr.flush();
      this[OPTION_UPDATED_KEY] = false;
      this[IN_MAIN_PROCESS_KEY] = false;
      flushPendingActions.call(this, silent);
      triggerUpdatedEvent.call(this, silent);
    }
  }
  setTheme() {
    console.error("ECharts#setTheme() is DEPRECATED in ECharts 3.0");
  }
  getModel() {
    return this._model;
  }
  getOption() {
    return this._model && this._model.getOption();
  }
  getWidth() {
    return this._zr.getWidth();
  }
  getHeight() {
    return this._zr.getHeight();
  }
  getDevicePixelRatio() {
    return this._zr.painter.dpr || window.devicePixelRatio || 1;
  }
  getRenderedCanvas(opts) {
    if (!env_default.canvasSupported) {
      return;
    }
    opts = extend({}, opts || {});
    opts.pixelRatio = opts.pixelRatio || 1;
    opts.backgroundColor = opts.backgroundColor || this._model.get("backgroundColor");
    const zr = this._zr;
    return zr.painter.getRenderedCanvas(opts);
  }
  getSvgDataURL() {
    if (!env_default.svgSupported) {
      return;
    }
    const zr = this._zr;
    const list = zr.storage.getDisplayList();
    each(list, function(el) {
      el.stopAnimation(null, true);
    });
    return zr.painter.toDataURL();
  }
  getDataURL(opts) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    opts = opts || {};
    const excludeComponents = opts.excludeComponents;
    const ecModel = this._model;
    const excludesComponentViews = [];
    const self2 = this;
    each16(excludeComponents, function(componentType) {
      ecModel.eachComponent({
        mainType: componentType
      }, function(component12) {
        const view = self2._componentsMap[component12.__viewId];
        if (!view.group.ignore) {
          excludesComponentViews.push(view);
          view.group.ignore = true;
        }
      });
    });
    const url = this._zr.painter.getType() === "svg" ? this.getSvgDataURL() : this.getRenderedCanvas(opts).toDataURL("image/" + (opts && opts.type || "png"));
    each16(excludesComponentViews, function(view) {
      view.group.ignore = false;
    });
    return url;
  }
  getConnectedDataURL(opts) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    if (!env_default.canvasSupported) {
      return;
    }
    const isSvg = opts.type === "svg";
    const groupId = this.group;
    const mathMin10 = Math.min;
    const mathMax10 = Math.max;
    const MAX_NUMBER = Infinity;
    if (connectedGroups[groupId]) {
      let left = MAX_NUMBER;
      let top = MAX_NUMBER;
      let right = -MAX_NUMBER;
      let bottom = -MAX_NUMBER;
      const canvasList = [];
      const dpr2 = opts && opts.pixelRatio || 1;
      each(instances2, function(chart, id) {
        if (chart.group === groupId) {
          const canvas2 = isSvg ? chart.getZr().painter.getSvgDom().innerHTML : chart.getRenderedCanvas(clone2(opts));
          const boundingRect = chart.getDom().getBoundingClientRect();
          left = mathMin10(boundingRect.left, left);
          top = mathMin10(boundingRect.top, top);
          right = mathMax10(boundingRect.right, right);
          bottom = mathMax10(boundingRect.bottom, bottom);
          canvasList.push({
            dom: canvas2,
            left: boundingRect.left,
            top: boundingRect.top
          });
        }
      });
      left *= dpr2;
      top *= dpr2;
      right *= dpr2;
      bottom *= dpr2;
      const width = right - left;
      const height = bottom - top;
      const targetCanvas = createCanvas();
      const zr = init(targetCanvas, {
        renderer: isSvg ? "svg" : "canvas"
      });
      zr.resize({
        width,
        height
      });
      if (isSvg) {
        let content = "";
        each16(canvasList, function(item) {
          const x = item.left - left;
          const y = item.top - top;
          content += '<g transform="translate(' + x + "," + y + ')">' + item.dom + "</g>";
        });
        zr.painter.getSvgRoot().innerHTML = content;
        if (opts.connectedBackgroundColor) {
          zr.painter.setBackgroundColor(opts.connectedBackgroundColor);
        }
        zr.refreshImmediately();
        return zr.painter.toDataURL();
      } else {
        if (opts.connectedBackgroundColor) {
          zr.add(new Rect_default({
            shape: {
              x: 0,
              y: 0,
              width,
              height
            },
            style: {
              fill: opts.connectedBackgroundColor
            }
          }));
        }
        each16(canvasList, function(item) {
          const img = new Image_default({
            style: {
              x: item.left * dpr2 - left,
              y: item.top * dpr2 - top,
              image: item.dom
            }
          });
          zr.add(img);
        });
        zr.refreshImmediately();
        return targetCanvas.toDataURL("image/" + (opts && opts.type || "png"));
      }
    } else {
      return this.getDataURL(opts);
    }
  }
  convertToPixel(finder, value) {
    return doConvertPixel(this, "convertToPixel", finder, value);
  }
  convertFromPixel(finder, value) {
    return doConvertPixel(this, "convertFromPixel", finder, value);
  }
  containPixel(finder, value) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    const ecModel = this._model;
    let result;
    const findResult = parseFinder(ecModel, finder);
    each(findResult, function(models, key) {
      key.indexOf("Models") >= 0 && each(models, function(model65) {
        const coordSys = model65.coordinateSystem;
        if (coordSys && coordSys.containPoint) {
          result = result || !!coordSys.containPoint(value);
        } else if (key === "seriesModels") {
          const view = this._chartsMap[model65.__viewId];
          if (view && view.containPoint) {
            result = result || view.containPoint(value, model65);
          } else {
            if (__DEV__) {
              console.warn(key + ": " + (view ? "The found component do not support containPoint." : "No view mapping to the found component."));
            }
          }
        } else {
          if (__DEV__) {
            console.warn(key + ": containPoint is not supported");
          }
        }
      }, this);
    }, this);
    return !!result;
  }
  getVisual(finder, visualType) {
    const ecModel = this._model;
    const parsedFinder = parseFinder(ecModel, finder, {
      defaultMainType: "series"
    });
    const seriesModel = parsedFinder.seriesModel;
    if (__DEV__) {
      if (!seriesModel) {
        console.warn("There is no specified seires model");
      }
    }
    const data = seriesModel.getData();
    const dataIndexInside = parsedFinder.hasOwnProperty("dataIndexInside") ? parsedFinder.dataIndexInside : parsedFinder.hasOwnProperty("dataIndex") ? data.indexOfRawIndex(parsedFinder.dataIndex) : null;
    return dataIndexInside != null ? getItemVisualFromData(data, dataIndexInside, visualType) : getVisualFromData(data, visualType);
  }
  getViewOfComponentModel(componentModel) {
    return this._componentsMap[componentModel.__viewId];
  }
  getViewOfSeriesModel(seriesModel) {
    return this._chartsMap[seriesModel.__viewId];
  }
  _initEvents() {
    each16(MOUSE_EVENT_NAMES, (eveName) => {
      const handler = (e) => {
        const ecModel = this.getModel();
        const el = e.target;
        let params;
        const isGlobalOut = eveName === "globalout";
        const ecData = el && getECData3(el);
        if (isGlobalOut) {
          params = {};
        } else if (ecData && ecData.dataIndex != null) {
          const dataModel = ecData.dataModel || ecModel.getSeriesByIndex(ecData.seriesIndex);
          params = dataModel && dataModel.getDataParams(ecData.dataIndex, ecData.dataType) || {};
        } else if (el && ecData.eventData) {
          params = extend({}, ecData.eventData);
        }
        if (params) {
          let componentType = params.componentType;
          let componentIndex = params.componentIndex;
          if (componentType === "markLine" || componentType === "markPoint" || componentType === "markArea") {
            componentType = "series";
            componentIndex = params.seriesIndex;
          }
          const model65 = componentType && componentIndex != null && ecModel.getComponent(componentType, componentIndex);
          const view = model65 && this[model65.mainType === "series" ? "_chartsMap" : "_componentsMap"][model65.__viewId];
          if (__DEV__) {
            if (!isGlobalOut && !(model65 && view)) {
              console.warn("model or view can not be found by params");
            }
          }
          params.event = e;
          params.type = eveName;
          this._$eventProcessor.eventInfo = {
            targetEl: el,
            packedEvent: params,
            model: model65,
            view
          };
          this.trigger(eveName, params);
        }
      };
      handler.zrEventfulCallAtLast = true;
      this._zr.on(eveName, handler, this);
    });
    each16(eventActionMap, (actionType, eventType) => {
      this._messageCenter.on(eventType, function(event3) {
        this.trigger(eventType, event3);
      }, this);
    });
    each16(["selectchanged"], (eventType) => {
      this._messageCenter.on(eventType, function(event3) {
        this.trigger(eventType, event3);
      }, this);
    });
    handleLegacySelectEvents(this._messageCenter, this);
  }
  isDisposed() {
    return this._disposed;
  }
  clear() {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    this.setOption({
      series: []
    }, true);
  }
  dispose() {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    this._disposed = true;
    setAttribute(this.getDom(), DOM_ATTRIBUTE_KEY, "");
    const api = this._api;
    const ecModel = this._model;
    each16(this._componentsViews, function(component12) {
      component12.dispose(ecModel, api);
    });
    each16(this._chartsViews, function(chart) {
      chart.dispose(ecModel, api);
    });
    this._zr.dispose();
    delete instances2[this.id];
  }
  resize(opts) {
    if (__DEV__) {
      assert2(!this[IN_MAIN_PROCESS_KEY], "`resize` should not be called during main process.");
    }
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    this._zr.resize(opts);
    const ecModel = this._model;
    this._loadingFX && this._loadingFX.resize();
    if (!ecModel) {
      return;
    }
    const optionChanged = ecModel.resetOption("media");
    const silent = opts && opts.silent;
    this[IN_MAIN_PROCESS_KEY] = true;
    optionChanged && prepare(this);
    updateMethods.update.call(this, {
      type: "resize",
      animation: {
        duration: 0
      }
    });
    this[IN_MAIN_PROCESS_KEY] = false;
    flushPendingActions.call(this, silent);
    triggerUpdatedEvent.call(this, silent);
  }
  showLoading(name, cfg) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    if (isObject3(name)) {
      cfg = name;
      name = "";
    }
    name = name || "default";
    this.hideLoading();
    if (!loadingEffects[name]) {
      if (__DEV__) {
        console.warn("Loading effects " + name + " not exists.");
      }
      return;
    }
    const el = loadingEffects[name](this._api, cfg);
    const zr = this._zr;
    this._loadingFX = el;
    zr.add(el);
  }
  hideLoading() {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    this._loadingFX && this._zr.remove(this._loadingFX);
    this._loadingFX = null;
  }
  makeActionFromEvent(eventObj) {
    const payload = extend({}, eventObj);
    payload.type = eventActionMap[eventObj.type];
    return payload;
  }
  dispatchAction(payload, opt) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    if (!isObject3(opt)) {
      opt = {
        silent: !!opt
      };
    }
    if (!actions[payload.type]) {
      return;
    }
    if (!this._model) {
      return;
    }
    if (this[IN_MAIN_PROCESS_KEY]) {
      this._pendingActions.push(payload);
      return;
    }
    const silent = opt.silent;
    doDispatchAction.call(this, payload, silent);
    const flush = opt.flush;
    if (flush) {
      this._zr.flush();
    } else if (flush !== false && env_default.browser.weChat) {
      this._throttledZrFlush();
    }
    flushPendingActions.call(this, silent);
    triggerUpdatedEvent.call(this, silent);
  }
  updateLabelLayout() {
    const labelManager = this._labelManager;
    labelManager.updateLayoutConfig(this._api);
    labelManager.layout(this._api);
    labelManager.processLabelsOverall();
  }
  appendData(params) {
    if (this._disposed) {
      disposedWarning(this.id);
      return;
    }
    const seriesIndex = params.seriesIndex;
    const ecModel = this.getModel();
    const seriesModel = ecModel.getSeriesByIndex(seriesIndex);
    if (__DEV__) {
      assert2(params.data && seriesModel);
    }
    seriesModel.appendData(params);
    this._scheduler.unfinished = true;
  }
}
ECharts.internalField = function() {
  prepare = function(ecIns) {
    const scheduler = ecIns._scheduler;
    scheduler.restorePipelines(ecIns._model);
    scheduler.prepareStageTasks();
    prepareView(ecIns, true);
    prepareView(ecIns, false);
    scheduler.plan();
  };
  prepareView = function(ecIns, isComponent) {
    const ecModel = ecIns._model;
    const scheduler = ecIns._scheduler;
    const viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;
    const viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;
    const zr = ecIns._zr;
    const api = ecIns._api;
    for (let i = 0; i < viewList.length; i++) {
      viewList[i].__alive = false;
    }
    isComponent ? ecModel.eachComponent(function(componentType, model65) {
      componentType !== "series" && doPrepare(model65);
    }) : ecModel.eachSeries(doPrepare);
    function doPrepare(model65) {
      const requireNewView = model65.__requireNewView;
      model65.__requireNewView = false;
      const viewId = "_ec_" + model65.id + "_" + model65.type;
      let view = !requireNewView && viewMap[viewId];
      if (!view) {
        const classType = parseClassType(model65.type);
        const Clazz = isComponent ? Component_default2.getClass(classType.main, classType.sub) : Chart_default.getClass(classType.sub);
        if (__DEV__) {
          assert2(Clazz, classType.sub + " does not exist.");
        }
        view = new Clazz();
        view.init(ecModel, api);
        viewMap[viewId] = view;
        viewList.push(view);
        zr.add(view.group);
      }
      model65.__viewId = view.__id = viewId;
      view.__alive = true;
      view.__model = model65;
      view.group.__ecComponentInfo = {
        mainType: model65.mainType,
        index: model65.componentIndex
      };
      !isComponent && scheduler.prepareView(view, model65, ecModel, api);
    }
    for (let i = 0; i < viewList.length; ) {
      const view = viewList[i];
      if (!view.__alive) {
        !isComponent && view.renderTask.dispose();
        zr.remove(view.group);
        view.dispose(ecModel, api);
        viewList.splice(i, 1);
        if (viewMap[view.__id] === view) {
          delete viewMap[view.__id];
        }
        view.__id = view.group.__ecComponentInfo = null;
      } else {
        i++;
      }
    }
  };
  updateDirectly = function(ecIns, method, payload, mainType, subType) {
    const ecModel = ecIns._model;
    ecModel.setUpdatePayload(payload);
    if (!mainType) {
      each16([].concat(ecIns._componentsViews).concat(ecIns._chartsViews), callView);
      return;
    }
    const query = {};
    query[mainType + "Id"] = payload[mainType + "Id"];
    query[mainType + "Index"] = payload[mainType + "Index"];
    query[mainType + "Name"] = payload[mainType + "Name"];
    const condition = {
      mainType,
      query
    };
    subType && (condition.subType = subType);
    const excludeSeriesId = payload.excludeSeriesId;
    let excludeSeriesIdMap;
    if (excludeSeriesId != null) {
      excludeSeriesIdMap = createHashMap(normalizeToArray(excludeSeriesId));
    }
    ecModel && ecModel.eachComponent(condition, function(model65) {
      if (!excludeSeriesIdMap || excludeSeriesIdMap.get(model65.id) == null) {
        if (isHighDownPayload(payload) && !payload.notBlur) {
          if (model65 instanceof Series_default) {
            toggleSeriesBlurStateFromPayload(model65, payload, ecIns);
          }
        } else if (isSelectChangePayload(payload)) {
          if (model65 instanceof Series_default) {
            toggleSelectionFromPayload(model65, payload, ecIns);
            updateSeriesElementSelection(model65);
            markStatusToUpdate(ecIns);
          }
        }
        callView(ecIns[mainType === "series" ? "_chartsMap" : "_componentsMap"][model65.__viewId]);
      }
    }, ecIns);
    function callView(view) {
      view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
    }
  };
  updateMethods = {
    prepareAndUpdate: function(payload) {
      prepare(this);
      updateMethods.update.call(this, payload);
    },
    update: function(payload) {
      const ecModel = this._model;
      const api = this._api;
      const zr = this._zr;
      const coordSysMgr = this._coordSysMgr;
      const scheduler = this._scheduler;
      if (!ecModel) {
        return;
      }
      ecModel.setUpdatePayload(payload);
      scheduler.restoreData(ecModel, payload);
      scheduler.performSeriesTasks(ecModel);
      coordSysMgr.create(ecModel, api);
      scheduler.performDataProcessorTasks(ecModel, payload);
      updateStreamModes(this, ecModel);
      coordSysMgr.update(ecModel, api);
      clearColorPalette(ecModel);
      scheduler.performVisualTasks(ecModel, payload);
      render(this, ecModel, api, payload);
      let backgroundColor = ecModel.get("backgroundColor") || "transparent";
      const darkMode = ecModel.get("darkMode");
      if (!env_default.canvasSupported) {
        const colorArr = parse(backgroundColor);
        backgroundColor = stringify(colorArr, "rgb");
        if (colorArr[3] === 0) {
          backgroundColor = "transparent";
        }
      } else {
        zr.setBackgroundColor(backgroundColor);
        if (darkMode != null && darkMode !== "auto") {
          zr.setDarkMode(darkMode);
        }
      }
      performPostUpdateFuncs(ecModel, api);
    },
    updateTransform: function(payload) {
      const ecModel = this._model;
      const api = this._api;
      if (!ecModel) {
        return;
      }
      ecModel.setUpdatePayload(payload);
      const componentDirtyList = [];
      ecModel.eachComponent((componentType, componentModel) => {
        if (componentType === "series") {
          return;
        }
        const componentView = this.getViewOfComponentModel(componentModel);
        if (componentView && componentView.__alive) {
          if (componentView.updateTransform) {
            const result = componentView.updateTransform(componentModel, ecModel, api, payload);
            result && result.update && componentDirtyList.push(componentView);
          } else {
            componentDirtyList.push(componentView);
          }
        }
      });
      const seriesDirtyMap = createHashMap();
      ecModel.eachSeries((seriesModel) => {
        const chartView = this._chartsMap[seriesModel.__viewId];
        if (chartView.updateTransform) {
          const result = chartView.updateTransform(seriesModel, ecModel, api, payload);
          result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);
        } else {
          seriesDirtyMap.set(seriesModel.uid, 1);
        }
      });
      clearColorPalette(ecModel);
      this._scheduler.performVisualTasks(ecModel, payload, {
        setDirty: true,
        dirtyMap: seriesDirtyMap
      });
      renderSeries(this, ecModel, api, payload, seriesDirtyMap);
      performPostUpdateFuncs(ecModel, this._api);
    },
    updateView: function(payload) {
      const ecModel = this._model;
      if (!ecModel) {
        return;
      }
      ecModel.setUpdatePayload(payload);
      Chart_default.markUpdateMethod(payload, "updateView");
      clearColorPalette(ecModel);
      this._scheduler.performVisualTasks(ecModel, payload, {
        setDirty: true
      });
      render(this, this._model, this._api, payload);
      performPostUpdateFuncs(ecModel, this._api);
    },
    updateVisual: function(payload) {
      const ecModel = this._model;
      if (!ecModel) {
        return;
      }
      ecModel.setUpdatePayload(payload);
      ecModel.eachSeries(function(seriesModel) {
        seriesModel.getData().clearAllVisual();
      });
      Chart_default.markUpdateMethod(payload, "updateVisual");
      clearColorPalette(ecModel);
      this._scheduler.performVisualTasks(ecModel, payload, {
        visualType: "visual",
        setDirty: true
      });
      ecModel.eachComponent((componentType, componentModel) => {
        if (componentType !== "series") {
          const componentView = this.getViewOfComponentModel(componentModel);
          componentView && componentView.__alive && componentView.updateVisual(componentModel, ecModel, this._api, payload);
        }
      });
      ecModel.eachSeries((seriesModel) => {
        const chartView = this._chartsMap[seriesModel.__viewId];
        chartView.updateVisual(seriesModel, ecModel, this._api, payload);
      });
      performPostUpdateFuncs(ecModel, this._api);
    },
    updateLayout: function(payload) {
      updateMethods.update.call(this, payload);
    }
  };
  doConvertPixel = function(ecIns, methodName, finder, value) {
    if (ecIns._disposed) {
      disposedWarning(ecIns.id);
      return;
    }
    const ecModel = ecIns._model;
    const coordSysList = ecIns._coordSysMgr.getCoordinateSystems();
    let result;
    const parsedFinder = parseFinder(ecModel, finder);
    for (let i = 0; i < coordSysList.length; i++) {
      const coordSys = coordSysList[i];
      if (coordSys[methodName] && (result = coordSys[methodName](ecModel, parsedFinder, value)) != null) {
        return result;
      }
    }
    if (__DEV__) {
      console.warn("No coordinate system that supports " + methodName + " found by the given finder.");
    }
  };
  updateStreamModes = function(ecIns, ecModel) {
    const chartsMap = ecIns._chartsMap;
    const scheduler = ecIns._scheduler;
    ecModel.eachSeries(function(seriesModel) {
      scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);
    });
  };
  doDispatchAction = function(payload, silent) {
    const ecModel = this.getModel();
    const payloadType = payload.type;
    const escapeConnect = payload.escapeConnect;
    const actionWrap = actions[payloadType];
    const actionInfo4 = actionWrap.actionInfo;
    const cptTypeTmp = (actionInfo4.update || "update").split(":");
    const updateMethod = cptTypeTmp.pop();
    const cptType = cptTypeTmp[0] != null && parseClassType(cptTypeTmp[0]);
    this[IN_MAIN_PROCESS_KEY] = true;
    let payloads = [payload];
    let batched = false;
    if (payload.batch) {
      batched = true;
      payloads = map2(payload.batch, function(item) {
        item = defaults(extend({}, item), payload);
        item.batch = null;
        return item;
      });
    }
    const eventObjBatch = [];
    let eventObj;
    const isSelectChange = isSelectChangePayload(payload);
    const isStatusChange = isHighDownPayload(payload) || isSelectChange;
    each16(payloads, (batchItem) => {
      eventObj = actionWrap.action(batchItem, this._model, this._api);
      eventObj = eventObj || extend({}, batchItem);
      eventObj.type = actionInfo4.event || eventObj.type;
      eventObjBatch.push(eventObj);
      if (isStatusChange) {
        updateDirectly(this, updateMethod, batchItem, "series");
        markStatusToUpdate(this);
      } else if (cptType) {
        updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
      }
    });
    if (payload.statusChanged) {
      markStatusToUpdate(this);
    }
    if (updateMethod !== "none" && !isStatusChange && !cptType) {
      if (this[OPTION_UPDATED_KEY]) {
        prepare(this);
        updateMethods.update.call(this, payload);
        this[OPTION_UPDATED_KEY] = false;
      } else {
        updateMethods[updateMethod].call(this, payload);
      }
    }
    if (batched) {
      eventObj = {
        type: actionInfo4.event || payloadType,
        escapeConnect,
        batch: eventObjBatch
      };
    } else {
      eventObj = eventObjBatch[0];
    }
    this[IN_MAIN_PROCESS_KEY] = false;
    if (!silent) {
      const messageCenter = this._messageCenter;
      messageCenter.trigger(eventObj.type, eventObj);
      if (isSelectChange) {
        const newObj = {
          type: "selectchanged",
          escapeConnect,
          selected: getAllSelectedIndices(ecModel),
          isFromClick: payload.isFromClick || false,
          fromAction: payload.type,
          fromActionPayload: payload
        };
        messageCenter.trigger(newObj.type, newObj);
      }
    }
  };
  flushPendingActions = function(silent) {
    const pendingActions = this._pendingActions;
    while (pendingActions.length) {
      const payload = pendingActions.shift();
      doDispatchAction.call(this, payload, silent);
    }
  };
  triggerUpdatedEvent = function(silent) {
    !silent && this.trigger("updated");
  };
  bindRenderedEvent = function(zr, ecIns) {
    zr.on("rendered", function(params) {
      ecIns.trigger("rendered", params);
      if (zr.animation.isFinished() && !ecIns[OPTION_UPDATED_KEY] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) {
        ecIns.trigger("finished");
      }
    });
  };
  bindMouseEvent = function(zr, ecIns) {
    function getDispatcher(target, det) {
      while (target && !det(target)) {
        if (target.__hostTarget) {
          target = target.__hostTarget;
        } else {
          target = target.parent;
        }
      }
      return target;
    }
    zr.on("mouseover", function(e) {
      const el = e.target;
      const dispatcher = getDispatcher(el, isHighDownDispatcher);
      if (dispatcher) {
        const ecData = getECData3(dispatcher);
        toggleSeriesBlurState(ecData.seriesIndex, ecData.focus, ecData.blurScope, ecIns, true);
        enterEmphasisWhenMouseOver(dispatcher, e);
        markStatusToUpdate(ecIns);
      }
    }).on("mouseout", function(e) {
      const el = e.target;
      const dispatcher = getDispatcher(el, isHighDownDispatcher);
      if (dispatcher) {
        const ecData = getECData3(dispatcher);
        toggleSeriesBlurState(ecData.seriesIndex, ecData.focus, ecData.blurScope, ecIns, false);
        leaveEmphasisWhenMouseOut(dispatcher, e);
        markStatusToUpdate(ecIns);
      }
    }).on("click", function(e) {
      const el = e.target;
      const dispatcher = getDispatcher(el, (target) => getECData3(target).dataIndex != null);
      if (dispatcher) {
        const actionType = dispatcher.selected ? "unselect" : "select";
        const ecData = getECData3(dispatcher);
        ecIns._api.dispatchAction({
          type: actionType,
          dataType: ecData.dataType,
          dataIndexInside: ecData.dataIndex,
          seriesIndex: ecData.seriesIndex,
          isFromClick: true
        });
      }
    });
  };
  clearColorPalette = function(ecModel) {
    ecModel.clearColorPalette();
    ecModel.eachSeries(function(seriesModel) {
      seriesModel.clearColorPalette();
    });
  };
  render = function(ecIns, ecModel, api, payload) {
    renderComponents(ecIns, ecModel, api, payload);
    each16(ecIns._chartsViews, function(chart) {
      chart.__alive = false;
    });
    renderSeries(ecIns, ecModel, api, payload);
    each16(ecIns._chartsViews, function(chart) {
      if (!chart.__alive) {
        chart.remove(ecModel, api);
      }
    });
  };
  renderComponents = function(ecIns, ecModel, api, payload, dirtyList) {
    each16(dirtyList || ecIns._componentsViews, function(componentView) {
      const componentModel = componentView.__model;
      clearStates2(componentModel, componentView);
      componentView.render(componentModel, ecModel, api, payload);
      updateZ3(componentModel, componentView);
      updateStates(componentModel, componentView);
    });
  };
  renderSeries = function(ecIns, ecModel, api, payload, dirtyMap) {
    const scheduler = ecIns._scheduler;
    const labelManager = ecIns._labelManager;
    labelManager.clearLabels();
    let unfinished = false;
    ecModel.eachSeries(function(seriesModel) {
      const chartView = ecIns._chartsMap[seriesModel.__viewId];
      chartView.__alive = true;
      const renderTask = chartView.renderTask;
      scheduler.updatePayload(renderTask, payload);
      clearStates2(seriesModel, chartView);
      if (dirtyMap && dirtyMap.get(seriesModel.uid)) {
        renderTask.dirty();
      }
      if (renderTask.perform(scheduler.getPerformArgs(renderTask))) {
        unfinished = true;
      }
      chartView.group.silent = !!seriesModel.get("silent");
      updateZ3(seriesModel, chartView);
      updateBlend(seriesModel, chartView);
      updateSeriesElementSelection(seriesModel);
      labelManager.addLabelsOfSeries(chartView);
    });
    scheduler.unfinished = unfinished || scheduler.unfinished;
    labelManager.updateLayoutConfig(api);
    labelManager.layout(api);
    labelManager.processLabelsOverall();
    ecModel.eachSeries(function(seriesModel) {
      const chartView = ecIns._chartsMap[seriesModel.__viewId];
      updateStates(seriesModel, chartView);
    });
    updateHoverLayerStatus(ecIns, ecModel);
    aria_default(ecIns._zr.dom, ecModel);
  };
  performPostUpdateFuncs = function(ecModel, api) {
    each16(postUpdateFuncs, function(func) {
      func(ecModel, api);
    });
  };
  markStatusToUpdate = function(ecIns) {
    ecIns[STATUS_NEEDS_UPDATE_KEY] = true;
    ecIns.getZr().wakeUp();
  };
  applyChangedStates = function(ecIns) {
    if (!ecIns[STATUS_NEEDS_UPDATE_KEY]) {
      return;
    }
    ecIns.getZr().storage.traverse(function(el) {
      if (isElementRemoved(el)) {
        return;
      }
      applyElementStates(el);
    });
    ecIns[STATUS_NEEDS_UPDATE_KEY] = false;
  };
  function applyElementStates(el) {
    const newStates = [];
    const oldStates = el.currentStates;
    for (let i = 0; i < oldStates.length; i++) {
      const stateName = oldStates[i];
      if (!(stateName === "emphasis" || stateName === "blur" || stateName === "select")) {
        newStates.push(stateName);
      }
    }
    if (el.selected && el.states.select) {
      newStates.push("select");
    }
    if (el.hoverState === HOVER_STATE_EMPHASIS && el.states.emphasis) {
      newStates.push("emphasis");
    } else if (el.hoverState === HOVER_STATE_BLUR && el.states.blur) {
      newStates.push("blur");
    }
    el.useStates(newStates);
  }
  function updateHoverLayerStatus(ecIns, ecModel) {
    const zr = ecIns._zr;
    const storage2 = zr.storage;
    let elCount = 0;
    storage2.traverse(function(el) {
      if (!el.isGroup) {
        elCount++;
      }
    });
    if (elCount > ecModel.get("hoverLayerThreshold") && !env_default.node) {
      ecModel.eachSeries(function(seriesModel) {
        if (seriesModel.preventUsingHoverLayer) {
          return;
        }
        const chartView = ecIns._chartsMap[seriesModel.__viewId];
        if (chartView.__alive) {
          chartView.group.traverse(function(el) {
            if (el.states.emphasis) {
              el.states.emphasis.hoverLayer = true;
            }
          });
        }
      });
    }
  }
  ;
  function updateBlend(seriesModel, chartView) {
    const blendMode = seriesModel.get("blendMode") || null;
    if (__DEV__) {
      if (!env_default.canvasSupported && blendMode && blendMode !== "source-over") {
        console.warn("Only canvas support blendMode");
      }
    }
    chartView.group.traverse(function(el) {
      if (!el.isGroup) {
        el.style.blend = blendMode;
      }
      if (el.eachPendingDisplayable) {
        el.eachPendingDisplayable(function(displayable) {
          displayable.style.blend = blendMode;
        });
      }
    });
  }
  ;
  function updateZ3(model65, view) {
    if (model65.preventAutoZ) {
      return;
    }
    const z = model65.get("z");
    const zlevel = model65.get("zlevel");
    view.group.traverse(function(el) {
      if (!el.isGroup) {
        z != null && (el.z = z);
        zlevel != null && (el.zlevel = zlevel);
        const label = el.getTextContent();
        const labelLine = el.getTextGuideLine();
        if (label) {
          label.z = el.z;
          label.zlevel = el.zlevel;
          label.z2 = el.z2 + 1;
        }
        if (labelLine) {
          labelLine.z = el.z;
          labelLine.zlevel = el.zlevel;
          labelLine.z2 = el.z2 - 1;
        }
      }
    });
  }
  ;
  function clearStates2(model65, view) {
    view.group.traverse(function(el) {
      if (isElementRemoved(el)) {
        return;
      }
      const textContent = el.getTextContent();
      const textGuide = el.getTextGuideLine();
      if (el.stateTransition) {
        el.stateTransition = null;
      }
      if (textContent && textContent.stateTransition) {
        textContent.stateTransition = null;
      }
      if (textGuide && textGuide.stateTransition) {
        textGuide.stateTransition = null;
      }
      if (el.hasState()) {
        el.prevStates = el.currentStates;
        el.clearStates();
      } else if (el.prevStates) {
        el.prevStates = null;
      }
    });
  }
  function updateStates(model65, view) {
    const stateAnimationModel = model65.getModel("stateAnimation");
    const enableAnimation = model65.isAnimationEnabled();
    const duration = stateAnimationModel.get("duration");
    const stateTransition = duration > 0 ? {
      duration,
      delay: stateAnimationModel.get("delay"),
      easing: stateAnimationModel.get("easing")
    } : null;
    view.group.traverse(function(el) {
      if (el.states && el.states.emphasis) {
        if (isElementRemoved(el)) {
          return;
        }
        if (el instanceof Path_default) {
          savePathStates(el);
        }
        if (el.__dirty) {
          const prevStates = el.prevStates;
          if (prevStates) {
            el.useStates(prevStates);
          }
        }
        if (enableAnimation) {
          el.stateTransition = stateTransition;
          const textContent = el.getTextContent();
          const textGuide = el.getTextGuideLine();
          if (textContent) {
            textContent.stateTransition = stateTransition;
          }
          if (textGuide) {
            textGuide.stateTransition = stateTransition;
          }
        }
        if (el.__dirty) {
          applyElementStates(el);
        }
      }
    });
  }
  ;
  createExtensionAPI = function(ecIns) {
    return new class extends ExtensionAPI_default {
      getCoordinateSystems() {
        return ecIns._coordSysMgr.getCoordinateSystems();
      }
      getComponentByElement(el) {
        while (el) {
          const modelInfo = el.__ecComponentInfo;
          if (modelInfo != null) {
            return ecIns._model.getComponent(modelInfo.mainType, modelInfo.index);
          }
          el = el.parent;
        }
      }
      enterEmphasis(el, highlightDigit) {
        enterEmphasis(el, highlightDigit);
        markStatusToUpdate(ecIns);
      }
      leaveEmphasis(el, highlightDigit) {
        leaveEmphasis(el, highlightDigit);
        markStatusToUpdate(ecIns);
      }
      enterBlur(el) {
        enterBlur(el);
        markStatusToUpdate(ecIns);
      }
      leaveBlur(el) {
        leaveBlur(el);
        markStatusToUpdate(ecIns);
      }
      enterSelect(el) {
        enterSelect(el);
        markStatusToUpdate(ecIns);
      }
      leaveSelect(el) {
        leaveSelect(el);
        markStatusToUpdate(ecIns);
      }
    }(ecIns);
  };
  enableConnect = function(chart) {
    function updateConnectedChartsStatus(charts, status) {
      for (let i = 0; i < charts.length; i++) {
        const otherChart = charts[i];
        otherChart[CONNECT_STATUS_KEY] = status;
      }
    }
    each16(eventActionMap, function(actionType, eventType) {
      chart._messageCenter.on(eventType, function(event3) {
        if (connectedGroups[chart.group] && chart[CONNECT_STATUS_KEY] !== CONNECT_STATUS_PENDING) {
          if (event3 && event3.escapeConnect) {
            return;
          }
          const action = chart.makeActionFromEvent(event3);
          const otherCharts = [];
          each16(instances2, function(otherChart) {
            if (otherChart !== chart && otherChart.group === chart.group) {
              otherCharts.push(otherChart);
            }
          });
          updateConnectedChartsStatus(otherCharts, CONNECT_STATUS_PENDING);
          each16(otherCharts, function(otherChart) {
            if (otherChart[CONNECT_STATUS_KEY] !== CONNECT_STATUS_UPDATING) {
              otherChart.dispatchAction(action);
            }
          });
          updateConnectedChartsStatus(otherCharts, CONNECT_STATUS_UPDATED);
        }
      });
    });
  };
}();
const echartsProto = ECharts.prototype;
echartsProto.on = createRegisterEventWithLowercaseECharts("on");
echartsProto.off = createRegisterEventWithLowercaseECharts("off");
echartsProto.one = function(eventName, cb, ctx) {
  const self2 = this;
  deprecateLog("ECharts#one is deprecated.");
  function wrapped(...args2) {
    cb && cb.apply && cb.apply(this, args2);
    self2.off(eventName, wrapped);
  }
  ;
  this.on.call(this, eventName, wrapped, ctx);
};
const MOUSE_EVENT_NAMES = ["click", "dblclick", "mouseover", "mouseout", "mousemove", "mousedown", "mouseup", "globalout", "contextmenu"];
function disposedWarning(id) {
  if (__DEV__) {
    console.warn("Instance " + id + " has been disposed");
  }
}
const actions = {};
const eventActionMap = {};
const dataProcessorFuncs = [];
const optionPreprocessorFuncs = [];
const postUpdateFuncs = [];
const visualFuncs = [];
const themeStorage = {};
const loadingEffects = {};
const instances2 = {};
const connectedGroups = {};
let idBase = +new Date() - 0;
let groupIdBase = +new Date() - 0;
const DOM_ATTRIBUTE_KEY = "_echarts_instance_";
function init3(dom2, theme2, opts) {
  if (__DEV__) {
    if (+version.replace(".", "") < +dependencies.zrender.replace(".", "")) {
      throw new Error("zrender/src " + version + " is too old for ECharts " + version2 + ". Current version need ZRender " + dependencies.zrender + "+");
    }
    if (!dom2) {
      throw new Error("Initialize failed: invalid dom.");
    }
  }
  const existInstance = getInstanceByDom(dom2);
  if (existInstance) {
    if (__DEV__) {
      console.warn("There is a chart instance already initialized on the dom.");
    }
    return existInstance;
  }
  if (__DEV__) {
    if (isDom(dom2) && dom2.nodeName.toUpperCase() !== "CANVAS" && (!dom2.clientWidth && (!opts || opts.width == null) || !dom2.clientHeight && (!opts || opts.height == null))) {
      console.warn("Can't get DOM width or height. Please check dom.clientWidth and dom.clientHeight. They should not be 0.For example, you may need to call this in the callback of window.onload.");
    }
  }
  const chart = new ECharts(dom2, theme2, opts);
  chart.id = "ec_" + idBase++;
  instances2[chart.id] = chart;
  setAttribute(dom2, DOM_ATTRIBUTE_KEY, chart.id);
  enableConnect(chart);
  return chart;
}
function connect(groupId) {
  if (isArray(groupId)) {
    const charts = groupId;
    groupId = null;
    each16(charts, function(chart) {
      if (chart.group != null) {
        groupId = chart.group;
      }
    });
    groupId = groupId || "g_" + groupIdBase++;
    each16(charts, function(chart) {
      chart.group = groupId;
    });
  }
  connectedGroups[groupId] = true;
  return groupId;
}
function disConnect(groupId) {
  connectedGroups[groupId] = false;
}
const disconnect = disConnect;
function dispose2(chart) {
  if (typeof chart === "string") {
    chart = instances2[chart];
  } else if (!(chart instanceof ECharts)) {
    chart = getInstanceByDom(chart);
  }
  if (chart instanceof ECharts && !chart.isDisposed()) {
    chart.dispose();
  }
}
function getInstanceByDom(dom2) {
  return instances2[getAttribute(dom2, DOM_ATTRIBUTE_KEY)];
}
function getInstanceById(key) {
  return instances2[key];
}
function registerTheme(name, theme2) {
  themeStorage[name] = theme2;
}
function registerPreprocessor(preprocessorFunc) {
  optionPreprocessorFuncs.push(preprocessorFunc);
}
function registerProcessor(priority, processor) {
  normalizeRegister(dataProcessorFuncs, priority, processor, PRIORITY_PROCESSOR_DEFAULT);
}
function registerPostUpdate(postUpdateFunc) {
  postUpdateFuncs.push(postUpdateFunc);
}
function registerAction(actionInfo4, eventName, action) {
  if (typeof eventName === "function") {
    action = eventName;
    eventName = "";
  }
  const actionType = isObject3(actionInfo4) ? actionInfo4.type : [actionInfo4, actionInfo4 = {
    event: eventName
  }][0];
  actionInfo4.event = (actionInfo4.event || actionType).toLowerCase();
  eventName = actionInfo4.event;
  assert2(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));
  if (!actions[actionType]) {
    actions[actionType] = {
      action,
      actionInfo: actionInfo4
    };
  }
  eventActionMap[eventName] = actionType;
}
function registerCoordinateSystem(type, coordSysCreator) {
  CoordinateSystem_default.register(type, coordSysCreator);
}
function getCoordinateSystemDimensions(type) {
  const coordSysCreator = CoordinateSystem_default.get(type);
  if (coordSysCreator) {
    return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
  }
}
function registerLayout(priority, layoutTask) {
  normalizeRegister(visualFuncs, priority, layoutTask, PRIORITY_VISUAL_LAYOUT, "layout");
}
function registerVisual(priority, visualTask) {
  normalizeRegister(visualFuncs, priority, visualTask, PRIORITY_VISUAL_CHART, "visual");
}
function normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {
  if (isFunction2(priority) || isObject3(priority)) {
    fn = priority;
    priority = defaultPriority;
  }
  if (__DEV__) {
    if (isNaN(priority) || priority == null) {
      throw new Error("Illegal priority");
    }
    each16(targetList, function(wrap) {
      assert2(wrap.__raw !== fn);
    });
  }
  const stageHandler = Scheduler_default.wrapStageHandler(fn, visualType);
  stageHandler.__prio = priority;
  stageHandler.__raw = fn;
  targetList.push(stageHandler);
}
function registerLoading(name, loadingFx) {
  loadingEffects[name] = loadingFx;
}
function extendComponentModel(proto2) {
  return Component_default.extend(proto2);
}
function extendComponentView(proto2) {
  return Component_default2.extend(proto2);
}
function extendSeriesModel(proto2) {
  return Series_default.extend(proto2);
}
function extendChartView(proto2) {
  return Chart_default.extend(proto2);
}
function setCanvasCreator(creator) {
  $override2("createCanvas", creator);
}
function registerMap(mapName, geoJson, specialAreas) {
  mapDataStorage_default.registerMap(mapName, geoJson, specialAreas);
}
function getMap(mapName) {
  const records = mapDataStorage_default.retrieveMap(mapName);
  return records && records[0] && {
    geoJson: records[0].geoJSON,
    specialAreas: records[0].specialAreas
  };
}
registerVisual(PRIORITY_VISUAL_GLOBAL, seriesStyleTask);
registerVisual(PRIORITY_VISUAL_CHART_DATA_CUSTOM, dataStyleTask);
registerVisual(PRIORITY_VISUAL_CHART_DATA_CUSTOM, dataColorPaletteTask);
registerVisual(PRIORITY_VISUAL_GLOBAL, seriesSymbolTask);
registerVisual(PRIORITY_VISUAL_CHART_DATA_CUSTOM, dataSymbolTask);
registerPreprocessor(backwardCompat_default2);
registerProcessor(PRIORITY_PROCESSOR_DATASTACK, dataStack_default);
registerLoading("default", default_default);
registerAction({
  type: HIGHLIGHT_ACTION_TYPE,
  event: HIGHLIGHT_ACTION_TYPE,
  update: HIGHLIGHT_ACTION_TYPE
}, noop);
registerAction({
  type: DOWNPLAY_ACTION_TYPE,
  event: DOWNPLAY_ACTION_TYPE,
  update: DOWNPLAY_ACTION_TYPE
}, noop);
registerAction({
  type: SELECT_ACTION_TYPE,
  event: SELECT_ACTION_TYPE,
  update: SELECT_ACTION_TYPE
}, noop);
registerAction({
  type: UNSELECT_ACTION_TYPE,
  event: UNSELECT_ACTION_TYPE,
  update: UNSELECT_ACTION_TYPE
}, noop);
registerAction({
  type: TOGGLE_SELECT_ACTION_TYPE,
  event: TOGGLE_SELECT_ACTION_TYPE,
  update: TOGGLE_SELECT_ACTION_TYPE
}, noop);
registerTheme("light", light_default);
registerTheme("dark", dark_default);
const dataTool = {};

// src/data/DataDiffer.ts
function defaultKeyGetter(item) {
  return item;
}
class DataDiffer7 {
  constructor(oldArr, newArr, oldKeyGetter, newKeyGetter, context) {
    this._old = oldArr;
    this._new = newArr;
    this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
    this._newKeyGetter = newKeyGetter || defaultKeyGetter;
    this.context = context;
  }
  add(func) {
    this._add = func;
    return this;
  }
  update(func) {
    this._update = func;
    return this;
  }
  remove(func) {
    this._remove = func;
    return this;
  }
  execute() {
    const oldArr = this._old;
    const newArr = this._new;
    const oldDataIndexMap = {};
    const newDataIndexMap = {};
    const oldDataKeyArr = [];
    const newDataKeyArr = [];
    let i;
    this._initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, "_oldKeyGetter");
    this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, "_newKeyGetter");
    for (i = 0; i < oldArr.length; i++) {
      const key = oldDataKeyArr[i];
      let idx = newDataIndexMap[key];
      if (idx != null) {
        const len2 = idx.length;
        if (len2) {
          len2 === 1 && (newDataIndexMap[key] = null);
          idx = idx.shift();
        } else {
          newDataIndexMap[key] = null;
        }
        this._update && this._update(idx, i);
      } else {
        this._remove && this._remove(i);
      }
    }
    for (i = 0; i < newDataKeyArr.length; i++) {
      const key = newDataKeyArr[i];
      if (newDataIndexMap.hasOwnProperty(key)) {
        const idx = newDataIndexMap[key];
        if (idx == null) {
          continue;
        }
        if (!idx.length) {
          this._add && this._add(idx);
        } else {
          for (let j = 0, len2 = idx.length; j < len2; j++) {
            this._add && this._add(idx[j]);
          }
        }
      }
    }
  }
  _initIndexMap(arr, map3, keyArr, keyGetterName) {
    for (let i = 0; i < arr.length; i++) {
      const key = "_ec_" + this[keyGetterName](arr[i], i);
      let existence = map3[key];
      if (existence == null) {
        keyArr.push(key);
        map3[key] = i;
      } else {
        if (!existence.length) {
          map3[key] = existence = [existence];
        }
        existence.push(i);
      }
    }
  }
}
const DataDiffer_default = DataDiffer7;

// src/data/helper/dimensionHelper.ts
function summarizeDimensions(data) {
  const summary = {};
  const encode = summary.encode = {};
  const notExtraCoordDimMap = createHashMap();
  let defaultedLabel = [];
  let defaultedTooltip = [];
  const userOutput = summary.userOutput = {
    dimensionNames: data.dimensions.slice(),
    encode: {}
  };
  each(data.dimensions, function(dimName) {
    const dimItem = data.getDimensionInfo(dimName);
    const coordDim = dimItem.coordDim;
    if (coordDim) {
      if (__DEV__) {
        assert(VISUAL_DIMENSIONS.get(coordDim) == null);
      }
      const coordDimIndex = dimItem.coordDimIndex;
      getOrCreateEncodeArr(encode, coordDim)[coordDimIndex] = dimName;
      if (!dimItem.isExtraCoord) {
        notExtraCoordDimMap.set(coordDim, 1);
        if (mayLabelDimType(dimItem.type)) {
          defaultedLabel[0] = dimName;
        }
        getOrCreateEncodeArr(userOutput.encode, coordDim)[coordDimIndex] = dimItem.index;
      }
      if (dimItem.defaultTooltip) {
        defaultedTooltip.push(dimName);
      }
    }
    VISUAL_DIMENSIONS.each(function(v4, otherDim) {
      const encodeArr = getOrCreateEncodeArr(encode, otherDim);
      const dimIndex = dimItem.otherDims[otherDim];
      if (dimIndex != null && dimIndex !== false) {
        encodeArr[dimIndex] = dimItem.name;
      }
    });
  });
  let dataDimsOnCoord = [];
  const encodeFirstDimNotExtra = {};
  notExtraCoordDimMap.each(function(v4, coordDim) {
    const dimArr = encode[coordDim];
    encodeFirstDimNotExtra[coordDim] = dimArr[0];
    dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);
  });
  summary.dataDimsOnCoord = dataDimsOnCoord;
  summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;
  const encodeLabel = encode.label;
  if (encodeLabel && encodeLabel.length) {
    defaultedLabel = encodeLabel.slice();
  }
  const encodeTooltip = encode.tooltip;
  if (encodeTooltip && encodeTooltip.length) {
    defaultedTooltip = encodeTooltip.slice();
  } else if (!defaultedTooltip.length) {
    defaultedTooltip = defaultedLabel.slice();
  }
  encode.defaultedLabel = defaultedLabel;
  encode.defaultedTooltip = defaultedTooltip;
  return summary;
}
function getOrCreateEncodeArr(encode, dim) {
  if (!encode.hasOwnProperty(dim)) {
    encode[dim] = [];
  }
  return encode[dim];
}
function getDimensionTypeByAxis(axisType) {
  return axisType === "category" ? "ordinal" : axisType === "time" ? "time" : "float";
}
function mayLabelDimType(dimType) {
  return !(dimType === "ordinal" || dimType === "time");
}

// src/data/DataDimensionInfo.ts
class DataDimensionInfo3 {
  constructor(opt) {
    this.otherDims = {};
    if (opt != null) {
      extend(this, opt);
    }
  }
}
const DataDimensionInfo_default = DataDimensionInfo3;

// src/data/List.ts
const isObject2 = isObject;
const UNDEFINED = "undefined";
const INDEX_NOT_FOUND = -1;
const ID_PREFIX = "e\0\0";
const dataCtors = {
  float: typeof Float64Array === UNDEFINED ? Array : Float64Array,
  int: typeof Int32Array === UNDEFINED ? Array : Int32Array,
  ordinal: Array,
  number: Array,
  time: Array
};
const CtorUint32Array = typeof Uint32Array === UNDEFINED ? Array : Uint32Array;
const CtorInt32Array = typeof Int32Array === UNDEFINED ? Array : Int32Array;
const CtorUint16Array = typeof Uint16Array === UNDEFINED ? Array : Uint16Array;
const TRANSFERABLE_PROPERTIES = ["hasItemOption", "_nameList", "_idList", "_invertedIndicesMap", "_rawData", "_chunkSize", "_chunkCount", "_dimValueGetter", "_count", "_rawCount", "_nameDimIdx", "_idDimIdx"];
const CLONE_PROPERTIES = ["_extent", "_approximateExtent", "_rawExtent"];
let defaultDimValueGetters;
let prepareInvertedIndex;
let getRawValueFromStore;
let getIndicesCtor;
let prepareChunks;
let getRawIndexWithoutIndices;
let getRawIndexWithIndices;
let getId;
let normalizeDimensions;
let validateDimensions;
let cloneListForMapAndSample;
let cloneDimStore;
let getInitialExtent;
let setItemDataAndSeriesIndex;
let transferProperties;
class List124 {
  constructor(dimensions, hostModel) {
    this.type = "list";
    this._count = 0;
    this._rawCount = 0;
    this._storage = {};
    this._nameList = [];
    this._idList = [];
    this._visual = {};
    this._layout = {};
    this._itemVisuals = [];
    this._itemLayouts = [];
    this._graphicEls = [];
    this._chunkSize = 100000;
    this._chunkCount = 0;
    this._rawExtent = {};
    this._extent = {};
    this._approximateExtent = {};
    this._calculationInfo = {};
    this.hasItemOption = true;
    this.TRANSFERABLE_METHODS = ["cloneShallow", "downSample", "map"];
    this.CHANGABLE_METHODS = ["filterSelf", "selectRange"];
    this.getRawIndex = getRawIndexWithoutIndices;
    dimensions = dimensions || ["x", "y"];
    const dimensionInfos = {};
    const dimensionNames = [];
    const invertedIndicesMap = {};
    for (let i = 0; i < dimensions.length; i++) {
      const dimInfoInput = dimensions[i];
      const dimensionInfo = isString(dimInfoInput) ? new DataDimensionInfo_default({
        name: dimInfoInput
      }) : !(dimInfoInput instanceof DataDimensionInfo_default) ? new DataDimensionInfo_default(dimInfoInput) : dimInfoInput;
      const dimensionName = dimensionInfo.name;
      dimensionInfo.type = dimensionInfo.type || "float";
      if (!dimensionInfo.coordDim) {
        dimensionInfo.coordDim = dimensionName;
        dimensionInfo.coordDimIndex = 0;
      }
      dimensionInfo.otherDims = dimensionInfo.otherDims || {};
      dimensionNames.push(dimensionName);
      dimensionInfos[dimensionName] = dimensionInfo;
      dimensionInfo.index = i;
      if (dimensionInfo.createInvertedIndices) {
        invertedIndicesMap[dimensionName] = [];
      }
    }
    this.dimensions = dimensionNames;
    this._dimensionInfos = dimensionInfos;
    this.hostModel = hostModel;
    this._dimensionsSummary = summarizeDimensions(this);
    this._invertedIndicesMap = invertedIndicesMap;
    this.userOutput = this._dimensionsSummary.userOutput;
  }
  getDimension(dim) {
    if (typeof dim === "number" || !isNaN(dim) && !this._dimensionInfos.hasOwnProperty(dim)) {
      dim = this.dimensions[dim];
    }
    return dim;
  }
  getDimensionInfo(dim) {
    return this._dimensionInfos[this.getDimension(dim)];
  }
  getDimensionsOnCoord() {
    return this._dimensionsSummary.dataDimsOnCoord.slice();
  }
  mapDimension(coordDim, idx) {
    const dimensionsSummary = this._dimensionsSummary;
    if (idx == null) {
      return dimensionsSummary.encodeFirstDimNotExtra[coordDim];
    }
    const dims = dimensionsSummary.encode[coordDim];
    return dims ? dims[idx] : null;
  }
  mapDimensionsAll(coordDim) {
    const dimensionsSummary = this._dimensionsSummary;
    const dims = dimensionsSummary.encode[coordDim];
    return (dims || []).slice();
  }
  initData(data, nameList, dimValueGetter2) {
    const notProvider = data instanceof Source_default || isArrayLike(data);
    if (notProvider) {
      data = new DefaultDataProvider(data, this.dimensions.length);
    }
    if (__DEV__) {
      if (!notProvider && (typeof data.getItem !== "function" || typeof data.count !== "function")) {
        throw new Error("Inavlid data provider.");
      }
    }
    this._rawData = data;
    this._storage = {};
    this._indices = null;
    this._nameList = nameList || [];
    this._idList = [];
    this._nameRepeatCount = {};
    if (!dimValueGetter2) {
      this.hasItemOption = false;
    }
    this.defaultDimValueGetter = defaultDimValueGetters[this._rawData.getSource().sourceFormat];
    this._dimValueGetter = dimValueGetter2 = dimValueGetter2 || this.defaultDimValueGetter;
    this._dimValueGetterArrayRows = defaultDimValueGetters.arrayRows;
    this._rawExtent = {};
    this._initDataFromProvider(0, data.count());
    if (data.pure) {
      this.hasItemOption = false;
    }
  }
  getProvider() {
    return this._rawData;
  }
  appendData(data) {
    if (__DEV__) {
      assert(!this._indices, "appendData can only be called on raw data.");
    }
    const rawData = this._rawData;
    const start2 = this.count();
    rawData.appendData(data);
    let end2 = rawData.count();
    if (!rawData.persistent) {
      end2 += start2;
    }
    this._initDataFromProvider(start2, end2);
  }
  appendValues(values, names) {
    const chunkSize = this._chunkSize;
    const storage2 = this._storage;
    const dimensions = this.dimensions;
    const dimLen = dimensions.length;
    const rawExtent = this._rawExtent;
    const start2 = this.count();
    const end2 = start2 + Math.max(values.length, names ? names.length : 0);
    const originalChunkCount = this._chunkCount;
    for (let i = 0; i < dimLen; i++) {
      const dim = dimensions[i];
      if (!rawExtent[dim]) {
        rawExtent[dim] = getInitialExtent();
      }
      if (!storage2[dim]) {
        storage2[dim] = [];
      }
      prepareChunks(storage2, this._dimensionInfos[dim], chunkSize, originalChunkCount, end2);
      this._chunkCount = storage2[dim].length;
    }
    const emptyDataItem = new Array(dimLen);
    for (let idx = start2; idx < end2; idx++) {
      const sourceIdx = idx - start2;
      const chunkIndex = Math.floor(idx / chunkSize);
      const chunkOffset = idx % chunkSize;
      for (let k = 0; k < dimLen; k++) {
        const dim = dimensions[k];
        const val = this._dimValueGetterArrayRows(values[sourceIdx] || emptyDataItem, dim, sourceIdx, k);
        storage2[dim][chunkIndex][chunkOffset] = val;
        const dimRawExtent = rawExtent[dim];
        val < dimRawExtent[0] && (dimRawExtent[0] = val);
        val > dimRawExtent[1] && (dimRawExtent[1] = val);
      }
      if (names) {
        this._nameList[idx] = names[sourceIdx];
      }
    }
    this._rawCount = this._count = end2;
    this._extent = {};
    prepareInvertedIndex(this);
  }
  _initDataFromProvider(start2, end2) {
    if (start2 >= end2) {
      return;
    }
    const chunkSize = this._chunkSize;
    const rawData = this._rawData;
    const storage2 = this._storage;
    const dimensions = this.dimensions;
    const dimLen = dimensions.length;
    const dimensionInfoMap = this._dimensionInfos;
    const nameList = this._nameList;
    const idList = this._idList;
    const rawExtent = this._rawExtent;
    const nameRepeatCount = this._nameRepeatCount = {};
    let nameDimIdx;
    const originalChunkCount = this._chunkCount;
    for (let i = 0; i < dimLen; i++) {
      const dim = dimensions[i];
      if (!rawExtent[dim]) {
        rawExtent[dim] = getInitialExtent();
      }
      const dimInfo = dimensionInfoMap[dim];
      if (dimInfo.otherDims.itemName === 0) {
        nameDimIdx = this._nameDimIdx = i;
      }
      if (dimInfo.otherDims.itemId === 0) {
        this._idDimIdx = i;
      }
      if (!storage2[dim]) {
        storage2[dim] = [];
      }
      prepareChunks(storage2, dimInfo, chunkSize, originalChunkCount, end2);
      this._chunkCount = storage2[dim].length;
    }
    let dataItem = new Array(dimLen);
    for (let idx = start2; idx < end2; idx++) {
      dataItem = rawData.getItem(idx, dataItem);
      const chunkIndex = Math.floor(idx / chunkSize);
      const chunkOffset = idx % chunkSize;
      for (let k = 0; k < dimLen; k++) {
        const dim = dimensions[k];
        const dimStorage = storage2[dim][chunkIndex];
        const val = this._dimValueGetter(dataItem, dim, idx, k);
        dimStorage[chunkOffset] = val;
        const dimRawExtent = rawExtent[dim];
        val < dimRawExtent[0] && (dimRawExtent[0] = val);
        val > dimRawExtent[1] && (dimRawExtent[1] = val);
      }
      if (!rawData.pure) {
        let name = nameList[idx];
        if (dataItem && name == null) {
          if (dataItem.name != null) {
            nameList[idx] = name = dataItem.name;
          } else if (nameDimIdx != null) {
            const nameDim = dimensions[nameDimIdx];
            const nameDimChunk = storage2[nameDim][chunkIndex];
            if (nameDimChunk) {
              name = nameDimChunk[chunkOffset];
              const ordinalMeta = dimensionInfoMap[nameDim].ordinalMeta;
              if (ordinalMeta && ordinalMeta.categories.length) {
                name = ordinalMeta.categories[name];
              }
            }
          }
        }
        let id = dataItem == null ? null : dataItem.id;
        if (id == null && name != null) {
          nameRepeatCount[name] = nameRepeatCount[name] || 0;
          id = name;
          if (nameRepeatCount[name] > 0) {
            id += "__ec__" + nameRepeatCount[name];
          }
          nameRepeatCount[name]++;
        }
        id != null && (idList[idx] = id);
      }
    }
    if (!rawData.persistent && rawData.clean) {
      rawData.clean();
    }
    this._rawCount = this._count = end2;
    this._extent = {};
    prepareInvertedIndex(this);
  }
  count() {
    return this._count;
  }
  getIndices() {
    let newIndices;
    const indices = this._indices;
    if (indices) {
      const Ctor = indices.constructor;
      const thisCount = this._count;
      if (Ctor === Array) {
        newIndices = new Ctor(thisCount);
        for (let i = 0; i < thisCount; i++) {
          newIndices[i] = indices[i];
        }
      } else {
        newIndices = new Ctor(indices.buffer, 0, thisCount);
      }
    } else {
      const Ctor = getIndicesCtor(this);
      newIndices = new Ctor(this.count());
      for (let i = 0; i < newIndices.length; i++) {
        newIndices[i] = i;
      }
    }
    return newIndices;
  }
  get(dim, idx) {
    if (!(idx >= 0 && idx < this._count)) {
      return NaN;
    }
    const storage2 = this._storage;
    if (!storage2[dim]) {
      return NaN;
    }
    idx = this.getRawIndex(idx);
    const chunkIndex = Math.floor(idx / this._chunkSize);
    const chunkOffset = idx % this._chunkSize;
    const chunkStore = storage2[dim][chunkIndex];
    const value = chunkStore[chunkOffset];
    return value;
  }
  getByRawIndex(dim, rawIdx) {
    if (!(rawIdx >= 0 && rawIdx < this._rawCount)) {
      return NaN;
    }
    const dimStore = this._storage[dim];
    if (!dimStore) {
      return NaN;
    }
    const chunkIndex = Math.floor(rawIdx / this._chunkSize);
    const chunkOffset = rawIdx % this._chunkSize;
    const chunkStore = dimStore[chunkIndex];
    return chunkStore[chunkOffset];
  }
  _getFast(dim, rawIdx) {
    const chunkIndex = Math.floor(rawIdx / this._chunkSize);
    const chunkOffset = rawIdx % this._chunkSize;
    const chunkStore = this._storage[dim][chunkIndex];
    return chunkStore[chunkOffset];
  }
  getValues(dimensions, idx) {
    const values = [];
    if (!isArray(dimensions)) {
      idx = dimensions;
      dimensions = this.dimensions;
    }
    for (let i = 0, len2 = dimensions.length; i < len2; i++) {
      values.push(this.get(dimensions[i], idx));
    }
    return values;
  }
  hasValue(idx) {
    const dataDimsOnCoord = this._dimensionsSummary.dataDimsOnCoord;
    for (let i = 0, len2 = dataDimsOnCoord.length; i < len2; i++) {
      if (isNaN(this.get(dataDimsOnCoord[i], idx))) {
        return false;
      }
    }
    return true;
  }
  getDataExtent(dim) {
    dim = this.getDimension(dim);
    const dimData = this._storage[dim];
    const initialExtent = getInitialExtent();
    if (!dimData) {
      return initialExtent;
    }
    const currEnd = this.count();
    const useRaw = !this._indices;
    let dimExtent;
    if (useRaw) {
      return this._rawExtent[dim].slice();
    }
    dimExtent = this._extent[dim];
    if (dimExtent) {
      return dimExtent.slice();
    }
    dimExtent = initialExtent;
    let min4 = dimExtent[0];
    let max4 = dimExtent[1];
    for (let i = 0; i < currEnd; i++) {
      const value = this._getFast(dim, this.getRawIndex(i));
      value < min4 && (min4 = value);
      value > max4 && (max4 = value);
    }
    dimExtent = [min4, max4];
    this._extent[dim] = dimExtent;
    return dimExtent;
  }
  getApproximateExtent(dim) {
    dim = this.getDimension(dim);
    return this._approximateExtent[dim] || this.getDataExtent(dim);
  }
  setApproximateExtent(extent3, dim) {
    dim = this.getDimension(dim);
    this._approximateExtent[dim] = extent3.slice();
  }
  getCalculationInfo(key) {
    return this._calculationInfo[key];
  }
  setCalculationInfo(key, value) {
    isObject2(key) ? extend(this._calculationInfo, key) : this._calculationInfo[key] = value;
  }
  getSum(dim) {
    const dimData = this._storage[dim];
    let sum2 = 0;
    if (dimData) {
      for (let i = 0, len2 = this.count(); i < len2; i++) {
        const value = this.get(dim, i);
        if (!isNaN(value)) {
          sum2 += value;
        }
      }
    }
    return sum2;
  }
  getMedian(dim) {
    const dimDataArray = [];
    this.each(dim, function(val) {
      if (!isNaN(val)) {
        dimDataArray.push(val);
      }
    });
    const sortedDimDataArray = dimDataArray.sort(function(a, b) {
      return a - b;
    });
    const len2 = this.count();
    return len2 === 0 ? 0 : len2 % 2 === 1 ? sortedDimDataArray[(len2 - 1) / 2] : (sortedDimDataArray[len2 / 2] + sortedDimDataArray[len2 / 2 - 1]) / 2;
  }
  rawIndexOf(dim, value) {
    const invertedIndices = dim && this._invertedIndicesMap[dim];
    if (__DEV__) {
      if (!invertedIndices) {
        throw new Error("Do not supported yet");
      }
    }
    const rawIndex = invertedIndices[value];
    if (rawIndex == null || isNaN(rawIndex)) {
      return INDEX_NOT_FOUND;
    }
    return rawIndex;
  }
  indexOfName(name) {
    for (let i = 0, len2 = this.count(); i < len2; i++) {
      if (this.getName(i) === name) {
        return i;
      }
    }
    return -1;
  }
  indexOfRawIndex(rawIndex) {
    if (rawIndex >= this._rawCount || rawIndex < 0) {
      return -1;
    }
    if (!this._indices) {
      return rawIndex;
    }
    const indices = this._indices;
    const rawDataIndex = indices[rawIndex];
    if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) {
      return rawIndex;
    }
    let left = 0;
    let right = this._count - 1;
    while (left <= right) {
      const mid = (left + right) / 2 | 0;
      if (indices[mid] < rawIndex) {
        left = mid + 1;
      } else if (indices[mid] > rawIndex) {
        right = mid - 1;
      } else {
        return mid;
      }
    }
    return -1;
  }
  indicesOfNearest(dim, value, maxDistance) {
    const storage2 = this._storage;
    const dimData = storage2[dim];
    const nearestIndices = [];
    if (!dimData) {
      return nearestIndices;
    }
    if (maxDistance == null) {
      maxDistance = Infinity;
    }
    let minDist = Infinity;
    let minDiff = -1;
    let nearestIndicesLen = 0;
    for (let i = 0, len2 = this.count(); i < len2; i++) {
      const diff2 = value - this.get(dim, i);
      const dist3 = Math.abs(diff2);
      if (dist3 <= maxDistance) {
        if (dist3 < minDist || dist3 === minDist && diff2 >= 0 && minDiff < 0) {
          minDist = dist3;
          minDiff = diff2;
          nearestIndicesLen = 0;
        }
        if (diff2 === minDiff) {
          nearestIndices[nearestIndicesLen++] = i;
        }
      }
    }
    nearestIndices.length = nearestIndicesLen;
    return nearestIndices;
  }
  getRawDataItem(idx) {
    if (!this._rawData.persistent) {
      const val = [];
      for (let i = 0; i < this.dimensions.length; i++) {
        const dim = this.dimensions[i];
        val.push(this.get(dim, idx));
      }
      return val;
    } else {
      return this._rawData.getItem(this.getRawIndex(idx));
    }
  }
  getName(idx) {
    const rawIndex = this.getRawIndex(idx);
    return this._nameList[rawIndex] || getRawValueFromStore(this, this._nameDimIdx, rawIndex) || "";
  }
  getId(idx) {
    return getId(this, this.getRawIndex(idx));
  }
  each(dims, cb, ctx, ctxCompat) {
    "use strict";
    if (!this._count) {
      return;
    }
    if (typeof dims === "function") {
      ctxCompat = ctx;
      ctx = cb;
      cb = dims;
      dims = [];
    }
    const fCtx = ctx || ctxCompat || this;
    const dimNames = map2(normalizeDimensions(dims), this.getDimension, this);
    if (__DEV__) {
      validateDimensions(this, dimNames);
    }
    const dimSize = dimNames.length;
    for (let i = 0; i < this.count(); i++) {
      switch (dimSize) {
        case 0:
          cb.call(fCtx, i);
          break;
        case 1:
          cb.call(fCtx, this.get(dimNames[0], i), i);
          break;
        case 2:
          cb.call(fCtx, this.get(dimNames[0], i), this.get(dimNames[1], i), i);
          break;
        default:
          let k = 0;
          const value = [];
          for (; k < dimSize; k++) {
            value[k] = this.get(dimNames[k], i);
          }
          value[k] = i;
          cb.apply(fCtx, value);
      }
    }
  }
  filterSelf(dims, cb, ctx, ctxCompat) {
    "use strict";
    if (!this._count) {
      return;
    }
    if (typeof dims === "function") {
      ctxCompat = ctx;
      ctx = cb;
      cb = dims;
      dims = [];
    }
    const fCtx = ctx || ctxCompat || this;
    const dimNames = map2(normalizeDimensions(dims), this.getDimension, this);
    if (__DEV__) {
      validateDimensions(this, dimNames);
    }
    const count2 = this.count();
    const Ctor = getIndicesCtor(this);
    const newIndices = new Ctor(count2);
    const value = [];
    const dimSize = dimNames.length;
    let offset = 0;
    const dim0 = dimNames[0];
    for (let i = 0; i < count2; i++) {
      let keep;
      const rawIdx = this.getRawIndex(i);
      if (dimSize === 0) {
        keep = cb.call(fCtx, i);
      } else if (dimSize === 1) {
        const val = this._getFast(dim0, rawIdx);
        keep = cb.call(fCtx, val, i);
      } else {
        let k = 0;
        for (; k < dimSize; k++) {
          value[k] = this._getFast(dim0, rawIdx);
        }
        value[k] = i;
        keep = cb.apply(fCtx, value);
      }
      if (keep) {
        newIndices[offset++] = rawIdx;
      }
    }
    if (offset < count2) {
      this._indices = newIndices;
    }
    this._count = offset;
    this._extent = {};
    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    return this;
  }
  selectRange(range) {
    "use strict";
    if (!this._count) {
      return;
    }
    const dimensions = [];
    for (const dim in range) {
      if (range.hasOwnProperty(dim)) {
        dimensions.push(dim);
      }
    }
    if (__DEV__) {
      validateDimensions(this, dimensions);
    }
    const dimSize = dimensions.length;
    if (!dimSize) {
      return;
    }
    const originalCount = this.count();
    const Ctor = getIndicesCtor(this);
    const newIndices = new Ctor(originalCount);
    let offset = 0;
    const dim0 = dimensions[0];
    const min4 = range[dim0][0];
    const max4 = range[dim0][1];
    let quickFinished = false;
    if (!this._indices) {
      let idx = 0;
      if (dimSize === 1) {
        const dimStorage = this._storage[dimensions[0]];
        for (let k = 0; k < this._chunkCount; k++) {
          const chunkStorage = dimStorage[k];
          const len2 = Math.min(this._count - k * this._chunkSize, this._chunkSize);
          for (let i = 0; i < len2; i++) {
            const val = chunkStorage[i];
            if (val >= min4 && val <= max4 || isNaN(val)) {
              newIndices[offset++] = idx;
            }
            idx++;
          }
        }
        quickFinished = true;
      } else if (dimSize === 2) {
        const dimStorage = this._storage[dim0];
        const dimStorage2 = this._storage[dimensions[1]];
        const min22 = range[dimensions[1]][0];
        const max22 = range[dimensions[1]][1];
        for (let k = 0; k < this._chunkCount; k++) {
          const chunkStorage = dimStorage[k];
          const chunkStorage2 = dimStorage2[k];
          const len2 = Math.min(this._count - k * this._chunkSize, this._chunkSize);
          for (let i = 0; i < len2; i++) {
            const val = chunkStorage[i];
            const val2 = chunkStorage2[i];
            if ((val >= min4 && val <= max4 || isNaN(val)) && (val2 >= min22 && val2 <= max22 || isNaN(val2))) {
              newIndices[offset++] = idx;
            }
            idx++;
          }
        }
        quickFinished = true;
      }
    }
    if (!quickFinished) {
      if (dimSize === 1) {
        for (let i = 0; i < originalCount; i++) {
          const rawIndex = this.getRawIndex(i);
          const val = this._getFast(dim0, rawIndex);
          if (val >= min4 && val <= max4 || isNaN(val)) {
            newIndices[offset++] = rawIndex;
          }
        }
      } else {
        for (let i = 0; i < originalCount; i++) {
          let keep = true;
          const rawIndex = this.getRawIndex(i);
          for (let k = 0; k < dimSize; k++) {
            const dimk = dimensions[k];
            const val = this._getFast(dimk, rawIndex);
            if (val < range[dimk][0] || val > range[dimk][1]) {
              keep = false;
            }
          }
          if (keep) {
            newIndices[offset++] = this.getRawIndex(i);
          }
        }
      }
    }
    if (offset < originalCount) {
      this._indices = newIndices;
    }
    this._count = offset;
    this._extent = {};
    this.getRawIndex = this._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    return this;
  }
  mapArray(dims, cb, ctx, ctxCompat) {
    "use strict";
    if (typeof dims === "function") {
      ctxCompat = ctx;
      ctx = cb;
      cb = dims;
      dims = [];
    }
    ctx = ctx || ctxCompat || this;
    const result = [];
    this.each(dims, function() {
      result.push(cb && cb.apply(this, arguments));
    }, ctx);
    return result;
  }
  map(dims, cb, ctx, ctxCompat) {
    "use strict";
    const fCtx = ctx || ctxCompat || this;
    const dimNames = map2(normalizeDimensions(dims), this.getDimension, this);
    if (__DEV__) {
      validateDimensions(this, dimNames);
    }
    const list = cloneListForMapAndSample(this, dimNames);
    list._indices = this._indices;
    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    const storage2 = list._storage;
    const tmpRetValue = [];
    const chunkSize = this._chunkSize;
    const dimSize = dimNames.length;
    const dataCount = this.count();
    const values = [];
    const rawExtent = list._rawExtent;
    for (let dataIndex = 0; dataIndex < dataCount; dataIndex++) {
      for (let dimIndex = 0; dimIndex < dimSize; dimIndex++) {
        values[dimIndex] = this.get(dimNames[dimIndex], dataIndex);
      }
      values[dimSize] = dataIndex;
      let retValue = cb && cb.apply(fCtx, values);
      if (retValue != null) {
        if (typeof retValue !== "object") {
          tmpRetValue[0] = retValue;
          retValue = tmpRetValue;
        }
        const rawIndex = this.getRawIndex(dataIndex);
        const chunkIndex = Math.floor(rawIndex / chunkSize);
        const chunkOffset = rawIndex % chunkSize;
        for (let i = 0; i < retValue.length; i++) {
          const dim = dimNames[i];
          const val = retValue[i];
          const rawExtentOnDim = rawExtent[dim];
          const dimStore = storage2[dim];
          if (dimStore) {
            dimStore[chunkIndex][chunkOffset] = val;
          }
          if (val < rawExtentOnDim[0]) {
            rawExtentOnDim[0] = val;
          }
          if (val > rawExtentOnDim[1]) {
            rawExtentOnDim[1] = val;
          }
        }
      }
    }
    return list;
  }
  downSample(dimension, rate, sampleValue, sampleIndex) {
    const list = cloneListForMapAndSample(this, [dimension]);
    const targetStorage = list._storage;
    const frameValues = [];
    let frameSize = Math.floor(1 / rate);
    const dimStore = targetStorage[dimension];
    const len2 = this.count();
    const chunkSize = this._chunkSize;
    const rawExtentOnDim = list._rawExtent[dimension];
    const newIndices = new (getIndicesCtor(this))(len2);
    let offset = 0;
    for (let i = 0; i < len2; i += frameSize) {
      if (frameSize > len2 - i) {
        frameSize = len2 - i;
        frameValues.length = frameSize;
      }
      for (let k = 0; k < frameSize; k++) {
        const dataIdx = this.getRawIndex(i + k);
        const originalChunkIndex = Math.floor(dataIdx / chunkSize);
        const originalChunkOffset = dataIdx % chunkSize;
        frameValues[k] = dimStore[originalChunkIndex][originalChunkOffset];
      }
      const value = sampleValue(frameValues);
      const sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len2 - 1));
      const sampleChunkIndex = Math.floor(sampleFrameIdx / chunkSize);
      const sampleChunkOffset = sampleFrameIdx % chunkSize;
      dimStore[sampleChunkIndex][sampleChunkOffset] = value;
      if (value < rawExtentOnDim[0]) {
        rawExtentOnDim[0] = value;
      }
      if (value > rawExtentOnDim[1]) {
        rawExtentOnDim[1] = value;
      }
      newIndices[offset++] = sampleFrameIdx;
    }
    list._count = offset;
    list._indices = newIndices;
    list.getRawIndex = getRawIndexWithIndices;
    return list;
  }
  getItemModel(idx) {
    const hostModel = this.hostModel;
    const dataItem = this.getRawDataItem(idx);
    return new Model_default(dataItem, hostModel, hostModel && hostModel.ecModel);
  }
  diff(otherList) {
    const thisList = this;
    return new DataDiffer_default(otherList ? otherList.getIndices() : [], this.getIndices(), function(idx) {
      return getId(otherList, idx);
    }, function(idx) {
      return getId(thisList, idx);
    });
  }
  getVisual(key) {
    const visual = this._visual;
    return visual && visual[key];
  }
  setVisual(kvObj, val) {
    this._visual = this._visual || {};
    if (isObject2(kvObj)) {
      extend(this._visual, kvObj);
    } else {
      this._visual[kvObj] = val;
    }
  }
  getItemVisual(idx, key) {
    const itemVisual = this._itemVisuals[idx];
    const val = itemVisual && itemVisual[key];
    if (val == null) {
      return this.getVisual(key);
    }
    return val;
  }
  ensureUniqueItemVisual(idx, key) {
    const itemVisuals = this._itemVisuals;
    let itemVisual = itemVisuals[idx];
    if (!itemVisual) {
      itemVisual = itemVisuals[idx] = {};
    }
    let val = itemVisual[key];
    if (!val) {
      val = this.getVisual(key);
      if (isArray(val)) {
        val = val.slice();
      } else if (isObject2(val)) {
        val = extend({}, val);
      }
      itemVisual[key] = val;
    }
    return val;
  }
  setItemVisual(idx, key, value) {
    const itemVisual = this._itemVisuals[idx] || {};
    this._itemVisuals[idx] = itemVisual;
    if (isObject2(key)) {
      extend(itemVisual, key);
    } else {
      itemVisual[key] = value;
    }
  }
  clearAllVisual() {
    this._visual = {};
    this._itemVisuals = [];
  }
  setLayout(key, val) {
    if (isObject2(key)) {
      for (const name in key) {
        if (key.hasOwnProperty(name)) {
          this.setLayout(name, key[name]);
        }
      }
      return;
    }
    this._layout[key] = val;
  }
  getLayout(key) {
    return this._layout[key];
  }
  getItemLayout(idx) {
    return this._itemLayouts[idx];
  }
  setItemLayout(idx, layout33, merge2) {
    this._itemLayouts[idx] = merge2 ? extend(this._itemLayouts[idx] || {}, layout33) : layout33;
  }
  clearItemLayouts() {
    this._itemLayouts.length = 0;
  }
  setItemGraphicEl(idx, el) {
    const hostModel = this.hostModel;
    if (el) {
      const ecData = getECData(el);
      ecData.dataIndex = idx;
      ecData.dataType = this.dataType;
      ecData.seriesIndex = hostModel && hostModel.seriesIndex;
      if (el.type === "group") {
        el.traverse(setItemDataAndSeriesIndex, el);
      }
    }
    this._graphicEls[idx] = el;
  }
  getItemGraphicEl(idx) {
    return this._graphicEls[idx];
  }
  eachItemGraphicEl(cb, context) {
    each(this._graphicEls, function(el, idx) {
      if (el) {
        cb && cb.call(context, el, idx);
      }
    });
  }
  cloneShallow(list) {
    if (!list) {
      const dimensionInfoList = map2(this.dimensions, this.getDimensionInfo, this);
      list = new List124(dimensionInfoList, this.hostModel);
    }
    list._storage = this._storage;
    transferProperties(list, this);
    if (this._indices) {
      const Ctor = this._indices.constructor;
      if (Ctor === Array) {
        const thisCount = this._indices.length;
        list._indices = new Ctor(thisCount);
        for (let i = 0; i < thisCount; i++) {
          list._indices[i] = this._indices[i];
        }
      } else {
        list._indices = new Ctor(this._indices);
      }
    } else {
      list._indices = null;
    }
    list.getRawIndex = list._indices ? getRawIndexWithIndices : getRawIndexWithoutIndices;
    return list;
  }
  wrapMethod(methodName, injectFunction) {
    const originalMethod = this[methodName];
    if (typeof originalMethod !== "function") {
      return;
    }
    this.__wrappedMethods = this.__wrappedMethods || [];
    this.__wrappedMethods.push(methodName);
    this[methodName] = function() {
      const res = originalMethod.apply(this, arguments);
      return injectFunction.apply(this, [res].concat(slice(arguments)));
    };
  }
}
List124.internalField = function() {
  defaultDimValueGetters = {
    arrayRows: getDimValueSimply,
    objectRows: function(dataItem, dimName, dataIndex, dimIndex) {
      return convertDataValue(dataItem[dimName], this._dimensionInfos[dimName]);
    },
    keyedColumns: getDimValueSimply,
    original: function(dataItem, dimName, dataIndex, dimIndex) {
      const value = dataItem && (dataItem.value == null ? dataItem : dataItem.value);
      if (!this._rawData.pure && isDataItemOption(dataItem)) {
        this.hasItemOption = true;
      }
      return convertDataValue(value instanceof Array ? value[dimIndex] : value, this._dimensionInfos[dimName]);
    },
    typedArray: function(dataItem, dimName, dataIndex, dimIndex) {
      return dataItem[dimIndex];
    }
  };
  function getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {
    return convertDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);
  }
  function convertDataValue(value, dimInfo) {
    const dimType = dimInfo && dimInfo.type;
    if (dimType === "ordinal") {
      const ordinalMeta = dimInfo && dimInfo.ordinalMeta;
      return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;
    }
    if (dimType === "time" && typeof value !== "number" && value != null && value !== "-") {
      value = +parseDate(value);
    }
    return value == null || value === "" ? NaN : +value;
  }
  ;
  prepareInvertedIndex = function(list) {
    const invertedIndicesMap = list._invertedIndicesMap;
    each(invertedIndicesMap, function(invertedIndices, dim) {
      const dimInfo = list._dimensionInfos[dim];
      const ordinalMeta = dimInfo.ordinalMeta;
      if (ordinalMeta) {
        invertedIndices = invertedIndicesMap[dim] = new CtorInt32Array(ordinalMeta.categories.length);
        for (let i = 0; i < invertedIndices.length; i++) {
          invertedIndices[i] = INDEX_NOT_FOUND;
        }
        for (let i = 0; i < list._count; i++) {
          invertedIndices[list.get(dim, i)] = i;
        }
      }
    });
  };
  getRawValueFromStore = function(list, dimIndex, rawIndex) {
    let val;
    if (dimIndex != null) {
      const chunkSize = list._chunkSize;
      const chunkIndex = Math.floor(rawIndex / chunkSize);
      const chunkOffset = rawIndex % chunkSize;
      const dim = list.dimensions[dimIndex];
      const chunk = list._storage[dim][chunkIndex];
      if (chunk) {
        val = chunk[chunkOffset];
        const ordinalMeta = list._dimensionInfos[dim].ordinalMeta;
        if (ordinalMeta && ordinalMeta.categories.length) {
          val = ordinalMeta.categories[val];
        }
      }
    }
    return val;
  };
  getIndicesCtor = function(list) {
    return list._rawCount > 65535 ? CtorUint32Array : CtorUint16Array;
  };
  prepareChunks = function(storage2, dimInfo, chunkSize, chunkCount, end2) {
    const DataCtor = dataCtors[dimInfo.type];
    const lastChunkIndex = chunkCount - 1;
    const dim = dimInfo.name;
    const resizeChunkArray = storage2[dim][lastChunkIndex];
    if (resizeChunkArray && resizeChunkArray.length < chunkSize) {
      const newStore = new DataCtor(Math.min(end2 - lastChunkIndex * chunkSize, chunkSize));
      for (let j = 0; j < resizeChunkArray.length; j++) {
        newStore[j] = resizeChunkArray[j];
      }
      storage2[dim][lastChunkIndex] = newStore;
    }
    for (let k = chunkCount * chunkSize; k < end2; k += chunkSize) {
      storage2[dim].push(new DataCtor(Math.min(end2 - k, chunkSize)));
    }
  };
  getRawIndexWithoutIndices = function(idx) {
    return idx;
  };
  getRawIndexWithIndices = function(idx) {
    if (idx < this._count && idx >= 0) {
      return this._indices[idx];
    }
    return -1;
  };
  getId = function(list, rawIndex) {
    let id = list._idList[rawIndex];
    if (id == null) {
      id = getRawValueFromStore(list, list._idDimIdx, rawIndex);
    }
    if (id == null) {
      id = ID_PREFIX + rawIndex;
    }
    return id;
  };
  normalizeDimensions = function(dimensions) {
    if (!isArray(dimensions)) {
      dimensions = [dimensions];
    }
    return dimensions;
  };
  validateDimensions = function(list, dims) {
    for (let i = 0; i < dims.length; i++) {
      if (!list._dimensionInfos[dims[i]]) {
        console.error("Unkown dimension " + dims[i]);
      }
    }
  };
  cloneListForMapAndSample = function(original, excludeDimensions) {
    const allDimensions = original.dimensions;
    const list = new List124(map2(allDimensions, original.getDimensionInfo, original), original.hostModel);
    transferProperties(list, original);
    const storage2 = list._storage = {};
    const originalStorage = original._storage;
    for (let i = 0; i < allDimensions.length; i++) {
      const dim = allDimensions[i];
      if (originalStorage[dim]) {
        if (indexOf(excludeDimensions, dim) >= 0) {
          storage2[dim] = cloneDimStore(originalStorage[dim]);
          list._rawExtent[dim] = getInitialExtent();
          list._extent[dim] = null;
        } else {
          storage2[dim] = originalStorage[dim];
        }
      }
    }
    return list;
  };
  cloneDimStore = function(originalDimStore) {
    const newDimStore = new Array(originalDimStore.length);
    for (let j = 0; j < originalDimStore.length; j++) {
      newDimStore[j] = cloneChunk(originalDimStore[j]);
    }
    return newDimStore;
  };
  function cloneChunk(originalChunk) {
    const Ctor = originalChunk.constructor;
    return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);
  }
  getInitialExtent = function() {
    return [Infinity, -Infinity];
  };
  setItemDataAndSeriesIndex = function(child) {
    const childECData = getECData(child);
    const thisECData = getECData(this);
    childECData.seriesIndex = thisECData.seriesIndex;
    childECData.dataIndex = thisECData.dataIndex;
    childECData.dataType = thisECData.dataType;
  };
  transferProperties = function(target, source) {
    each(TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function(propName) {
      if (source.hasOwnProperty(propName)) {
        target[propName] = source[propName];
      }
    });
    target.__wrappedMethods = source.__wrappedMethods;
    each(CLONE_PROPERTIES, function(propName) {
      target[propName] = clone2(source[propName]);
    });
    target._calculationInfo = extend({}, source._calculationInfo);
  };
}();
const List_default = List124;

// src/data/helper/completeDimensions.ts
function completeDimensions(sysDims, source, opt) {
  if (!(source instanceof Source_default)) {
    source = Source_default.seriesDataToSource(source);
  }
  opt = opt || {};
  sysDims = (sysDims || []).slice();
  const dimsDef = (opt.dimsDef || []).slice();
  const dataDimNameMap = createHashMap();
  const coordDimNameMap = createHashMap();
  const result = [];
  const dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount);
  for (let i = 0; i < dimCount; i++) {
    const dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {
      name: dimsDef[i]
    });
    const userDimName = dimDefItem.name;
    const resultItem = result[i] = new DataDimensionInfo_default();
    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {
      resultItem.name = resultItem.displayName = userDimName;
      dataDimNameMap.set(userDimName, i);
    }
    dimDefItem.type != null && (resultItem.type = dimDefItem.type);
    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);
  }
  let encodeDef = opt.encodeDef;
  if (!encodeDef && opt.encodeDefaulter) {
    encodeDef = opt.encodeDefaulter(source, dimCount);
  }
  encodeDef = createHashMap(encodeDef);
  encodeDef.each(function(dataDims, coordDim) {
    dataDims = normalizeToArray(dataDims).slice();
    if (dataDims.length === 1 && !isString(dataDims[0]) && dataDims[0] < 0) {
      encodeDef.set(coordDim, false);
      return;
    }
    const validDataDims = encodeDef.set(coordDim, []);
    each(dataDims, function(resultDimIdx, idx) {
      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));
      if (resultDimIdx != null && resultDimIdx < dimCount) {
        validDataDims[idx] = resultDimIdx;
        applyDim(result[resultDimIdx], coordDim, idx);
      }
    });
  });
  let availDimIdx = 0;
  each(sysDims, function(sysDimItem, sysDimIndex) {
    let coordDim;
    let sysDimItemDimsDef;
    let sysDimItemOtherDims;
    if (isString(sysDimItem)) {
      coordDim = sysDimItem;
      sysDimItem = {};
    } else {
      coordDim = sysDimItem.name;
      const ordinalMeta = sysDimItem.ordinalMeta;
      sysDimItem.ordinalMeta = null;
      sysDimItem = clone2(sysDimItem);
      sysDimItem.ordinalMeta = ordinalMeta;
      sysDimItemDimsDef = sysDimItem.dimsDef;
      sysDimItemOtherDims = sysDimItem.otherDims;
      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
    }
    let dataDims = encodeDef.get(coordDim);
    if (dataDims === false) {
      return;
    }
    dataDims = normalizeToArray(dataDims);
    if (!dataDims.length) {
      for (let i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {
        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {
          availDimIdx++;
        }
        availDimIdx < result.length && dataDims.push(availDimIdx++);
      }
    }
    each(dataDims, function(resultDimIdx, coordDimIndex) {
      const resultItem = result[resultDimIdx];
      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);
      if (resultItem.name == null && sysDimItemDimsDef) {
        let sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];
        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {
          name: sysDimItemDimsDefItem
        });
        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;
        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;
      }
      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);
    });
  });
  function applyDim(resultItem, coordDim, coordDimIndex) {
    if (VISUAL_DIMENSIONS.get(coordDim) != null) {
      resultItem.otherDims[coordDim] = coordDimIndex;
    } else {
      resultItem.coordDim = coordDim;
      resultItem.coordDimIndex = coordDimIndex;
      coordDimNameMap.set(coordDim, true);
    }
  }
  const generateCoord = opt.generateCoord;
  let generateCoordCount = opt.generateCoordCount;
  const fromZero = generateCoordCount != null;
  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;
  const extra = generateCoord || "value";
  for (let resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {
    const resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo_default();
    const coordDim = resultItem.coordDim;
    if (coordDim == null) {
      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);
      resultItem.coordDimIndex = 0;
      if (!generateCoord || generateCoordCount <= 0) {
        resultItem.isExtraCoord = true;
      }
      generateCoordCount--;
    }
    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));
    if (resultItem.type == null && (guessOrdinal(source, resultDimIdx, resultItem.name) === BE_ORDINAL.Must || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {
      resultItem.type = "ordinal";
    }
  }
  return result;
}
function getDimCount(source, sysDims, dimsDef, optDimCount) {
  let dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);
  each(sysDims, function(sysDimItem) {
    const sysDimItemDimsDef = sysDimItem.dimsDef;
    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));
  });
  return dimCount;
}
function genName(name, map3, fromZero) {
  if (fromZero || map3.get(name) != null) {
    let i = 0;
    while (map3.get(name + i) != null) {
      i++;
    }
    name += i;
  }
  map3.set(name, true);
  return name;
}
const completeDimensions_default = completeDimensions;

// src/data/helper/createDimensions.ts
function createDimensions_default(source, opt) {
  opt = opt || {};
  return completeDimensions_default(opt.coordDimensions || [], source, {
    dimsDef: opt.dimensionsDefine || source.dimensionsDefine,
    encodeDef: opt.encodeDefine || source.encodeDefine,
    dimCount: opt.dimensionsCount,
    encodeDefaulter: opt.encodeDefaulter,
    generateCoord: opt.generateCoord,
    generateCoordCount: opt.generateCoordCount
  });
}

// src/model/referHelper.ts
class CoordSysInfo {
  constructor(coordSysName) {
    this.coordSysDims = [];
    this.axisMap = createHashMap();
    this.categoryAxisMap = createHashMap();
    this.coordSysName = coordSysName;
  }
}
function getCoordSysInfoBySeries(seriesModel) {
  const coordSysName = seriesModel.get("coordinateSystem");
  const result = new CoordSysInfo(coordSysName);
  const fetch = fetchers[coordSysName];
  if (fetch) {
    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);
    return result;
  }
}
const fetchers = {
  cartesian2d: function(seriesModel, result, axisMap, categoryAxisMap) {
    const xAxisModel = seriesModel.getReferringComponents("xAxis", SINGLE_REFERRING).models[0];
    const yAxisModel = seriesModel.getReferringComponents("yAxis", SINGLE_REFERRING).models[0];
    if (__DEV__) {
      if (!xAxisModel) {
        throw new Error('xAxis "' + retrieve(seriesModel.get("xAxisIndex"), seriesModel.get("xAxisId"), 0) + '" not found');
      }
      if (!yAxisModel) {
        throw new Error('yAxis "' + retrieve(seriesModel.get("xAxisIndex"), seriesModel.get("yAxisId"), 0) + '" not found');
      }
    }
    result.coordSysDims = ["x", "y"];
    axisMap.set("x", xAxisModel);
    axisMap.set("y", yAxisModel);
    if (isCategory(xAxisModel)) {
      categoryAxisMap.set("x", xAxisModel);
      result.firstCategoryDimIndex = 0;
    }
    if (isCategory(yAxisModel)) {
      categoryAxisMap.set("y", yAxisModel);
      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);
    }
  },
  singleAxis: function(seriesModel, result, axisMap, categoryAxisMap) {
    const singleAxisModel = seriesModel.getReferringComponents("singleAxis", SINGLE_REFERRING).models[0];
    if (__DEV__) {
      if (!singleAxisModel) {
        throw new Error("singleAxis should be specified.");
      }
    }
    result.coordSysDims = ["single"];
    axisMap.set("single", singleAxisModel);
    if (isCategory(singleAxisModel)) {
      categoryAxisMap.set("single", singleAxisModel);
      result.firstCategoryDimIndex = 0;
    }
  },
  polar: function(seriesModel, result, axisMap, categoryAxisMap) {
    const polarModel = seriesModel.getReferringComponents("polar", SINGLE_REFERRING).models[0];
    const radiusAxisModel = polarModel.findAxisModel("radiusAxis");
    const angleAxisModel = polarModel.findAxisModel("angleAxis");
    if (__DEV__) {
      if (!angleAxisModel) {
        throw new Error("angleAxis option not found");
      }
      if (!radiusAxisModel) {
        throw new Error("radiusAxis option not found");
      }
    }
    result.coordSysDims = ["radius", "angle"];
    axisMap.set("radius", radiusAxisModel);
    axisMap.set("angle", angleAxisModel);
    if (isCategory(radiusAxisModel)) {
      categoryAxisMap.set("radius", radiusAxisModel);
      result.firstCategoryDimIndex = 0;
    }
    if (isCategory(angleAxisModel)) {
      categoryAxisMap.set("angle", angleAxisModel);
      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);
    }
  },
  geo: function(seriesModel, result, axisMap, categoryAxisMap) {
    result.coordSysDims = ["lng", "lat"];
  },
  parallel: function(seriesModel, result, axisMap, categoryAxisMap) {
    const ecModel = seriesModel.ecModel;
    const parallelModel = ecModel.getComponent("parallel", seriesModel.get("parallelIndex"));
    const coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();
    each(parallelModel.parallelAxisIndex, function(axisIndex, index) {
      const axisModel = ecModel.getComponent("parallelAxis", axisIndex);
      const axisDim = coordSysDims[index];
      axisMap.set(axisDim, axisModel);
      if (isCategory(axisModel) && result.firstCategoryDimIndex == null) {
        categoryAxisMap.set(axisDim, axisModel);
        result.firstCategoryDimIndex = index;
      }
    });
  }
};
function isCategory(axisModel) {
  return axisModel.get("type") === "category";
}

// src/data/helper/dataStackHelper.ts
function enableDataStack(seriesModel, dimensionInfoList, opt) {
  opt = opt || {};
  let byIndex = opt.byIndex;
  const stackedCoordDimension = opt.stackedCoordDimension;
  const mayStack = !!(seriesModel && seriesModel.get("stack"));
  let stackedByDimInfo;
  let stackedDimInfo;
  let stackResultDimension;
  let stackedOverDimension;
  each(dimensionInfoList, function(dimensionInfo, index) {
    if (isString(dimensionInfo)) {
      dimensionInfoList[index] = dimensionInfo = {
        name: dimensionInfo
      };
    }
    if (mayStack && !dimensionInfo.isExtraCoord) {
      if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) {
        stackedByDimInfo = dimensionInfo;
      }
      if (!stackedDimInfo && dimensionInfo.type !== "ordinal" && dimensionInfo.type !== "time" && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) {
        stackedDimInfo = dimensionInfo;
      }
    }
  });
  if (stackedDimInfo && !byIndex && !stackedByDimInfo) {
    byIndex = true;
  }
  if (stackedDimInfo) {
    stackResultDimension = "__\0ecstackresult";
    stackedOverDimension = "__\0ecstackedover";
    if (stackedByDimInfo) {
      stackedByDimInfo.createInvertedIndices = true;
    }
    const stackedDimCoordDim = stackedDimInfo.coordDim;
    const stackedDimType = stackedDimInfo.type;
    let stackedDimCoordIndex = 0;
    each(dimensionInfoList, function(dimensionInfo) {
      if (dimensionInfo.coordDim === stackedDimCoordDim) {
        stackedDimCoordIndex++;
      }
    });
    dimensionInfoList.push({
      name: stackResultDimension,
      coordDim: stackedDimCoordDim,
      coordDimIndex: stackedDimCoordIndex,
      type: stackedDimType,
      isExtraCoord: true,
      isCalculationCoord: true
    });
    stackedDimCoordIndex++;
    dimensionInfoList.push({
      name: stackedOverDimension,
      coordDim: stackedOverDimension,
      coordDimIndex: stackedDimCoordIndex,
      type: stackedDimType,
      isExtraCoord: true,
      isCalculationCoord: true
    });
  }
  return {
    stackedDimension: stackedDimInfo && stackedDimInfo.name,
    stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,
    isStackedByIndex: byIndex,
    stackedOverDimension,
    stackResultDimension
  };
}
function isDimensionStacked(data, stackedDim) {
  return !!stackedDim && stackedDim === data.getCalculationInfo("stackedDimension");
}
function getStackedDimension(data, targetDim) {
  return isDimensionStacked(data, targetDim) ? data.getCalculationInfo("stackResultDimension") : targetDim;
}

// src/chart/helper/createListFromArray.ts
function createListFromArray6(source, seriesModel, opt) {
  opt = opt || {};
  if (!(source instanceof Source_default)) {
    source = Source_default.seriesDataToSource(source);
  }
  const coordSysName = seriesModel.get("coordinateSystem");
  const registeredCoordSys = CoordinateSystem_default.get(coordSysName);
  const coordSysInfo = getCoordSysInfoBySeries(seriesModel);
  let coordSysDimDefs;
  if (coordSysInfo && coordSysInfo.coordSysDims) {
    coordSysDimDefs = map2(coordSysInfo.coordSysDims, function(dim) {
      const dimInfo = {
        name: dim
      };
      const axisModel = coordSysInfo.axisMap.get(dim);
      if (axisModel) {
        const axisType = axisModel.get("type");
        dimInfo.type = getDimensionTypeByAxis(axisType);
      }
      return dimInfo;
    });
  }
  if (!coordSysDimDefs) {
    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ["x", "y"];
  }
  const dimInfoList = createDimensions_default(source, {
    coordDimensions: coordSysDimDefs,
    generateCoord: opt.generateCoord,
    encodeDefaulter: opt.useEncodeDefaulter ? curry(makeSeriesEncodeForAxisCoordSys, coordSysDimDefs, seriesModel) : null
  });
  let firstCategoryDimIndex;
  let hasNameEncode;
  coordSysInfo && each(dimInfoList, function(dimInfo, dimIndex) {
    const coordDim = dimInfo.coordDim;
    const categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);
    if (categoryAxisModel) {
      if (firstCategoryDimIndex == null) {
        firstCategoryDimIndex = dimIndex;
      }
      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();
    }
    if (dimInfo.otherDims.itemName != null) {
      hasNameEncode = true;
    }
  });
  if (!hasNameEncode && firstCategoryDimIndex != null) {
    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;
  }
  const stackCalculationInfo = enableDataStack(seriesModel, dimInfoList);
  const list = new List_default(dimInfoList, seriesModel);
  list.setCalculationInfo(stackCalculationInfo);
  const dimValueGetter2 = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function(itemOpt, dimName, dataIndex, dimIndex) {
    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);
  } : null;
  list.hasItemOption = false;
  list.initData(source, null, dimValueGetter2);
  return list;
}
function isNeedCompleteOrdinalData(source) {
  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {
    const sampleItem = firstDataNotNull(source.data || []);
    return sampleItem != null && !isArray(getDataItemValue(sampleItem));
  }
}
function firstDataNotNull(data) {
  let i = 0;
  while (i < data.length && data[i] == null) {
    i++;
  }
  return data[i];
}
const createListFromArray_default = createListFromArray6;

// src/scale/Scale.ts
class Scale25 {
  constructor(setting) {
    this._setting = setting || {};
    this._extent = [Infinity, -Infinity];
  }
  getSetting(name) {
    return this._setting[name];
  }
  unionExtent(other) {
    const extent3 = this._extent;
    other[0] < extent3[0] && (extent3[0] = other[0]);
    other[1] > extent3[1] && (extent3[1] = other[1]);
  }
  unionExtentFromData(data, dim) {
    this.unionExtent(data.getApproximateExtent(dim));
  }
  getExtent() {
    return this._extent.slice();
  }
  setExtent(start2, end2) {
    const thisExtent = this._extent;
    if (!isNaN(start2)) {
      thisExtent[0] = start2;
    }
    if (!isNaN(end2)) {
      thisExtent[1] = end2;
    }
  }
  isBlank() {
    return this._isBlank;
  }
  setBlank(isBlank) {
    this._isBlank = isBlank;
  }
}
enableClassManagement(Scale25, {
  registerWhenExtend: true
});
const Scale_default = Scale25;

// src/data/OrdinalMeta.ts
class OrdinalMeta4 {
  constructor(opt) {
    this.categories = opt.categories || [];
    this._needCollect = opt.needCollect;
    this._deduplication = opt.deduplication;
  }
  static createByAxisModel(axisModel) {
    const option = axisModel.option;
    const data = option.data;
    const categories = data && map2(data, getName);
    return new OrdinalMeta4({
      categories,
      needCollect: !categories,
      deduplication: option.dedplication !== false
    });
  }
  getOrdinal(category) {
    return this._getOrCreateMap().get(category);
  }
  parseAndCollect(category) {
    let index;
    const needCollect = this._needCollect;
    if (typeof category !== "string" && !needCollect) {
      return category;
    }
    if (needCollect && !this._deduplication) {
      index = this.categories.length;
      this.categories[index] = category;
      return index;
    }
    const map3 = this._getOrCreateMap();
    index = map3.get(category);
    if (index == null) {
      if (needCollect) {
        index = this.categories.length;
        this.categories[index] = category;
        map3.set(category, index);
      } else {
        index = NaN;
      }
    }
    return index;
  }
  _getOrCreateMap() {
    return this._map || (this._map = createHashMap(this.categories));
  }
}
function getName(obj) {
  if (isObject(obj) && obj.value != null) {
    return obj.value;
  } else {
    return obj + "";
  }
}
const OrdinalMeta_default = OrdinalMeta4;

// src/scale/helper.ts
const roundNumber2 = round2;
function intervalScaleNiceTicks(extent3, splitNumber, minInterval, maxInterval) {
  const result = {};
  const span = extent3[1] - extent3[0];
  let interval = result.interval = nice(span / splitNumber, true);
  if (minInterval != null && interval < minInterval) {
    interval = result.interval = minInterval;
  }
  if (maxInterval != null && interval > maxInterval) {
    interval = result.interval = maxInterval;
  }
  const precision = result.intervalPrecision = getIntervalPrecision(interval);
  const niceTickExtent = result.niceTickExtent = [roundNumber2(Math.ceil(extent3[0] / interval) * interval, precision), roundNumber2(Math.floor(extent3[1] / interval) * interval, precision)];
  fixExtent(niceTickExtent, extent3);
  return result;
}
function getIntervalPrecision(interval) {
  return getPrecisionSafe(interval) + 2;
}
function clamp(niceTickExtent, idx, extent3) {
  niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent3[1]), extent3[0]);
}
function fixExtent(niceTickExtent, extent3) {
  !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent3[0]);
  !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent3[1]);
  clamp(niceTickExtent, 0, extent3);
  clamp(niceTickExtent, 1, extent3);
  if (niceTickExtent[0] > niceTickExtent[1]) {
    niceTickExtent[0] = niceTickExtent[1];
  }
}
function contain3(val, extent3) {
  return val >= extent3[0] && val <= extent3[1];
}
function normalize4(val, extent3) {
  if (extent3[1] === extent3[0]) {
    return 0.5;
  }
  return (val - extent3[0]) / (extent3[1] - extent3[0]);
}
function scale3(val, extent3) {
  return val * (extent3[1] - extent3[0]) + extent3[0];
}

// src/scale/Ordinal.ts
class OrdinalScale6 extends Scale_default {
  constructor(setting) {
    super(setting);
    this.type = "ordinal";
    let ordinalMeta = this.getSetting("ordinalMeta");
    if (!ordinalMeta || isArray(ordinalMeta)) {
      ordinalMeta = new OrdinalMeta_default({
        categories: ordinalMeta
      });
    }
    this._ordinalMeta = ordinalMeta;
    this._categorySortInfo = [];
    this._extent = this.getSetting("extent") || [0, ordinalMeta.categories.length - 1];
  }
  parse(val) {
    return typeof val === "string" ? this._ordinalMeta.getOrdinal(val) : Math.round(val);
  }
  contain(rank) {
    rank = this.parse(rank);
    return contain3(rank, this._extent) && this._ordinalMeta.categories[rank] != null;
  }
  normalize(val) {
    val = this.getCategoryIndex(this.parse(val));
    return normalize4(val, this._extent);
  }
  scale(val) {
    val = this.getCategoryIndex(val);
    return Math.round(scale3(val, this._extent));
  }
  getTicks() {
    const ticks = [];
    const extent3 = this._extent;
    let rank = extent3[0];
    while (rank <= extent3[1]) {
      ticks.push(rank);
      rank++;
    }
    return ticks;
  }
  getMinorTicks(splitNumber) {
    return;
  }
  setCategorySortInfo(info) {
    this._categorySortInfo = info;
  }
  getCategorySortInfo() {
    return this._categorySortInfo;
  }
  getCategoryIndex(n) {
    if (this._categorySortInfo.length) {
      return this._categorySortInfo[n].beforeSortIndex;
    } else {
      return n;
    }
  }
  getLabel(n) {
    if (!this.isBlank()) {
      const cateogry = this._ordinalMeta.categories[n];
      return cateogry == null ? "" : cateogry + "";
    }
  }
  count() {
    return this._extent[1] - this._extent[0] + 1;
  }
  unionExtentFromData(data, dim) {
    this.unionExtent(data.getApproximateExtent(dim));
  }
  getOrdinalMeta() {
    return this._ordinalMeta;
  }
  niceTicks() {
  }
  niceExtent() {
  }
}
OrdinalScale6.type = "ordinal";
Scale_default.registerClass(OrdinalScale6);
const Ordinal_default = OrdinalScale6;

// src/scale/Interval.ts
const roundNumber = round2;
class IntervalScale2 extends Scale_default {
  constructor() {
    super(...arguments);
    this.type = "interval";
    this._interval = 0;
    this._intervalPrecision = 2;
  }
  parse(val) {
    return val;
  }
  contain(val) {
    return contain3(val, this._extent);
  }
  normalize(val) {
    return normalize4(val, this._extent);
  }
  scale(val) {
    return scale3(val, this._extent);
  }
  setExtent(start2, end2) {
    const thisExtent = this._extent;
    if (!isNaN(start2)) {
      thisExtent[0] = parseFloat(start2);
    }
    if (!isNaN(end2)) {
      thisExtent[1] = parseFloat(end2);
    }
  }
  unionExtent(other) {
    const extent3 = this._extent;
    other[0] < extent3[0] && (extent3[0] = other[0]);
    other[1] > extent3[1] && (extent3[1] = other[1]);
    this.setExtent(extent3[0], extent3[1]);
  }
  getInterval() {
    return this._interval;
  }
  setInterval(interval) {
    this._interval = interval;
    this._niceExtent = this._extent.slice();
    this._intervalPrecision = getIntervalPrecision(interval);
  }
  getTicks(expandToNicedExtent) {
    const interval = this._interval;
    const extent3 = this._extent;
    const niceTickExtent = this._niceExtent;
    const intervalPrecision = this._intervalPrecision;
    const ticks = [];
    if (!interval) {
      return ticks;
    }
    const safeLimit = 10000;
    if (extent3[0] < niceTickExtent[0]) {
      if (expandToNicedExtent) {
        ticks.push(roundNumber(niceTickExtent[0] - interval, intervalPrecision));
      } else {
        ticks.push(extent3[0]);
      }
    }
    let tick = niceTickExtent[0];
    while (tick <= niceTickExtent[1]) {
      ticks.push(tick);
      tick = roundNumber(tick + interval, intervalPrecision);
      if (tick === ticks[ticks.length - 1]) {
        break;
      }
      if (ticks.length > safeLimit) {
        return [];
      }
    }
    const lastNiceTick = ticks.length ? ticks[ticks.length - 1] : niceTickExtent[1];
    if (extent3[1] > lastNiceTick) {
      if (expandToNicedExtent) {
        ticks.push(roundNumber(lastNiceTick + interval, intervalPrecision));
      } else {
        ticks.push(extent3[1]);
      }
    }
    return ticks;
  }
  getMinorTicks(splitNumber) {
    const ticks = this.getTicks(true);
    const minorTicks = [];
    const extent3 = this.getExtent();
    for (let i = 1; i < ticks.length; i++) {
      const nextTick = ticks[i];
      const prevTick = ticks[i - 1];
      let count2 = 0;
      const minorTicksGroup = [];
      const interval = nextTick - prevTick;
      const minorInterval = interval / splitNumber;
      while (count2 < splitNumber - 1) {
        const minorTick = roundNumber(prevTick + (count2 + 1) * minorInterval);
        if (minorTick > extent3[0] && minorTick < extent3[1]) {
          minorTicksGroup.push(minorTick);
        }
        count2++;
      }
      minorTicks.push(minorTicksGroup);
    }
    return minorTicks;
  }
  getLabel(data, opt) {
    if (data == null) {
      return "";
    }
    let precision = opt && opt.precision;
    if (precision == null) {
      precision = getPrecisionSafe(data) || 0;
    } else if (precision === "auto") {
      precision = this._intervalPrecision;
    }
    const dataNum = roundNumber(data, precision, true);
    return addCommas(dataNum);
  }
  niceTicks(splitNumber, minInterval, maxInterval) {
    splitNumber = splitNumber || 5;
    const extent3 = this._extent;
    let span = extent3[1] - extent3[0];
    if (!isFinite(span)) {
      return;
    }
    if (span < 0) {
      span = -span;
      extent3.reverse();
    }
    const result = intervalScaleNiceTicks(extent3, splitNumber, minInterval, maxInterval);
    this._intervalPrecision = result.intervalPrecision;
    this._interval = result.interval;
    this._niceExtent = result.niceTickExtent;
  }
  niceExtent(opt) {
    const extent3 = this._extent;
    if (extent3[0] === extent3[1]) {
      if (extent3[0] !== 0) {
        const expandSize = extent3[0];
        if (!opt.fixMax) {
          extent3[1] += expandSize / 2;
          extent3[0] -= expandSize / 2;
        } else {
          extent3[0] -= expandSize / 2;
        }
      } else {
        extent3[1] = 1;
      }
    }
    const span = extent3[1] - extent3[0];
    if (!isFinite(span)) {
      extent3[0] = 0;
      extent3[1] = 1;
    }
    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);
    const interval = this._interval;
    if (!opt.fixMin) {
      extent3[0] = roundNumber(Math.floor(extent3[0] / interval) * interval);
    }
    if (!opt.fixMax) {
      extent3[1] = roundNumber(Math.ceil(extent3[1] / interval) * interval);
    }
  }
}
IntervalScale2.type = "interval";
Scale_default.registerClass(IntervalScale2);
const Interval_default = IntervalScale2;

// src/layout/barGrid.ts
const STACK_PREFIX = "__ec_stack_";
const LARGE_BAR_MIN_WIDTH = 0.5;
const LargeArr2 = typeof Float32Array !== "undefined" ? Float32Array : Array;
function getSeriesStackId(seriesModel) {
  return seriesModel.get("stack") || STACK_PREFIX + seriesModel.seriesIndex;
}
function getAxisKey(axis2) {
  return axis2.dim + axis2.index;
}
function getLayoutOnAxis(opt) {
  const params = [];
  const baseAxis = opt.axis;
  const axisKey = "axis0";
  if (baseAxis.type !== "category") {
    return;
  }
  const bandWidth = baseAxis.getBandWidth();
  for (let i = 0; i < opt.count || 0; i++) {
    params.push(defaults({
      bandWidth,
      axisKey,
      stackId: STACK_PREFIX + i
    }, opt));
  }
  const widthAndOffsets = doCalBarWidthAndOffset(params);
  const result = [];
  for (let i = 0; i < opt.count; i++) {
    const item = widthAndOffsets[axisKey][STACK_PREFIX + i];
    item.offsetCenter = item.offset + item.width / 2;
    result.push(item);
  }
  return result;
}
function prepareLayoutBarSeries(seriesType2, ecModel) {
  const seriesModels = [];
  ecModel.eachSeriesByType(seriesType2, function(seriesModel) {
    if (isOnCartesian(seriesModel) && !isInLargeMode(seriesModel)) {
      seriesModels.push(seriesModel);
    }
  });
  return seriesModels;
}
function getValueAxesMinGaps(barSeries) {
  const axisValues = {};
  each(barSeries, function(seriesModel) {
    const cartesian = seriesModel.coordinateSystem;
    const baseAxis = cartesian.getBaseAxis();
    if (baseAxis.type !== "time" && baseAxis.type !== "value") {
      return;
    }
    const data = seriesModel.getData();
    const key = baseAxis.dim + "_" + baseAxis.index;
    const dim = data.mapDimension(baseAxis.dim);
    for (let i = 0, cnt = data.count(); i < cnt; ++i) {
      const value = data.get(dim, i);
      if (!axisValues[key]) {
        axisValues[key] = [value];
      } else {
        axisValues[key].push(value);
      }
    }
  });
  const axisMinGaps = {};
  for (const key in axisValues) {
    if (axisValues.hasOwnProperty(key)) {
      const valuesInAxis = axisValues[key];
      if (valuesInAxis) {
        valuesInAxis.sort(function(a, b) {
          return a - b;
        });
        let min4 = null;
        for (let j = 1; j < valuesInAxis.length; ++j) {
          const delta = valuesInAxis[j] - valuesInAxis[j - 1];
          if (delta > 0) {
            min4 = min4 === null ? delta : Math.min(min4, delta);
          }
        }
        axisMinGaps[key] = min4;
      }
    }
  }
  return axisMinGaps;
}
function makeColumnLayout(barSeries) {
  const axisMinGaps = getValueAxesMinGaps(barSeries);
  const seriesInfoList = [];
  each(barSeries, function(seriesModel) {
    const cartesian = seriesModel.coordinateSystem;
    const baseAxis = cartesian.getBaseAxis();
    const axisExtent = baseAxis.getExtent();
    let bandWidth;
    if (baseAxis.type === "category") {
      bandWidth = baseAxis.getBandWidth();
    } else if (baseAxis.type === "value" || baseAxis.type === "time") {
      const key = baseAxis.dim + "_" + baseAxis.index;
      const minGap = axisMinGaps[key];
      const extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);
      const scale4 = baseAxis.scale.getExtent();
      const scaleSpan = Math.abs(scale4[1] - scale4[0]);
      bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan;
    } else {
      const data = seriesModel.getData();
      bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
    }
    const barWidth = parsePercent3(seriesModel.get("barWidth"), bandWidth);
    const barMaxWidth = parsePercent3(seriesModel.get("barMaxWidth"), bandWidth);
    const barMinWidth = parsePercent3(seriesModel.get("barMinWidth") || 1, bandWidth);
    const barGap = seriesModel.get("barGap");
    const barCategoryGap = seriesModel.get("barCategoryGap");
    seriesInfoList.push({
      bandWidth,
      barWidth,
      barMaxWidth,
      barMinWidth,
      barGap,
      barCategoryGap,
      axisKey: getAxisKey(baseAxis),
      stackId: getSeriesStackId(seriesModel)
    });
  });
  return doCalBarWidthAndOffset(seriesInfoList);
}
function doCalBarWidthAndOffset(seriesInfoList) {
  const columnsMap = {};
  each(seriesInfoList, function(seriesInfo, idx) {
    const axisKey = seriesInfo.axisKey;
    const bandWidth = seriesInfo.bandWidth;
    const columnsOnAxis = columnsMap[axisKey] || {
      bandWidth,
      remainedWidth: bandWidth,
      autoWidthCount: 0,
      categoryGap: null,
      gap: "20%",
      stacks: {}
    };
    const stacks = columnsOnAxis.stacks;
    columnsMap[axisKey] = columnsOnAxis;
    const stackId = seriesInfo.stackId;
    if (!stacks[stackId]) {
      columnsOnAxis.autoWidthCount++;
    }
    stacks[stackId] = stacks[stackId] || {
      width: 0,
      maxWidth: 0
    };
    let barWidth = seriesInfo.barWidth;
    if (barWidth && !stacks[stackId].width) {
      stacks[stackId].width = barWidth;
      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
      columnsOnAxis.remainedWidth -= barWidth;
    }
    const barMaxWidth = seriesInfo.barMaxWidth;
    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
    const barMinWidth = seriesInfo.barMinWidth;
    barMinWidth && (stacks[stackId].minWidth = barMinWidth);
    const barGap = seriesInfo.barGap;
    barGap != null && (columnsOnAxis.gap = barGap);
    const barCategoryGap = seriesInfo.barCategoryGap;
    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
  });
  const result = {};
  each(columnsMap, function(columnsOnAxis, coordSysName) {
    result[coordSysName] = {};
    const stacks = columnsOnAxis.stacks;
    const bandWidth = columnsOnAxis.bandWidth;
    let categoryGapPercent = columnsOnAxis.categoryGap;
    if (categoryGapPercent == null) {
      const columnCount = keys(stacks).length;
      categoryGapPercent = Math.max(35 - columnCount * 4, 15) + "%";
    }
    const categoryGap = parsePercent3(categoryGapPercent, bandWidth);
    const barGapPercent = parsePercent3(columnsOnAxis.gap, 1);
    let remainedWidth = columnsOnAxis.remainedWidth;
    let autoWidthCount = columnsOnAxis.autoWidthCount;
    let autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
    autoWidth = Math.max(autoWidth, 0);
    each(stacks, function(column) {
      const maxWidth = column.maxWidth;
      const minWidth = column.minWidth;
      if (!column.width) {
        let finalWidth = autoWidth;
        if (maxWidth && maxWidth < finalWidth) {
          finalWidth = Math.min(maxWidth, remainedWidth);
        }
        if (minWidth && minWidth > finalWidth) {
          finalWidth = minWidth;
        }
        if (finalWidth !== autoWidth) {
          column.width = finalWidth;
          remainedWidth -= finalWidth + barGapPercent * finalWidth;
          autoWidthCount--;
        }
      } else {
        let finalWidth = column.width;
        if (maxWidth) {
          finalWidth = Math.min(finalWidth, maxWidth);
        }
        if (minWidth) {
          finalWidth = Math.max(finalWidth, minWidth);
        }
        column.width = finalWidth;
        remainedWidth -= finalWidth + barGapPercent * finalWidth;
        autoWidthCount--;
      }
    });
    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
    autoWidth = Math.max(autoWidth, 0);
    let widthSum = 0;
    let lastColumn;
    each(stacks, function(column, idx) {
      if (!column.width) {
        column.width = autoWidth;
      }
      lastColumn = column;
      widthSum += column.width * (1 + barGapPercent);
    });
    if (lastColumn) {
      widthSum -= lastColumn.width * barGapPercent;
    }
    let offset = -widthSum / 2;
    each(stacks, function(column, stackId) {
      result[coordSysName][stackId] = result[coordSysName][stackId] || {
        bandWidth,
        offset,
        width: column.width
      };
      offset += column.width * (1 + barGapPercent);
    });
  });
  return result;
}
function retrieveColumnLayout(barWidthAndOffset, axis2, seriesModel) {
  if (barWidthAndOffset && axis2) {
    const result = barWidthAndOffset[getAxisKey(axis2)];
    if (result != null && seriesModel != null) {
      return result[getSeriesStackId(seriesModel)];
    }
    return result;
  }
}
function layout(seriesType2, ecModel) {
  const seriesModels = prepareLayoutBarSeries(seriesType2, ecModel);
  const barWidthAndOffset = makeColumnLayout(seriesModels);
  const lastStackCoords = {};
  each(seriesModels, function(seriesModel) {
    const data = seriesModel.getData();
    const cartesian = seriesModel.coordinateSystem;
    const baseAxis = cartesian.getBaseAxis();
    const stackId = getSeriesStackId(seriesModel);
    const columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
    const columnOffset = columnLayoutInfo.offset;
    const columnWidth = columnLayoutInfo.width;
    const valueAxis2 = cartesian.getOtherAxis(baseAxis);
    const barMinHeight = seriesModel.get("barMinHeight") || 0;
    lastStackCoords[stackId] = lastStackCoords[stackId] || [];
    data.setLayout({
      bandWidth: columnLayoutInfo.bandWidth,
      offset: columnOffset,
      size: columnWidth
    });
    const valueDim = data.mapDimension(valueAxis2.dim);
    const baseDim = data.mapDimension(baseAxis.dim);
    const stacked = isDimensionStacked(data, valueDim);
    const isValueAxisH = valueAxis2.isHorizontal();
    const valueAxisStart = getValueAxisStart(baseAxis, valueAxis2, stacked);
    for (let idx = 0, len2 = data.count(); idx < len2; idx++) {
      const value = data.get(valueDim, idx);
      const baseValue = data.get(baseDim, idx);
      const sign = value >= 0 ? "p" : "n";
      let baseCoord = valueAxisStart;
      if (stacked) {
        if (!lastStackCoords[stackId][baseValue]) {
          lastStackCoords[stackId][baseValue] = {
            p: valueAxisStart,
            n: valueAxisStart
          };
        }
        baseCoord = lastStackCoords[stackId][baseValue][sign];
      }
      let x;
      let y;
      let width;
      let height;
      if (isValueAxisH) {
        const coord = cartesian.dataToPoint([value, baseValue]);
        x = baseCoord;
        y = coord[1] + columnOffset;
        width = coord[0] - valueAxisStart;
        height = columnWidth;
        if (Math.abs(width) < barMinHeight) {
          width = (width < 0 ? -1 : 1) * barMinHeight;
        }
        if (!isNaN(width)) {
          stacked && (lastStackCoords[stackId][baseValue][sign] += width);
        }
      } else {
        const coord = cartesian.dataToPoint([baseValue, value]);
        x = coord[0] + columnOffset;
        y = baseCoord;
        width = columnWidth;
        height = coord[1] - valueAxisStart;
        if (Math.abs(height) < barMinHeight) {
          height = (height <= 0 ? -1 : 1) * barMinHeight;
        }
        if (!isNaN(height)) {
          stacked && (lastStackCoords[stackId][baseValue][sign] += height);
        }
      }
      data.setItemLayout(idx, {
        x,
        y,
        width,
        height
      });
    }
  });
}
const largeLayout = {
  seriesType: "bar",
  plan: createRenderPlanner_default(),
  reset: function(seriesModel) {
    if (!isOnCartesian(seriesModel) || !isInLargeMode(seriesModel)) {
      return;
    }
    const data = seriesModel.getData();
    const cartesian = seriesModel.coordinateSystem;
    const coordLayout = cartesian.master.getRect();
    const baseAxis = cartesian.getBaseAxis();
    const valueAxis2 = cartesian.getOtherAxis(baseAxis);
    const valueDim = data.mapDimension(valueAxis2.dim);
    const baseDim = data.mapDimension(baseAxis.dim);
    const valueAxisHorizontal = valueAxis2.isHorizontal();
    const valueDimIdx = valueAxisHorizontal ? 0 : 1;
    let barWidth = retrieveColumnLayout(makeColumnLayout([seriesModel]), baseAxis, seriesModel).width;
    if (!(barWidth > LARGE_BAR_MIN_WIDTH)) {
      barWidth = LARGE_BAR_MIN_WIDTH;
    }
    return {
      progress: function(params, data2) {
        const count2 = params.count;
        const largePoints = new LargeArr2(count2 * 2);
        const largeBackgroundPoints = new LargeArr2(count2 * 2);
        const largeDataIndices = new LargeArr2(count2);
        let dataIndex;
        let coord = [];
        const valuePair = [];
        let pointsOffset = 0;
        let idxOffset = 0;
        while ((dataIndex = params.next()) != null) {
          valuePair[valueDimIdx] = data2.get(valueDim, dataIndex);
          valuePair[1 - valueDimIdx] = data2.get(baseDim, dataIndex);
          coord = cartesian.dataToPoint(valuePair, null, coord);
          largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coordLayout.x + coordLayout.width : coord[0];
          largePoints[pointsOffset++] = coord[0];
          largeBackgroundPoints[pointsOffset] = valueAxisHorizontal ? coord[1] : coordLayout.y + coordLayout.height;
          largePoints[pointsOffset++] = coord[1];
          largeDataIndices[idxOffset++] = dataIndex;
        }
        data2.setLayout({
          largePoints,
          largeDataIndices,
          largeBackgroundPoints,
          barWidth,
          valueAxisStart: getValueAxisStart(baseAxis, valueAxis2, false),
          backgroundStart: valueAxisHorizontal ? coordLayout.x : coordLayout.y,
          valueAxisHorizontal
        });
      }
    };
  }
};
function isOnCartesian(seriesModel) {
  return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === "cartesian2d";
}
function isInLargeMode(seriesModel) {
  return seriesModel.pipelineContext && seriesModel.pipelineContext.large;
}
function getValueAxisStart(baseAxis, valueAxis2, stacked) {
  return valueAxis2.toGlobalCoord(valueAxis2.dataToCoord(valueAxis2.type === "log" ? 1 : 0));
}

// src/scale/Time.ts
const mathCeil3 = Math.ceil;
const mathFloor3 = Math.floor;
const ONE_SECOND = 1000;
const ONE_MINUTE = ONE_SECOND * 60;
const ONE_HOUR = ONE_MINUTE * 60;
const ONE_DAY = ONE_HOUR * 24;
const bisect = function(a, x, lo, hi) {
  while (lo < hi) {
    const mid = lo + hi >>> 1;
    if (a[mid][1] < x) {
      lo = mid + 1;
    } else {
      hi = mid;
    }
  }
  return lo;
};
class TimeScale extends Interval_default {
  constructor() {
    super(...arguments);
    this.type = "time";
  }
  getLabel(val) {
    const stepLvl = this._stepLvl;
    const date = new Date(val);
    return formatTime(stepLvl[0], date, this.getSetting("useUTC"));
  }
  niceExtent(opt) {
    const extent3 = this._extent;
    if (extent3[0] === extent3[1]) {
      extent3[0] -= ONE_DAY;
      extent3[1] += ONE_DAY;
    }
    if (extent3[1] === -Infinity && extent3[0] === Infinity) {
      const d = new Date();
      extent3[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
      extent3[0] = extent3[1] - ONE_DAY;
    }
    this.niceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);
    const interval = this._interval;
    if (!opt.fixMin) {
      extent3[0] = round2(mathFloor3(extent3[0] / interval) * interval);
    }
    if (!opt.fixMax) {
      extent3[1] = round2(mathCeil3(extent3[1] / interval) * interval);
    }
  }
  niceTicks(approxTickNum, minInterval, maxInterval) {
    approxTickNum = approxTickNum || 10;
    const extent3 = this._extent;
    const span = extent3[1] - extent3[0];
    let approxInterval = span / approxTickNum;
    if (minInterval != null && approxInterval < minInterval) {
      approxInterval = minInterval;
    }
    if (maxInterval != null && approxInterval > maxInterval) {
      approxInterval = maxInterval;
    }
    const scaleLevelsLen = scaleLevels.length;
    const idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
    const level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
    let interval = level[1];
    if (level[0] === "year") {
      const yearSpan = span / interval;
      const yearStep = nice(yearSpan / approxTickNum, true);
      interval *= yearStep;
    }
    const timezoneOffset = this.getSetting("useUTC") ? 0 : new Date(+extent3[0] || +extent3[1]).getTimezoneOffset() * 60 * 1000;
    const niceExtent = [Math.round(mathCeil3((extent3[0] - timezoneOffset) / interval) * interval + timezoneOffset), Math.round(mathFloor3((extent3[1] - timezoneOffset) / interval) * interval + timezoneOffset)];
    fixExtent(niceExtent, extent3);
    this._stepLvl = level;
    this._interval = interval;
    this._niceExtent = niceExtent;
  }
  parse(val) {
    return +parseDate(val);
  }
  contain(val) {
    return contain3(this.parse(val), this._extent);
  }
  normalize(val) {
    return normalize4(this.parse(val), this._extent);
  }
  scale(val) {
    return scale3(val, this._extent);
  }
}
TimeScale.type = "time";
const scaleLevels = [["hh:mm:ss", ONE_SECOND], ["hh:mm:ss", ONE_SECOND * 5], ["hh:mm:ss", ONE_SECOND * 10], ["hh:mm:ss", ONE_SECOND * 15], ["hh:mm:ss", ONE_SECOND * 30], ["hh:mm\nMM-dd", ONE_MINUTE], ["hh:mm\nMM-dd", ONE_MINUTE * 5], ["hh:mm\nMM-dd", ONE_MINUTE * 10], ["hh:mm\nMM-dd", ONE_MINUTE * 15], ["hh:mm\nMM-dd", ONE_MINUTE * 30], ["hh:mm\nMM-dd", ONE_HOUR], ["hh:mm\nMM-dd", ONE_HOUR * 2], ["hh:mm\nMM-dd", ONE_HOUR * 6], ["hh:mm\nMM-dd", ONE_HOUR * 12], ["MM-dd\nyyyy", ONE_DAY], ["MM-dd\nyyyy", ONE_DAY * 2], ["MM-dd\nyyyy", ONE_DAY * 3], ["MM-dd\nyyyy", ONE_DAY * 4], ["MM-dd\nyyyy", ONE_DAY * 5], ["MM-dd\nyyyy", ONE_DAY * 6], ["week", ONE_DAY * 7], ["MM-dd\nyyyy", ONE_DAY * 10], ["week", ONE_DAY * 14], ["week", ONE_DAY * 21], ["month", ONE_DAY * 31], ["week", ONE_DAY * 42], ["month", ONE_DAY * 62], ["week", ONE_DAY * 70], ["quarter", ONE_DAY * 95], ["month", ONE_DAY * 31 * 4], ["month", ONE_DAY * 31 * 5], ["half-year", ONE_DAY * 380 / 2], ["month", ONE_DAY * 31 * 8], ["month", ONE_DAY * 31 * 10], ["year", ONE_DAY * 380]];
Scale_default.registerClass(TimeScale);
const Time_default = TimeScale;

// src/scale/Log.ts
const scaleProto = Scale_default.prototype;
const intervalScaleProto = Interval_default.prototype;
const getPrecisionSafe2 = getPrecisionSafe;
const roundingErrorFix = round2;
const mathFloor2 = Math.floor;
const mathCeil2 = Math.ceil;
const mathPow3 = Math.pow;
const mathLog = Math.log;
class LogScale extends Scale_default {
  constructor() {
    super(...arguments);
    this.type = "log";
    this.base = 10;
    this._originalScale = new Interval_default();
    this._interval = 0;
  }
  getTicks(expandToNicedExtent) {
    const originalScale = this._originalScale;
    const extent3 = this._extent;
    const originalExtent = originalScale.getExtent();
    const ticks = intervalScaleProto.getTicks.call(this, expandToNicedExtent);
    return map2(ticks, function(val) {
      let powVal = round2(mathPow3(this.base, val));
      powVal = val === extent3[0] && this._fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;
      powVal = val === extent3[1] && this._fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;
      return powVal;
    }, this);
  }
  setExtent(start2, end2) {
    const base2 = this.base;
    start2 = mathLog(start2) / mathLog(base2);
    end2 = mathLog(end2) / mathLog(base2);
    intervalScaleProto.setExtent.call(this, start2, end2);
  }
  getExtent() {
    const base2 = this.base;
    const extent3 = scaleProto.getExtent.call(this);
    extent3[0] = mathPow3(base2, extent3[0]);
    extent3[1] = mathPow3(base2, extent3[1]);
    const originalScale = this._originalScale;
    const originalExtent = originalScale.getExtent();
    this._fixMin && (extent3[0] = fixRoundingError(extent3[0], originalExtent[0]));
    this._fixMax && (extent3[1] = fixRoundingError(extent3[1], originalExtent[1]));
    return extent3;
  }
  unionExtent(extent3) {
    this._originalScale.unionExtent(extent3);
    const base2 = this.base;
    extent3[0] = mathLog(extent3[0]) / mathLog(base2);
    extent3[1] = mathLog(extent3[1]) / mathLog(base2);
    scaleProto.unionExtent.call(this, extent3);
  }
  unionExtentFromData(data, dim) {
    this.unionExtent(data.getApproximateExtent(dim));
  }
  niceTicks(approxTickNum) {
    approxTickNum = approxTickNum || 10;
    const extent3 = this._extent;
    const span = extent3[1] - extent3[0];
    if (span === Infinity || span <= 0) {
      return;
    }
    let interval = quantity(span);
    const err = approxTickNum / span * interval;
    if (err <= 0.5) {
      interval *= 10;
    }
    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
      interval *= 10;
    }
    const niceExtent = [round2(mathCeil2(extent3[0] / interval) * interval), round2(mathFloor2(extent3[1] / interval) * interval)];
    this._interval = interval;
    this._niceExtent = niceExtent;
  }
  niceExtent(opt) {
    intervalScaleProto.niceExtent.call(this, opt);
    this._fixMin = opt.fixMin;
    this._fixMax = opt.fixMax;
  }
  parse(val) {
    return val;
  }
  contain(val) {
    val = mathLog(val) / mathLog(this.base);
    return contain3(val, this._extent);
  }
  normalize(val) {
    val = mathLog(val) / mathLog(this.base);
    return normalize4(val, this._extent);
  }
  scale(val) {
    val = scale3(val, this._extent);
    return mathPow3(this.base, val);
  }
}
LogScale.type = "log";
const proto = LogScale.prototype;
proto.getMinorTicks = intervalScaleProto.getMinorTicks;
proto.getLabel = intervalScaleProto.getLabel;
function fixRoundingError(val, originalVal) {
  return roundingErrorFix(val, getPrecisionSafe2(originalVal));
}
Scale_default.registerClass(LogScale);
const Log_default = LogScale;

// src/coord/scaleRawExtentInfo.ts
class ScaleRawExtentInfo2 {
  constructor(scale4, model65, originalExtent) {
    this._prepareParams(scale4, model65, originalExtent);
  }
  _prepareParams(scale4, model65, dataExtent) {
    if (dataExtent[1] < dataExtent[0]) {
      dataExtent = [NaN, NaN];
    }
    this._dataMin = dataExtent[0];
    this._dataMax = dataExtent[1];
    const isOrdinal = this._isOrdinal = scale4.type === "ordinal";
    this._needCrossZero = model65.getNeedCrossZero();
    const modelMinRaw = this._modelMinRaw = model65.get("min", true);
    if (isFunction(modelMinRaw)) {
      this._modelMinNum = parseAxisModelMinMax(scale4, modelMinRaw({
        min: dataExtent[0],
        max: dataExtent[1]
      }));
    } else if (modelMinRaw !== "dataMin") {
      this._modelMinNum = parseAxisModelMinMax(scale4, modelMinRaw);
    }
    const modelMaxRaw = this._modelMaxRaw = model65.get("max", true);
    if (isFunction(modelMaxRaw)) {
      this._modelMaxNum = parseAxisModelMinMax(scale4, modelMaxRaw({
        min: dataExtent[0],
        max: dataExtent[1]
      }));
    } else if (modelMaxRaw !== "dataMax") {
      this._modelMaxNum = parseAxisModelMinMax(scale4, modelMaxRaw);
    }
    if (isOrdinal) {
      this._axisDataLen = model65.getCategories().length;
    } else {
      const boundaryGap = model65.get("boundaryGap");
      const boundaryGapArr = isArray(boundaryGap) ? boundaryGap : [boundaryGap || 0, boundaryGap || 0];
      if (typeof boundaryGapArr[0] === "boolean" || typeof boundaryGapArr[1] === "boolean") {
        if (__DEV__) {
          console.warn('Boolean type for boundaryGap is only allowed for ordinal axis. Please use string in percentage instead, e.g., "20%". Currently, boundaryGap is set to be 0.');
        }
        this._boundaryGapInner = [0, 0];
      } else {
        this._boundaryGapInner = [parsePercent(boundaryGapArr[0], 1), parsePercent(boundaryGapArr[1], 1)];
      }
    }
  }
  calculate() {
    const isOrdinal = this._isOrdinal;
    const dataMin = this._dataMin;
    const dataMax = this._dataMax;
    const axisDataLen = this._axisDataLen;
    const boundaryGapInner = this._boundaryGapInner;
    const span = !isOrdinal ? dataMax - dataMin || Math.abs(dataMin) : null;
    let min4 = this._modelMinRaw === "dataMin" ? dataMin : this._modelMinNum;
    let max4 = this._modelMaxRaw === "dataMax" ? dataMax : this._modelMaxNum;
    let minFixed = min4 != null;
    let maxFixed = max4 != null;
    if (min4 == null) {
      min4 = isOrdinal ? axisDataLen ? 0 : NaN : dataMin - boundaryGapInner[0] * span;
    }
    if (max4 == null) {
      max4 = isOrdinal ? axisDataLen ? axisDataLen - 1 : NaN : dataMax + boundaryGapInner[1] * span;
    }
    (min4 == null || !isFinite(min4)) && (min4 = NaN);
    (max4 == null || !isFinite(max4)) && (max4 = NaN);
    if (min4 > max4) {
      min4 = NaN;
      max4 = NaN;
    }
    const isBlank = eqNaN(min4) || eqNaN(max4) || isOrdinal && !axisDataLen;
    if (this._needCrossZero) {
      if (min4 > 0 && max4 > 0 && !minFixed) {
        min4 = 0;
      }
      if (min4 < 0 && max4 < 0 && !maxFixed) {
        max4 = 0;
      }
    }
    const determinedMin = this._determinedMin;
    const determinedMax = this._determinedMax;
    if (determinedMin != null) {
      min4 = determinedMin;
      minFixed = true;
    }
    if (determinedMax != null) {
      max4 = determinedMax;
      maxFixed = true;
    }
    return {
      min: min4,
      max: max4,
      minFixed,
      maxFixed,
      isBlank
    };
  }
  modifyDataMinMax(minMaxName, val) {
    if (__DEV__) {
      assert(!this.frozen);
    }
    this[DATA_MIN_MAX_ATTR[minMaxName]] = val;
  }
  setDeterminedMinMax(minMaxName, val) {
    const attr2 = DETERMINED_MIN_MAX_ATTR[minMaxName];
    if (__DEV__) {
      assert(!this.frozen && this[attr2] == null);
    }
    this[attr2] = val;
  }
  freeze() {
    this.frozen = true;
  }
}
const DETERMINED_MIN_MAX_ATTR = {
  min: "_determinedMin",
  max: "_determinedMax"
};
const DATA_MIN_MAX_ATTR = {
  min: "_dataMin",
  max: "_dataMax"
};
function ensureScaleRawExtentInfo(scale4, model65, originalExtent) {
  let rawExtentInfo = scale4.rawExtentInfo;
  if (rawExtentInfo) {
    return rawExtentInfo;
  }
  rawExtentInfo = new ScaleRawExtentInfo2(scale4, model65, originalExtent);
  scale4.rawExtentInfo = rawExtentInfo;
  return rawExtentInfo;
}
function parseAxisModelMinMax(scale4, minMax) {
  return minMax == null ? null : eqNaN(minMax) ? NaN : scale4.parse(minMax);
}

// src/coord/axisHelper.ts
function getScaleExtent(scale4, model65) {
  const scaleType = scale4.type;
  const rawExtentResult = ensureScaleRawExtentInfo(scale4, model65, scale4.getExtent()).calculate();
  scale4.setBlank(rawExtentResult.isBlank);
  let min4 = rawExtentResult.min;
  let max4 = rawExtentResult.max;
  const ecModel = model65.ecModel;
  if (ecModel && scaleType === "time") {
    const barSeriesModels = prepareLayoutBarSeries("bar", ecModel);
    let isBaseAxisAndHasBarSeries = false;
    each(barSeriesModels, function(seriesModel) {
      isBaseAxisAndHasBarSeries = isBaseAxisAndHasBarSeries || seriesModel.getBaseAxis() === model65.axis;
    });
    if (isBaseAxisAndHasBarSeries) {
      const barWidthAndOffset = makeColumnLayout(barSeriesModels);
      const adjustedScale = adjustScaleForOverflow(min4, max4, model65, barWidthAndOffset);
      min4 = adjustedScale.min;
      max4 = adjustedScale.max;
    }
  }
  return {
    extent: [min4, max4],
    fixMin: rawExtentResult.minFixed,
    fixMax: rawExtentResult.maxFixed
  };
}
function adjustScaleForOverflow(min4, max4, model65, barWidthAndOffset) {
  const axisExtent = model65.axis.getExtent();
  const axisLength = axisExtent[1] - axisExtent[0];
  const barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model65.axis);
  if (barsOnCurrentAxis === void 0) {
    return {
      min: min4,
      max: max4
    };
  }
  let minOverflow = Infinity;
  each(barsOnCurrentAxis, function(item) {
    minOverflow = Math.min(item.offset, minOverflow);
  });
  let maxOverflow = -Infinity;
  each(barsOnCurrentAxis, function(item) {
    maxOverflow = Math.max(item.offset + item.width, maxOverflow);
  });
  minOverflow = Math.abs(minOverflow);
  maxOverflow = Math.abs(maxOverflow);
  const totalOverFlow = minOverflow + maxOverflow;
  const oldRange = max4 - min4;
  const oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;
  const overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;
  max4 += overflowBuffer * (maxOverflow / totalOverFlow);
  min4 -= overflowBuffer * (minOverflow / totalOverFlow);
  return {
    min: min4,
    max: max4
  };
}
function niceScaleExtent(scale4, model65) {
  const extentInfo = getScaleExtent(scale4, model65);
  const extent3 = extentInfo.extent;
  const splitNumber = model65.get("splitNumber");
  if (scale4 instanceof Log_default) {
    scale4.base = model65.get("logBase");
  }
  const scaleType = scale4.type;
  scale4.setExtent(extent3[0], extent3[1]);
  scale4.niceExtent({
    splitNumber,
    fixMin: extentInfo.fixMin,
    fixMax: extentInfo.fixMax,
    minInterval: scaleType === "interval" || scaleType === "time" ? model65.get("minInterval") : null,
    maxInterval: scaleType === "interval" || scaleType === "time" ? model65.get("maxInterval") : null
  });
  const interval = model65.get("interval");
  if (interval != null) {
    scale4.setInterval && scale4.setInterval(interval);
  }
}
function createScaleByModel2(model65, axisType) {
  axisType = axisType || model65.get("type");
  if (axisType) {
    switch (axisType) {
      case "category":
        return new Ordinal_default({
          ordinalMeta: model65.getOrdinalMeta ? model65.getOrdinalMeta() : model65.getCategories(),
          extent: [Infinity, -Infinity]
        });
      case "time":
        return new Time_default({
          useUTC: model65.ecModel.get("useUTC")
        });
      default:
        return new (Scale_default.getClass(axisType) || Interval_default)();
    }
  }
}
function ifAxisCrossZero(axis2) {
  const dataExtent = axis2.scale.getExtent();
  const min4 = dataExtent[0];
  const max4 = dataExtent[1];
  return !(min4 > 0 && max4 > 0 || min4 < 0 && max4 < 0);
}
function makeLabelFormatter(axis2) {
  const labelFormatter = axis2.getLabelModel().get("formatter");
  const categoryTickStart = axis2.type === "category" ? axis2.scale.getExtent()[0] : null;
  if (typeof labelFormatter === "string") {
    return function(tpl) {
      return function(val) {
        val = axis2.scale.getLabel(val);
        return tpl.replace("{value}", val != null ? val : "");
      };
    }(labelFormatter);
  } else if (typeof labelFormatter === "function") {
    return function(cb) {
      return function(tickValue, idx) {
        if (categoryTickStart != null) {
          idx = tickValue - categoryTickStart;
        }
        return cb(getAxisRawValue(axis2, tickValue), idx);
      };
    }(labelFormatter);
  } else {
    return function(tick) {
      return axis2.scale.getLabel(tick);
    };
  }
}
function getAxisRawValue(axis2, value) {
  return axis2.type === "category" ? axis2.scale.getLabel(value) : value;
}
function estimateLabelUnionRect(axis2) {
  const axisModel = axis2.model;
  const scale4 = axis2.scale;
  if (!axisModel.get(["axisLabel", "show"]) || scale4.isBlank()) {
    return;
  }
  let realNumberScaleTicks;
  let tickCount;
  const categoryScaleExtent = scale4.getExtent();
  if (scale4 instanceof Ordinal_default) {
    tickCount = scale4.count();
  } else {
    realNumberScaleTicks = scale4.getTicks();
    tickCount = realNumberScaleTicks.length;
  }
  const axisLabelModel = axis2.getLabelModel();
  const labelFormatter = makeLabelFormatter(axis2);
  let rect;
  let step2 = 1;
  if (tickCount > 40) {
    step2 = Math.ceil(tickCount / 40);
  }
  for (let i = 0; i < tickCount; i += step2) {
    const tickValue = realNumberScaleTicks ? realNumberScaleTicks[i] : categoryScaleExtent[0] + i;
    const label = labelFormatter(tickValue, i);
    const unrotatedSingleRect = axisLabelModel.getTextRect(label);
    const singleRect = rotateTextRect(unrotatedSingleRect, axisLabelModel.get("rotate") || 0);
    rect ? rect.union(singleRect) : rect = singleRect;
  }
  return rect;
}
function rotateTextRect(textRect, rotate2) {
  const rotateRadians = rotate2 * Math.PI / 180;
  const beforeWidth = textRect.width;
  const beforeHeight = textRect.height;
  const afterWidth = beforeWidth * Math.cos(rotateRadians) + beforeHeight * Math.sin(rotateRadians);
  const afterHeight = beforeWidth * Math.sin(rotateRadians) + beforeHeight * Math.cos(rotateRadians);
  const rotatedRect = new BoundingRect_default(textRect.x, textRect.y, afterWidth, afterHeight);
  return rotatedRect;
}
function getOptionCategoryInterval(model65) {
  const interval = model65.get("interval");
  return interval == null ? "auto" : interval;
}
function shouldShowAllLabels(axis2) {
  return axis2.type === "category" && getOptionCategoryInterval(axis2.getLabelModel()) === 0;
}
function getDataDimensionsOnAxis(data, axisDim) {
  const dataDimMap = {};
  each(data.mapDimensionsAll(axisDim), function(dataDim) {
    dataDimMap[getStackedDimension(data, dataDim)] = true;
  });
  return keys(dataDimMap);
}
function unionAxisExtentFromData(dataExtent, data, axisDim) {
  if (data) {
    each(getDataDimensionsOnAxis(data, axisDim), function(dim) {
      const seriesExtent = data.getApproximateExtent(dim);
      seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
      seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
    });
  }
}

// src/coord/axisModelCommonMixin.ts
class AxisModelCommonMixin {
  getNeedCrossZero() {
    const option = this.option;
    return !option.scale;
  }
  getCoordSysModel() {
    return;
  }
}

// src/util/symbol.ts
const Triangle = Path_default.extend({
  type: "triangle",
  shape: {
    cx: 0,
    cy: 0,
    width: 0,
    height: 0
  },
  buildPath: function(path2, shape) {
    const cx = shape.cx;
    const cy = shape.cy;
    const width = shape.width / 2;
    const height = shape.height / 2;
    path2.moveTo(cx, cy - height);
    path2.lineTo(cx + width, cy + height);
    path2.lineTo(cx - width, cy + height);
    path2.closePath();
  }
});
const Diamond = Path_default.extend({
  type: "diamond",
  shape: {
    cx: 0,
    cy: 0,
    width: 0,
    height: 0
  },
  buildPath: function(path2, shape) {
    const cx = shape.cx;
    const cy = shape.cy;
    const width = shape.width / 2;
    const height = shape.height / 2;
    path2.moveTo(cx, cy - height);
    path2.lineTo(cx + width, cy);
    path2.lineTo(cx, cy + height);
    path2.lineTo(cx - width, cy);
    path2.closePath();
  }
});
const Pin = Path_default.extend({
  type: "pin",
  shape: {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  },
  buildPath: function(path2, shape) {
    const x = shape.x;
    const y = shape.y;
    const w = shape.width / 5 * 3;
    const h = Math.max(w, shape.height);
    const r = w / 2;
    const dy = r * r / (h - r);
    const cy = y - h + r + dy;
    const angle = Math.asin(dy / r);
    const dx = Math.cos(angle) * r;
    const tanX = Math.sin(angle);
    const tanY = Math.cos(angle);
    const cpLen = r * 0.6;
    const cpLen2 = r * 0.7;
    path2.moveTo(x - dx, cy + dy);
    path2.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
    path2.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
    path2.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
    path2.closePath();
  }
});
const Arrow = Path_default.extend({
  type: "arrow",
  shape: {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  },
  buildPath: function(ctx, shape) {
    const height = shape.height;
    const width = shape.width;
    const x = shape.x;
    const y = shape.y;
    const dx = width / 3 * 2;
    ctx.moveTo(x, y);
    ctx.lineTo(x + dx, y + height);
    ctx.lineTo(x, y + height / 4 * 3);
    ctx.lineTo(x - dx, y + height);
    ctx.lineTo(x, y);
    ctx.closePath();
  }
});
const symbolCtors = {
  line: Rect_default,
  rect: Rect_default,
  roundRect: Rect_default,
  square: Rect_default,
  circle: Circle_default,
  diamond: Diamond,
  pin: Pin,
  arrow: Arrow,
  triangle: Triangle
};
const symbolShapeMakers = {
  line: function(x, y, w, h, shape) {
    const thickness = 2;
    shape.x = x;
    shape.y = y + h / 2 - thickness / 2;
    shape.width = w;
    shape.height = thickness;
  },
  rect: function(x, y, w, h, shape) {
    shape.x = x;
    shape.y = y;
    shape.width = w;
    shape.height = h;
  },
  roundRect: function(x, y, w, h, shape) {
    shape.x = x;
    shape.y = y;
    shape.width = w;
    shape.height = h;
    shape.r = Math.min(w, h) / 4;
  },
  square: function(x, y, w, h, shape) {
    const size = Math.min(w, h);
    shape.x = x;
    shape.y = y;
    shape.width = size;
    shape.height = size;
  },
  circle: function(x, y, w, h, shape) {
    shape.cx = x + w / 2;
    shape.cy = y + h / 2;
    shape.r = Math.min(w, h) / 2;
  },
  diamond: function(x, y, w, h, shape) {
    shape.cx = x + w / 2;
    shape.cy = y + h / 2;
    shape.width = w;
    shape.height = h;
  },
  pin: function(x, y, w, h, shape) {
    shape.x = x + w / 2;
    shape.y = y + h / 2;
    shape.width = w;
    shape.height = h;
  },
  arrow: function(x, y, w, h, shape) {
    shape.x = x + w / 2;
    shape.y = y + h / 2;
    shape.width = w;
    shape.height = h;
  },
  triangle: function(x, y, w, h, shape) {
    shape.cx = x + w / 2;
    shape.cy = y + h / 2;
    shape.width = w;
    shape.height = h;
  }
};
const symbolBuildProxies = {};
each(symbolCtors, function(Ctor, name) {
  symbolBuildProxies[name] = new Ctor();
});
const SymbolClz = Path_default.extend({
  type: "symbol",
  shape: {
    symbolType: "",
    x: 0,
    y: 0,
    width: 0,
    height: 0
  },
  calculateTextPosition(out2, config58, rect) {
    const res = calculateTextPosition(out2, config58, rect);
    const shape = this.shape;
    if (shape && shape.symbolType === "pin" && config58.position === "inside") {
      res.y = rect.y + rect.height * 0.4;
    }
    return res;
  },
  buildPath: function(ctx, shape, inBundle) {
    let symbolType = shape.symbolType;
    if (symbolType !== "none") {
      let proxySymbol = symbolBuildProxies[symbolType];
      if (!proxySymbol) {
        symbolType = "rect";
        proxySymbol = symbolBuildProxies[symbolType];
      }
      symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
      proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
    }
  }
});
function symbolPathSetColor(color8, innerColor) {
  if (this.type !== "image") {
    const symbolStyle = this.style;
    if (this.__isEmptyBrush) {
      symbolStyle.stroke = color8;
      symbolStyle.fill = innerColor || "#fff";
      symbolStyle.lineWidth = 2;
    } else {
      symbolStyle.fill = color8;
    }
    this.markRedraw();
  }
}
function createSymbol(symbolType, x, y, w, h, color8, keepAspect) {
  const isEmpty = symbolType.indexOf("empty") === 0;
  if (isEmpty) {
    symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
  }
  let symbolPath;
  if (symbolType.indexOf("image://") === 0) {
    symbolPath = makeImage(symbolType.slice(8), new BoundingRect_default(x, y, w, h), keepAspect ? "center" : "cover");
  } else if (symbolType.indexOf("path://") === 0) {
    symbolPath = makePath(symbolType.slice(7), {}, new BoundingRect_default(x, y, w, h), keepAspect ? "center" : "cover");
  } else {
    symbolPath = new SymbolClz({
      shape: {
        symbolType,
        x,
        y,
        width: w,
        height: h
      }
    });
  }
  symbolPath.__isEmptyBrush = isEmpty;
  symbolPath.setColor = symbolPathSetColor;
  if (color8) {
    symbolPath.setColor(color8);
  }
  return symbolPath;
}

// src/helper.ts
const helper_exports = {};
__export(helper_exports, {
  createDimensions: () => createDimensions_default,
  createList: () => createList4,
  createScale: () => createScale,
  createSymbol: () => createSymbol,
  dataStack: () => dataStack2,
  getLayoutRect: () => getLayoutRect,
  mixinAxisModelCommonMethods: () => mixinAxisModelCommonMethods
});
function createList4(seriesModel) {
  return createListFromArray_default(seriesModel.getSource(), seriesModel);
}
const dataStack2 = {
  isDimensionStacked,
  enableDataStack,
  getStackedDimension
};
function createScale(dataExtent, option) {
  let axisModel = option;
  if (!(option instanceof Model_default)) {
    axisModel = new Model_default(option);
  }
  const scale4 = createScaleByModel2(axisModel);
  scale4.setExtent(dataExtent[0], dataExtent[1]);
  niceScaleExtent(scale4, axisModel);
  return scale4;
}
function mixinAxisModelCommonMethods(Model128) {
  mixin(Model128, AxisModelCommonMixin);
}

// node_modules/zrender/src/contain/polygon.ts
const EPSILON2 = 1e-08;
function isAroundEqual2(a, b) {
  return Math.abs(a - b) < EPSILON2;
}
function contain2(points9, x, y) {
  let w = 0;
  let p = points9[0];
  if (!p) {
    return false;
  }
  for (let i = 1; i < points9.length; i++) {
    const p2 = points9[i];
    w += windingLine2(p[0], p[1], p2[0], p2[1], x, y);
    p = p2;
  }
  const p0 = points9[0];
  if (!isAroundEqual2(p[0], p0[0]) || !isAroundEqual2(p[1], p0[1])) {
    w += windingLine2(p[0], p[1], p0[0], p0[1], x, y);
  }
  return w !== 0;
}

// src/coord/geo/Region.ts
class Region5 {
  constructor(name, geometries, cp) {
    this.name = name;
    this.geometries = geometries;
    if (!cp) {
      const rect = this.getBoundingRect();
      cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
    } else {
      cp = [cp[0], cp[1]];
    }
    this.center = cp;
  }
  getBoundingRect() {
    const rect = this._rect;
    if (rect) {
      return rect;
    }
    const MAX_NUMBER = Number.MAX_VALUE;
    const min4 = [MAX_NUMBER, MAX_NUMBER];
    const max4 = [-MAX_NUMBER, -MAX_NUMBER];
    const min22 = [];
    const max22 = [];
    const geometries = this.geometries;
    let i = 0;
    for (; i < geometries.length; i++) {
      if (geometries[i].type !== "polygon") {
        continue;
      }
      const exterior = geometries[i].exterior;
      fromPoints(exterior, min22, max22);
      min3(min4, min4, min22);
      max3(max4, max4, max22);
    }
    if (i === 0) {
      min4[0] = min4[1] = max4[0] = max4[1] = 0;
    }
    return this._rect = new BoundingRect_default(min4[0], min4[1], max4[0] - min4[0], max4[1] - min4[1]);
  }
  contain(coord) {
    const rect = this.getBoundingRect();
    const geometries = this.geometries;
    if (!rect.contain(coord[0], coord[1])) {
      return false;
    }
    loopGeo:
      for (let i = 0, len2 = geometries.length; i < len2; i++) {
        if (geometries[i].type !== "polygon") {
          continue;
        }
        const exterior = geometries[i].exterior;
        const interiors = geometries[i].interiors;
        if (contain2(exterior, coord[0], coord[1])) {
          for (let k = 0; k < (interiors ? interiors.length : 0); k++) {
            if (contain2(interiors[k], coord[0], coord[1])) {
              continue loopGeo;
            }
          }
          return true;
        }
      }
    return false;
  }
  transformTo(x, y, width, height) {
    let rect = this.getBoundingRect();
    const aspect = rect.width / rect.height;
    if (!width) {
      width = aspect * height;
    } else if (!height) {
      height = width / aspect;
    }
    const target = new BoundingRect_default(x, y, width, height);
    const transform = rect.calculateTransform(target);
    const geometries = this.geometries;
    for (let i = 0; i < geometries.length; i++) {
      if (geometries[i].type !== "polygon") {
        continue;
      }
      const exterior = geometries[i].exterior;
      const interiors = geometries[i].interiors;
      for (let p = 0; p < exterior.length; p++) {
        applyTransform(exterior[p], exterior[p], transform);
      }
      for (let h = 0; h < (interiors ? interiors.length : 0); h++) {
        for (let p = 0; p < interiors[h].length; p++) {
          applyTransform(interiors[h][p], interiors[h][p], transform);
        }
      }
    }
    rect = this._rect;
    rect.copy(target);
    this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
  }
  cloneShallow(name) {
    name == null && (name = this.name);
    const newRegion = new Region5(name, this.geometries, this.center);
    newRegion._rect = this._rect;
    newRegion.transformTo = null;
    return newRegion;
  }
}
const Region_default = Region5;

// src/coord/geo/parseGeoJson.ts
function decode(json) {
  if (!json.UTF8Encoding) {
    return json;
  }
  const jsonCompressed = json;
  let encodeScale = jsonCompressed.UTF8Scale;
  if (encodeScale == null) {
    encodeScale = 1024;
  }
  const features2 = jsonCompressed.features;
  for (let f = 0; f < features2.length; f++) {
    const feature = features2[f];
    const geometry = feature.geometry;
    if (geometry.type === "Polygon") {
      const coordinates = geometry.coordinates;
      for (let c = 0; c < coordinates.length; c++) {
        coordinates[c] = decodePolygon(coordinates[c], geometry.encodeOffsets[c], encodeScale);
      }
    } else if (geometry.type === "MultiPolygon") {
      const coordinates = geometry.coordinates;
      for (let c = 0; c < coordinates.length; c++) {
        const coordinate = coordinates[c];
        for (let c2 = 0; c2 < coordinate.length; c2++) {
          coordinate[c2] = decodePolygon(coordinate[c2], geometry.encodeOffsets[c][c2], encodeScale);
        }
      }
    }
  }
  jsonCompressed.UTF8Encoding = false;
  return jsonCompressed;
}
function decodePolygon(coordinate, encodeOffsets, encodeScale) {
  const result = [];
  let prevX = encodeOffsets[0];
  let prevY = encodeOffsets[1];
  for (let i = 0; i < coordinate.length; i += 2) {
    let x = coordinate.charCodeAt(i) - 64;
    let y = coordinate.charCodeAt(i + 1) - 64;
    x = x >> 1 ^ -(x & 1);
    y = y >> 1 ^ -(y & 1);
    x += prevX;
    y += prevY;
    prevX = x;
    prevY = y;
    result.push([x / encodeScale, y / encodeScale]);
  }
  return result;
}
function parseGeoJson_default(geoJson, nameProperty) {
  geoJson = decode(geoJson);
  return map2(filter(geoJson.features, function(featureObj) {
    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;
  }), function(featureObj) {
    const properties = featureObj.properties;
    const geo2 = featureObj.geometry;
    const geometries = [];
    if (geo2.type === "Polygon") {
      const coordinates = geo2.coordinates;
      geometries.push({
        type: "polygon",
        exterior: coordinates[0],
        interiors: coordinates.slice(1)
      });
    }
    if (geo2.type === "MultiPolygon") {
      const coordinates = geo2.coordinates;
      each(coordinates, function(item) {
        if (item[0]) {
          geometries.push({
            type: "polygon",
            exterior: item[0],
            interiors: item.slice(1)
          });
        }
      });
    }
    const region = new Region_default(properties[nameProperty || "name"], geometries, properties.cp);
    region.properties = properties;
    return region;
  });
}

// src/coord/axisTickLabelBuilder.ts
const inner14 = makeInner();
function createAxisLabels(axis2) {
  return axis2.type === "category" ? makeCategoryLabels(axis2) : makeRealNumberLabels(axis2);
}
function createAxisTicks(axis2, tickModel) {
  return axis2.type === "category" ? makeCategoryTicks(axis2, tickModel) : {
    ticks: axis2.scale.getTicks()
  };
}
function makeCategoryLabels(axis2) {
  const labelModel = axis2.getLabelModel();
  const result = makeCategoryLabelsActually(axis2, labelModel);
  return !labelModel.get("show") || axis2.scale.isBlank() ? {
    labels: [],
    labelCategoryInterval: result.labelCategoryInterval
  } : result;
}
function makeCategoryLabelsActually(axis2, labelModel) {
  const labelsCache = getListCache(axis2, "labels");
  const optionLabelInterval = getOptionCategoryInterval(labelModel);
  const result = listCacheGet(labelsCache, optionLabelInterval);
  if (result) {
    return result;
  }
  let labels;
  let numericLabelInterval;
  if (isFunction(optionLabelInterval)) {
    labels = makeLabelsByCustomizedCategoryInterval(axis2, optionLabelInterval);
  } else {
    numericLabelInterval = optionLabelInterval === "auto" ? makeAutoCategoryInterval(axis2) : optionLabelInterval;
    labels = makeLabelsByNumericCategoryInterval(axis2, numericLabelInterval);
  }
  return listCacheSet(labelsCache, optionLabelInterval, {
    labels,
    labelCategoryInterval: numericLabelInterval
  });
}
function makeCategoryTicks(axis2, tickModel) {
  const ticksCache = getListCache(axis2, "ticks");
  const optionTickInterval = getOptionCategoryInterval(tickModel);
  const result = listCacheGet(ticksCache, optionTickInterval);
  if (result) {
    return result;
  }
  let ticks;
  let tickCategoryInterval;
  if (!tickModel.get("show") || axis2.scale.isBlank()) {
    ticks = [];
  }
  if (isFunction(optionTickInterval)) {
    ticks = makeLabelsByCustomizedCategoryInterval(axis2, optionTickInterval, true);
  } else if (optionTickInterval === "auto") {
    const labelsResult = makeCategoryLabelsActually(axis2, axis2.getLabelModel());
    tickCategoryInterval = labelsResult.labelCategoryInterval;
    ticks = map2(labelsResult.labels, function(labelItem) {
      return labelItem.tickValue;
    });
  } else {
    tickCategoryInterval = optionTickInterval;
    ticks = makeLabelsByNumericCategoryInterval(axis2, tickCategoryInterval, true);
  }
  return listCacheSet(ticksCache, optionTickInterval, {
    ticks,
    tickCategoryInterval
  });
}
function makeRealNumberLabels(axis2) {
  const ticks = axis2.scale.getTicks();
  const labelFormatter = makeLabelFormatter(axis2);
  return {
    labels: map2(ticks, function(tickValue, idx) {
      return {
        formattedLabel: labelFormatter(tickValue, idx),
        rawLabel: axis2.scale.getLabel(tickValue),
        tickValue
      };
    })
  };
}
function getListCache(axis2, prop) {
  return inner14(axis2)[prop] || (inner14(axis2)[prop] = []);
}
function listCacheGet(cache, key) {
  for (let i = 0; i < cache.length; i++) {
    if (cache[i].key === key) {
      return cache[i].value;
    }
  }
}
function listCacheSet(cache, key, value) {
  cache.push({
    key,
    value
  });
  return value;
}
function makeAutoCategoryInterval(axis2) {
  const result = inner14(axis2).autoInterval;
  return result != null ? result : inner14(axis2).autoInterval = axis2.calculateCategoryInterval();
}
function calculateCategoryInterval(axis2) {
  const params = fetchAutoCategoryIntervalCalculationParams(axis2);
  const labelFormatter = makeLabelFormatter(axis2);
  const rotation = (params.axisRotate - params.labelRotate) / 180 * Math.PI;
  const ordinalScale = axis2.scale;
  const ordinalExtent = ordinalScale.getExtent();
  const tickCount = ordinalScale.count();
  if (ordinalExtent[1] - ordinalExtent[0] < 1) {
    return 0;
  }
  let step2 = 1;
  if (tickCount > 40) {
    step2 = Math.max(1, Math.floor(tickCount / 40));
  }
  let tickValue = ordinalExtent[0];
  const unitSpan = axis2.dataToCoord(tickValue + 1) - axis2.dataToCoord(tickValue);
  const unitW = Math.abs(unitSpan * Math.cos(rotation));
  const unitH = Math.abs(unitSpan * Math.sin(rotation));
  let maxW = 0;
  let maxH = 0;
  for (; tickValue <= ordinalExtent[1]; tickValue += step2) {
    let width = 0;
    let height = 0;
    const rect = getBoundingRect(labelFormatter(tickValue), params.font, "center", "top");
    width = rect.width * 1.3;
    height = rect.height * 1.3;
    maxW = Math.max(maxW, width, 7);
    maxH = Math.max(maxH, height, 7);
  }
  let dw = maxW / unitW;
  let dh = maxH / unitH;
  isNaN(dw) && (dw = Infinity);
  isNaN(dh) && (dh = Infinity);
  let interval = Math.max(0, Math.floor(Math.min(dw, dh)));
  const cache = inner14(axis2.model);
  const axisExtent = axis2.getExtent();
  const lastAutoInterval = cache.lastAutoInterval;
  const lastTickCount = cache.lastTickCount;
  if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 && lastAutoInterval > interval && cache.axisExtend0 === axisExtent[0] && cache.axisExtend1 === axisExtent[1]) {
    interval = lastAutoInterval;
  } else {
    cache.lastTickCount = tickCount;
    cache.lastAutoInterval = interval;
    cache.axisExtend0 = axisExtent[0];
    cache.axisExtend1 = axisExtent[1];
  }
  return interval;
}
function fetchAutoCategoryIntervalCalculationParams(axis2) {
  const labelModel = axis2.getLabelModel();
  return {
    axisRotate: axis2.getRotate ? axis2.getRotate() : axis2.isHorizontal && !axis2.isHorizontal() ? 90 : 0,
    labelRotate: labelModel.get("rotate") || 0,
    font: labelModel.getFont()
  };
}
function makeLabelsByNumericCategoryInterval(axis2, categoryInterval, onlyTick) {
  const labelFormatter = makeLabelFormatter(axis2);
  const ordinalScale = axis2.scale;
  const ordinalExtent = ordinalScale.getExtent();
  const labelModel = axis2.getLabelModel();
  const result = [];
  const step2 = Math.max((categoryInterval || 0) + 1, 1);
  let startTick = ordinalExtent[0];
  const tickCount = ordinalScale.count();
  if (startTick !== 0 && step2 > 1 && tickCount / step2 > 2) {
    startTick = Math.round(Math.ceil(startTick / step2) * step2);
  }
  const showAllLabel = shouldShowAllLabels(axis2);
  const includeMinLabel = labelModel.get("showMinLabel") || showAllLabel;
  const includeMaxLabel = labelModel.get("showMaxLabel") || showAllLabel;
  if (includeMinLabel && startTick !== ordinalExtent[0]) {
    addItem(ordinalExtent[0]);
  }
  let tickValue = startTick;
  for (; tickValue <= ordinalExtent[1]; tickValue += step2) {
    addItem(tickValue);
  }
  if (includeMaxLabel && tickValue - step2 !== ordinalExtent[1]) {
    addItem(ordinalExtent[1]);
  }
  function addItem(tVal) {
    result.push(onlyTick ? tVal : {
      formattedLabel: labelFormatter(tVal),
      rawLabel: ordinalScale.getLabel(tVal),
      tickValue: tVal
    });
  }
  return result;
}
function makeLabelsByCustomizedCategoryInterval(axis2, categoryInterval, onlyTick) {
  const ordinalScale = axis2.scale;
  const labelFormatter = makeLabelFormatter(axis2);
  const result = [];
  each(ordinalScale.getTicks(), function(tickValue) {
    const rawLabel = ordinalScale.getLabel(tickValue);
    if (categoryInterval(tickValue, rawLabel)) {
      result.push(onlyTick ? tickValue : {
        formattedLabel: labelFormatter(tickValue),
        rawLabel,
        tickValue
      });
    }
  });
  return result;
}

// src/coord/Axis.ts
const NORMALIZED_EXTENT = [0, 1];
class Axis14 {
  constructor(dim, scale4, extent3) {
    this.onBand = false;
    this.inverse = false;
    this.dim = dim;
    this.scale = scale4;
    this._extent = extent3 || [0, 0];
  }
  contain(coord) {
    const extent3 = this._extent;
    const min4 = Math.min(extent3[0], extent3[1]);
    const max4 = Math.max(extent3[0], extent3[1]);
    return coord >= min4 && coord <= max4;
  }
  containData(data) {
    return this.scale.contain(data);
  }
  getExtent() {
    return this._extent.slice();
  }
  getPixelPrecision(dataExtent) {
    return getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
  }
  setExtent(start2, end2) {
    const extent3 = this._extent;
    extent3[0] = start2;
    extent3[1] = end2;
  }
  dataToCoord(data, clamp2) {
    let extent3 = this._extent;
    const scale4 = this.scale;
    data = scale4.normalize(data);
    if (this.onBand && scale4.type === "ordinal") {
      extent3 = extent3.slice();
      fixExtentWithBands(extent3, scale4.count());
    }
    return linearMap(data, NORMALIZED_EXTENT, extent3, clamp2);
  }
  coordToData(coord, clamp2) {
    let extent3 = this._extent;
    const scale4 = this.scale;
    if (this.onBand && scale4.type === "ordinal") {
      extent3 = extent3.slice();
      fixExtentWithBands(extent3, scale4.count());
    }
    const t = linearMap(coord, extent3, NORMALIZED_EXTENT, clamp2);
    return this.scale.scale(t);
  }
  pointToData(point, clamp2) {
    return;
  }
  getTicksCoords(opt) {
    opt = opt || {};
    const tickModel = opt.tickModel || this.getTickModel();
    const result = createAxisTicks(this, tickModel);
    const ticks = result.ticks;
    const ticksCoords = map2(ticks, function(tickValue) {
      return {
        coord: this.dataToCoord(tickValue),
        tickValue: this.scale instanceof Ordinal_default ? this.scale.getCategoryIndex(tickValue) : tickValue
      };
    }, this);
    const alignWithLabel = tickModel.get("alignWithLabel");
    fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);
    return ticksCoords;
  }
  getMinorTicksCoords() {
    if (this.scale.type === "ordinal") {
      return [];
    }
    const minorTickModel = this.model.getModel("minorTick");
    let splitNumber = minorTickModel.get("splitNumber");
    if (!(splitNumber > 0 && splitNumber < 100)) {
      splitNumber = 5;
    }
    const minorTicks = this.scale.getMinorTicks(splitNumber);
    const minorTicksCoords = map2(minorTicks, function(minorTicksGroup) {
      return map2(minorTicksGroup, function(minorTick) {
        return {
          coord: this.dataToCoord(minorTick),
          tickValue: minorTick
        };
      }, this);
    }, this);
    return minorTicksCoords;
  }
  getViewLabels() {
    return createAxisLabels(this).labels;
  }
  getLabelModel() {
    return this.model.getModel("axisLabel");
  }
  getTickModel() {
    return this.model.getModel("axisTick");
  }
  getBandWidth() {
    const axisExtent = this._extent;
    const dataExtent = this.scale.getExtent();
    let len2 = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
    len2 === 0 && (len2 = 1);
    const size = Math.abs(axisExtent[1] - axisExtent[0]);
    return Math.abs(size) / len2;
  }
  calculateCategoryInterval() {
    return calculateCategoryInterval(this);
  }
}
function fixExtentWithBands(extent3, nTick) {
  const size = extent3[1] - extent3[0];
  const len2 = nTick;
  const margin = size / len2 / 2;
  extent3[0] += margin;
  extent3[1] -= margin;
}
function fixOnBandTicksCoords(axis2, ticksCoords, alignWithLabel, clamp2) {
  const ticksLen = ticksCoords.length;
  if (!axis2.onBand || alignWithLabel || !ticksLen) {
    return;
  }
  const axisExtent = axis2.getExtent();
  let last;
  let diffSize;
  if (ticksLen === 1) {
    ticksCoords[0].coord = axisExtent[0];
    last = ticksCoords[1] = {
      coord: axisExtent[0]
    };
  } else {
    const crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;
    const shift = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;
    each(ticksCoords, function(ticksItem) {
      ticksItem.coord -= shift / 2;
    });
    const dataExtent = axis2.scale.getExtent();
    diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;
    last = {
      coord: ticksCoords[ticksLen - 1].coord + shift * diffSize
    };
    ticksCoords.push(last);
  }
  const inverse = axisExtent[0] > axisExtent[1];
  if (littleThan2(ticksCoords[0].coord, axisExtent[0])) {
    clamp2 ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();
  }
  if (clamp2 && littleThan2(axisExtent[0], ticksCoords[0].coord)) {
    ticksCoords.unshift({
      coord: axisExtent[0]
    });
  }
  if (littleThan2(axisExtent[1], last.coord)) {
    clamp2 ? last.coord = axisExtent[1] : ticksCoords.pop();
  }
  if (clamp2 && littleThan2(last.coord, axisExtent[1])) {
    ticksCoords.push({
      coord: axisExtent[1]
    });
  }
  function littleThan2(a, b) {
    a = round2(a);
    b = round2(b);
    return inverse ? a > b : a < b;
  }
}
const Axis_default = Axis14;

// src/export.ts
const parseGeoJson3 = parseGeoJson_default;
const ecUtil = {};
each(["map", "each", "filter", "indexOf", "inherits", "reduce", "filter", "bind", "curry", "isArray", "isString", "isObject", "isFunction", "extend", "defaults", "clone", "merge"], function(name) {
  ecUtil[name] = util_exports[name];
});
const GRAPHIC_KEYS = ["extendShape", "extendPath", "makePath", "makeImage", "mergePath", "resizePath", "createIcon", "updateProps", "initProps", "getTransform", "clipPointsByRect", "clipRectByRect", "registerShape", "getShapeClass", "Group", "Image", "Text", "Circle", "Ellipse", "Sector", "Ring", "Polygon", "Polyline", "Rect", "Line", "BezierCurve", "Arc", "IncrementalDisplayable", "CompoundPath", "LinearGradient", "RadialGradient", "BoundingRect"];
const graphic74 = {};
each(GRAPHIC_KEYS, function(name) {
  graphic74[name] = graphic_exports[name];
});

// src/chart/line/LineSeries.ts
class LineSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = LineSeriesModel.type;
    this.hasSymbolVisual = true;
    this.legendSymbol = "line";
  }
  getInitialData(option) {
    if (__DEV__) {
      const coordSys = option.coordinateSystem;
      if (coordSys !== "polar" && coordSys !== "cartesian2d") {
        throw new Error("Line not support coordinateSystem besides cartesian and polar");
      }
    }
    return createListFromArray_default(this.getSource(), this, {
      useEncodeDefaulter: true
    });
  }
}
LineSeriesModel.type = "series.line";
LineSeriesModel.dependencies = ["grid", "polar"];
LineSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "cartesian2d",
  legendHoverLink: true,
  clip: true,
  label: {
    position: "top"
  },
  lineStyle: {
    width: 2,
    type: "solid"
  },
  emphasis: {
    scale: true
  },
  step: false,
  smooth: false,
  smoothMonotone: null,
  symbol: "emptyCircle",
  symbolSize: 4,
  symbolRotate: null,
  showSymbol: true,
  showAllSymbol: "auto",
  connectNulls: false,
  sampling: "none",
  animationEasing: "linear",
  progressive: 0,
  hoverLayerThreshold: Infinity
};
Series_default.registerClass(LineSeriesModel);

// src/chart/helper/labelHelper.ts
function getDefaultLabel(data, dataIndex, interpolatedValues) {
  const labelDims = data.mapDimensionsAll("defaultedLabel");
  const len2 = labelDims.length;
  if (len2 === 1) {
    return interpolatedValues == null ? retrieveRawValue(data, dataIndex, labelDims[0]) : interpolatedValues;
  } else if (len2) {
    const vals = [];
    for (let i = 0; i < labelDims.length; i++) {
      const val = interpolatedValues == null ? retrieveRawValue(data, dataIndex, labelDims[i]) : interpolatedValues;
      vals.push(val);
    }
    return vals.join(" ");
  }
}

// src/chart/helper/Symbol.ts
class Symbol4 extends Group_default {
  constructor(data, idx, seriesScope, opts) {
    super();
    this.updateData(data, idx, seriesScope, opts);
  }
  _createSymbol(symbolType, data, idx, symbolSize, keepAspect) {
    this.removeAll();
    const symbolPath = createSymbol(symbolType, -1, -1, 2, 2, null, keepAspect);
    symbolPath.attr({
      z2: 100,
      culling: true,
      scaleX: symbolSize[0] / 2,
      scaleY: symbolSize[1] / 2
    });
    symbolPath.drift = driftSymbol;
    this._symbolType = symbolType;
    this.add(symbolPath);
  }
  stopSymbolAnimation(toLastFrame) {
    this.childAt(0).stopAnimation(null, toLastFrame);
  }
  getSymbolPath() {
    return this.childAt(0);
  }
  highlight() {
    enterEmphasis(this.childAt(0));
  }
  downplay() {
    leaveEmphasis(this.childAt(0));
  }
  setZ(zlevel, z) {
    const symbolPath = this.childAt(0);
    symbolPath.zlevel = zlevel;
    symbolPath.z = z;
  }
  setDraggable(draggable) {
    const symbolPath = this.childAt(0);
    symbolPath.draggable = draggable;
    symbolPath.cursor = draggable ? "move" : symbolPath.cursor;
  }
  updateData(data, idx, seriesScope, opts) {
    this.silent = false;
    const symbolType = data.getItemVisual(idx, "symbol") || "circle";
    const seriesModel = data.hostModel;
    const symbolSize = Symbol4.getSymbolSize(data, idx);
    const isInit = symbolType !== this._symbolType;
    if (isInit) {
      const keepAspect = data.getItemVisual(idx, "symbolKeepAspect");
      this._createSymbol(symbolType, data, idx, symbolSize, keepAspect);
    } else {
      const symbolPath = this.childAt(0);
      symbolPath.silent = false;
      updateProps(symbolPath, {
        scaleX: symbolSize[0] / 2,
        scaleY: symbolSize[1] / 2
      }, seriesModel, idx);
    }
    this._updateCommon(data, idx, symbolSize, seriesScope, opts);
    if (isInit) {
      const symbolPath = this.childAt(0);
      const target = {
        scaleX: this._sizeX,
        scaleY: this._sizeY,
        style: {
          opacity: symbolPath.style.opacity
        }
      };
      symbolPath.scaleX = symbolPath.scaleY = 0;
      symbolPath.style.opacity = 0;
      initProps(symbolPath, target, seriesModel, idx);
    }
    this._seriesModel = seriesModel;
  }
  _updateCommon(data, idx, symbolSize, seriesScope, opts) {
    const symbolPath = this.childAt(0);
    const seriesModel = data.hostModel;
    let emphasisItemStyle;
    let blurItemStyle;
    let selectItemStyle;
    let focus;
    let blurScope;
    let symbolOffset;
    let labelStatesModels;
    let hoverScale;
    let cursorStyle;
    if (seriesScope) {
      emphasisItemStyle = seriesScope.emphasisItemStyle;
      blurItemStyle = seriesScope.blurItemStyle;
      selectItemStyle = seriesScope.selectItemStyle;
      focus = seriesScope.focus;
      blurScope = seriesScope.blurScope;
      symbolOffset = seriesScope.symbolOffset;
      labelStatesModels = seriesScope.labelStatesModels;
      hoverScale = seriesScope.hoverScale;
      cursorStyle = seriesScope.cursorStyle;
    }
    if (!seriesScope || data.hasItemOption) {
      const itemModel = seriesScope && seriesScope.itemModel ? seriesScope.itemModel : data.getItemModel(idx);
      const emphasisModel = itemModel.getModel("emphasis");
      emphasisItemStyle = emphasisModel.getModel("itemStyle").getItemStyle();
      selectItemStyle = itemModel.getModel(["select", "itemStyle"]).getItemStyle();
      blurItemStyle = itemModel.getModel(["blur", "itemStyle"]).getItemStyle();
      focus = emphasisModel.get("focus");
      blurScope = emphasisModel.get("blurScope");
      symbolOffset = itemModel.getShallow("symbolOffset");
      labelStatesModels = getLabelStatesModels(itemModel);
      hoverScale = emphasisModel.getShallow("scale");
      cursorStyle = itemModel.getShallow("cursor");
    }
    const symbolRotate = data.getItemVisual(idx, "symbolRotate");
    symbolPath.attr("rotation", (symbolRotate || 0) * Math.PI / 180 || 0);
    if (symbolOffset) {
      symbolPath.x = parsePercent3(symbolOffset[0], symbolSize[0]);
      symbolPath.y = parsePercent3(symbolOffset[1], symbolSize[1]);
    }
    cursorStyle && symbolPath.attr("cursor", cursorStyle);
    const symbolStyle = data.getItemVisual(idx, "style");
    const visualColor = symbolStyle.fill;
    if (symbolPath instanceof Image_default) {
      const pathStyle = symbolPath.style;
      symbolPath.useStyle(extend({
        image: pathStyle.image,
        x: pathStyle.x,
        y: pathStyle.y,
        width: pathStyle.width,
        height: pathStyle.height
      }, symbolStyle));
    } else {
      if (symbolPath.__isEmptyBrush) {
        symbolPath.useStyle(extend({}, symbolStyle));
      } else {
        symbolPath.useStyle(symbolStyle);
      }
      symbolPath.setColor(visualColor, opts && opts.symbolInnerColor);
      symbolPath.style.strokeNoScale = true;
    }
    const liftZ = data.getItemVisual(idx, "liftZ");
    const z2Origin = this._z2;
    if (liftZ != null) {
      if (z2Origin == null) {
        this._z2 = symbolPath.z2;
        symbolPath.z2 += liftZ;
      }
    } else if (z2Origin != null) {
      symbolPath.z2 = z2Origin;
      this._z2 = null;
    }
    const useNameLabel = opts && opts.useNameLabel;
    setLabelStyle(symbolPath, labelStatesModels, {
      labelFetcher: seriesModel,
      labelDataIndex: idx,
      defaultText: getLabelDefaultText,
      inheritColor: visualColor
    });
    function getLabelDefaultText(idx2) {
      return useNameLabel ? data.getName(idx2) : getDefaultLabel(data, idx2);
    }
    this._sizeX = symbolSize[0] / 2;
    this._sizeY = symbolSize[1] / 2;
    symbolPath.ensureState("emphasis").style = emphasisItemStyle;
    symbolPath.ensureState("select").style = selectItemStyle;
    symbolPath.ensureState("blur").style = blurItemStyle;
    if (hoverScale) {
      this.ensureState("emphasis");
      this.setSymbolScale(1);
    } else {
      this.states.emphasis = null;
    }
    enableHoverEmphasis(this, focus, blurScope);
  }
  setSymbolScale(scale4) {
    const emphasisState = this.states.emphasis;
    if (emphasisState) {
      const hoverScale = Math.max(scale4 * 1.1, 3 / this._sizeY + scale4);
      emphasisState.scaleX = hoverScale;
      emphasisState.scaleY = hoverScale;
    }
    this.scaleX = this.scaleY = scale4;
  }
  fadeOut(cb, opt) {
    const symbolPath = this.childAt(0);
    this.silent = symbolPath.silent = true;
    !(opt && opt.keepLabel) && symbolPath.removeTextContent();
    removeElement(symbolPath, {
      style: {
        opacity: 0
      },
      scaleX: 0,
      scaleY: 0
    }, this._seriesModel, getECData(this).dataIndex, cb);
  }
  static getSymbolSize(data, idx) {
    const symbolSize = data.getItemVisual(idx, "symbolSize");
    return symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
  }
}
function driftSymbol(dx, dy) {
  this.parent.drift(dx, dy);
}
const Symbol_default = Symbol4;

// src/chart/helper/SymbolDraw.ts
function symbolNeedsDraw(data, point, idx, opt) {
  return point && !isNaN(point[0]) && !isNaN(point[1]) && !(opt.isIgnore && opt.isIgnore(idx)) && !(opt.clipShape && !opt.clipShape.contain(point[0], point[1])) && data.getItemVisual(idx, "symbol") !== "none";
}
function normalizeUpdateOpt(opt) {
  if (opt != null && !isObject(opt)) {
    opt = {
      isIgnore: opt
    };
  }
  return opt || {};
}
function makeSeriesScope2(data) {
  const seriesModel = data.hostModel;
  const emphasisModel = seriesModel.getModel("emphasis");
  return {
    emphasisItemStyle: emphasisModel.getModel("itemStyle").getItemStyle(),
    blurItemStyle: seriesModel.getModel(["blur", "itemStyle"]).getItemStyle(),
    selectItemStyle: seriesModel.getModel(["select", "itemStyle"]).getItemStyle(),
    focus: emphasisModel.get("focus"),
    blurScope: emphasisModel.get("blurScope"),
    symbolRotate: seriesModel.get("symbolRotate"),
    symbolOffset: seriesModel.get("symbolOffset"),
    hoverScale: emphasisModel.get("scale"),
    labelStatesModels: getLabelStatesModels(seriesModel),
    cursorStyle: seriesModel.get("cursor")
  };
}
class SymbolDraw5 {
  constructor(SymbolCtor) {
    this.group = new Group_default();
    this._SymbolCtor = SymbolCtor || Symbol_default;
  }
  updateData(data, opt) {
    opt = normalizeUpdateOpt(opt);
    const group = this.group;
    const seriesModel = data.hostModel;
    const oldData = this._data;
    const SymbolCtor = this._SymbolCtor;
    const seriesScope = makeSeriesScope2(data);
    if (!oldData) {
      group.removeAll();
    }
    data.diff(oldData).add(function(newIdx) {
      const point = data.getItemLayout(newIdx);
      if (symbolNeedsDraw(data, point, newIdx, opt)) {
        const symbolEl = new SymbolCtor(data, newIdx, seriesScope);
        symbolEl.setPosition(point);
        data.setItemGraphicEl(newIdx, symbolEl);
        group.add(symbolEl);
      }
    }).update(function(newIdx, oldIdx) {
      let symbolEl = oldData.getItemGraphicEl(oldIdx);
      const point = data.getItemLayout(newIdx);
      if (!symbolNeedsDraw(data, point, newIdx, opt)) {
        group.remove(symbolEl);
        return;
      }
      if (!symbolEl) {
        symbolEl = new SymbolCtor(data, newIdx);
        symbolEl.setPosition(point);
      } else {
        symbolEl.updateData(data, newIdx, seriesScope);
        updateProps(symbolEl, {
          x: point[0],
          y: point[1]
        }, seriesModel);
      }
      group.add(symbolEl);
      data.setItemGraphicEl(newIdx, symbolEl);
    }).remove(function(oldIdx) {
      const el = oldData.getItemGraphicEl(oldIdx);
      el && el.fadeOut(function() {
        group.remove(el);
      });
    }).execute();
    this._data = data;
  }
  isPersistent() {
    return true;
  }
  updateLayout() {
    const data = this._data;
    if (data) {
      data.eachItemGraphicEl(function(el, idx) {
        const point = data.getItemLayout(idx);
        el.setPosition(point);
        el.markRedraw();
      });
    }
  }
  incrementalPrepareUpdate(data) {
    this._seriesScope = makeSeriesScope2(data);
    this._data = null;
    this.group.removeAll();
  }
  incrementalUpdate(taskParams, data, opt) {
    opt = normalizeUpdateOpt(opt);
    function updateIncrementalAndHover(el) {
      if (!el.isGroup) {
        el.incremental = true;
        el.ensureState("emphasis").hoverLayer = true;
      }
    }
    for (let idx = taskParams.start; idx < taskParams.end; idx++) {
      const point = data.getItemLayout(idx);
      if (symbolNeedsDraw(data, point, idx, opt)) {
        const el = new this._SymbolCtor(data, idx, this._seriesScope);
        el.traverse(updateIncrementalAndHover);
        el.setPosition(point);
        this.group.add(el);
        data.setItemGraphicEl(idx, el);
      }
    }
  }
  remove(enableAnimation) {
    const group = this.group;
    const data = this._data;
    if (data && enableAnimation) {
      data.eachItemGraphicEl(function(el) {
        el.fadeOut(function() {
          group.remove(el);
        });
      });
    } else {
      group.removeAll();
    }
  }
}
const SymbolDraw_default = SymbolDraw5;

// src/chart/line/helper.ts
function prepareDataCoordInfo(coordSys, data, valueOrigin) {
  const baseAxis = coordSys.getBaseAxis();
  const valueAxis2 = coordSys.getOtherAxis(baseAxis);
  const valueStart = getValueStart(valueAxis2, valueOrigin);
  const baseAxisDim = baseAxis.dim;
  const valueAxisDim = valueAxis2.dim;
  const valueDim = data.mapDimension(valueAxisDim);
  const baseDim = data.mapDimension(baseAxisDim);
  const baseDataOffset = valueAxisDim === "x" || valueAxisDim === "radius" ? 1 : 0;
  const dims = map2(coordSys.dimensions, function(coordDim) {
    return data.mapDimension(coordDim);
  });
  let stacked = false;
  const stackResultDim = data.getCalculationInfo("stackResultDimension");
  if (isDimensionStacked(data, dims[0])) {
    stacked = true;
    dims[0] = stackResultDim;
  }
  if (isDimensionStacked(data, dims[1])) {
    stacked = true;
    dims[1] = stackResultDim;
  }
  return {
    dataDimsForPoint: dims,
    valueStart,
    valueAxisDim,
    baseAxisDim,
    stacked: !!stacked,
    valueDim,
    baseDim,
    baseDataOffset,
    stackedOverDimension: data.getCalculationInfo("stackedOverDimension")
  };
}
function getValueStart(valueAxis2, valueOrigin) {
  let valueStart = 0;
  const extent3 = valueAxis2.scale.getExtent();
  if (valueOrigin === "start") {
    valueStart = extent3[0];
  } else if (valueOrigin === "end") {
    valueStart = extent3[1];
  } else {
    if (extent3[0] > 0) {
      valueStart = extent3[0];
    } else if (extent3[1] < 0) {
      valueStart = extent3[1];
    }
  }
  return valueStart;
}
function getStackedOnPoint(dataCoordInfo, coordSys, data, idx) {
  let value = NaN;
  if (dataCoordInfo.stacked) {
    value = data.get(data.getCalculationInfo("stackedOverDimension"), idx);
  }
  if (isNaN(value)) {
    value = dataCoordInfo.valueStart;
  }
  const baseDataOffset = dataCoordInfo.baseDataOffset;
  const stackedData = [];
  stackedData[baseDataOffset] = data.get(dataCoordInfo.baseDim, idx);
  stackedData[1 - baseDataOffset] = value;
  return coordSys.dataToPoint(stackedData);
}

// src/chart/line/lineAnimationDiff.ts
function diffData(oldData, newData) {
  const diffResult = [];
  newData.diff(oldData).add(function(idx) {
    diffResult.push({
      cmd: "+",
      idx
    });
  }).update(function(newIdx, oldIdx) {
    diffResult.push({
      cmd: "=",
      idx: oldIdx,
      idx1: newIdx
    });
  }).remove(function(idx) {
    diffResult.push({
      cmd: "-",
      idx
    });
  }).execute();
  return diffResult;
}
function lineAnimationDiff_default(oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys, oldValueOrigin, newValueOrigin) {
  const diff2 = diffData(oldData, newData);
  const currPoints = [];
  const nextPoints = [];
  const currStackedPoints = [];
  const nextStackedPoints = [];
  const status = [];
  const sortedIndices = [];
  const rawIndices = [];
  const newDataOldCoordInfo = prepareDataCoordInfo(oldCoordSys, newData, oldValueOrigin);
  const oldDataNewCoordInfo = prepareDataCoordInfo(newCoordSys, oldData, newValueOrigin);
  for (let i = 0; i < diff2.length; i++) {
    const diffItem = diff2[i];
    let pointAdded = true;
    switch (diffItem.cmd) {
      case "=":
        let currentPt = oldData.getItemLayout(diffItem.idx);
        const nextPt = newData.getItemLayout(diffItem.idx1);
        if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
          currentPt = nextPt.slice();
        }
        currPoints.push(currentPt);
        nextPoints.push(nextPt);
        currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
        nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);
        rawIndices.push(newData.getRawIndex(diffItem.idx1));
        break;
      case "+":
        const idxAdd = diffItem.idx;
        currPoints.push(oldCoordSys.dataToPoint([newData.get(newDataOldCoordInfo.dataDimsForPoint[0], idxAdd), newData.get(newDataOldCoordInfo.dataDimsForPoint[1], idxAdd)]));
        nextPoints.push(newData.getItemLayout(idxAdd).slice());
        currStackedPoints.push(getStackedOnPoint(newDataOldCoordInfo, oldCoordSys, newData, idxAdd));
        nextStackedPoints.push(newStackedOnPoints[idxAdd]);
        rawIndices.push(newData.getRawIndex(idxAdd));
        break;
      case "-":
        const idxMinus = diffItem.idx;
        const rawIndex = oldData.getRawIndex(idxMinus);
        if (rawIndex !== idxMinus) {
          currPoints.push(oldData.getItemLayout(idxMinus));
          nextPoints.push(newCoordSys.dataToPoint([oldData.get(oldDataNewCoordInfo.dataDimsForPoint[0], idxMinus), oldData.get(oldDataNewCoordInfo.dataDimsForPoint[1], idxMinus)]));
          currStackedPoints.push(oldStackedOnPoints[idxMinus]);
          nextStackedPoints.push(getStackedOnPoint(oldDataNewCoordInfo, newCoordSys, oldData, idxMinus));
          rawIndices.push(rawIndex);
        } else {
          pointAdded = false;
        }
    }
    if (pointAdded) {
      status.push(diffItem);
      sortedIndices.push(sortedIndices.length);
    }
  }
  sortedIndices.sort(function(a, b) {
    return rawIndices[a] - rawIndices[b];
  });
  const sortedCurrPoints = [];
  const sortedNextPoints = [];
  const sortedCurrStackedPoints = [];
  const sortedNextStackedPoints = [];
  const sortedStatus = [];
  for (let i = 0; i < sortedIndices.length; i++) {
    const idx = sortedIndices[i];
    sortedCurrPoints[i] = currPoints[idx];
    sortedNextPoints[i] = nextPoints[idx];
    sortedCurrStackedPoints[i] = currStackedPoints[idx];
    sortedNextStackedPoints[i] = nextStackedPoints[idx];
    sortedStatus[i] = status[idx];
  }
  return {
    current: sortedCurrPoints,
    next: sortedNextPoints,
    stackedOnCurrent: sortedCurrStackedPoints,
    stackedOnNext: sortedNextStackedPoints,
    status: sortedStatus
  };
}

// src/chart/line/poly.ts
const vec2Min = min3;
const vec2Max = max3;
const scaleAndAdd3 = scaleAndAdd;
const v2Copy = copy2;
const v = [];
const cp0 = [];
const cp1 = [];
function isPointNull(p) {
  return isNaN(p[0]) || isNaN(p[1]);
}
function drawSegment(ctx, points9, start2, segLen, allLen, dir3, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
  return (smoothMonotone === "none" || !smoothMonotone ? drawNonMono : drawMono)(ctx, points9, start2, segLen, allLen, dir3, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls);
}
function drawMono(ctx, points9, start2, segLen, allLen, dir3, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
  let prevIdx = 0;
  let idx = start2;
  let k = 0;
  for (; k < segLen; k++) {
    const p = points9[idx];
    if (idx >= allLen || idx < 0) {
      break;
    }
    if (isPointNull(p)) {
      if (connectNulls) {
        idx += dir3;
        continue;
      }
      break;
    }
    if (idx === start2) {
      ctx[dir3 > 0 ? "moveTo" : "lineTo"](p[0], p[1]);
    } else {
      if (smooth > 0) {
        const prevP = points9[prevIdx];
        const dim = smoothMonotone === "y" ? 1 : 0;
        const ctrlLen = (p[dim] - prevP[dim]) * smooth;
        v2Copy(cp0, prevP);
        cp0[dim] = prevP[dim] + ctrlLen;
        v2Copy(cp1, p);
        cp1[dim] = p[dim] - ctrlLen;
        ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]);
      } else {
        ctx.lineTo(p[0], p[1]);
      }
    }
    prevIdx = idx;
    idx += dir3;
  }
  return k;
}
function drawNonMono(ctx, points9, start2, segLen, allLen, dir3, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls) {
  let prevIdx = 0;
  let idx = start2;
  let k = 0;
  for (; k < segLen; k++) {
    const p = points9[idx];
    if (idx >= allLen || idx < 0) {
      break;
    }
    if (isPointNull(p)) {
      if (connectNulls) {
        idx += dir3;
        continue;
      }
      break;
    }
    if (idx === start2) {
      ctx[dir3 > 0 ? "moveTo" : "lineTo"](p[0], p[1]);
      v2Copy(cp0, p);
    } else {
      if (smooth > 0) {
        let nextIdx = idx + dir3;
        let nextP = points9[nextIdx];
        if (connectNulls) {
          while (nextP && isPointNull(points9[nextIdx])) {
            nextIdx += dir3;
            nextP = points9[nextIdx];
          }
        }
        let ratioNextSeg = 0.5;
        const prevP = points9[prevIdx];
        nextP = points9[nextIdx];
        if (!nextP || isPointNull(nextP)) {
          v2Copy(cp1, p);
        } else {
          if (isPointNull(nextP) && !connectNulls) {
            nextP = p;
          }
          sub(v, nextP, prevP);
          let lenPrevSeg;
          let lenNextSeg;
          if (smoothMonotone === "x" || smoothMonotone === "y") {
            const dim = smoothMonotone === "x" ? 0 : 1;
            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
          } else {
            lenPrevSeg = dist(p, prevP);
            lenNextSeg = dist(p, nextP);
          }
          ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
          scaleAndAdd3(cp1, p, v, -smooth * (1 - ratioNextSeg));
        }
        vec2Min(cp0, cp0, smoothMax);
        vec2Max(cp0, cp0, smoothMin);
        vec2Min(cp1, cp1, smoothMax);
        vec2Max(cp1, cp1, smoothMin);
        ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]);
        scaleAndAdd3(cp0, p, v, smooth * ratioNextSeg);
      } else {
        ctx.lineTo(p[0], p[1]);
      }
    }
    prevIdx = idx;
    idx += dir3;
  }
  return k;
}
function getBoundingBox(points9, smoothConstraint) {
  const ptMin = [Infinity, Infinity];
  const ptMax = [-Infinity, -Infinity];
  if (smoothConstraint) {
    for (let i = 0; i < points9.length; i++) {
      const pt = points9[i];
      if (pt[0] < ptMin[0]) {
        ptMin[0] = pt[0];
      }
      if (pt[1] < ptMin[1]) {
        ptMin[1] = pt[1];
      }
      if (pt[0] > ptMax[0]) {
        ptMax[0] = pt[0];
      }
      if (pt[1] > ptMax[1]) {
        ptMax[1] = pt[1];
      }
    }
  }
  return {
    min: smoothConstraint ? ptMin : ptMax,
    max: smoothConstraint ? ptMax : ptMin
  };
}
class ECPolylineShape {
  constructor() {
    this.smooth = 0;
    this.smoothConstraint = true;
    this.connectNulls = false;
  }
}
class ECPolyline extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "ec-polyline";
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new ECPolylineShape();
  }
  buildPath(ctx, shape) {
    const points9 = shape.points;
    let i = 0;
    let len2 = points9.length;
    const result = getBoundingBox(points9, shape.smoothConstraint);
    if (shape.connectNulls) {
      for (; len2 > 0; len2--) {
        if (!isPointNull(points9[len2 - 1])) {
          break;
        }
      }
      for (; i < len2; i++) {
        if (!isPointNull(points9[i])) {
          break;
        }
      }
    }
    while (i < len2) {
      i += drawSegment(ctx, points9, i, len2, len2, 1, result.min, result.max, shape.smooth, shape.smoothMonotone, shape.connectNulls) + 1;
    }
  }
}
class ECPolygonShape extends ECPolylineShape {
}
class ECPolygon extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "ec-polygon";
  }
  getDefaultShape() {
    return new ECPolygonShape();
  }
  buildPath(ctx, shape) {
    const points9 = shape.points;
    const stackedOnPoints = shape.stackedOnPoints;
    let i = 0;
    let len2 = points9.length;
    const smoothMonotone = shape.smoothMonotone;
    const bbox6 = getBoundingBox(points9, shape.smoothConstraint);
    const stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
    if (shape.connectNulls) {
      for (; len2 > 0; len2--) {
        if (!isPointNull(points9[len2 - 1])) {
          break;
        }
      }
      for (; i < len2; i++) {
        if (!isPointNull(points9[i])) {
          break;
        }
      }
    }
    while (i < len2) {
      const k = drawSegment(ctx, points9, i, len2, len2, 1, bbox6.min, bbox6.max, shape.smooth, smoothMonotone, shape.connectNulls);
      drawSegment(ctx, stackedOnPoints, i + k - 1, k, len2, -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth, smoothMonotone, shape.connectNulls);
      i += k + 1;
      ctx.closePath();
    }
  }
}

// src/chart/helper/createClipPathFromCoordSys.ts
function createGridClipPath(cartesian, hasAnimation, seriesModel) {
  const rect = cartesian.getArea();
  const isHorizontal = cartesian.getBaseAxis().isHorizontal();
  let x = rect.x;
  let y = rect.y;
  let width = rect.width;
  let height = rect.height;
  const lineWidth = seriesModel.get(["lineStyle", "width"]) || 2;
  x -= lineWidth / 2;
  y -= lineWidth / 2;
  width += lineWidth;
  height += lineWidth;
  x = Math.floor(x);
  width = Math.round(width);
  const clipPath = new Rect_default({
    shape: {
      x,
      y,
      width,
      height
    }
  });
  if (hasAnimation) {
    clipPath.shape[isHorizontal ? "width" : "height"] = 0;
    initProps(clipPath, {
      shape: {
        width,
        height
      }
    }, seriesModel);
  }
  return clipPath;
}
function createPolarClipPath(polar2, hasAnimation, seriesModel) {
  const sectorArea = polar2.getArea();
  const clipPath = new Sector_default({
    shape: {
      cx: round2(polar2.cx, 1),
      cy: round2(polar2.cy, 1),
      r0: round2(sectorArea.r0, 1),
      r: round2(sectorArea.r, 1),
      startAngle: sectorArea.startAngle,
      endAngle: sectorArea.endAngle,
      clockwise: sectorArea.clockwise
    }
  });
  if (hasAnimation) {
    clipPath.shape.endAngle = sectorArea.startAngle;
    initProps(clipPath, {
      shape: {
        endAngle: sectorArea.endAngle
      }
    }, seriesModel);
  }
  return clipPath;
}
function createClipPath(coordSys, hasAnimation, seriesModel) {
  if (!coordSys) {
    return null;
  } else if (coordSys.type === "polar") {
    return createPolarClipPath(coordSys, hasAnimation, seriesModel);
  } else if (coordSys.type === "cartesian2d") {
    return createGridClipPath(coordSys, hasAnimation, seriesModel);
  }
  return null;
}

// src/chart/line/LineView.ts
function isPointsSame(points1, points22) {
  if (points1.length !== points22.length) {
    return;
  }
  for (let i = 0; i < points1.length; i++) {
    const p1 = points1[i];
    const p2 = points22[i];
    if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
      return;
    }
  }
  return true;
}
function getBoundingDiff(points1, points22) {
  const min1 = [];
  const max1 = [];
  const min22 = [];
  const max22 = [];
  fromPoints(points1, min1, max1);
  fromPoints(points22, min22, max22);
  return Math.max(Math.abs(min1[0] - min22[0]), Math.abs(min1[1] - min22[1]), Math.abs(max1[0] - max22[0]), Math.abs(max1[1] - max22[1]));
}
function getSmooth(smooth) {
  return typeof smooth === "number" ? smooth : smooth ? 0.5 : 0;
}
function getStackedOnPoints(coordSys, data, dataCoordInfo) {
  if (!dataCoordInfo.valueDim) {
    return [];
  }
  const points9 = [];
  for (let idx = 0, len2 = data.count(); idx < len2; idx++) {
    points9.push(getStackedOnPoint(dataCoordInfo, coordSys, data, idx));
  }
  return points9;
}
function turnPointsIntoStep(points9, coordSys, stepTurnAt) {
  const baseAxis = coordSys.getBaseAxis();
  const baseIndex = baseAxis.dim === "x" || baseAxis.dim === "radius" ? 0 : 1;
  const stepPoints = [];
  let i = 0;
  for (; i < points9.length - 1; i++) {
    const nextPt = points9[i + 1];
    const pt = points9[i];
    stepPoints.push(pt);
    const stepPt = [];
    switch (stepTurnAt) {
      case "end":
        stepPt[baseIndex] = nextPt[baseIndex];
        stepPt[1 - baseIndex] = pt[1 - baseIndex];
        stepPoints.push(stepPt);
        break;
      case "middle":
        const middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
        const stepPt2 = [];
        stepPt[baseIndex] = stepPt2[baseIndex] = middle;
        stepPt[1 - baseIndex] = pt[1 - baseIndex];
        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
        stepPoints.push(stepPt);
        stepPoints.push(stepPt2);
        break;
      default:
        stepPt[baseIndex] = pt[baseIndex];
        stepPt[1 - baseIndex] = nextPt[1 - baseIndex];
        stepPoints.push(stepPt);
    }
  }
  points9[i] && stepPoints.push(points9[i]);
  return stepPoints;
}
function getVisualGradient(data, coordSys) {
  const visualMetaList = data.getVisual("visualMeta");
  if (!visualMetaList || !visualMetaList.length || !data.count()) {
    return;
  }
  if (coordSys.type !== "cartesian2d") {
    if (__DEV__) {
      console.warn("Visual map on line style is only supported on cartesian2d.");
    }
    return;
  }
  let coordDim;
  let visualMeta;
  for (let i = visualMetaList.length - 1; i >= 0; i--) {
    const dimIndex = visualMetaList[i].dimension;
    const dimName = data.dimensions[dimIndex];
    const dimInfo = data.getDimensionInfo(dimName);
    coordDim = dimInfo && dimInfo.coordDim;
    if (coordDim === "x" || coordDim === "y") {
      visualMeta = visualMetaList[i];
      break;
    }
  }
  if (!visualMeta) {
    if (__DEV__) {
      console.warn("Visual map on line style only support x or y dimension.");
    }
    return;
  }
  const axis2 = coordSys.getAxis(coordDim);
  const colorStops = map2(visualMeta.stops, function(stop2) {
    return {
      offset: 0,
      coord: axis2.toGlobalCoord(axis2.dataToCoord(stop2.value)),
      color: stop2.color
    };
  });
  const stopLen = colorStops.length;
  const outerColors = visualMeta.outerColors.slice();
  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
    colorStops.reverse();
    outerColors.reverse();
  }
  const tinyExtent = 10;
  const minCoord = colorStops[0].coord - tinyExtent;
  const maxCoord = colorStops[stopLen - 1].coord + tinyExtent;
  const coordSpan = maxCoord - minCoord;
  if (coordSpan < 0.001) {
    return "transparent";
  }
  each(colorStops, function(stop2) {
    stop2.offset = (stop2.coord - minCoord) / coordSpan;
  });
  colorStops.push({
    offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,
    color: outerColors[1] || "transparent"
  });
  colorStops.unshift({
    offset: stopLen ? colorStops[0].offset : 0.5,
    color: outerColors[0] || "transparent"
  });
  const gradient = new LinearGradient4(0, 0, 0, 0, colorStops, true);
  gradient[coordDim] = minCoord;
  gradient[coordDim + "2"] = maxCoord;
  return gradient;
}
function getIsIgnoreFunc(seriesModel, data, coordSys) {
  const showAllSymbol = seriesModel.get("showAllSymbol");
  const isAuto = showAllSymbol === "auto";
  if (showAllSymbol && !isAuto) {
    return;
  }
  const categoryAxis2 = coordSys.getAxesByScale("ordinal")[0];
  if (!categoryAxis2) {
    return;
  }
  if (isAuto && canShowAllSymbolForCategory(categoryAxis2, data)) {
    return;
  }
  const categoryDataDim = data.mapDimension(categoryAxis2.dim);
  const labelMap = {};
  each(categoryAxis2.getViewLabels(), function(labelItem) {
    labelMap[labelItem.tickValue] = 1;
  });
  return function(dataIndex) {
    return !labelMap.hasOwnProperty(data.get(categoryDataDim, dataIndex));
  };
}
function canShowAllSymbolForCategory(categoryAxis2, data) {
  const axisExtent = categoryAxis2.getExtent();
  let availSize = Math.abs(axisExtent[1] - axisExtent[0]) / categoryAxis2.scale.count();
  isNaN(availSize) && (availSize = 0);
  const dataLen = data.count();
  const step2 = Math.max(1, Math.round(dataLen / 5));
  for (let dataIndex = 0; dataIndex < dataLen; dataIndex += step2) {
    if (Symbol_default.getSymbolSize(data, dataIndex)[categoryAxis2.isHorizontal() ? 1 : 0] * 1.5 > availSize) {
      return false;
    }
  }
  return true;
}
function createLineClipPath(coordSys, hasAnimation, seriesModel) {
  if (coordSys.type === "cartesian2d") {
    const isHorizontal = coordSys.getBaseAxis().isHorizontal();
    const clipPath = createGridClipPath(coordSys, hasAnimation, seriesModel);
    if (!seriesModel.get("clip", true)) {
      const rectShape = clipPath.shape;
      const expandSize = Math.max(rectShape.width, rectShape.height);
      if (isHorizontal) {
        rectShape.y -= expandSize;
        rectShape.height += expandSize * 2;
      } else {
        rectShape.x -= expandSize;
        rectShape.width += expandSize * 2;
      }
    }
    return clipPath;
  } else {
    return createPolarClipPath(coordSys, hasAnimation, seriesModel);
  }
}
class LineView2 extends Chart_default {
  init() {
    const lineGroup = new Group_default();
    const symbolDraw = new SymbolDraw_default();
    this.group.add(symbolDraw.group);
    this._symbolDraw = symbolDraw;
    this._lineGroup = lineGroup;
  }
  render(seriesModel, ecModel, api) {
    const coordSys = seriesModel.coordinateSystem;
    const group = this.group;
    const data = seriesModel.getData();
    const lineStyleModel = seriesModel.getModel("lineStyle");
    const areaStyleModel = seriesModel.getModel("areaStyle");
    let points9 = data.mapArray(data.getItemLayout);
    const isCoordSysPolar = coordSys.type === "polar";
    const prevCoordSys = this._coordSys;
    const symbolDraw = this._symbolDraw;
    let polyline = this._polyline;
    let polygon = this._polygon;
    const lineGroup = this._lineGroup;
    const hasAnimation = seriesModel.get("animation");
    const isAreaChart = !areaStyleModel.isEmpty();
    const valueOrigin = areaStyleModel.get("origin");
    const dataCoordInfo = prepareDataCoordInfo(coordSys, data, valueOrigin);
    let stackedOnPoints = getStackedOnPoints(coordSys, data, dataCoordInfo);
    const showSymbol = seriesModel.get("showSymbol");
    const isIgnoreFunc = showSymbol && !isCoordSysPolar && getIsIgnoreFunc(seriesModel, data, coordSys);
    const oldData = this._data;
    oldData && oldData.eachItemGraphicEl(function(el, idx) {
      if (el.__temp) {
        group.remove(el);
        oldData.setItemGraphicEl(idx, null);
      }
    });
    if (!showSymbol) {
      symbolDraw.remove();
    }
    group.add(lineGroup);
    const step2 = !isCoordSysPolar ? seriesModel.get("step") : false;
    let clipShapeForSymbol;
    if (coordSys && coordSys.getArea && seriesModel.get("clip", true)) {
      clipShapeForSymbol = coordSys.getArea();
      if (clipShapeForSymbol.width != null) {
        clipShapeForSymbol.x -= 0.1;
        clipShapeForSymbol.y -= 0.1;
        clipShapeForSymbol.width += 0.2;
        clipShapeForSymbol.height += 0.2;
      } else if (clipShapeForSymbol.r0) {
        clipShapeForSymbol.r0 -= 0.5;
        clipShapeForSymbol.r += 0.5;
      }
    }
    this._clipShapeForSymbol = clipShapeForSymbol;
    if (!(polyline && prevCoordSys.type === coordSys.type && step2 === this._step)) {
      showSymbol && symbolDraw.updateData(data, {
        isIgnore: isIgnoreFunc,
        clipShape: clipShapeForSymbol
      });
      if (step2) {
        points9 = turnPointsIntoStep(points9, coordSys, step2);
        stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step2);
      }
      polyline = this._newPolyline(points9);
      if (isAreaChart) {
        polygon = this._newPolygon(points9, stackedOnPoints);
      }
      lineGroup.setClipPath(createLineClipPath(coordSys, true, seriesModel));
    } else {
      if (isAreaChart && !polygon) {
        polygon = this._newPolygon(points9, stackedOnPoints);
      } else if (polygon && !isAreaChart) {
        lineGroup.remove(polygon);
        polygon = this._polygon = null;
      }
      lineGroup.setClipPath(createLineClipPath(coordSys, false, seriesModel));
      showSymbol && symbolDraw.updateData(data, {
        isIgnore: isIgnoreFunc,
        clipShape: clipShapeForSymbol
      });
      data.eachItemGraphicEl(function(el) {
        el && el.stopAnimation(null, true);
      });
      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points9)) {
        if (hasAnimation) {
          this._updateAnimation(data, stackedOnPoints, coordSys, api, step2, valueOrigin);
        } else {
          if (step2) {
            points9 = turnPointsIntoStep(points9, coordSys, step2);
            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step2);
          }
          polyline.setShape({
            points: points9
          });
          polygon && polygon.setShape({
            points: points9,
            stackedOnPoints
          });
        }
      }
    }
    const visualColor = getVisualGradient(data, coordSys) || data.getVisual("style")[data.getVisual("drawType")];
    const focus = seriesModel.get(["emphasis", "focus"]);
    const blurScope = seriesModel.get(["emphasis", "blurScope"]);
    polyline.useStyle(defaults(lineStyleModel.getLineStyle(), {
      fill: "none",
      stroke: visualColor,
      lineJoin: "bevel"
    }));
    setStatesStylesFromModel(polyline, seriesModel, "lineStyle");
    getECData(polyline).seriesIndex = seriesModel.seriesIndex;
    enableHoverEmphasis(polyline, focus, blurScope);
    const smooth = getSmooth(seriesModel.get("smooth"));
    polyline.setShape({
      smooth,
      smoothMonotone: seriesModel.get("smoothMonotone"),
      connectNulls: seriesModel.get("connectNulls")
    });
    if (polygon) {
      const stackedOnSeries = data.getCalculationInfo("stackedOnSeries");
      let stackedOnSmooth = 0;
      polygon.useStyle(defaults(areaStyleModel.getAreaStyle(), {
        fill: visualColor,
        opacity: 0.7,
        lineJoin: "bevel"
      }));
      if (stackedOnSeries) {
        stackedOnSmooth = getSmooth(stackedOnSeries.get("smooth"));
      }
      polygon.setShape({
        smooth,
        stackedOnSmooth,
        smoothMonotone: seriesModel.get("smoothMonotone"),
        connectNulls: seriesModel.get("connectNulls")
      });
      setStatesStylesFromModel(polygon, seriesModel, "areaStyle");
      getECData(polygon).seriesIndex = seriesModel.seriesIndex;
      enableHoverEmphasis(polygon, focus, blurScope);
    }
    const changePolyState = (toState) => {
      this._changePolyState(toState);
    };
    data.eachItemGraphicEl(function(el) {
      el && (el.onHoverStateChange = changePolyState);
    });
    this._data = data;
    this._coordSys = coordSys;
    this._stackedOnPoints = stackedOnPoints;
    this._points = points9;
    this._step = step2;
    this._valueOrigin = valueOrigin;
  }
  dispose() {
  }
  highlight(seriesModel, ecModel, api, payload) {
    const data = seriesModel.getData();
    const dataIndex = queryDataIndex(data, payload);
    this._changePolyState("emphasis");
    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
      let symbol14 = data.getItemGraphicEl(dataIndex);
      if (!symbol14) {
        const pt = data.getItemLayout(dataIndex);
        if (!pt) {
          return;
        }
        if (this._clipShapeForSymbol && !this._clipShapeForSymbol.contain(pt[0], pt[1])) {
          return;
        }
        symbol14 = new Symbol_default(data, dataIndex);
        symbol14.setPosition(pt);
        symbol14.setZ(seriesModel.get("zlevel"), seriesModel.get("z"));
        symbol14.ignore = isNaN(pt[0]) || isNaN(pt[1]);
        symbol14.__temp = true;
        data.setItemGraphicEl(dataIndex, symbol14);
        symbol14.stopSymbolAnimation(true);
        this.group.add(symbol14);
      }
      symbol14.highlight();
    } else {
      Chart_default.prototype.highlight.call(this, seriesModel, ecModel, api, payload);
    }
  }
  downplay(seriesModel, ecModel, api, payload) {
    const data = seriesModel.getData();
    const dataIndex = queryDataIndex(data, payload);
    this._changePolyState("normal");
    if (dataIndex != null && dataIndex >= 0) {
      const symbol14 = data.getItemGraphicEl(dataIndex);
      if (symbol14) {
        if (symbol14.__temp) {
          data.setItemGraphicEl(dataIndex, null);
          this.group.remove(symbol14);
        } else {
          symbol14.downplay();
        }
      }
    } else {
      Chart_default.prototype.downplay.call(this, seriesModel, ecModel, api, payload);
    }
  }
  _changePolyState(toState) {
    const polygon = this._polygon;
    setStatesFlag(this._polyline, toState);
    polygon && setStatesFlag(polygon, toState);
  }
  _newPolyline(points9) {
    let polyline = this._polyline;
    if (polyline) {
      this._lineGroup.remove(polyline);
    }
    polyline = new ECPolyline({
      shape: {
        points: points9
      },
      segmentIgnoreThreshold: 2,
      z2: 10
    });
    this._lineGroup.add(polyline);
    this._polyline = polyline;
    return polyline;
  }
  _newPolygon(points9, stackedOnPoints) {
    let polygon = this._polygon;
    if (polygon) {
      this._lineGroup.remove(polygon);
    }
    polygon = new ECPolygon({
      shape: {
        points: points9,
        stackedOnPoints
      },
      segmentIgnoreThreshold: 2
    });
    this._lineGroup.add(polygon);
    this._polygon = polygon;
    return polygon;
  }
  _updateAnimation(data, stackedOnPoints, coordSys, api, step2, valueOrigin) {
    const polyline = this._polyline;
    const polygon = this._polygon;
    const seriesModel = data.hostModel;
    const diff2 = lineAnimationDiff_default(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys, this._valueOrigin, valueOrigin);
    let current = diff2.current;
    let stackedOnCurrent = diff2.stackedOnCurrent;
    let next = diff2.next;
    let stackedOnNext = diff2.stackedOnNext;
    if (step2) {
      current = turnPointsIntoStep(diff2.current, coordSys, step2);
      stackedOnCurrent = turnPointsIntoStep(diff2.stackedOnCurrent, coordSys, step2);
      next = turnPointsIntoStep(diff2.next, coordSys, step2);
      stackedOnNext = turnPointsIntoStep(diff2.stackedOnNext, coordSys, step2);
    }
    if (getBoundingDiff(current, next) > 3000 || polygon && getBoundingDiff(stackedOnCurrent, stackedOnNext) > 3000) {
      polyline.setShape({
        points: next
      });
      if (polygon) {
        polygon.setShape({
          points: next,
          stackedOnPoints: stackedOnNext
        });
      }
      return;
    }
    polyline.shape.__points = diff2.current;
    polyline.shape.points = current;
    polyline.stopAnimation();
    updateProps(polyline, {
      shape: {
        points: next
      }
    }, seriesModel);
    if (polygon) {
      polygon.setShape({
        points: current,
        stackedOnPoints: stackedOnCurrent
      });
      polygon.stopAnimation();
      updateProps(polygon, {
        shape: {
          stackedOnPoints: stackedOnNext
        }
      }, seriesModel);
      if (polyline.shape.points !== polygon.shape.points) {
        polygon.shape.points = polyline.shape.points;
      }
    }
    const updatedDataInfo = [];
    const diffStatus = diff2.status;
    for (let i = 0; i < diffStatus.length; i++) {
      const cmd = diffStatus[i].cmd;
      if (cmd === "=") {
        const el = data.getItemGraphicEl(diffStatus[i].idx1);
        if (el) {
          updatedDataInfo.push({
            el,
            ptIdx: i
          });
        }
      }
    }
    if (polyline.animators && polyline.animators.length) {
      polyline.animators[0].during(function() {
        for (let i = 0; i < updatedDataInfo.length; i++) {
          const el = updatedDataInfo[i].el;
          el.setPosition(polyline.shape.__points[updatedDataInfo[i].ptIdx]);
          el.markRedraw();
        }
      });
    }
  }
  remove(ecModel) {
    const group = this.group;
    const oldData = this._data;
    this._lineGroup.removeAll();
    this._symbolDraw.remove(true);
    oldData && oldData.eachItemGraphicEl(function(el, idx) {
      if (el.__temp) {
        group.remove(el);
        oldData.setItemGraphicEl(idx, null);
      }
    });
    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
  }
}
LineView2.type = "line";
Chart_default.registerClass(LineView2);
const LineView_default = Chart_default;

// src/layout/points.ts
function points_default(seriesType2) {
  return {
    seriesType: seriesType2,
    plan: createRenderPlanner_default(),
    reset: function(seriesModel) {
      const data = seriesModel.getData();
      const coordSys = seriesModel.coordinateSystem;
      const pipelineContext = seriesModel.pipelineContext;
      const isLargeRender = pipelineContext.large;
      if (!coordSys) {
        return;
      }
      const dims = map2(coordSys.dimensions, function(dim) {
        return data.mapDimension(dim);
      }).slice(0, 2);
      const dimLen = dims.length;
      const stackResultDim = data.getCalculationInfo("stackResultDimension");
      if (isDimensionStacked(data, dims[0])) {
        dims[0] = stackResultDim;
      }
      if (isDimensionStacked(data, dims[1])) {
        dims[1] = stackResultDim;
      }
      return dimLen && {
        progress(params, data2) {
          const segCount = params.end - params.start;
          const points9 = isLargeRender && new Float32Array(segCount * dimLen);
          const tmpIn = [];
          const tmpOut = [];
          for (let i = params.start, offset = 0; i < params.end; i++) {
            let point;
            if (dimLen === 1) {
              const x = data2.get(dims[0], i);
              point = !isNaN(x) && coordSys.dataToPoint(x, null, tmpOut);
            } else {
              const x = tmpIn[0] = data2.get(dims[0], i);
              const y = tmpIn[1] = data2.get(dims[1], i);
              point = !isNaN(x) && !isNaN(y) && coordSys.dataToPoint(tmpIn, null, tmpOut);
            }
            if (isLargeRender) {
              points9[offset++] = point ? point[0] : NaN;
              points9[offset++] = point ? point[1] : NaN;
            } else {
              data2.setItemLayout(i, point && point.slice() || [NaN, NaN]);
            }
          }
          isLargeRender && data2.setLayout("symbolPoints", points9);
        }
      };
    }
  };
}

// src/processor/dataSample.ts
const samplers = {
  average: function(frame) {
    let sum2 = 0;
    let count2 = 0;
    for (let i = 0; i < frame.length; i++) {
      if (!isNaN(frame[i])) {
        sum2 += frame[i];
        count2++;
      }
    }
    return count2 === 0 ? NaN : sum2 / count2;
  },
  sum: function(frame) {
    let sum2 = 0;
    for (let i = 0; i < frame.length; i++) {
      sum2 += frame[i] || 0;
    }
    return sum2;
  },
  max: function(frame) {
    let max4 = -Infinity;
    for (let i = 0; i < frame.length; i++) {
      frame[i] > max4 && (max4 = frame[i]);
    }
    return isFinite(max4) ? max4 : NaN;
  },
  min: function(frame) {
    let min4 = Infinity;
    for (let i = 0; i < frame.length; i++) {
      frame[i] < min4 && (min4 = frame[i]);
    }
    return isFinite(min4) ? min4 : NaN;
  },
  nearest: function(frame) {
    return frame[0];
  }
};
const indexSampler = function(frame) {
  return Math.round(frame.length / 2);
};
function dataSample_default(seriesType2) {
  return {
    seriesType: seriesType2,
    reset: function(seriesModel, ecModel, api) {
      const data = seriesModel.getData();
      const sampling = seriesModel.get("sampling");
      const coordSys = seriesModel.coordinateSystem;
      if (coordSys.type === "cartesian2d" && sampling) {
        const baseAxis = coordSys.getBaseAxis();
        const valueAxis2 = coordSys.getOtherAxis(baseAxis);
        const extent3 = baseAxis.getExtent();
        const size = extent3[1] - extent3[0];
        const rate = Math.round(data.count() / size);
        if (rate > 1) {
          let sampler;
          if (typeof sampling === "string") {
            sampler = samplers[sampling];
          } else if (typeof sampling === "function") {
            sampler = sampling;
          }
          if (sampler) {
            seriesModel.setData(data.downSample(data.mapDimension(valueAxis2.dim), 1 / rate, sampler, indexSampler));
          }
        }
      }
    }
  };
}

// src/coord/axisDefault.ts
const defaultOption = {
  show: true,
  zlevel: 0,
  z: 0,
  inverse: false,
  name: "",
  nameLocation: "end",
  nameRotate: null,
  nameTruncate: {
    maxWidth: null,
    ellipsis: "...",
    placeholder: "."
  },
  nameTextStyle: {},
  nameGap: 15,
  silent: false,
  triggerEvent: false,
  tooltip: {
    show: false
  },
  axisPointer: {},
  axisLine: {
    show: true,
    onZero: true,
    onZeroAxisIndex: null,
    lineStyle: {
      color: "#333",
      width: 1,
      type: "solid"
    },
    symbol: ["none", "none"],
    symbolSize: [10, 15]
  },
  axisTick: {
    show: true,
    inside: false,
    length: 5,
    lineStyle: {
      width: 1
    }
  },
  axisLabel: {
    show: true,
    inside: false,
    rotate: 0,
    showMinLabel: null,
    showMaxLabel: null,
    margin: 8,
    fontSize: 12
  },
  splitLine: {
    show: true,
    lineStyle: {
      color: ["#ccc"],
      width: 1,
      type: "solid"
    }
  },
  splitArea: {
    show: false,
    areaStyle: {
      color: ["rgba(250,250,250,0.3)", "rgba(200,200,200,0.3)"]
    }
  }
};
const categoryAxis = merge({
  boundaryGap: true,
  deduplication: null,
  splitLine: {
    show: false
  },
  axisTick: {
    alignWithLabel: false,
    interval: "auto"
  },
  axisLabel: {
    interval: "auto"
  }
}, defaultOption);
const valueAxis = merge({
  boundaryGap: [0, 0],
  splitNumber: 5,
  minorTick: {
    show: false,
    splitNumber: 5,
    length: 3,
    lineStyle: {}
  },
  minorSplitLine: {
    show: false,
    lineStyle: {
      color: "#eee",
      width: 1
    }
  }
}, defaultOption);
const timeAxis = defaults({
  scale: true,
  min: "dataMin",
  max: "dataMax"
}, valueAxis);
const logAxis = defaults({
  scale: true,
  logBase: 10
}, valueAxis);
const axisDefault_default = {
  category: categoryAxis,
  value: valueAxis,
  time: timeAxis,
  log: logAxis
};

// src/coord/axisCommonTypes.ts
const AXIS_TYPES = {
  value: 1,
  category: 1,
  time: 1,
  log: 1
};

// src/coord/axisModelCreator.ts
function axisModelCreator_default(axisName, BaseAxisModelClass, extraDefaultOption) {
  each(AXIS_TYPES, function(v4, axisType) {
    const defaultOption4 = merge(merge({}, axisDefault_default[axisType], true), extraDefaultOption, true);
    class AxisModel36 extends BaseAxisModelClass {
      constructor(...args) {
        super(...args);
        this.type = axisName + "Axis." + axisType;
      }
      mergeDefaultAndTheme(option, ecModel) {
        const layoutMode = fetchLayoutMode(this);
        const inputPositionParams = layoutMode ? getLayoutParams(option) : {};
        const themeModel = ecModel.getTheme();
        merge(option, themeModel.get(axisType + "Axis"));
        merge(option, this.getDefaultOption());
        option.type = getAxisType(option);
        if (layoutMode) {
          mergeLayoutParam(option, inputPositionParams, layoutMode);
        }
      }
      optionUpdated() {
        const thisOption = this.option;
        if (thisOption.type === "category") {
          this.__ordinalMeta = OrdinalMeta_default.createByAxisModel(this);
        }
      }
      getCategories(rawData) {
        const option = this.option;
        if (option.type === "category") {
          if (rawData) {
            return option.data;
          }
          return this.__ordinalMeta.categories;
        }
      }
      getOrdinalMeta() {
        return this.__ordinalMeta;
      }
    }
    AxisModel36.type = axisName + "Axis." + axisType;
    AxisModel36.defaultOption = defaultOption4;
    Component_default.registerClass(AxisModel36);
  });
  Component_default.registerSubTypeDefaulter(axisName + "Axis", getAxisType);
}
function getAxisType(option) {
  return option.type || (option.data ? "category" : "value");
}

// src/coord/cartesian/AxisModel.ts
class CartesianAxisModel6 extends Component_default {
  getCoordSysModel() {
    return this.getReferringComponents("grid", SINGLE_REFERRING).models[0];
  }
}
CartesianAxisModel6.type = "cartesian2dAxis";
mixin(CartesianAxisModel6, AxisModelCommonMixin);
const extraOption = {
  offset: 0,
  sort: false,
  realtimeSort: false,
  sortSeriesIndex: null,
  categorySortInfo: []
};
axisModelCreator_default("x", CartesianAxisModel6, extraOption);
axisModelCreator_default("y", CartesianAxisModel6, extraOption);

// src/component/axis/AxisBuilder.ts
const PI8 = Math.PI;
class AxisBuilder2 {
  constructor(axisModel, opt) {
    this.group = new Group_default();
    this.opt = opt;
    this.axisModel = axisModel;
    defaults(opt, {
      labelOffset: 0,
      nameDirection: 1,
      tickDirection: 1,
      labelDirection: 1,
      silent: true
    });
    const transformGroup = new Group_default({
      x: opt.position[0],
      y: opt.position[1],
      rotation: opt.rotation
    });
    transformGroup.updateTransform();
    this._transformGroup = transformGroup;
  }
  hasBuilder(name) {
    return !!builders[name];
  }
  add(name) {
    builders[name](this.opt, this.axisModel, this.group, this._transformGroup);
  }
  getGroup() {
    return this.group;
  }
  static innerTextLayout(axisRotation, textRotation, direction) {
    const rotationDiff = remRadian(textRotation - axisRotation);
    let textAlign;
    let textVerticalAlign;
    if (isRadianAroundZero(rotationDiff)) {
      textVerticalAlign = direction > 0 ? "top" : "bottom";
      textAlign = "center";
    } else if (isRadianAroundZero(rotationDiff - PI8)) {
      textVerticalAlign = direction > 0 ? "bottom" : "top";
      textAlign = "center";
    } else {
      textVerticalAlign = "middle";
      if (rotationDiff > 0 && rotationDiff < PI8) {
        textAlign = direction > 0 ? "right" : "left";
      } else {
        textAlign = direction > 0 ? "left" : "right";
      }
    }
    return {
      rotation: rotationDiff,
      textAlign,
      textVerticalAlign
    };
  }
  static makeAxisEventDataBase(axisModel) {
    const eventData = {
      componentType: axisModel.mainType,
      componentIndex: axisModel.componentIndex
    };
    eventData[axisModel.mainType + "Index"] = axisModel.componentIndex;
    return eventData;
  }
  static isLabelSilent(axisModel) {
    const tooltipOpt = axisModel.get("tooltip");
    return axisModel.get("silent") || !(axisModel.get("triggerEvent") || tooltipOpt && tooltipOpt.show);
  }
}
const builders = {
  axisLine(opt, axisModel, group, transformGroup) {
    if (!axisModel.get(["axisLine", "show"])) {
      return;
    }
    const extent3 = axisModel.axis.getExtent();
    const matrix26 = transformGroup.transform;
    const pt12 = [extent3[0], 0];
    const pt22 = [extent3[1], 0];
    if (matrix26) {
      applyTransform(pt12, pt12, matrix26);
      applyTransform(pt22, pt22, matrix26);
    }
    const lineStyle3 = extend({
      lineCap: "round"
    }, axisModel.getModel(["axisLine", "lineStyle"]).getLineStyle());
    const line3 = new Line_default({
      subPixelOptimize: true,
      shape: {
        x1: pt12[0],
        y1: pt12[1],
        x2: pt22[0],
        y2: pt22[1]
      },
      style: lineStyle3,
      strokeContainThreshold: opt.strokeContainThreshold || 5,
      silent: true,
      z2: 1
    });
    line3.anid = "line";
    group.add(line3);
    let arrows = axisModel.get(["axisLine", "symbol"]);
    let arrowSize = axisModel.get(["axisLine", "symbolSize"]);
    let arrowOffset = axisModel.get(["axisLine", "symbolOffset"]) || 0;
    if (typeof arrowOffset === "number") {
      arrowOffset = [arrowOffset, arrowOffset];
    }
    if (arrows != null) {
      if (typeof arrows === "string") {
        arrows = [arrows, arrows];
      }
      if (typeof arrowSize === "string" || typeof arrowSize === "number") {
        arrowSize = [arrowSize, arrowSize];
      }
      const symbolWidth = arrowSize[0];
      const symbolHeight = arrowSize[1];
      each([{
        rotate: opt.rotation + Math.PI / 2,
        offset: arrowOffset[0],
        r: 0
      }, {
        rotate: opt.rotation - Math.PI / 2,
        offset: arrowOffset[1],
        r: Math.sqrt((pt12[0] - pt22[0]) * (pt12[0] - pt22[0]) + (pt12[1] - pt22[1]) * (pt12[1] - pt22[1]))
      }], function(point, index) {
        if (arrows[index] !== "none" && arrows[index] != null) {
          const symbol14 = createSymbol(arrows[index], -symbolWidth / 2, -symbolHeight / 2, symbolWidth, symbolHeight, lineStyle3.stroke, true);
          const r = point.r + point.offset;
          symbol14.attr({
            rotation: point.rotate,
            x: pt12[0] + r * Math.cos(opt.rotation),
            y: pt12[1] - r * Math.sin(opt.rotation),
            silent: true,
            z2: 11
          });
          group.add(symbol14);
        }
      });
    }
  },
  axisTickLabel(opt, axisModel, group, transformGroup) {
    const ticksEls = buildAxisMajorTicks(group, transformGroup, axisModel, opt.tickDirection);
    const labelEls = buildAxisLabel(group, transformGroup, axisModel, opt);
    fixMinMaxLabelShow(axisModel, labelEls, ticksEls);
    buildAxisMinorTicks(group, transformGroup, axisModel, opt.tickDirection);
  },
  axisName(opt, axisModel, group, transformGroup) {
    const name = retrieve(opt.axisName, axisModel.get("name"));
    if (!name) {
      return;
    }
    const nameLocation = axisModel.get("nameLocation");
    const nameDirection = opt.nameDirection;
    const textStyleModel = axisModel.getModel("nameTextStyle");
    const gap = axisModel.get("nameGap") || 0;
    const extent3 = axisModel.axis.getExtent();
    const gapSignal = extent3[0] > extent3[1] ? -1 : 1;
    const pos = [nameLocation === "start" ? extent3[0] - gapSignal * gap : nameLocation === "end" ? extent3[1] + gapSignal * gap : (extent3[0] + extent3[1]) / 2, isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0];
    let labelLayout3;
    let nameRotation = axisModel.get("nameRotate");
    if (nameRotation != null) {
      nameRotation = nameRotation * PI8 / 180;
    }
    let axisNameAvailableWidth;
    if (isNameLocationCenter(nameLocation)) {
      labelLayout3 = AxisBuilder2.innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, nameDirection);
    } else {
      labelLayout3 = endTextLayout(opt.rotation, nameLocation, nameRotation || 0, extent3);
      axisNameAvailableWidth = opt.axisNameAvailableWidth;
      if (axisNameAvailableWidth != null) {
        axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout3.rotation));
        !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
      }
    }
    const textFont = textStyleModel.getFont();
    const truncateOpt = axisModel.get("nameTruncate", true) || {};
    const ellipsis = truncateOpt.ellipsis;
    const maxWidth = retrieve(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth);
    const tooltipOpt = axisModel.get("tooltip", true);
    const mainType = axisModel.mainType;
    const formatterParams = {
      componentType: mainType,
      name,
      $vars: ["name"]
    };
    formatterParams[mainType + "Index"] = axisModel.componentIndex;
    const textEl = new Text_default({
      x: pos[0],
      y: pos[1],
      rotation: labelLayout3.rotation,
      silent: AxisBuilder2.isLabelSilent(axisModel),
      style: createTextStyle(textStyleModel, {
        text: name,
        font: textFont,
        overflow: "truncate",
        width: maxWidth,
        ellipsis,
        fill: textStyleModel.getTextColor() || axisModel.get(["axisLine", "lineStyle", "color"]),
        align: textStyleModel.get("align") || labelLayout3.textAlign,
        verticalAlign: textStyleModel.get("verticalAlign") || labelLayout3.textVerticalAlign
      }),
      z2: 1
    });
    textEl.tooltip = tooltipOpt && tooltipOpt.show ? extend({
      content: name,
      formatter() {
        return name;
      },
      formatterParams
    }, tooltipOpt) : null;
    textEl.__fullText = name;
    textEl.anid = "name";
    if (axisModel.get("triggerEvent")) {
      const eventData = AxisBuilder2.makeAxisEventDataBase(axisModel);
      eventData.targetType = "axisName";
      eventData.name = name;
      getECData(textEl).eventData = eventData;
    }
    transformGroup.add(textEl);
    textEl.updateTransform();
    group.add(textEl);
    textEl.decomposeTransform();
  }
};
function endTextLayout(rotation, textPosition, textRotate, extent3) {
  const rotationDiff = remRadian(textRotate - rotation);
  let textAlign;
  let textVerticalAlign;
  const inverse = extent3[0] > extent3[1];
  const onLeft = textPosition === "start" && !inverse || textPosition !== "start" && inverse;
  if (isRadianAroundZero(rotationDiff - PI8 / 2)) {
    textVerticalAlign = onLeft ? "bottom" : "top";
    textAlign = "center";
  } else if (isRadianAroundZero(rotationDiff - PI8 * 1.5)) {
    textVerticalAlign = onLeft ? "top" : "bottom";
    textAlign = "center";
  } else {
    textVerticalAlign = "middle";
    if (rotationDiff < PI8 * 1.5 && rotationDiff > PI8 / 2) {
      textAlign = onLeft ? "left" : "right";
    } else {
      textAlign = onLeft ? "right" : "left";
    }
  }
  return {
    rotation: rotationDiff,
    textAlign,
    textVerticalAlign
  };
}
function fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
  if (shouldShowAllLabels(axisModel.axis)) {
    return;
  }
  const showMinLabel = axisModel.get(["axisLabel", "showMinLabel"]);
  const showMaxLabel = axisModel.get(["axisLabel", "showMaxLabel"]);
  labelEls = labelEls || [];
  tickEls = tickEls || [];
  const firstLabel = labelEls[0];
  const nextLabel = labelEls[1];
  const lastLabel = labelEls[labelEls.length - 1];
  const prevLabel = labelEls[labelEls.length - 2];
  const firstTick = tickEls[0];
  const nextTick = tickEls[1];
  const lastTick = tickEls[tickEls.length - 1];
  const prevTick = tickEls[tickEls.length - 2];
  if (showMinLabel === false) {
    ignoreEl(firstLabel);
    ignoreEl(firstTick);
  } else if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
    if (showMinLabel) {
      ignoreEl(nextLabel);
      ignoreEl(nextTick);
    } else {
      ignoreEl(firstLabel);
      ignoreEl(firstTick);
    }
  }
  if (showMaxLabel === false) {
    ignoreEl(lastLabel);
    ignoreEl(lastTick);
  } else if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
    if (showMaxLabel) {
      ignoreEl(prevLabel);
      ignoreEl(prevTick);
    } else {
      ignoreEl(lastLabel);
      ignoreEl(lastTick);
    }
  }
}
function ignoreEl(el) {
  el && (el.ignore = true);
}
function isTwoLabelOverlapped(current, next) {
  const firstRect = current && current.getBoundingRect().clone();
  const nextRect = next && next.getBoundingRect().clone();
  if (!firstRect || !nextRect) {
    return;
  }
  const mRotationBack = identity([]);
  rotate(mRotationBack, mRotationBack, -current.rotation);
  firstRect.applyTransform(mul([], mRotationBack, current.getLocalTransform()));
  nextRect.applyTransform(mul([], mRotationBack, next.getLocalTransform()));
  return firstRect.intersect(nextRect);
}
function isNameLocationCenter(nameLocation) {
  return nameLocation === "middle" || nameLocation === "center";
}
function createTicks(ticksCoords, tickTransform, tickEndCoord, tickLineStyle, anidPrefix) {
  const tickEls = [];
  const pt12 = [];
  const pt22 = [];
  for (let i = 0; i < ticksCoords.length; i++) {
    const tickCoord = ticksCoords[i].coord;
    pt12[0] = tickCoord;
    pt12[1] = 0;
    pt22[0] = tickCoord;
    pt22[1] = tickEndCoord;
    if (tickTransform) {
      applyTransform(pt12, pt12, tickTransform);
      applyTransform(pt22, pt22, tickTransform);
    }
    const tickEl = new Line_default({
      subPixelOptimize: true,
      shape: {
        x1: pt12[0],
        y1: pt12[1],
        x2: pt22[0],
        y2: pt22[1]
      },
      style: tickLineStyle,
      z2: 2,
      autoBatch: true,
      silent: true
    });
    tickEl.anid = anidPrefix + "_" + ticksCoords[i].tickValue;
    tickEls.push(tickEl);
  }
  return tickEls;
}
function buildAxisMajorTicks(group, transformGroup, axisModel, tickDirection) {
  const axis2 = axisModel.axis;
  const tickModel = axisModel.getModel("axisTick");
  if (!tickModel.get("show") || axis2.scale.isBlank()) {
    return;
  }
  const lineStyleModel = tickModel.getModel("lineStyle");
  const tickEndCoord = tickDirection * tickModel.get("length");
  const ticksCoords = axis2.getTicksCoords();
  const ticksEls = createTicks(ticksCoords, transformGroup.transform, tickEndCoord, defaults(lineStyleModel.getLineStyle(), {
    stroke: axisModel.get(["axisLine", "lineStyle", "color"])
  }), "ticks");
  for (let i = 0; i < ticksEls.length; i++) {
    group.add(ticksEls[i]);
  }
  return ticksEls;
}
function buildAxisMinorTicks(group, transformGroup, axisModel, tickDirection) {
  const axis2 = axisModel.axis;
  const minorTickModel = axisModel.getModel("minorTick");
  if (!minorTickModel.get("show") || axis2.scale.isBlank()) {
    return;
  }
  const minorTicksCoords = axis2.getMinorTicksCoords();
  if (!minorTicksCoords.length) {
    return;
  }
  const lineStyleModel = minorTickModel.getModel("lineStyle");
  const tickEndCoord = tickDirection * minorTickModel.get("length");
  const minorTickLineStyle = defaults(lineStyleModel.getLineStyle(), defaults(axisModel.getModel("axisTick").getLineStyle(), {
    stroke: axisModel.get(["axisLine", "lineStyle", "color"])
  }));
  for (let i = 0; i < minorTicksCoords.length; i++) {
    const minorTicksEls = createTicks(minorTicksCoords[i], transformGroup.transform, tickEndCoord, minorTickLineStyle, "minorticks_" + i);
    for (let k = 0; k < minorTicksEls.length; k++) {
      group.add(minorTicksEls[k]);
    }
  }
}
function buildAxisLabel(group, transformGroup, axisModel, opt) {
  const axis2 = axisModel.axis;
  const show = retrieve(opt.axisLabelShow, axisModel.get(["axisLabel", "show"]));
  if (!show || axis2.scale.isBlank()) {
    return;
  }
  const labelModel = axisModel.getModel("axisLabel");
  const labelMargin = labelModel.get("margin");
  const labels = axis2.getViewLabels();
  const labelRotation = (retrieve(opt.labelRotate, labelModel.get("rotate")) || 0) * PI8 / 180;
  const labelLayout3 = AxisBuilder2.innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
  const rawCategoryData = axisModel.getCategories && axisModel.getCategories(true);
  const labelEls = [];
  const silent = AxisBuilder2.isLabelSilent(axisModel);
  const triggerEvent = axisModel.get("triggerEvent");
  each(labels, function(labelItem, index) {
    const tickValue = labelItem.tickValue;
    const formattedLabel = labelItem.formattedLabel;
    const rawLabel = labelItem.rawLabel;
    let itemLabelModel = labelModel;
    if (rawCategoryData && rawCategoryData[tickValue]) {
      const rawCategoryItem = rawCategoryData[tickValue];
      if (isObject(rawCategoryItem) && rawCategoryItem.textStyle) {
        itemLabelModel = new Model_default(rawCategoryItem.textStyle, labelModel, axisModel.ecModel);
      }
    }
    const textColor = itemLabelModel.getTextColor() || axisModel.get(["axisLine", "lineStyle", "color"]);
    const tickCoord = axis2.dataToCoord(tickValue);
    const textEl = new Text_default({
      x: tickCoord,
      y: opt.labelOffset + opt.labelDirection * labelMargin,
      rotation: labelLayout3.rotation,
      silent,
      z2: 10,
      style: createTextStyle(itemLabelModel, {
        text: formattedLabel,
        align: itemLabelModel.getShallow("align", true) || labelLayout3.textAlign,
        verticalAlign: itemLabelModel.getShallow("verticalAlign", true) || itemLabelModel.getShallow("baseline", true) || labelLayout3.textVerticalAlign,
        fill: typeof textColor === "function" ? textColor(axis2.type === "category" ? rawLabel : axis2.type === "value" ? tickValue + "" : tickValue, index) : textColor
      })
    });
    textEl.anid = "label_" + tickValue;
    if (triggerEvent) {
      const eventData = AxisBuilder2.makeAxisEventDataBase(axisModel);
      eventData.targetType = "axisLabel";
      eventData.value = rawLabel;
      getECData(textEl).eventData = eventData;
    }
    transformGroup.add(textEl);
    textEl.updateTransform();
    labelEls.push(textEl);
    group.add(textEl);
    textEl.decomposeTransform();
  });
  return labelEls;
}
const AxisBuilder_default = AxisBuilder2;

// src/component/axisPointer/modelHelper.ts
function collect(ecModel, api) {
  const result = {
    axesInfo: {},
    seriesInvolved: false,
    coordSysAxesInfo: {},
    coordSysMap: {}
  };
  collectAxesInfo(result, ecModel, api);
  result.seriesInvolved && collectSeriesInfo(result, ecModel);
  return result;
}
function collectAxesInfo(result, ecModel, api) {
  const globalTooltipModel = ecModel.getComponent("tooltip");
  const globalAxisPointerModel = ecModel.getComponent("axisPointer");
  const linksOption = globalAxisPointerModel.get("link", true) || [];
  const linkGroups = [];
  each(api.getCoordinateSystems(), function(coordSys) {
    if (!coordSys.axisPointerEnabled) {
      return;
    }
    const coordSysKey = makeKey(coordSys.model);
    const axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
    result.coordSysMap[coordSysKey] = coordSys;
    const coordSysModel = coordSys.model;
    const baseTooltipModel = coordSysModel.getModel("tooltip", globalTooltipModel);
    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null));
    if (coordSys.getTooltipAxes && globalTooltipModel && baseTooltipModel.get("show")) {
      const triggerAxis = baseTooltipModel.get("trigger") === "axis";
      const cross = baseTooltipModel.get(["axisPointer", "type"]) === "cross";
      const tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get(["axisPointer", "axis"]));
      if (triggerAxis || cross) {
        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? "cross" : true, triggerAxis));
      }
      if (cross) {
        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, "cross", false));
      }
    }
    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis2) {
      let axisPointerModel = axis2.model.getModel("axisPointer", globalAxisPointerModel);
      const axisPointerShow = axisPointerModel.get("show");
      if (!axisPointerShow || axisPointerShow === "auto" && !fromTooltip && !isHandleTrigger(axisPointerModel)) {
        return;
      }
      if (triggerTooltip == null) {
        triggerTooltip = axisPointerModel.get("triggerTooltip");
      }
      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis2, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
      const snap = axisPointerModel.get("snap");
      const axisKey = makeKey(axis2.model);
      const involveSeries = triggerTooltip || snap || axis2.type === "category";
      const axisInfo = result.axesInfo[axisKey] = {
        key: axisKey,
        axis: axis2,
        coordSys,
        axisPointerModel,
        triggerTooltip,
        involveSeries,
        snap,
        useHandle: isHandleTrigger(axisPointerModel),
        seriesModels: [],
        linkGroup: null
      };
      axesInfoInCoordSys[axisKey] = axisInfo;
      result.seriesInvolved = result.seriesInvolved || involveSeries;
      const groupIndex = getLinkGroupIndex(linksOption, axis2);
      if (groupIndex != null) {
        const linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
          axesInfo: {}
        });
        linkGroup.axesInfo[axisKey] = axisInfo;
        linkGroup.mapper = linksOption[groupIndex].mapper;
        axisInfo.linkGroup = linkGroup;
      }
    }
  });
}
function makeAxisPointerModel(axis2, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
  const tooltipAxisPointerModel = baseTooltipModel.getModel("axisPointer");
  const fields = ["type", "snap", "lineStyle", "shadowStyle", "label", "animation", "animationDurationUpdate", "animationEasingUpdate", "z"];
  const volatileOption = {};
  each(fields, function(field) {
    volatileOption[field] = clone2(tooltipAxisPointerModel.get(field));
  });
  volatileOption.snap = axis2.type !== "category" && !!triggerTooltip;
  if (tooltipAxisPointerModel.get("type") === "cross") {
    volatileOption.type = "line";
  }
  const labelOption = volatileOption.label || (volatileOption.label = {});
  labelOption.show == null && (labelOption.show = false);
  if (fromTooltip === "cross") {
    const tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get(["label", "show"]);
    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true;
    if (!triggerTooltip) {
      const crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get("crossStyle");
      crossStyle && defaults(labelOption, crossStyle.textStyle);
    }
  }
  return axis2.model.getModel("axisPointer", new Model_default(volatileOption, globalAxisPointerModel, ecModel));
}
function collectSeriesInfo(result, ecModel) {
  ecModel.eachSeries(function(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    const seriesTooltipTrigger = seriesModel.get(["tooltip", "trigger"], true);
    const seriesTooltipShow = seriesModel.get(["tooltip", "show"], true);
    if (!coordSys || seriesTooltipTrigger === "none" || seriesTooltipTrigger === false || seriesTooltipTrigger === "item" || seriesTooltipShow === false || seriesModel.get(["axisPointer", "show"], true) === false) {
      return;
    }
    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function(axisInfo) {
      const axis2 = axisInfo.axis;
      if (coordSys.getAxis(axis2.dim) === axis2) {
        axisInfo.seriesModels.push(seriesModel);
        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
        axisInfo.seriesDataCount += seriesModel.getData().count();
      }
    });
  });
}
function getLinkGroupIndex(linksOption, axis2) {
  const axisModel = axis2.model;
  const dim = axis2.dim;
  for (let i = 0; i < linksOption.length; i++) {
    const linkOption = linksOption[i] || {};
    if (checkPropInLink(linkOption[dim + "AxisId"], axisModel.id) || checkPropInLink(linkOption[dim + "AxisIndex"], axisModel.componentIndex) || checkPropInLink(linkOption[dim + "AxisName"], axisModel.name)) {
      return i;
    }
  }
}
function checkPropInLink(linkPropValue, axisPropValue) {
  return linkPropValue === "all" || isArray(linkPropValue) && indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
}
function fixValue(axisModel) {
  const axisInfo = getAxisInfo(axisModel);
  if (!axisInfo) {
    return;
  }
  const axisPointerModel = axisInfo.axisPointerModel;
  const scale4 = axisInfo.axis.scale;
  const option = axisPointerModel.option;
  const status = axisPointerModel.get("status");
  let value = axisPointerModel.get("value");
  if (value != null) {
    value = scale4.parse(value);
  }
  const useHandle = isHandleTrigger(axisPointerModel);
  if (status == null) {
    option.status = useHandle ? "show" : "hide";
  }
  const extent3 = scale4.getExtent().slice();
  extent3[0] > extent3[1] && extent3.reverse();
  if (value == null || value > extent3[1]) {
    value = extent3[1];
  }
  if (value < extent3[0]) {
    value = extent3[0];
  }
  option.value = value;
  if (useHandle) {
    option.status = axisInfo.axis.scale.isBlank() ? "hide" : "show";
  }
}
function getAxisInfo(axisModel) {
  const coordSysAxesInfo = (axisModel.ecModel.getComponent("axisPointer") || {}).coordSysAxesInfo;
  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];
}
function getAxisPointerModel(axisModel) {
  const axisInfo = getAxisInfo(axisModel);
  return axisInfo && axisInfo.axisPointerModel;
}
function isHandleTrigger(axisPointerModel) {
  return !!axisPointerModel.get(["handle", "show"]);
}
function makeKey(model65) {
  return model65.type + "||" + model65.id;
}

// src/component/axis/AxisView.ts
const axisPointerClazz = {};
class AxisView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = AxisView2.type;
  }
  render(axisModel, ecModel, api, payload) {
    this.axisPointerClass && fixValue(axisModel);
    super.render.apply(this, arguments);
    this._doUpdateAxisPointerClass(axisModel, api, true);
  }
  updateAxisPointer(axisModel, ecModel, api, payload) {
    this._doUpdateAxisPointerClass(axisModel, api, false);
  }
  remove(ecModel, api) {
    const axisPointer6 = this._axisPointer;
    axisPointer6 && axisPointer6.remove(api);
  }
  dispose(ecModel, api) {
    this._disposeAxisPointer(api);
    super.dispose.apply(this, arguments);
  }
  _doUpdateAxisPointerClass(axisModel, api, forceRender) {
    const Clazz = AxisView2.getAxisPointerClass(this.axisPointerClass);
    if (!Clazz) {
      return;
    }
    const axisPointerModel = getAxisPointerModel(axisModel);
    axisPointerModel ? (this._axisPointer || (this._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : this._disposeAxisPointer(api);
  }
  _disposeAxisPointer(api) {
    this._axisPointer && this._axisPointer.dispose(api);
    this._axisPointer = null;
  }
  static registerAxisPointerClass(type, clazz7) {
    if (__DEV__) {
      if (axisPointerClazz[type]) {
        throw new Error("axisPointer " + type + " exists");
      }
    }
    axisPointerClazz[type] = clazz7;
  }
  static getAxisPointerClass(type) {
    return type && axisPointerClazz[type];
  }
}
AxisView2.type = "axis";
const AxisView_default = AxisView2;

// src/coord/cartesian/cartesianAxisHelper.ts
function layout13(gridModel, axisModel, opt) {
  opt = opt || {};
  const grid2 = gridModel.coordinateSystem;
  const axis2 = axisModel.axis;
  const layout33 = {};
  const otherAxisOnZeroOf = axis2.getAxesOnZeroOf()[0];
  const rawAxisPosition = axis2.position;
  const axisPosition = otherAxisOnZeroOf ? "onZero" : rawAxisPosition;
  const axisDim = axis2.dim;
  const rect = grid2.getRect();
  const rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
  const idx = {
    left: 0,
    right: 1,
    top: 0,
    bottom: 1,
    onZero: 2
  };
  const axisOffset = axisModel.get("offset") || 0;
  const posBound = axisDim === "x" ? [rectBound[2] - axisOffset, rectBound[3] + axisOffset] : [rectBound[0] - axisOffset, rectBound[1] + axisOffset];
  if (otherAxisOnZeroOf) {
    const onZeroCoord = otherAxisOnZeroOf.toGlobalCoord(otherAxisOnZeroOf.dataToCoord(0));
    posBound[idx.onZero] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
  }
  layout33.position = [axisDim === "y" ? posBound[idx[axisPosition]] : rectBound[0], axisDim === "x" ? posBound[idx[axisPosition]] : rectBound[3]];
  layout33.rotation = Math.PI / 2 * (axisDim === "x" ? 0 : 1);
  const dirMap = {
    top: -1,
    bottom: 1,
    left: -1,
    right: 1
  };
  layout33.labelDirection = layout33.tickDirection = layout33.nameDirection = dirMap[rawAxisPosition];
  layout33.labelOffset = otherAxisOnZeroOf ? posBound[idx[rawAxisPosition]] - posBound[idx.onZero] : 0;
  if (axisModel.get(["axisTick", "inside"])) {
    layout33.tickDirection = -layout33.tickDirection;
  }
  if (retrieve(opt.labelInside, axisModel.get(["axisLabel", "inside"]))) {
    layout33.labelDirection = -layout33.labelDirection;
  }
  const labelRotate = axisModel.get(["axisLabel", "rotate"]);
  layout33.labelRotate = axisPosition === "top" ? -labelRotate : labelRotate;
  layout33.z2 = 1;
  return layout33;
}
function isCartesian2DSeries(seriesModel) {
  return seriesModel.get("coordinateSystem") === "cartesian2d";
}
function findAxisModels(seriesModel) {
  const axisModelMap = {
    xAxisModel: null,
    yAxisModel: null
  };
  each(axisModelMap, function(v4, key) {
    const axisType = key.replace(/Model$/, "");
    const axisModel = seriesModel.getReferringComponents(axisType, SINGLE_REFERRING).models[0];
    if (__DEV__) {
      if (!axisModel) {
        throw new Error(axisType + ' "' + retrieve3(seriesModel.get(axisType + "Index"), seriesModel.get(axisType + "Id"), 0) + '" not found');
      }
    }
    axisModelMap[key] = axisModel;
  });
  return axisModelMap;
}

// src/component/axis/axisSplitHelper.ts
const inner4 = makeInner();
function rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel) {
  const axis2 = axisModel.axis;
  if (axis2.scale.isBlank()) {
    return;
  }
  const splitAreaModel = axisModel.getModel("splitArea");
  const areaStyleModel = splitAreaModel.getModel("areaStyle");
  let areaColors = areaStyleModel.get("color");
  const gridRect = gridModel.coordinateSystem.getRect();
  const ticksCoords = axis2.getTicksCoords({
    tickModel: splitAreaModel,
    clamp: true
  });
  if (!ticksCoords.length) {
    return;
  }
  const areaColorsLen = areaColors.length;
  const lastSplitAreaColors = inner4(axisView).splitAreaColors;
  const newSplitAreaColors = createHashMap();
  let colorIndex = 0;
  if (lastSplitAreaColors) {
    for (let i = 0; i < ticksCoords.length; i++) {
      const cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);
      if (cIndex != null) {
        colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;
        break;
      }
    }
  }
  let prev = axis2.toGlobalCoord(ticksCoords[0].coord);
  const areaStyle2 = areaStyleModel.getAreaStyle();
  areaColors = isArray(areaColors) ? areaColors : [areaColors];
  for (let i = 1; i < ticksCoords.length; i++) {
    const tickCoord = axis2.toGlobalCoord(ticksCoords[i].coord);
    let x;
    let y;
    let width;
    let height;
    if (axis2.isHorizontal()) {
      x = prev;
      y = gridRect.y;
      width = tickCoord - x;
      height = gridRect.height;
      prev = x + width;
    } else {
      x = gridRect.x;
      y = prev;
      width = gridRect.width;
      height = tickCoord - y;
      prev = y + height;
    }
    const tickValue = ticksCoords[i - 1].tickValue;
    tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);
    axisGroup.add(new Rect_default({
      anid: tickValue != null ? "area_" + tickValue : null,
      shape: {
        x,
        y,
        width,
        height
      },
      style: defaults({
        fill: areaColors[colorIndex]
      }, areaStyle2),
      autoBatch: true,
      silent: true
    }));
    colorIndex = (colorIndex + 1) % areaColorsLen;
  }
  inner4(axisView).splitAreaColors = newSplitAreaColors;
}
function rectCoordAxisHandleRemove2(axisView) {
  inner4(axisView).splitAreaColors = null;
}

// src/component/axis/CartesianAxisView.ts
const axisBuilderAttrs = ["axisLine", "axisTickLabel", "axisName"];
const selfBuilderAttrs = ["splitArea", "splitLine", "minorSplitLine"];
class CartesianAxisView2 extends AxisView_default {
  constructor() {
    super(...arguments);
    this.type = CartesianAxisView2.type;
    this.axisPointerClass = "CartesianAxisPointer";
  }
  render(axisModel, ecModel, api, payload) {
    this.group.removeAll();
    const oldAxisGroup = this._axisGroup;
    this._axisGroup = new Group_default();
    this.group.add(this._axisGroup);
    if (!axisModel.get("show")) {
      return;
    }
    const gridModel = axisModel.getCoordSysModel();
    const layout33 = layout13(gridModel, axisModel);
    const axisBuilder = new AxisBuilder_default(axisModel, layout33);
    each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
    this._axisGroup.add(axisBuilder.getGroup());
    each(selfBuilderAttrs, function(name) {
      if (axisModel.get([name, "show"])) {
        axisElementBuilders[name](this, this._axisGroup, axisModel, gridModel);
      }
    }, this);
    groupTransition(oldAxisGroup, this._axisGroup, axisModel);
    super.render(axisModel, ecModel, api, payload);
  }
  remove() {
    rectCoordAxisHandleRemove2(this);
  }
}
CartesianAxisView2.type = "cartesianAxis";
const axisElementBuilders = {
  splitLine(axisView, axisGroup, axisModel, gridModel) {
    const axis2 = axisModel.axis;
    if (axis2.scale.isBlank()) {
      return;
    }
    const splitLineModel = axisModel.getModel("splitLine");
    const lineStyleModel = splitLineModel.getModel("lineStyle");
    let lineColors = lineStyleModel.get("color");
    lineColors = isArray(lineColors) ? lineColors : [lineColors];
    const gridRect = gridModel.coordinateSystem.getRect();
    const isHorizontal = axis2.isHorizontal();
    let lineCount = 0;
    const ticksCoords = axis2.getTicksCoords({
      tickModel: splitLineModel
    });
    const p1 = [];
    const p2 = [];
    const lineStyle3 = lineStyleModel.getLineStyle();
    for (let i = 0; i < ticksCoords.length; i++) {
      const tickCoord = axis2.toGlobalCoord(ticksCoords[i].coord);
      if (isHorizontal) {
        p1[0] = tickCoord;
        p1[1] = gridRect.y;
        p2[0] = tickCoord;
        p2[1] = gridRect.y + gridRect.height;
      } else {
        p1[0] = gridRect.x;
        p1[1] = tickCoord;
        p2[0] = gridRect.x + gridRect.width;
        p2[1] = tickCoord;
      }
      const colorIndex = lineCount++ % lineColors.length;
      const tickValue = ticksCoords[i].tickValue;
      axisGroup.add(new Line_default({
        anid: tickValue != null ? "line_" + ticksCoords[i].tickValue : null,
        subPixelOptimize: true,
        autoBatch: true,
        shape: {
          x1: p1[0],
          y1: p1[1],
          x2: p2[0],
          y2: p2[1]
        },
        style: defaults({
          stroke: lineColors[colorIndex]
        }, lineStyle3),
        silent: true
      }));
    }
  },
  minorSplitLine(axisView, axisGroup, axisModel, gridModel) {
    const axis2 = axisModel.axis;
    const minorSplitLineModel = axisModel.getModel("minorSplitLine");
    const lineStyleModel = minorSplitLineModel.getModel("lineStyle");
    const gridRect = gridModel.coordinateSystem.getRect();
    const isHorizontal = axis2.isHorizontal();
    const minorTicksCoords = axis2.getMinorTicksCoords();
    if (!minorTicksCoords.length) {
      return;
    }
    const p1 = [];
    const p2 = [];
    const lineStyle3 = lineStyleModel.getLineStyle();
    for (let i = 0; i < minorTicksCoords.length; i++) {
      for (let k = 0; k < minorTicksCoords[i].length; k++) {
        const tickCoord = axis2.toGlobalCoord(minorTicksCoords[i][k].coord);
        if (isHorizontal) {
          p1[0] = tickCoord;
          p1[1] = gridRect.y;
          p2[0] = tickCoord;
          p2[1] = gridRect.y + gridRect.height;
        } else {
          p1[0] = gridRect.x;
          p1[1] = tickCoord;
          p2[0] = gridRect.x + gridRect.width;
          p2[1] = tickCoord;
        }
        axisGroup.add(new Line_default({
          anid: "minor_line_" + minorTicksCoords[i][k].tickValue,
          subPixelOptimize: true,
          autoBatch: true,
          shape: {
            x1: p1[0],
            y1: p1[1],
            x2: p2[0],
            y2: p2[1]
          },
          style: lineStyle3,
          silent: true
        }));
      }
    }
  },
  splitArea(axisView, axisGroup, axisModel, gridModel) {
    rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel);
  }
};
class CartesianXAxisView extends CartesianAxisView2 {
  constructor() {
    super(...arguments);
    this.type = CartesianXAxisView.type;
  }
}
CartesianXAxisView.type = "xAxis";
class CartesianYAxisView extends CartesianAxisView2 {
  constructor() {
    super(...arguments);
    this.type = CartesianXAxisView.type;
  }
}
CartesianYAxisView.type = "yAxis";
Component_default2.registerClass(CartesianXAxisView);
Component_default2.registerClass(CartesianYAxisView);

// src/component/axis.ts

// src/coord/cartesian/defaultAxisExtentFromData.ts
registerProcessor(PRIORITY.PROCESSOR.FILTER + 10, {
  getTargetSeries: function(ecModel) {
    const seriesModelMap = createHashMap();
    ecModel.eachSeries(function(seriesModel) {
      isCartesian2DSeries(seriesModel) && seriesModelMap.set(seriesModel.uid, seriesModel);
    });
    return seriesModelMap;
  },
  overallReset: function(ecModel, api) {
    const seriesRecords = [];
    const axisRecordMap = createHashMap();
    prepareDataExtentOnAxis(ecModel, axisRecordMap, seriesRecords);
    calculateFilteredExtent(axisRecordMap, seriesRecords);
    shrinkAxisExtent(axisRecordMap);
  }
});
function prepareDataExtentOnAxis(ecModel, axisRecordMap, seriesRecords) {
  ecModel.eachSeries(function(seriesModel) {
    if (!isCartesian2DSeries(seriesModel)) {
      return;
    }
    const axesModelMap = findAxisModels(seriesModel);
    const xAxisModel = axesModelMap.xAxisModel;
    const yAxisModel = axesModelMap.yAxisModel;
    const xAxis = xAxisModel.axis;
    const yAxis = yAxisModel.axis;
    const xRawExtentInfo = xAxis.scale.rawExtentInfo;
    const yRawExtentInfo = yAxis.scale.rawExtentInfo;
    const data = seriesModel.getData();
    if (xRawExtentInfo && xRawExtentInfo.frozen || yRawExtentInfo && yRawExtentInfo.frozen) {
      return;
    }
    seriesRecords.push({
      seriesModel,
      xAxisModel,
      yAxisModel
    });
    unionAxisExtentFromData(prepareAxisRecord(axisRecordMap, xAxisModel).condExtent, data, xAxis.dim);
    unionAxisExtentFromData(prepareAxisRecord(axisRecordMap, yAxisModel).condExtent, data, yAxis.dim);
  });
}
function calculateFilteredExtent(axisRecordMap, seriesRecords) {
  each(seriesRecords, function(seriesRecord) {
    const xAxisModel = seriesRecord.xAxisModel;
    const yAxisModel = seriesRecord.yAxisModel;
    const xAxis = xAxisModel.axis;
    const yAxis = yAxisModel.axis;
    const xAxisRecord = prepareAxisRecord(axisRecordMap, xAxisModel);
    const yAxisRecord = prepareAxisRecord(axisRecordMap, yAxisModel);
    xAxisRecord.rawExtentInfo = ensureScaleRawExtentInfo(xAxis.scale, xAxisModel, xAxisRecord.condExtent);
    yAxisRecord.rawExtentInfo = ensureScaleRawExtentInfo(yAxis.scale, yAxisModel, yAxisRecord.condExtent);
    xAxisRecord.rawExtentResult = xAxisRecord.rawExtentInfo.calculate();
    yAxisRecord.rawExtentResult = yAxisRecord.rawExtentInfo.calculate();
    const data = seriesRecord.seriesModel.getData();
    const condDimMap = {};
    const tarDimMap = {};
    let condAxisExtent;
    let tarAxisRecord;
    function addCondition(axis2, axisRecord) {
      const condExtent = axisRecord.condExtent;
      const rawExtentResult = axisRecord.rawExtentResult;
      if (axis2.type === "category" && (condExtent[0] < rawExtentResult.min || rawExtentResult.max < condExtent[1])) {
        each(getDataDimensionsOnAxis(data, axis2.dim), function(dataDim) {
          if (!hasOwn(condDimMap, dataDim)) {
            condDimMap[dataDim] = true;
            condAxisExtent = [rawExtentResult.min, rawExtentResult.max];
          }
        });
      }
    }
    function addTarget(axis2, axisRecord) {
      const rawExtentResult = axisRecord.rawExtentResult;
      if (axis2.type !== "category" && (!rawExtentResult.minFixed || !rawExtentResult.maxFixed)) {
        each(getDataDimensionsOnAxis(data, axis2.dim), function(dataDim) {
          if (!hasOwn(condDimMap, dataDim) && !hasOwn(tarDimMap, dataDim)) {
            tarDimMap[dataDim] = true;
            tarAxisRecord = axisRecord;
          }
        });
      }
    }
    addCondition(xAxis, xAxisRecord);
    addCondition(yAxis, yAxisRecord);
    addTarget(xAxis, xAxisRecord);
    addTarget(yAxis, yAxisRecord);
    const condDims = keys(condDimMap);
    const tarDims = keys(tarDimMap);
    const tarDimExtents = map2(tarDims, function() {
      return initExtent();
    });
    const condDimsLen = condDims.length;
    const tarDimsLen = tarDims.length;
    if (!condDimsLen || !tarDimsLen) {
      return;
    }
    const singleCondDim = condDimsLen === 1 ? condDims[0] : null;
    const singleTarDim = tarDimsLen === 1 ? tarDims[0] : null;
    const dataLen = data.count();
    if (singleCondDim && singleTarDim) {
      for (let dataIdx = 0; dataIdx < dataLen; dataIdx++) {
        const condVal = data.get(singleCondDim, dataIdx);
        if (condVal >= condAxisExtent[0] && condVal <= condAxisExtent[1]) {
          unionExtent(tarDimExtents[0], data.get(singleTarDim, dataIdx));
        }
      }
    } else {
      for (let dataIdx = 0; dataIdx < dataLen; dataIdx++) {
        for (let j = 0; j < condDimsLen; j++) {
          const condVal = data.get(condDims[j], dataIdx);
          if (condVal >= condAxisExtent[0] && condVal <= condAxisExtent[1]) {
            for (let k = 0; k < tarDimsLen; k++) {
              unionExtent(tarDimExtents[k], data.get(tarDims[k], dataIdx));
            }
            break;
          }
        }
      }
    }
    each(tarDimExtents, function(tarDimExtent, i) {
      const dim = tarDims[i];
      data.setApproximateExtent(tarDimExtent, dim);
      const tarAxisExtent = tarAxisRecord.tarExtent = tarAxisRecord.tarExtent || initExtent();
      unionExtent(tarAxisExtent, tarDimExtent[0]);
      unionExtent(tarAxisExtent, tarDimExtent[1]);
    });
  });
}
function shrinkAxisExtent(axisRecordMap) {
  axisRecordMap.each(function(axisRecord) {
    const tarAxisExtent = axisRecord.tarExtent;
    if (tarAxisExtent) {
      const rawExtentResult = axisRecord.rawExtentResult;
      const rawExtentInfo = axisRecord.rawExtentInfo;
      if (!rawExtentResult.minFixed && tarAxisExtent[0] > rawExtentResult.min) {
        rawExtentInfo.modifyDataMinMax("min", tarAxisExtent[0]);
      }
      if (!rawExtentResult.maxFixed && tarAxisExtent[1] < rawExtentResult.max) {
        rawExtentInfo.modifyDataMinMax("max", tarAxisExtent[1]);
      }
    }
  });
}
function prepareAxisRecord(axisRecordMap, axisModel) {
  return axisRecordMap.get(axisModel.uid) || axisRecordMap.set(axisModel.uid, {
    condExtent: initExtent()
  });
}
function initExtent() {
  return [Infinity, -Infinity];
}
function unionExtent(extent3, val) {
  val < extent3[0] && (extent3[0] = val);
  val > extent3[1] && (extent3[1] = val);
}

// src/coord/cartesian/GridModel.ts
class GridModel14 extends Component_default {
}
GridModel14.type = "grid";
GridModel14.dependencies = ["xAxis", "yAxis"];
GridModel14.layoutMode = "box";
GridModel14.defaultOption = {
  show: false,
  zlevel: 0,
  z: 0,
  left: "10%",
  top: 60,
  right: "10%",
  bottom: 60,
  containLabel: false,
  backgroundColor: "rgba(0,0,0,0)",
  borderWidth: 1,
  borderColor: "#ccc"
};
const GridModel_default = GridModel14;

// src/component/gridSimple.ts
class GridView extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = "grid";
  }
  render(gridModel, ecModel) {
    this.group.removeAll();
    if (gridModel.get("show")) {
      this.group.add(new Rect_default({
        shape: gridModel.coordinateSystem.getRect(),
        style: defaults({
          fill: gridModel.get("backgroundColor")
        }, gridModel.getItemStyle()),
        silent: true,
        z2: -1
      }));
    }
  }
}
GridView.type = "grid";
Component_default2.registerClass(GridView);
Component_default.registerClass(GridModel_default);
registerPreprocessor(function(option) {
  if (option.xAxis && option.yAxis && !option.grid) {
    option.grid = {};
  }
});

// src/chart/line.ts
registerLayout(points_default("line"));
registerProcessor(PRIORITY.PROCESSOR.STATISTIC, dataSample_default("line"));

// src/coord/cartesian/Cartesian.ts
class Cartesian {
  constructor(name) {
    this.type = "cartesian";
    this._dimList = [];
    this._axes = {};
    this.name = name || "";
  }
  getAxis(dim) {
    return this._axes[dim];
  }
  getAxes() {
    return map2(this._dimList, function(dim) {
      return this._axes[dim];
    }, this);
  }
  getAxesByScale(scaleType) {
    scaleType = scaleType.toLowerCase();
    return filter(this.getAxes(), function(axis2) {
      return axis2.scale.type === scaleType;
    });
  }
  addAxis(axis2) {
    const dim = axis2.dim;
    this._axes[dim] = axis2;
    this._dimList.push(dim);
  }
}
const Cartesian_default = Cartesian;

// src/coord/cartesian/Cartesian2D.ts
const cartesian2DDimensions = ["x", "y"];
class Cartesian2D19 extends Cartesian_default {
  constructor() {
    super(...arguments);
    this.type = "cartesian2d";
    this.dimensions = cartesian2DDimensions;
  }
  getBaseAxis() {
    return this.getAxesByScale("ordinal")[0] || this.getAxesByScale("time")[0] || this.getAxis("x");
  }
  containPoint(point) {
    const axisX = this.getAxis("x");
    const axisY = this.getAxis("y");
    return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
  }
  containData(data) {
    return this.getAxis("x").containData(data[0]) && this.getAxis("y").containData(data[1]);
  }
  dataToPoint(data, reserved, out2) {
    const xAxis = this.getAxis("x");
    const yAxis = this.getAxis("y");
    out2 = out2 || [];
    out2[0] = xAxis.toGlobalCoord(xAxis.dataToCoord(data[0]));
    out2[1] = yAxis.toGlobalCoord(yAxis.dataToCoord(data[1]));
    return out2;
  }
  clampData(data, out2) {
    const xScale = this.getAxis("x").scale;
    const yScale = this.getAxis("y").scale;
    const xAxisExtent = xScale.getExtent();
    const yAxisExtent = yScale.getExtent();
    const x = xScale.parse(data[0]);
    const y = yScale.parse(data[1]);
    out2 = out2 || [];
    out2[0] = Math.min(Math.max(Math.min(xAxisExtent[0], xAxisExtent[1]), x), Math.max(xAxisExtent[0], xAxisExtent[1]));
    out2[1] = Math.min(Math.max(Math.min(yAxisExtent[0], yAxisExtent[1]), y), Math.max(yAxisExtent[0], yAxisExtent[1]));
    return out2;
  }
  pointToData(point, out2) {
    const xAxis = this.getAxis("x");
    const yAxis = this.getAxis("y");
    out2 = out2 || [];
    out2[0] = xAxis.coordToData(xAxis.toLocalCoord(point[0]));
    out2[1] = yAxis.coordToData(yAxis.toLocalCoord(point[1]));
    return out2;
  }
  getOtherAxis(axis2) {
    return this.getAxis(axis2.dim === "x" ? "y" : "x");
  }
  getArea() {
    const xExtent = this.getAxis("x").getGlobalExtent();
    const yExtent = this.getAxis("y").getGlobalExtent();
    const x = Math.min(xExtent[0], xExtent[1]);
    const y = Math.min(yExtent[0], yExtent[1]);
    const width = Math.max(xExtent[0], xExtent[1]) - x;
    const height = Math.max(yExtent[0], yExtent[1]) - y;
    return new BoundingRect_default(x, y, width, height);
  }
}
const Cartesian2D_default = Cartesian2D19;

// src/coord/cartesian/Axis2D.ts
class Axis2D9 extends Axis_default {
  constructor(dim, scale4, coordExtent, axisType, position2) {
    super(dim, scale4, coordExtent);
    this.index = 0;
    this.type = axisType || "value";
    this.position = position2 || "bottom";
  }
  isHorizontal() {
    const position2 = this.position;
    return position2 === "top" || position2 === "bottom";
  }
  getGlobalExtent(asc4) {
    const ret = this.getExtent();
    ret[0] = this.toGlobalCoord(ret[0]);
    ret[1] = this.toGlobalCoord(ret[1]);
    asc4 && ret[0] > ret[1] && ret.reverse();
    return ret;
  }
  pointToData(point, clamp2) {
    return this.coordToData(this.toLocalCoord(point[this.dim === "x" ? 0 : 1]), clamp2);
  }
  setCategorySortInfo(info) {
    if (this.type !== "category") {
      return false;
    }
    this.model.option.categorySortInfo = info;
    this.scale.setCategorySortInfo(info);
  }
}
const Axis2D_default = Axis2D9;

// src/coord/cartesian/Grid.ts
class Grid9 {
  constructor(gridModel, ecModel, api) {
    this.type = "grid";
    this._coordsMap = {};
    this._coordsList = [];
    this._axesMap = {};
    this._axesList = [];
    this.axisPointerEnabled = true;
    this.dimensions = cartesian2DDimensions;
    this._initCartesian(gridModel, ecModel, api);
    this.model = gridModel;
  }
  getRect() {
    return this._rect;
  }
  update(ecModel, api) {
    const axesMap = this._axesMap;
    this._updateScale(ecModel, this.model);
    each(axesMap.x, function(xAxis) {
      niceScaleExtent(xAxis.scale, xAxis.model);
    });
    each(axesMap.y, function(yAxis) {
      niceScaleExtent(yAxis.scale, yAxis.model);
    });
    const onZeroRecords = {};
    each(axesMap.x, function(xAxis) {
      fixAxisOnZero(axesMap, "y", xAxis, onZeroRecords);
    });
    each(axesMap.y, function(yAxis) {
      fixAxisOnZero(axesMap, "x", yAxis, onZeroRecords);
    });
    this.resize(this.model, api);
  }
  resize(gridModel, api, ignoreContainLabel) {
    const gridRect = getLayoutRect(gridModel.getBoxLayoutParams(), {
      width: api.getWidth(),
      height: api.getHeight()
    });
    this._rect = gridRect;
    const axesList = this._axesList;
    adjustAxes();
    if (!ignoreContainLabel && gridModel.get("containLabel")) {
      each(axesList, function(axis2) {
        if (!axis2.model.get(["axisLabel", "inside"])) {
          const labelUnionRect = estimateLabelUnionRect(axis2);
          if (labelUnionRect) {
            const dim = axis2.isHorizontal() ? "height" : "width";
            const margin = axis2.model.get(["axisLabel", "margin"]);
            gridRect[dim] -= labelUnionRect[dim] + margin;
            if (axis2.position === "top") {
              gridRect.y += labelUnionRect.height + margin;
            } else if (axis2.position === "left") {
              gridRect.x += labelUnionRect.width + margin;
            }
          }
        }
      });
      adjustAxes();
    }
    function adjustAxes() {
      each(axesList, function(axis2) {
        const isHorizontal = axis2.isHorizontal();
        const extent3 = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
        const idx = axis2.inverse ? 1 : 0;
        axis2.setExtent(extent3[idx], extent3[1 - idx]);
        updateAxisTransform(axis2, isHorizontal ? gridRect.x : gridRect.y);
      });
    }
  }
  getAxis(dim, axisIndex) {
    const axesMapOnDim = this._axesMap[dim];
    if (axesMapOnDim != null) {
      return axesMapOnDim[axisIndex || 0];
    }
  }
  getAxes() {
    return this._axesList.slice();
  }
  getCartesian(xAxisIndex, yAxisIndex) {
    if (xAxisIndex != null && yAxisIndex != null) {
      const key = "x" + xAxisIndex + "y" + yAxisIndex;
      return this._coordsMap[key];
    }
    if (isObject(xAxisIndex)) {
      yAxisIndex = xAxisIndex.yAxisIndex;
      xAxisIndex = xAxisIndex.xAxisIndex;
    }
    for (let i = 0, coordList = this._coordsList; i < coordList.length; i++) {
      if (coordList[i].getAxis("x").index === xAxisIndex || coordList[i].getAxis("y").index === yAxisIndex) {
        return coordList[i];
      }
    }
  }
  getCartesians() {
    return this._coordsList.slice();
  }
  convertToPixel(ecModel, finder, value) {
    const target = this._findConvertTarget(finder);
    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
  }
  convertFromPixel(ecModel, finder, value) {
    const target = this._findConvertTarget(finder);
    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
  }
  _findConvertTarget(finder) {
    const seriesModel = finder.seriesModel;
    const xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents("xAxis", SINGLE_REFERRING).models[0];
    const yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents("yAxis", SINGLE_REFERRING).models[0];
    const gridModel = finder.gridModel;
    const coordsList = this._coordsList;
    let cartesian;
    let axis2;
    if (seriesModel) {
      cartesian = seriesModel.coordinateSystem;
      indexOf(coordsList, cartesian) < 0 && (cartesian = null);
    } else if (xAxisModel && yAxisModel) {
      cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
    } else if (xAxisModel) {
      axis2 = this.getAxis("x", xAxisModel.componentIndex);
    } else if (yAxisModel) {
      axis2 = this.getAxis("y", yAxisModel.componentIndex);
    } else if (gridModel) {
      const grid2 = gridModel.coordinateSystem;
      if (grid2 === this) {
        cartesian = this._coordsList[0];
      }
    }
    return {
      cartesian,
      axis: axis2
    };
  }
  containPoint(point) {
    const coord = this._coordsList[0];
    if (coord) {
      return coord.containPoint(point);
    }
  }
  _initCartesian(gridModel, ecModel, api) {
    const grid2 = this;
    const axisPositionUsed = {
      left: false,
      right: false,
      top: false,
      bottom: false
    };
    const axesMap = {
      x: {},
      y: {}
    };
    const axesCount = {
      x: 0,
      y: 0
    };
    ecModel.eachComponent("xAxis", createAxisCreator("x"), this);
    ecModel.eachComponent("yAxis", createAxisCreator("y"), this);
    if (!axesCount.x || !axesCount.y) {
      this._axesMap = {};
      this._axesList = [];
      return;
    }
    this._axesMap = axesMap;
    each(axesMap.x, (xAxis, xAxisIndex) => {
      each(axesMap.y, (yAxis, yAxisIndex) => {
        const key = "x" + xAxisIndex + "y" + yAxisIndex;
        const cartesian = new Cartesian2D_default(key);
        cartesian.master = this;
        cartesian.model = gridModel;
        this._coordsMap[key] = cartesian;
        this._coordsList.push(cartesian);
        cartesian.addAxis(xAxis);
        cartesian.addAxis(yAxis);
      });
    });
    function createAxisCreator(dimName) {
      return function(axisModel, idx) {
        if (!isAxisUsedInTheGrid(axisModel, gridModel)) {
          return;
        }
        let axisPosition = axisModel.get("position");
        if (dimName === "x") {
          if (axisPosition !== "top" && axisPosition !== "bottom") {
            axisPosition = axisPositionUsed.bottom ? "top" : "bottom";
          }
        } else {
          if (axisPosition !== "left" && axisPosition !== "right") {
            axisPosition = axisPositionUsed.left ? "right" : "left";
          }
        }
        axisPositionUsed[axisPosition] = true;
        const axis2 = new Axis2D_default(dimName, createScaleByModel2(axisModel), [0, 0], axisModel.get("type"), axisPosition);
        const isCategory2 = axis2.type === "category";
        axis2.onBand = isCategory2 && axisModel.get("boundaryGap");
        axis2.inverse = axisModel.get("inverse");
        axisModel.axis = axis2;
        axis2.model = axisModel;
        axis2.grid = grid2;
        axis2.index = idx;
        grid2._axesList.push(axis2);
        axesMap[dimName][idx] = axis2;
        axesCount[dimName]++;
      };
    }
  }
  _updateScale(ecModel, gridModel) {
    const sortedDataValue = [];
    const sortedDataIndex = [];
    let hasCategoryIndices = false;
    each(this._axesList, function(axis2) {
      axis2.scale.setExtent(Infinity, -Infinity);
      if (axis2.type === "category") {
        const categorySortInfo = axis2.model.get("categorySortInfo");
        axis2.scale.setCategorySortInfo(categorySortInfo);
      }
    });
    ecModel.eachSeries(function(seriesModel) {
      if (isCartesian2DSeries(seriesModel)) {
        const axesModelMap = findAxisModels(seriesModel);
        const xAxisModel = axesModelMap.xAxisModel;
        const yAxisModel = axesModelMap.yAxisModel;
        if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {
          return;
        }
        const cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
        const data = seriesModel.getData();
        const xAxis = cartesian.getAxis("x");
        const yAxis = cartesian.getAxis("y");
        if (data.type === "list") {
          unionExtent2(data, xAxis);
          unionExtent2(data, yAxis);
        }
      }
    }, this);
    function unionExtent2(data, axis2) {
      each(getDataDimensionsOnAxis(data, axis2.dim), function(dim) {
        axis2.scale.unionExtentFromData(data, dim);
      });
    }
  }
  getTooltipAxes(dim) {
    const baseAxes = [];
    const otherAxes = [];
    each(this.getCartesians(), function(cartesian) {
      const baseAxis = dim != null && dim !== "auto" ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
      const otherAxis = cartesian.getOtherAxis(baseAxis);
      indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
      indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
    });
    return {
      baseAxes,
      otherAxes
    };
  }
  static create(ecModel, api) {
    const grids = [];
    ecModel.eachComponent("grid", function(gridModel, idx) {
      const grid2 = new Grid9(gridModel, ecModel, api);
      grid2.name = "grid_" + idx;
      grid2.resize(gridModel, api, true);
      gridModel.coordinateSystem = grid2;
      grids.push(grid2);
    });
    ecModel.eachSeries(function(seriesModel) {
      if (!isCartesian2DSeries(seriesModel)) {
        return;
      }
      const axesModelMap = findAxisModels(seriesModel);
      const xAxisModel = axesModelMap.xAxisModel;
      const yAxisModel = axesModelMap.yAxisModel;
      const gridModel = xAxisModel.getCoordSysModel();
      if (__DEV__) {
        if (!gridModel) {
          throw new Error('Grid "' + retrieve3(xAxisModel.get("gridIndex"), xAxisModel.get("gridId"), 0) + '" not found');
        }
        if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {
          throw new Error("xAxis and yAxis must use the same grid");
        }
      }
      const grid2 = gridModel.coordinateSystem;
      seriesModel.coordinateSystem = grid2.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
    });
    return grids;
  }
}
Grid9.dimensions = cartesian2DDimensions;
function isAxisUsedInTheGrid(axisModel, gridModel) {
  return axisModel.getCoordSysModel() === gridModel;
}
function fixAxisOnZero(axesMap, otherAxisDim, axis2, onZeroRecords) {
  axis2.getAxesOnZeroOf = function() {
    return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];
  };
  const otherAxes = axesMap[otherAxisDim];
  let otherAxisOnZeroOf;
  const axisModel = axis2.model;
  const onZero = axisModel.get(["axisLine", "onZero"]);
  const onZeroAxisIndex = axisModel.get(["axisLine", "onZeroAxisIndex"]);
  if (!onZero) {
    return;
  }
  if (onZeroAxisIndex != null) {
    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {
      otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];
    }
  } else {
    for (const idx in otherAxes) {
      if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {
        otherAxisOnZeroOf = otherAxes[idx];
        break;
      }
    }
  }
  if (otherAxisOnZeroOf) {
    onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;
  }
  function getOnZeroRecordKey(axis3) {
    return axis3.dim + "_" + axis3.index;
  }
}
function canOnZeroToAxis(axis2) {
  return axis2 && axis2.type !== "category" && axis2.type !== "time" && ifAxisCrossZero(axis2);
}
function updateAxisTransform(axis2, coordBase) {
  const axisExtent = axis2.getExtent();
  const axisExtentSum = axisExtent[0] + axisExtent[1];
  axis2.toGlobalCoord = axis2.dim === "x" ? function(coord) {
    return coord + coordBase;
  } : function(coord) {
    return axisExtentSum - coord + coordBase;
  };
  axis2.toLocalCoord = axis2.dim === "x" ? function(coord) {
    return coord - coordBase;
  } : function(coord) {
    return axisExtentSum - coord + coordBase;
  };
}
CoordinateSystem_default.register("cartesian2d", Grid9);

// src/chart/bar/BaseBarSeries.ts
class BaseBarSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = BaseBarSeriesModel.type;
  }
  getInitialData(option, ecModel) {
    return createListFromArray_default(this.getSource(), this, {
      useEncodeDefaulter: true
    });
  }
  getMarkerPosition(value) {
    const coordSys = this.coordinateSystem;
    if (coordSys) {
      const pt = coordSys.dataToPoint(coordSys.clampData(value));
      const data = this.getData();
      const offset = data.getLayout("offset");
      const size = data.getLayout("size");
      const offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
      pt[offsetIndex] += offset + size / 2;
      return pt;
    }
    return [NaN, NaN];
  }
}
BaseBarSeriesModel.type = "series.__base_bar__";
BaseBarSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "cartesian2d",
  legendHoverLink: true,
  barMinHeight: 0,
  barMinAngle: 0,
  large: false,
  largeThreshold: 400,
  progressive: 3000,
  progressiveChunkMode: "mod"
};
Series_default.registerClass(BaseBarSeriesModel);
const BaseBarSeries_default = BaseBarSeriesModel;

// src/chart/bar/BarSeries.ts
class BarSeriesModel extends BaseBarSeries_default {
  constructor() {
    super(...arguments);
    this.type = BarSeriesModel.type;
  }
  getProgressive() {
    return this.get("large") ? this.get("progressive") : false;
  }
  getProgressiveThreshold() {
    let progressiveThreshold = this.get("progressiveThreshold");
    const largeThreshold = this.get("largeThreshold");
    if (largeThreshold > progressiveThreshold) {
      progressiveThreshold = largeThreshold;
    }
    return progressiveThreshold;
  }
  brushSelector(dataIndex, data, selectors) {
    return selectors.rect(data.getItemLayout(dataIndex));
  }
}
BarSeriesModel.type = "series.bar";
BarSeriesModel.dependencies = ["grid", "polar"];
BarSeriesModel.defaultOption = inheritDefaultOption(BaseBarSeries_default.defaultOption, {
  clip: true,
  roundCap: false,
  showBackground: false,
  backgroundStyle: {
    color: "rgba(180, 180, 180, 0.2)",
    borderColor: null,
    borderWidth: 0,
    borderType: "solid",
    borderRadius: 0,
    shadowBlur: 0,
    shadowColor: null,
    shadowOffsetX: 0,
    shadowOffsetY: 0,
    opacity: 1
  },
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  }
});
Series_default.registerClass(BarSeriesModel);

// src/util/shape/sausage.ts
class SausageShape {
  constructor() {
    this.cx = 0;
    this.cy = 0;
    this.r0 = 0;
    this.r = 0;
    this.startAngle = 0;
    this.endAngle = Math.PI * 2;
    this.clockwise = true;
  }
}
class SausagePath extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "sausage";
  }
  getDefaultShape() {
    return new SausageShape();
  }
  buildPath(ctx, shape) {
    const x = shape.cx;
    const y = shape.cy;
    const r0 = Math.max(shape.r0 || 0, 0);
    const r = Math.max(shape.r, 0);
    const dr = (r - r0) * 0.5;
    const rCenter = r0 + dr;
    const startAngle = shape.startAngle;
    const endAngle = shape.endAngle;
    const clockwise = shape.clockwise;
    const unitStartX = Math.cos(startAngle);
    const unitStartY = Math.sin(startAngle);
    const unitEndX = Math.cos(endAngle);
    const unitEndY = Math.sin(endAngle);
    const lessThanCircle = clockwise ? endAngle - startAngle < Math.PI * 2 : startAngle - endAngle < Math.PI * 2;
    if (lessThanCircle) {
      ctx.moveTo(unitStartX * r0 + x, unitStartY * r0 + y);
      ctx.arc(unitStartX * rCenter + x, unitStartY * rCenter + y, dr, -Math.PI + startAngle, startAngle, !clockwise);
    }
    ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
    ctx.moveTo(unitEndX * r + x, unitEndY * r + y);
    ctx.arc(unitEndX * rCenter + x, unitEndY * rCenter + y, dr, endAngle - Math.PI * 2, endAngle - Math.PI, !clockwise);
    if (r0 !== 0) {
      ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
      ctx.moveTo(unitStartX * r0 + x, unitEndY * r0 + y);
    }
    ctx.closePath();
  }
}
const sausage_default = SausagePath;

// src/coord/CoordinateSystem.ts
function isCoordinateSystemType(coordSys, type) {
  return coordSys.type === type;
}

// src/chart/bar/BarView.ts
const BAR_BORDER_WIDTH_QUERY = ["itemStyle", "borderWidth"];
const BAR_BORDER_RADIUS_QUERY = ["itemStyle", "borderRadius"];
const _eventPos = [0, 0];
const mathMax4 = Math.max;
const mathMin4 = Math.min;
function getClipArea(coord, data) {
  let coordSysClipArea;
  if (isCoordinateSystemType(coord, "cartesian2d")) {
    coordSysClipArea = coord.getArea && coord.getArea();
    const baseAxis = coord.getBaseAxis();
    if (baseAxis.type !== "category" || !baseAxis.onBand) {
      const expandWidth = data.getLayout("bandWidth");
      if (baseAxis.isHorizontal()) {
        coordSysClipArea.x -= expandWidth;
        coordSysClipArea.width += expandWidth * 2;
      } else {
        coordSysClipArea.y -= expandWidth;
        coordSysClipArea.height += expandWidth * 2;
      }
    }
  }
  return coordSysClipArea;
}
class BarView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = BarView2.type;
  }
  render(seriesModel, ecModel, api, payload) {
    this._model = seriesModel;
    this._updateDrawMode(seriesModel);
    const coordinateSystemType = seriesModel.get("coordinateSystem");
    const isReorder = payload && payload.type === "changeAxisOrder";
    if (coordinateSystemType === "cartesian2d" || coordinateSystemType === "polar") {
      this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api, isReorder);
    } else if (__DEV__) {
      console.warn("Only cartesian2d and polar supported for bar.");
    }
  }
  incrementalPrepareRender(seriesModel) {
    this._clear();
    this._updateDrawMode(seriesModel);
    this._updateLargeClip(seriesModel);
  }
  incrementalRender(params, seriesModel) {
    this._incrementalRenderLarge(params, seriesModel);
  }
  _updateDrawMode(seriesModel) {
    const isLargeDraw = seriesModel.pipelineContext.large;
    if (this._isLargeDraw == null || isLargeDraw !== this._isLargeDraw) {
      this._isLargeDraw = isLargeDraw;
      this._clear();
    }
  }
  _renderNormal(seriesModel, ecModel, api, isReorder) {
    const that = this;
    const group = this.group;
    const data = seriesModel.getData();
    const oldData = this._data;
    const coord = seriesModel.coordinateSystem;
    const baseAxis = coord.getBaseAxis();
    let valueAxis2;
    let isHorizontalOrRadial;
    if (coord.type === "cartesian2d") {
      isHorizontalOrRadial = baseAxis.isHorizontal();
      valueAxis2 = coord.getOtherAxis(baseAxis);
    } else if (coord.type === "polar") {
      isHorizontalOrRadial = baseAxis.dim === "angle";
      valueAxis2 = coord.getOtherAxis(baseAxis);
    }
    const animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
    const axisAnimationModel = baseAxis.model;
    const axis2DModel = baseAxis.model;
    const axisSort = coord.type === "cartesian2d" && axis2DModel.get("sort") && axis2DModel.get("sortSeriesIndex") === seriesModel.seriesIndex;
    const realtimeSort = axisSort && axis2DModel.get("realtimeSort");
    const needsClip = seriesModel.get("clip", true);
    const coordSysClipArea = getClipArea(coord, data);
    group.removeClipPath();
    const labelModel = seriesModel.getModel("label");
    const roundCap = seriesModel.get("roundCap", true);
    const drawBackground = seriesModel.get("showBackground", true);
    const backgroundModel = seriesModel.getModel("backgroundStyle");
    const barBorderRadius = backgroundModel.get("borderRadius") || 0;
    const bgEls = [];
    const oldBgEls = this._backgroundEls;
    let hasDuringForOneData = false;
    let getDuring = () => {
      return null;
    };
    if (coord.type === "cartesian2d") {
      const oldOrder = baseAxis.scale.getCategorySortInfo();
      const orderMap = (idx) => {
        return data.get(valueAxis2.dim, idx);
      };
      if (realtimeSort) {
        const isOrderChanged = this._isDataOrderChanged(data, orderMap, oldOrder);
        if (isOrderChanged) {
          getDuring = () => {
            if (!hasDuringForOneData) {
              hasDuringForOneData = true;
              return () => {
                const orderMap2 = (idx) => {
                  const el = data.getItemGraphicEl(idx);
                  if (el) {
                    const shape = el.shape;
                    return isHorizontalOrRadial ? shape.y + shape.height : shape.x + shape.width;
                  } else {
                    return 0;
                  }
                };
                that._updateSort(data, orderMap2, baseAxis, api);
              };
            } else {
              return () => null;
            }
          };
        }
      } else if (axisSort) {
        this._updateSort(data, orderMap, baseAxis, api);
      }
    }
    data.diff(oldData).add(function(dataIndex) {
      const itemModel = data.getItemModel(dataIndex);
      const layout33 = getLayout[coord.type](data, dataIndex, itemModel);
      if (drawBackground) {
        const bgLayout = getLayout[coord.type](data, dataIndex);
        const bgEl = createBackgroundEl(coord, isHorizontalOrRadial, bgLayout);
        bgEl.useStyle(backgroundModel.getItemStyle());
        if (coord.type === "cartesian2d") {
          bgEl.setShape("r", barBorderRadius);
        }
        bgEls[dataIndex] = bgEl;
      }
      if (!data.hasValue(dataIndex)) {
        return;
      }
      if (needsClip) {
        const isClipped = clip[coord.type](coordSysClipArea, layout33);
        if (isClipped) {
          return;
        }
      }
      const el = elementCreator[coord.type](seriesModel, data, dataIndex, layout33, isHorizontalOrRadial, animationModel, false, getDuring(), roundCap);
      data.setItemGraphicEl(dataIndex, el);
      group.add(el);
      updateStyle(el, data, dataIndex, itemModel, layout33, seriesModel, isHorizontalOrRadial, coord.type === "polar");
    }).update(function(newIndex, oldIndex) {
      const itemModel = data.getItemModel(newIndex);
      const layout33 = getLayout[coord.type](data, newIndex, itemModel);
      if (drawBackground) {
        const bgEl = oldBgEls[oldIndex];
        bgEl.useStyle(backgroundModel.getItemStyle());
        if (coord.type === "cartesian2d") {
          bgEl.setShape("r", barBorderRadius);
        }
        bgEls[newIndex] = bgEl;
        const bgLayout = getLayout[coord.type](data, newIndex);
        const shape = createBackgroundShape(isHorizontalOrRadial, bgLayout, coord);
        updateProps(bgEl, {
          shape
        }, animationModel, newIndex);
      }
      let el = oldData.getItemGraphicEl(oldIndex);
      if (!data.hasValue(newIndex)) {
        group.remove(el);
        return;
      }
      if (needsClip) {
        const isClipped = clip[coord.type](coordSysClipArea, layout33);
        if (isClipped) {
          group.remove(el);
          return;
        }
      }
      if (el) {
        if (coord.type === "cartesian2d" && baseAxis.type === "category" && baseAxis.model.get("sort")) {
          const rect = layout33;
          let seriesShape;
          let axisShape;
          if (baseAxis.dim === "x") {
            axisShape = {
              x: rect.x,
              width: rect.width
            };
            seriesShape = {
              y: rect.y,
              height: rect.height
            };
          } else {
            axisShape = {
              y: rect.y,
              height: rect.height
            };
            seriesShape = {
              x: rect.x,
              width: rect.width
            };
          }
          if (!isReorder) {
            updateProps(el, {
              shape: seriesShape
            }, animationModel, newIndex, null, getDuring());
          }
          updateProps(el, {
            shape: axisShape
          }, axisAnimationModel, newIndex, null);
        } else {
          updateProps(el, {
            shape: layout33
          }, animationModel, newIndex, null);
        }
        const defaultTextGetter = (values) => {
          return getDefaultLabel(seriesModel.getData(), newIndex, values);
        };
        updateLabel(el, data, newIndex, labelModel, seriesModel, animationModel, defaultTextGetter);
      } else {
        el = elementCreator[coord.type](seriesModel, data, newIndex, layout33, isHorizontalOrRadial, animationModel, true, getDuring(), roundCap);
      }
      data.setItemGraphicEl(newIndex, el);
      group.add(el);
      updateStyle(el, data, newIndex, itemModel, layout33, seriesModel, isHorizontalOrRadial, coord.type === "polar");
    }).remove(function(dataIndex) {
      const el = oldData.getItemGraphicEl(dataIndex);
      el && removeElementWithFadeOut(el, seriesModel, dataIndex);
    }).execute();
    const bgGroup = this._backgroundGroup || (this._backgroundGroup = new Group_default());
    bgGroup.removeAll();
    for (let i = 0; i < bgEls.length; ++i) {
      bgGroup.add(bgEls[i]);
    }
    group.add(bgGroup);
    this._backgroundEls = bgEls;
    this._data = data;
  }
  _renderLarge(seriesModel, ecModel, api) {
    this._clear();
    createLarge(seriesModel, this.group);
    this._updateLargeClip(seriesModel);
  }
  _incrementalRenderLarge(params, seriesModel) {
    this._removeBackground();
    createLarge(seriesModel, this.group, true);
  }
  _updateLargeClip(seriesModel) {
    const clipPath = seriesModel.get("clip", true) ? createClipPath(seriesModel.coordinateSystem, false, seriesModel) : null;
    if (clipPath) {
      this.group.setClipPath(clipPath);
    } else {
      this.group.removeClipPath();
    }
  }
  _dataSort(data, idxMap) {
    const info = [];
    data.each((idx) => {
      info.push({
        mappedValue: idxMap(idx),
        ordinalNumber: idx,
        beforeSortIndex: null
      });
    });
    info.sort((a, b) => {
      return b.mappedValue - a.mappedValue;
    });
    for (let i = 0; i < info.length; ++i) {
      info[info[i].ordinalNumber].beforeSortIndex = i;
    }
    return map2(info, (item) => {
      return {
        ordinalNumber: item.ordinalNumber,
        beforeSortIndex: item.beforeSortIndex
      };
    });
  }
  _isDataOrderChanged(data, orderMap, oldOrder) {
    const oldCount = oldOrder ? oldOrder.length : 0;
    if (oldCount !== data.count()) {
      return true;
    }
    let lastValue = Number.MAX_VALUE;
    for (let i = 0; i < oldOrder.length; ++i) {
      const value = orderMap(oldOrder[i].ordinalNumber);
      if (value > lastValue) {
        return true;
      }
      lastValue = value;
    }
    return false;
  }
  _updateSort(data, orderMap, baseAxis, api) {
    const oldOrder = baseAxis.scale.getCategorySortInfo();
    const isOrderChanged = this._isDataOrderChanged(data, orderMap, oldOrder);
    if (isOrderChanged) {
      const sortInfo = this._dataSort(data, orderMap);
      baseAxis.setCategorySortInfo(sortInfo);
      const action = {
        type: "changeAxisOrder",
        componentType: baseAxis.dim + "Axis",
        axisId: baseAxis.index
      };
      api.dispatchAction(action);
    }
  }
  remove() {
    this._clear(this._model);
  }
  _clear(model65) {
    const group = this.group;
    const data = this._data;
    if (model65 && model65.isAnimationEnabled() && data && !this._isLargeDraw) {
      this._removeBackground();
      this._backgroundEls = [];
      data.eachItemGraphicEl(function(el) {
        removeElementWithFadeOut(el, model65, getECData(el).dataIndex);
      });
    } else {
      group.removeAll();
    }
    this._data = null;
  }
  _removeBackground() {
    this.group.remove(this._backgroundGroup);
    this._backgroundGroup = null;
  }
}
BarView2.type = "bar";
const clip = {
  cartesian2d(coordSysBoundingRect, layout33) {
    const signWidth = layout33.width < 0 ? -1 : 1;
    const signHeight = layout33.height < 0 ? -1 : 1;
    if (signWidth < 0) {
      layout33.x += layout33.width;
      layout33.width = -layout33.width;
    }
    if (signHeight < 0) {
      layout33.y += layout33.height;
      layout33.height = -layout33.height;
    }
    const x = mathMax4(layout33.x, coordSysBoundingRect.x);
    const x2 = mathMin4(layout33.x + layout33.width, coordSysBoundingRect.x + coordSysBoundingRect.width);
    const y = mathMax4(layout33.y, coordSysBoundingRect.y);
    const y2 = mathMin4(layout33.y + layout33.height, coordSysBoundingRect.y + coordSysBoundingRect.height);
    layout33.x = x;
    layout33.y = y;
    layout33.width = x2 - x;
    layout33.height = y2 - y;
    const clipped = layout33.width < 0 || layout33.height < 0;
    if (signWidth < 0) {
      layout33.x += layout33.width;
      layout33.width = -layout33.width;
    }
    if (signHeight < 0) {
      layout33.y += layout33.height;
      layout33.height = -layout33.height;
    }
    return clipped;
  },
  polar() {
    return false;
  }
};
const elementCreator = {
  cartesian2d(seriesModel, data, newIndex, layout33, isHorizontal, animationModel, isUpdate, during) {
    const rect = new Rect_default({
      shape: extend({}, layout33),
      z2: 1
    });
    rect.name = "item";
    if (animationModel) {
      const rectShape = rect.shape;
      const animateProperty = isHorizontal ? "height" : "width";
      const animateTarget = {};
      rectShape[animateProperty] = 0;
      animateTarget[animateProperty] = layout33[animateProperty];
      (isUpdate ? updateProps : initProps)(rect, {
        shape: animateTarget
      }, animationModel, newIndex, null, during);
      const defaultTextGetter = (values) => {
        return getDefaultLabel(seriesModel.getData(), newIndex, values);
      };
      const labelModel = seriesModel.getModel("label");
      (isUpdate ? updateLabel : initLabel)(rect, data, newIndex, labelModel, seriesModel, animationModel, defaultTextGetter);
    }
    return rect;
  },
  polar(seriesModel, data, newIndex, layout33, isRadial, animationModel, isUpdate, during, roundCap) {
    const clockwise = layout33.startAngle < layout33.endAngle;
    const ShapeClass = !isRadial && roundCap ? sausage_default : Sector_default;
    const sector = new ShapeClass({
      shape: defaults({
        clockwise
      }, layout33),
      z2: 1
    });
    sector.name = "item";
    if (animationModel) {
      const sectorShape = sector.shape;
      const animateProperty = isRadial ? "r" : "endAngle";
      const animateTarget = {};
      sectorShape[animateProperty] = isRadial ? 0 : layout33.startAngle;
      animateTarget[animateProperty] = layout33[animateProperty];
      (isUpdate ? updateProps : initProps)(sector, {
        shape: animateTarget
      }, animationModel);
    }
    return sector;
  }
};
const getLayout = {
  cartesian2d(data, dataIndex, itemModel) {
    const layout33 = data.getItemLayout(dataIndex);
    const fixedLineWidth = itemModel ? getLineWidth(itemModel, layout33) : 0;
    const signX = layout33.width > 0 ? 1 : -1;
    const signY = layout33.height > 0 ? 1 : -1;
    return {
      x: layout33.x + signX * fixedLineWidth / 2,
      y: layout33.y + signY * fixedLineWidth / 2,
      width: layout33.width - signX * fixedLineWidth,
      height: layout33.height - signY * fixedLineWidth
    };
  },
  polar(data, dataIndex, itemModel) {
    const layout33 = data.getItemLayout(dataIndex);
    return {
      cx: layout33.cx,
      cy: layout33.cy,
      r0: layout33.r0,
      r: layout33.r,
      startAngle: layout33.startAngle,
      endAngle: layout33.endAngle
    };
  }
};
function isZeroOnPolar(layout33) {
  return layout33.startAngle != null && layout33.endAngle != null && layout33.startAngle === layout33.endAngle;
}
function updateStyle(el, data, dataIndex, itemModel, layout33, seriesModel, isHorizontal, isPolar) {
  const style2 = data.getItemVisual(dataIndex, "style");
  if (!isPolar) {
    el.setShape("r", itemModel.get(BAR_BORDER_RADIUS_QUERY) || 0);
  }
  el.useStyle(style2);
  el.ignore = isZeroOnPolar(layout33);
  const cursorStyle = itemModel.getShallow("cursor");
  cursorStyle && el.attr("cursor", cursorStyle);
  if (!isPolar) {
    const labelPositionOutside = isHorizontal ? layout33.height > 0 ? "bottom" : "top" : layout33.width > 0 ? "left" : "right";
    setLabelStyle(el, getLabelStatesModels(itemModel), {
      labelFetcher: seriesModel,
      labelDataIndex: dataIndex,
      defaultText: getDefaultLabel(seriesModel.getData(), dataIndex),
      inheritColor: style2.fill,
      defaultOutsidePosition: labelPositionOutside
    });
  }
  const emphasisModel = itemModel.getModel(["emphasis"]);
  enableHoverEmphasis(el, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
  setStatesStylesFromModel(el, itemModel);
  if (isZeroOnPolar(layout33)) {
    each(el.states, (state) => {
      if (state.style) {
        state.style.fill = state.style.stroke = "none";
      }
    });
  }
}
function getLineWidth(itemModel, rawLayout) {
  const lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
  const width = isNaN(rawLayout.width) ? Number.MAX_VALUE : Math.abs(rawLayout.width);
  const height = isNaN(rawLayout.height) ? Number.MAX_VALUE : Math.abs(rawLayout.height);
  return Math.min(lineWidth, width, height);
}
class LagePathShape {
}
class LargePath extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "largeBar";
  }
  getDefaultShape() {
    return new LagePathShape();
  }
  buildPath(ctx, shape) {
    const points9 = shape.points;
    const startPoint = this.__startPoint;
    const baseDimIdx = this.__baseDimIdx;
    for (let i = 0; i < points9.length; i += 2) {
      startPoint[baseDimIdx] = points9[i + baseDimIdx];
      ctx.moveTo(startPoint[0], startPoint[1]);
      ctx.lineTo(points9[i], points9[i + 1]);
    }
  }
}
function createLarge(seriesModel, group, incremental) {
  const data = seriesModel.getData();
  const startPoint = [];
  const baseDimIdx = data.getLayout("valueAxisHorizontal") ? 1 : 0;
  startPoint[1 - baseDimIdx] = data.getLayout("valueAxisStart");
  const largeDataIndices = data.getLayout("largeDataIndices");
  const barWidth = data.getLayout("barWidth");
  const backgroundModel = seriesModel.getModel("backgroundStyle");
  const drawBackground = seriesModel.get("showBackground", true);
  if (drawBackground) {
    const points9 = data.getLayout("largeBackgroundPoints");
    const backgroundStartPoint = [];
    backgroundStartPoint[1 - baseDimIdx] = data.getLayout("backgroundStart");
    const bgEl = new LargePath({
      shape: {
        points: points9
      },
      incremental: !!incremental,
      silent: true,
      z2: 0
    });
    bgEl.__startPoint = backgroundStartPoint;
    bgEl.__baseDimIdx = baseDimIdx;
    bgEl.__largeDataIndices = largeDataIndices;
    bgEl.__barWidth = barWidth;
    setLargeBackgroundStyle(bgEl, backgroundModel, data);
    group.add(bgEl);
  }
  const el = new LargePath({
    shape: {
      points: data.getLayout("largePoints")
    },
    incremental: !!incremental
  });
  el.__startPoint = startPoint;
  el.__baseDimIdx = baseDimIdx;
  el.__largeDataIndices = largeDataIndices;
  el.__barWidth = barWidth;
  group.add(el);
  setLargeStyle(el, seriesModel, data);
  getECData(el).seriesIndex = seriesModel.seriesIndex;
  if (!seriesModel.get("silent")) {
    el.on("mousedown", largePathUpdateDataIndex);
    el.on("mousemove", largePathUpdateDataIndex);
  }
}
const largePathUpdateDataIndex = throttle2(function(event3) {
  const largePath = this;
  const dataIndex = largePathFindDataIndex(largePath, event3.offsetX, event3.offsetY);
  getECData(largePath).dataIndex = dataIndex >= 0 ? dataIndex : null;
}, 30, false);
function largePathFindDataIndex(largePath, x, y) {
  const baseDimIdx = largePath.__baseDimIdx;
  const valueDimIdx = 1 - baseDimIdx;
  const points9 = largePath.shape.points;
  const largeDataIndices = largePath.__largeDataIndices;
  const barWidthHalf = Math.abs(largePath.__barWidth / 2);
  const startValueVal = largePath.__startPoint[valueDimIdx];
  _eventPos[0] = x;
  _eventPos[1] = y;
  const pointerBaseVal = _eventPos[baseDimIdx];
  const pointerValueVal = _eventPos[1 - baseDimIdx];
  const baseLowerBound = pointerBaseVal - barWidthHalf;
  const baseUpperBound = pointerBaseVal + barWidthHalf;
  for (let i = 0, len2 = points9.length / 2; i < len2; i++) {
    const ii = i * 2;
    const barBaseVal = points9[ii + baseDimIdx];
    const barValueVal = points9[ii + valueDimIdx];
    if (barBaseVal >= baseLowerBound && barBaseVal <= baseUpperBound && (startValueVal <= barValueVal ? pointerValueVal >= startValueVal && pointerValueVal <= barValueVal : pointerValueVal >= barValueVal && pointerValueVal <= startValueVal)) {
      return largeDataIndices[i];
    }
  }
  return -1;
}
function setLargeStyle(el, seriesModel, data) {
  const globalStyle = data.getVisual("style");
  el.useStyle(extend({}, globalStyle));
  el.style.fill = null;
  el.style.stroke = globalStyle.fill;
  el.style.lineWidth = data.getLayout("barWidth");
}
function setLargeBackgroundStyle(el, backgroundModel, data) {
  const borderColor = backgroundModel.get("borderColor") || backgroundModel.get("color");
  const itemStyle5 = backgroundModel.getItemStyle();
  el.useStyle(itemStyle5);
  el.style.fill = null;
  el.style.stroke = borderColor;
  el.style.lineWidth = data.getLayout("barWidth");
}
function createBackgroundShape(isHorizontalOrRadial, layout33, coord) {
  if (isCoordinateSystemType(coord, "cartesian2d")) {
    const rectShape = layout33;
    const coordLayout = coord.getArea();
    return {
      x: isHorizontalOrRadial ? rectShape.x : coordLayout.x,
      y: isHorizontalOrRadial ? coordLayout.y : rectShape.y,
      width: isHorizontalOrRadial ? rectShape.width : coordLayout.width,
      height: isHorizontalOrRadial ? coordLayout.height : rectShape.height
    };
  } else {
    const coordLayout = coord.getArea();
    const sectorShape = layout33;
    return {
      cx: coordLayout.cx,
      cy: coordLayout.cy,
      r0: isHorizontalOrRadial ? coordLayout.r0 : sectorShape.r0,
      r: isHorizontalOrRadial ? coordLayout.r : sectorShape.r,
      startAngle: isHorizontalOrRadial ? sectorShape.startAngle : 0,
      endAngle: isHorizontalOrRadial ? sectorShape.endAngle : Math.PI * 2
    };
  }
}
function createBackgroundEl(coord, isHorizontalOrRadial, layout33) {
  const ElementClz = coord.type === "polar" ? Sector_default : Rect_default;
  return new ElementClz({
    shape: createBackgroundShape(isHorizontalOrRadial, layout33, coord),
    silent: true,
    z2: 0
  });
}
Chart_default.registerClass(BarView2);

// src/action/changeAxisOrder.ts
registerAction({
  type: "changeAxisOrder",
  event: "changeAxisOrder",
  update: "update"
}, function(payload, ecModel) {
  const componentType = payload.componentType || "series";
  ecModel.eachComponent({
    mainType: componentType,
    query: payload
  }, function(componentModel) {
  });
});

// src/chart/bar.ts
registerLayout(PRIORITY.VISUAL.LAYOUT, curry(layout, "bar"));
registerLayout(PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, largeLayout);
registerVisual({
  seriesType: "bar",
  reset: function(seriesModel) {
    seriesModel.getData().setVisual("legendSymbol", "roundRect");
  }
});

// src/chart/helper/createListSimply.ts
function createListSimply_default(seriesModel, opt, nameList) {
  opt = isArray(opt) && {
    coordDimensions: opt
  } || extend({}, opt);
  const source = seriesModel.getSource();
  const dimensionsInfo = createDimensions_default(source, opt);
  const list = new List_default(dimensionsInfo, seriesModel);
  list.initData(source, nameList);
  return list;
}

// src/visual/LegendVisualProvider.ts
class LegendVisualProvider8 {
  constructor(getDataWithEncodedVisual, getRawData) {
    this._getDataWithEncodedVisual = getDataWithEncodedVisual;
    this._getRawData = getRawData;
  }
  getAllNames() {
    const rawData = this._getRawData();
    return rawData.mapArray(rawData.getName);
  }
  containName(name) {
    const rawData = this._getRawData();
    return rawData.indexOfName(name) >= 0;
  }
  indexOfName(name) {
    const dataWithEncodedVisual = this._getDataWithEncodedVisual();
    return dataWithEncodedVisual.indexOfName(name);
  }
  getItemVisual(dataIndex, key) {
    const dataWithEncodedVisual = this._getDataWithEncodedVisual();
    return dataWithEncodedVisual.getItemVisual(dataIndex, key);
  }
}
const LegendVisualProvider_default = LegendVisualProvider8;

// src/chart/pie/PieSeries.ts
class PieSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.useColorPaletteOnData = true;
  }
  init(option) {
    super.init.apply(this, arguments);
    this.legendVisualProvider = new LegendVisualProvider_default(bind(this.getData, this), bind(this.getRawData, this));
    this._defaultLabelLine(option);
  }
  mergeOption() {
    super.mergeOption.apply(this, arguments);
  }
  getInitialData() {
    return createListSimply_default(this, {
      coordDimensions: ["value"],
      encodeDefaulter: curry(makeSeriesEncodeForNameBased, this)
    });
  }
  getDataParams(dataIndex) {
    const data = this.getData();
    const params = super.getDataParams(dataIndex);
    const valueList = [];
    data.each(data.mapDimension("value"), function(value) {
      valueList.push(value);
    });
    params.percent = getPercentWithPrecision(valueList, dataIndex, data.hostModel.get("percentPrecision"));
    params.$vars.push("percent");
    return params;
  }
  _defaultLabelLine(option) {
    defaultEmphasis(option, "labelLine", ["show"]);
    const labelLineNormalOpt = option.labelLine;
    const labelLineEmphasisOpt = option.emphasis.labelLine;
    labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.show;
    labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.emphasis.label.show;
  }
}
PieSeriesModel.type = "series.pie";
PieSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  legendHoverLink: true,
  center: ["50%", "50%"],
  radius: [0, "75%"],
  clockwise: true,
  startAngle: 90,
  minAngle: 0,
  minShowLabelAngle: 0,
  selectedOffset: 10,
  percentPrecision: 2,
  stillShowZeroSum: true,
  left: 0,
  top: 0,
  right: 0,
  bottom: 0,
  width: null,
  height: null,
  label: {
    rotate: 0,
    show: true,
    overflow: "truncate",
    position: "outer",
    alignTo: "none",
    edgeDistance: "25%",
    bleedMargin: 10,
    distanceToLabelLine: 5
  },
  labelLine: {
    show: true,
    length: 15,
    length2: 15,
    smooth: false,
    minTurnAngle: 90,
    maxSurfaceAngle: 90,
    lineStyle: {
      width: 1,
      type: "solid"
    }
  },
  itemStyle: {
    borderWidth: 1
  },
  labelLayout: {
    hideOverlap: true
  },
  emphasis: {
    scale: true,
    scaleSize: 5
  },
  avoidLabelOverlap: true,
  animationType: "expansion",
  animationDuration: 1000,
  animationTypeUpdate: "transition",
  animationEasingUpdate: "cubicInOut",
  animationDurationUpdate: 500,
  animationEasing: "cubicInOut"
};
Series_default.registerClass(PieSeriesModel);

// src/chart/pie/labelLayout.ts
const RADIAN = Math.PI / 180;
function adjustSingleSide(list, cx, cy, r, dir3, viewWidth, viewHeight, viewLeft, viewTop, farthestX) {
  if (list.length < 2) {
    return;
  }
  ;
  function recalculateXOnSemiToAlignOnEllipseCurve(semi) {
    const rB = semi.rB;
    const rB2 = rB * rB;
    for (let i = 0; i < semi.list.length; i++) {
      const item = semi.list[i];
      const dy = Math.abs(item.label.y - cy);
      const rA = r + item.len;
      const rA2 = rA * rA;
      const dx = Math.sqrt((1 - Math.abs(dy * dy / rB2)) * rA2);
      item.label.x = cx + (dx + item.len2) * dir3;
    }
  }
  function recalculateX(items) {
    const topSemi = {
      list: [],
      maxY: 0
    };
    const bottomSemi = {
      list: [],
      maxY: 0
    };
    for (let i = 0; i < items.length; i++) {
      if (items[i].labelAlignTo !== "none") {
        continue;
      }
      const item = items[i];
      const semi = item.label.y > cy ? bottomSemi : topSemi;
      const dy = Math.abs(item.label.y - cy);
      if (dy > semi.maxY) {
        const dx = item.label.x - cx - item.len2 * dir3;
        const rA = r + item.len;
        const rB = dx < rA ? Math.sqrt(dy * dy / (1 - dx * dx / rA / rA)) : rA;
        semi.rB = rB;
        semi.maxY = dy;
      }
      semi.list.push(item);
    }
    recalculateXOnSemiToAlignOnEllipseCurve(topSemi);
    recalculateXOnSemiToAlignOnEllipseCurve(bottomSemi);
  }
  const len2 = list.length;
  for (let i = 0; i < len2; i++) {
    if (list[i].position === "outer" && list[i].labelAlignTo === "labelLine") {
      const dx = list[i].label.x - farthestX;
      list[i].linePoints[1][0] += dx;
      list[i].label.x = farthestX;
    }
  }
  if (shiftLayoutOnY(list, viewTop, viewTop + viewHeight)) {
    recalculateX(list);
  }
}
function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight, viewLeft, viewTop) {
  const leftList = [];
  const rightList = [];
  let leftmostX = Number.MAX_VALUE;
  let rightmostX = -Number.MAX_VALUE;
  for (let i = 0; i < labelLayoutList.length; i++) {
    const label = labelLayoutList[i].label;
    if (isPositionCenter(labelLayoutList[i])) {
      continue;
    }
    if (label.x < cx) {
      leftmostX = Math.min(leftmostX, label.x);
      leftList.push(labelLayoutList[i]);
    } else {
      rightmostX = Math.max(rightmostX, label.x);
      rightList.push(labelLayoutList[i]);
    }
  }
  adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight, viewLeft, viewTop, rightmostX);
  adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight, viewLeft, viewTop, leftmostX);
  for (let i = 0; i < labelLayoutList.length; i++) {
    const layout33 = labelLayoutList[i];
    const label = layout33.label;
    if (isPositionCenter(layout33)) {
      continue;
    }
    const linePoints = layout33.linePoints;
    if (linePoints) {
      const isAlignToEdge = layout33.labelAlignTo === "edge";
      let realTextWidth = layout33.rect.width;
      let targetTextWidth;
      if (isAlignToEdge) {
        if (label.x < cx) {
          targetTextWidth = linePoints[2][0] - layout33.labelDistance - viewLeft - layout33.edgeDistance;
        } else {
          targetTextWidth = viewLeft + viewWidth - layout33.edgeDistance - linePoints[2][0] - layout33.labelDistance;
        }
      } else {
        if (label.x < cx) {
          targetTextWidth = label.x - viewLeft - layout33.bleedMargin;
        } else {
          targetTextWidth = viewLeft + viewWidth - label.x - layout33.bleedMargin;
        }
      }
      if (targetTextWidth < layout33.rect.width) {
        layout33.label.style.width = targetTextWidth;
        if (layout33.labelAlignTo === "edge") {
          realTextWidth = targetTextWidth;
        }
      }
      const dist3 = linePoints[1][0] - linePoints[2][0];
      if (isAlignToEdge) {
        if (label.x < cx) {
          linePoints[2][0] = viewLeft + layout33.edgeDistance + realTextWidth + layout33.labelDistance;
        } else {
          linePoints[2][0] = viewLeft + viewWidth - layout33.edgeDistance - realTextWidth - layout33.labelDistance;
        }
      } else {
        if (label.x < cx) {
          linePoints[2][0] = label.x + layout33.labelDistance;
        } else {
          linePoints[2][0] = label.x - layout33.labelDistance;
        }
        linePoints[1][0] = linePoints[2][0] + dist3;
      }
      linePoints[1][1] = linePoints[2][1] = label.y;
    }
  }
}
function isPositionCenter(sectorShape) {
  return sectorShape.position === "center";
}
function labelLayout_default(seriesModel) {
  const data = seriesModel.getData();
  const labelLayoutList = [];
  let cx;
  let cy;
  let hasLabelRotate = false;
  const minShowLabelRadian = (seriesModel.get("minShowLabelAngle") || 0) * RADIAN;
  const viewRect2 = data.getLayout("viewRect");
  const r = data.getLayout("r");
  const viewWidth = viewRect2.width;
  const viewLeft = viewRect2.x;
  const viewTop = viewRect2.y;
  const viewHeight = viewRect2.height;
  function setNotShow(el) {
    el.ignore = true;
  }
  data.each(function(idx) {
    const sector = data.getItemGraphicEl(idx);
    const sectorShape = sector.shape;
    const label = sector.getTextContent();
    const labelLine = sector.getTextGuideLine();
    const itemModel = data.getItemModel(idx);
    const labelModel = itemModel.getModel("label");
    const labelPosition = labelModel.get("position") || itemModel.get(["emphasis", "label", "position"]);
    const labelDistance = labelModel.get("distanceToLabelLine");
    const labelAlignTo = labelModel.get("alignTo");
    const edgeDistance = parsePercent3(labelModel.get("edgeDistance"), viewWidth);
    const bleedMargin = labelModel.get("bleedMargin");
    const labelLineModel = itemModel.getModel("labelLine");
    let labelLineLen = labelLineModel.get("length");
    labelLineLen = parsePercent3(labelLineLen, viewWidth);
    let labelLineLen2 = labelLineModel.get("length2");
    labelLineLen2 = parsePercent3(labelLineLen2, viewWidth);
    if (Math.abs(sectorShape.endAngle - sectorShape.startAngle) < minShowLabelRadian) {
      each(label.states, setNotShow);
      label.ignore = true;
      return;
    }
    const midAngle = (sectorShape.startAngle + sectorShape.endAngle) / 2;
    const nx = Math.cos(midAngle);
    const ny = Math.sin(midAngle);
    let textX;
    let textY;
    let linePoints;
    let textAlign;
    cx = sectorShape.cx;
    cy = sectorShape.cy;
    const isLabelInside = labelPosition === "inside" || labelPosition === "inner";
    if (labelPosition === "center") {
      textX = sectorShape.cx;
      textY = sectorShape.cy;
      textAlign = "center";
    } else {
      const x1 = (isLabelInside ? (sectorShape.r + sectorShape.r0) / 2 * nx : sectorShape.r * nx) + cx;
      const y1 = (isLabelInside ? (sectorShape.r + sectorShape.r0) / 2 * ny : sectorShape.r * ny) + cy;
      textX = x1 + nx * 3;
      textY = y1 + ny * 3;
      if (!isLabelInside) {
        const x2 = x1 + nx * (labelLineLen + r - sectorShape.r);
        const y2 = y1 + ny * (labelLineLen + r - sectorShape.r);
        const x3 = x2 + (nx < 0 ? -1 : 1) * labelLineLen2;
        const y3 = y2;
        if (labelAlignTo === "edge") {
          textX = nx < 0 ? viewLeft + edgeDistance : viewLeft + viewWidth - edgeDistance;
        } else {
          textX = x3 + (nx < 0 ? -labelDistance : labelDistance);
        }
        textY = y3;
        linePoints = [[x1, y1], [x2, y2], [x3, y3]];
      }
      textAlign = isLabelInside ? "center" : labelAlignTo === "edge" ? nx > 0 ? "right" : "left" : nx > 0 ? "left" : "right";
    }
    let labelRotate;
    const rotate2 = labelModel.get("rotate");
    if (typeof rotate2 === "number") {
      labelRotate = rotate2 * (Math.PI / 180);
    } else {
      labelRotate = rotate2 ? nx < 0 ? -midAngle + Math.PI : -midAngle : 0;
    }
    hasLabelRotate = !!labelRotate;
    label.x = textX;
    label.y = textY;
    label.rotation = labelRotate;
    label.setStyle({
      verticalAlign: "middle"
    });
    if (!isLabelInside) {
      const textRect = label.getBoundingRect().clone();
      textRect.applyTransform(label.getComputedTransform());
      const margin = (label.style.margin || 0) + 2.1;
      textRect.x -= margin / 2;
      textRect.y -= margin / 2;
      textRect.width += margin;
      textRect.height += margin;
      labelLayoutList.push({
        label,
        labelLine,
        position: labelPosition,
        len: labelLineLen,
        len2: labelLineLen2,
        minTurnAngle: labelLineModel.get("minTurnAngle"),
        maxSurfaceAngle: labelLineModel.get("maxSurfaceAngle"),
        surfaceNormal: new Point4(nx, ny),
        linePoints,
        textAlign,
        labelDistance,
        labelAlignTo,
        edgeDistance,
        bleedMargin,
        rect: textRect
      });
    } else {
      label.setStyle({
        align: textAlign
      });
      const selectState = label.states.select;
      if (selectState) {
        selectState.x += label.x;
        selectState.y += label.y;
      }
    }
    sector.setTextConfig({
      inside: isLabelInside
    });
  });
  if (!hasLabelRotate && seriesModel.get("avoidLabelOverlap")) {
    avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight, viewLeft, viewTop);
  }
  for (let i = 0; i < labelLayoutList.length; i++) {
    const layout33 = labelLayoutList[i];
    const label = layout33.label;
    const labelLine = layout33.labelLine;
    const notShowLabel = isNaN(label.x) || isNaN(label.y);
    if (label) {
      label.setStyle({
        align: layout33.textAlign
      });
      if (notShowLabel) {
        each(label.states, setNotShow);
        label.ignore = true;
      }
      const selectState = label.states.select;
      if (selectState) {
        selectState.x += label.x;
        selectState.y += label.y;
      }
    }
    if (labelLine) {
      const linePoints = layout33.linePoints;
      if (notShowLabel || !linePoints) {
        each(labelLine.states, setNotShow);
        labelLine.ignore = true;
      } else {
        limitTurnAngle(linePoints, layout33.minTurnAngle);
        limitSurfaceAngle(linePoints, layout33.surfaceNormal, layout33.maxSurfaceAngle);
        labelLine.setShape({
          points: linePoints
        });
        label.__hostTarget.textGuideLineConfig = {
          anchor: new Point4(linePoints[0][0], linePoints[0][1])
        };
      }
    }
  }
}

// src/chart/pie/PieView.ts
class PiePiece extends Sector_default {
  constructor(data, idx, startAngle) {
    super();
    this.z2 = 2;
    const polyline = new Polyline_default();
    const text11 = new Text_default();
    this.setTextGuideLine(polyline);
    this.setTextContent(text11);
    this.updateData(data, idx, startAngle, true);
  }
  updateData(data, idx, startAngle, firstCreate) {
    const sector = this;
    const seriesModel = data.hostModel;
    const itemModel = data.getItemModel(idx);
    const emphasisModel = itemModel.getModel("emphasis");
    const layout33 = data.getItemLayout(idx);
    const sectorShape = extend({}, layout33);
    if (firstCreate) {
      sector.setShape(sectorShape);
      const animationType = seriesModel.getShallow("animationType");
      if (animationType === "scale") {
        sector.shape.r = layout33.r0;
        initProps(sector, {
          shape: {
            r: layout33.r
          }
        }, seriesModel, idx);
      } else {
        if (startAngle != null) {
          sector.setShape({
            startAngle,
            endAngle: startAngle
          });
          initProps(sector, {
            shape: {
              startAngle: layout33.startAngle,
              endAngle: layout33.endAngle
            }
          }, seriesModel, idx);
        } else {
          sector.shape.endAngle = layout33.startAngle;
          updateProps(sector, {
            shape: {
              endAngle: layout33.endAngle
            }
          }, seriesModel, idx);
        }
      }
    } else {
      updateProps(sector, {
        shape: sectorShape
      }, seriesModel, idx);
    }
    sector.useStyle(data.getItemVisual(idx, "style"));
    setStatesStylesFromModel(sector, itemModel);
    const midAngle = (layout33.startAngle + layout33.endAngle) / 2;
    const offset = seriesModel.get("selectedOffset");
    const dx = Math.cos(midAngle) * offset;
    const dy = Math.sin(midAngle) * offset;
    const cursorStyle = itemModel.getShallow("cursor");
    cursorStyle && sector.attr("cursor", cursorStyle);
    this._updateLabel(seriesModel, data, idx);
    sector.ensureState("emphasis").shape = {
      r: layout33.r + (emphasisModel.get("scale") ? emphasisModel.get("scaleSize") || 0 : 0)
    };
    extend(sector.ensureState("select"), {
      x: dx,
      y: dy
    });
    const labelLine = sector.getTextGuideLine();
    const labelText = sector.getTextContent();
    extend(labelLine.ensureState("select"), {
      x: dx,
      y: dy
    });
    extend(labelText.ensureState("select"), {
      x: dx,
      y: dy
    });
    enableHoverEmphasis(this, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
  }
  _updateLabel(seriesModel, data, idx) {
    const sector = this;
    const labelText = sector.getTextContent();
    const itemModel = data.getItemModel(idx);
    const labelTextEmphasisState = labelText.ensureState("emphasis");
    const labelModel = itemModel.getModel("label");
    const labelHoverModel = itemModel.getModel(["emphasis", "label"]);
    const style2 = data.getItemVisual(idx, "style");
    const visualColor = style2 && style2.fill;
    setLabelStyle(sector, getLabelStatesModels(itemModel), {
      labelFetcher: data.hostModel,
      labelDataIndex: idx,
      inheritColor: visualColor,
      defaultText: seriesModel.getFormattedLabel(idx, "normal") || data.getName(idx)
    }, {
      normal: {
        opacity: style2 && style2.opacity
      }
    });
    sector.setTextConfig({
      position: null,
      rotation: null
    });
    labelText.attr({
      z2: 10
    });
    labelText.ignore = !labelModel.get("show");
    labelTextEmphasisState.ignore = !labelHoverModel.get("show");
    setLabelLineStyle(this, getLabelLineStatesModels(itemModel), {
      stroke: visualColor,
      opacity: style2 && style2.opacity
    });
  }
}
class PieView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.ignoreLabelLineUpdate = true;
  }
  init() {
    const sectorGroup = new Group_default();
    this._sectorGroup = sectorGroup;
  }
  render(seriesModel, ecModel, api, payload) {
    const data = seriesModel.getData();
    const oldData = this._data;
    const group = this.group;
    const hasAnimation = ecModel.get("animation");
    let startAngle;
    if (!oldData && data.count() > 0) {
      let shape = data.getItemLayout(0);
      for (let s = 1; isNaN(shape && shape.startAngle) && s < data.count(); ++s) {
        shape = data.getItemLayout(s);
      }
      if (shape) {
        startAngle = shape.startAngle;
      }
    }
    data.diff(oldData).add(function(idx) {
      const piePiece = new PiePiece(data, idx, startAngle);
      data.setItemGraphicEl(idx, piePiece);
      group.add(piePiece);
    }).update(function(newIdx, oldIdx) {
      const piePiece = oldData.getItemGraphicEl(oldIdx);
      piePiece.updateData(data, newIdx, startAngle);
      piePiece.off("click");
      group.add(piePiece);
      data.setItemGraphicEl(newIdx, piePiece);
    }).remove(function(idx) {
      const piePiece = oldData.getItemGraphicEl(idx);
      removeElementWithFadeOut(piePiece, seriesModel, idx);
    }).execute();
    labelLayout_default(seriesModel);
    if (seriesModel.get("animationTypeUpdate") !== "expansion") {
      this._data = data;
    }
  }
  dispose() {
  }
  containPoint(point, seriesModel) {
    const data = seriesModel.getData();
    const itemLayout = data.getItemLayout(0);
    if (itemLayout) {
      const dx = point[0] - itemLayout.cx;
      const dy = point[1] - itemLayout.cy;
      const radius = Math.sqrt(dx * dx + dy * dy);
      return radius <= itemLayout.r && radius >= itemLayout.r0;
    }
  }
}
PieView2.type = "pie";
Chart_default.registerClass(PieView2);

// src/chart/pie/pieLayout.ts
const PI28 = Math.PI * 2;
const RADIAN2 = Math.PI / 180;
function getViewRect3(seriesModel, api) {
  return getLayoutRect(seriesModel.getBoxLayoutParams(), {
    width: api.getWidth(),
    height: api.getHeight()
  });
}
function pieLayout_default(seriesType2, ecModel, api) {
  ecModel.eachSeriesByType(seriesType2, function(seriesModel) {
    const data = seriesModel.getData();
    const valueDim = data.mapDimension("value");
    const viewRect2 = getViewRect3(seriesModel, api);
    let center3 = seriesModel.get("center");
    let radius = seriesModel.get("radius");
    if (!isArray(radius)) {
      radius = [0, radius];
    }
    if (!isArray(center3)) {
      center3 = [center3, center3];
    }
    const width = parsePercent3(viewRect2.width, api.getWidth());
    const height = parsePercent3(viewRect2.height, api.getHeight());
    const size = Math.min(width, height);
    const cx = parsePercent3(center3[0], width) + viewRect2.x;
    const cy = parsePercent3(center3[1], height) + viewRect2.y;
    const r0 = parsePercent3(radius[0], size / 2);
    const r = parsePercent3(radius[1], size / 2);
    const startAngle = -seriesModel.get("startAngle") * RADIAN2;
    const minAngle = seriesModel.get("minAngle") * RADIAN2;
    let validDataCount = 0;
    data.each(valueDim, function(value) {
      !isNaN(value) && validDataCount++;
    });
    const sum2 = data.getSum(valueDim);
    let unitRadian = Math.PI / (sum2 || validDataCount) * 2;
    const clockwise = seriesModel.get("clockwise");
    const roseType = seriesModel.get("roseType");
    const stillShowZeroSum = seriesModel.get("stillShowZeroSum");
    const extent3 = data.getDataExtent(valueDim);
    extent3[0] = 0;
    let restAngle = PI28;
    let valueSumLargerThanMinAngle = 0;
    let currentAngle = startAngle;
    const dir3 = clockwise ? 1 : -1;
    data.setLayout({
      viewRect: viewRect2,
      r
    });
    data.each(valueDim, function(value, idx) {
      let angle;
      if (isNaN(value)) {
        data.setItemLayout(idx, {
          angle: NaN,
          startAngle: NaN,
          endAngle: NaN,
          clockwise,
          cx,
          cy,
          r0,
          r: roseType ? NaN : r
        });
        return;
      }
      if (roseType !== "area") {
        angle = sum2 === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;
      } else {
        angle = PI28 / validDataCount;
      }
      if (angle < minAngle) {
        angle = minAngle;
        restAngle -= minAngle;
      } else {
        valueSumLargerThanMinAngle += value;
      }
      const endAngle = currentAngle + dir3 * angle;
      data.setItemLayout(idx, {
        angle,
        startAngle: currentAngle,
        endAngle,
        clockwise,
        cx,
        cy,
        r0,
        r: roseType ? linearMap(value, extent3, [r0, r]) : r
      });
      currentAngle = endAngle;
    });
    if (restAngle < PI28 && validDataCount) {
      if (restAngle <= 0.001) {
        const angle = PI28 / validDataCount;
        data.each(valueDim, function(value, idx) {
          if (!isNaN(value)) {
            const layout33 = data.getItemLayout(idx);
            layout33.angle = angle;
            layout33.startAngle = startAngle + dir3 * idx * angle;
            layout33.endAngle = startAngle + dir3 * (idx + 1) * angle;
          }
        });
      } else {
        unitRadian = restAngle / valueSumLargerThanMinAngle;
        currentAngle = startAngle;
        data.each(valueDim, function(value, idx) {
          if (!isNaN(value)) {
            const layout33 = data.getItemLayout(idx);
            const angle = layout33.angle === minAngle ? minAngle : value * unitRadian;
            layout33.startAngle = currentAngle;
            layout33.endAngle = currentAngle + dir3 * angle;
            currentAngle += dir3 * angle;
          }
        });
      }
    }
  });
}

// src/processor/dataFilter.ts
function dataFilter_default(seriesType2) {
  return {
    seriesType: seriesType2,
    reset: function(seriesModel, ecModel) {
      const legendModels = ecModel.findComponents({
        mainType: "legend"
      });
      if (!legendModels || !legendModels.length) {
        return;
      }
      const data = seriesModel.getData();
      data.filterSelf(function(idx) {
        const name = data.getName(idx);
        for (let i = 0; i < legendModels.length; i++) {
          if (!legendModels[i].isSelected(name)) {
            return false;
          }
        }
        return true;
      });
    }
  };
}

// src/chart/pie.ts
createLegacyDataSelectAction("pie", registerAction);
registerLayout(curry(pieLayout_default, "pie"));
registerProcessor(dataFilter_default("pie"));

// src/chart/scatter/ScatterSeries.ts
class ScatterSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = ScatterSeriesModel.type;
    this.hasSymbolVisual = true;
  }
  getInitialData(option, ecModel) {
    return createListFromArray_default(this.getSource(), this, {
      useEncodeDefaulter: true
    });
  }
  getProgressive() {
    const progressive = this.option.progressive;
    if (progressive == null) {
      return this.option.large ? 5000 : this.get("progressive");
    }
    return progressive;
  }
  getProgressiveThreshold() {
    const progressiveThreshold = this.option.progressiveThreshold;
    if (progressiveThreshold == null) {
      return this.option.large ? 10000 : this.get("progressiveThreshold");
    }
    return progressiveThreshold;
  }
  brushSelector(dataIndex, data, selectors) {
    return selectors.point(data.getItemLayout(dataIndex));
  }
}
ScatterSeriesModel.type = "series.scatter";
ScatterSeriesModel.dependencies = ["grid", "polar", "geo", "singleAxis", "calendar"];
ScatterSeriesModel.defaultOption = {
  coordinateSystem: "cartesian2d",
  zlevel: 0,
  z: 2,
  legendHoverLink: true,
  symbolSize: 10,
  large: false,
  largeThreshold: 2000,
  itemStyle: {
    opacity: 0.8
  },
  emphasis: {
    scale: true
  },
  clip: true,
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  }
};
Series_default.registerClass(ScatterSeriesModel);

// src/chart/helper/LargeSymbolDraw.ts
const BOOST_SIZE_THRESHOLD = 4;
class LargeSymbolPathShape {
}
class LargeSymbolPath extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new LargeSymbolPathShape();
  }
  buildPath(path2, shape) {
    const points9 = shape.points;
    const size = shape.size;
    const symbolProxy = this.symbolProxy;
    const symbolProxyShape = symbolProxy.shape;
    const ctx = path2.getContext ? path2.getContext() : path2;
    const canBoost = ctx && size[0] < BOOST_SIZE_THRESHOLD;
    if (canBoost) {
      this._ctx = ctx;
      return;
    }
    this._ctx = null;
    for (let i = 0; i < points9.length; ) {
      const x = points9[i++];
      const y = points9[i++];
      if (isNaN(x) || isNaN(y)) {
        continue;
      }
      if (this.softClipShape && !this.softClipShape.contain(x, y)) {
        continue;
      }
      symbolProxyShape.x = x - size[0] / 2;
      symbolProxyShape.y = y - size[1] / 2;
      symbolProxyShape.width = size[0];
      symbolProxyShape.height = size[1];
      symbolProxy.buildPath(path2, symbolProxyShape, true);
    }
  }
  afterBrush() {
    const shape = this.shape;
    const points9 = shape.points;
    const size = shape.size;
    const ctx = this._ctx;
    if (!ctx) {
      return;
    }
    for (let i = 0; i < points9.length; ) {
      const x = points9[i++];
      const y = points9[i++];
      if (isNaN(x) || isNaN(y)) {
        continue;
      }
      if (this.softClipShape && !this.softClipShape.contain(x, y)) {
        continue;
      }
      ctx.fillRect(x - size[0] / 2, y - size[1] / 2, size[0], size[1]);
    }
  }
  findDataIndex(x, y) {
    const shape = this.shape;
    const points9 = shape.points;
    const size = shape.size;
    const w = Math.max(size[0], 4);
    const h = Math.max(size[1], 4);
    for (let idx = points9.length / 2 - 1; idx >= 0; idx--) {
      const i = idx * 2;
      const x0 = points9[i] - w / 2;
      const y0 = points9[i + 1] - h / 2;
      if (x >= x0 && y >= y0 && x <= x0 + w && y <= y0 + h) {
        return idx;
      }
    }
    return -1;
  }
}
class LargeSymbolDraw {
  constructor() {
    this.group = new Group_default();
  }
  isPersistent() {
    return !this._incremental;
  }
  updateData(data, opt) {
    this.group.removeAll();
    const symbolEl = new LargeSymbolPath({
      rectHover: true,
      cursor: "default"
    });
    symbolEl.setShape({
      points: data.getLayout("symbolPoints")
    });
    this._setCommon(symbolEl, data, false, opt);
    this.group.add(symbolEl);
    this._incremental = null;
  }
  updateLayout(data) {
    if (this._incremental) {
      return;
    }
    let points9 = data.getLayout("symbolPoints");
    this.group.eachChild(function(child) {
      if (child.startIndex != null) {
        const len2 = (child.endIndex - child.startIndex) * 2;
        const byteOffset = child.startIndex * 4 * 2;
        points9 = new Float32Array(points9.buffer, byteOffset, len2);
      }
      child.setShape("points", points9);
    });
  }
  incrementalPrepareUpdate(data) {
    this.group.removeAll();
    this._clearIncremental();
    if (data.count() > 2e+06) {
      if (!this._incremental) {
        this._incremental = new IncrementalDisplayble({
          silent: true
        });
      }
      this.group.add(this._incremental);
    } else {
      this._incremental = null;
    }
  }
  incrementalUpdate(taskParams, data, opt) {
    let symbolEl;
    if (this._incremental) {
      symbolEl = new LargeSymbolPath();
      this._incremental.addDisplayable(symbolEl, true);
    } else {
      symbolEl = new LargeSymbolPath({
        rectHover: true,
        cursor: "default",
        startIndex: taskParams.start,
        endIndex: taskParams.end
      });
      symbolEl.incremental = true;
      this.group.add(symbolEl);
    }
    symbolEl.setShape({
      points: data.getLayout("symbolPoints")
    });
    this._setCommon(symbolEl, data, !!this._incremental, opt);
  }
  _setCommon(symbolEl, data, isIncremental, opt) {
    const hostModel = data.hostModel;
    opt = opt || {};
    const size = data.getVisual("symbolSize");
    symbolEl.setShape("size", size instanceof Array ? size : [size, size]);
    symbolEl.softClipShape = opt.clipShape || null;
    symbolEl.symbolProxy = createSymbol(data.getVisual("symbol"), 0, 0, 0, 0);
    symbolEl.setColor = symbolEl.symbolProxy.setColor;
    const extrudeShadow = symbolEl.shape.size[0] < BOOST_SIZE_THRESHOLD;
    symbolEl.useStyle(hostModel.getModel("itemStyle").getItemStyle(extrudeShadow ? ["color", "shadowBlur", "shadowColor"] : ["color"]));
    const globalStyle = data.getVisual("style");
    const visualColor = globalStyle && globalStyle.fill;
    if (visualColor) {
      symbolEl.setColor(visualColor);
    }
    if (!isIncremental) {
      const ecData = getECData(symbolEl);
      ecData.seriesIndex = hostModel.seriesIndex;
      symbolEl.on("mousemove", function(e) {
        ecData.dataIndex = null;
        const dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);
        if (dataIndex >= 0) {
          ecData.dataIndex = dataIndex + (symbolEl.startIndex || 0);
        }
      });
    }
  }
  remove() {
    this._clearIncremental();
    this._incremental = null;
    this.group.removeAll();
  }
  _clearIncremental() {
    const incremental = this._incremental;
    if (incremental) {
      incremental.clearDisplaybles();
    }
  }
}
const LargeSymbolDraw_default = LargeSymbolDraw;

// src/chart/scatter/ScatterView.ts
class ScatterView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = ScatterView2.type;
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const symbolDraw = this._updateSymbolDraw(data, seriesModel);
    symbolDraw.updateData(data, {
      clipShape: this._getClipShape(seriesModel)
    });
    this._finished = true;
  }
  incrementalPrepareRender(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const symbolDraw = this._updateSymbolDraw(data, seriesModel);
    symbolDraw.incrementalPrepareUpdate(data);
    this._finished = false;
  }
  incrementalRender(taskParams, seriesModel, ecModel) {
    this._symbolDraw.incrementalUpdate(taskParams, seriesModel.getData(), {
      clipShape: this._getClipShape(seriesModel)
    });
    this._finished = taskParams.end === seriesModel.getData().count();
  }
  updateTransform(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    this.group.dirty();
    if (!this._finished || data.count() > 10000 || !this._symbolDraw.isPersistent()) {
      return {
        update: true
      };
    } else {
      const res = points_default().reset(seriesModel, ecModel, api);
      if (res.progress) {
        res.progress({
          start: 0,
          end: data.count(),
          count: data.count()
        }, data);
      }
      this._symbolDraw.updateLayout(data);
    }
  }
  _getClipShape(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    const clipArea = coordSys && coordSys.getArea && coordSys.getArea();
    return seriesModel.get("clip", true) ? clipArea : null;
  }
  _updateSymbolDraw(data, seriesModel) {
    let symbolDraw = this._symbolDraw;
    const pipelineContext = seriesModel.pipelineContext;
    const isLargeDraw = pipelineContext.large;
    if (!symbolDraw || isLargeDraw !== this._isLargeDraw) {
      symbolDraw && symbolDraw.remove();
      symbolDraw = this._symbolDraw = isLargeDraw ? new LargeSymbolDraw_default() : new SymbolDraw_default();
      this._isLargeDraw = isLargeDraw;
      this.group.removeAll();
    }
    this.group.add(symbolDraw.group);
    return symbolDraw;
  }
  remove(ecModel, api) {
    this._symbolDraw && this._symbolDraw.remove(true);
    this._symbolDraw = null;
  }
  dispose() {
  }
}
ScatterView2.type = "scatter";
Chart_default.registerClass(ScatterView2);

// src/chart/scatter.ts
registerLayout(points_default("scatter"));

// src/coord/radar/IndicatorAxis.ts
class IndicatorAxis extends Axis_default {
  constructor(dim, scale4, radiusExtent) {
    super(dim, scale4, radiusExtent);
    this.type = "value";
    this.angle = 0;
    this.name = "";
  }
}
const IndicatorAxis_default = IndicatorAxis;

// src/coord/radar/Radar.ts
class Radar6 {
  constructor(radarModel, ecModel, api) {
    this.dimensions = [];
    this._model = radarModel;
    this._indicatorAxes = map2(radarModel.getIndicatorModels(), function(indicatorModel, idx) {
      const dim = "indicator_" + idx;
      const indicatorAxis = new IndicatorAxis_default(dim, new Interval_default());
      indicatorAxis.name = indicatorModel.get("name");
      indicatorAxis.model = indicatorModel;
      indicatorModel.axis = indicatorAxis;
      this.dimensions.push(dim);
      return indicatorAxis;
    }, this);
    this.resize(radarModel, api);
  }
  getIndicatorAxes() {
    return this._indicatorAxes;
  }
  dataToPoint(value, indicatorIndex) {
    const indicatorAxis = this._indicatorAxes[indicatorIndex];
    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
  }
  coordToPoint(coord, indicatorIndex) {
    const indicatorAxis = this._indicatorAxes[indicatorIndex];
    const angle = indicatorAxis.angle;
    const x = this.cx + coord * Math.cos(angle);
    const y = this.cy - coord * Math.sin(angle);
    return [x, y];
  }
  pointToData(pt) {
    let dx = pt[0] - this.cx;
    let dy = pt[1] - this.cy;
    const radius = Math.sqrt(dx * dx + dy * dy);
    dx /= radius;
    dy /= radius;
    const radian2 = Math.atan2(-dy, dx);
    let minRadianDiff = Infinity;
    let closestAxis;
    let closestAxisIdx = -1;
    for (let i = 0; i < this._indicatorAxes.length; i++) {
      const indicatorAxis = this._indicatorAxes[i];
      const diff2 = Math.abs(radian2 - indicatorAxis.angle);
      if (diff2 < minRadianDiff) {
        closestAxis = indicatorAxis;
        closestAxisIdx = i;
        minRadianDiff = diff2;
      }
    }
    return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];
  }
  resize(radarModel, api) {
    const center3 = radarModel.get("center");
    const viewWidth = api.getWidth();
    const viewHeight = api.getHeight();
    const viewSize = Math.min(viewWidth, viewHeight) / 2;
    this.cx = parsePercent3(center3[0], viewWidth);
    this.cy = parsePercent3(center3[1], viewHeight);
    this.startAngle = radarModel.get("startAngle") * Math.PI / 180;
    let radius = radarModel.get("radius");
    if (typeof radius === "string" || typeof radius === "number") {
      radius = [0, radius];
    }
    this.r0 = parsePercent3(radius[0], viewSize);
    this.r = parsePercent3(radius[1], viewSize);
    each(this._indicatorAxes, function(indicatorAxis, idx) {
      indicatorAxis.setExtent(this.r0, this.r);
      let angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length;
      angle = Math.atan2(Math.sin(angle), Math.cos(angle));
      indicatorAxis.angle = angle;
    }, this);
  }
  update(ecModel, api) {
    const indicatorAxes = this._indicatorAxes;
    const radarModel = this._model;
    each(indicatorAxes, function(indicatorAxis) {
      indicatorAxis.scale.setExtent(Infinity, -Infinity);
    });
    ecModel.eachSeriesByType("radar", function(radarSeries, idx) {
      if (radarSeries.get("coordinateSystem") !== "radar" || ecModel.getComponent("radar", radarSeries.get("radarIndex")) !== radarModel) {
        return;
      }
      const data = radarSeries.getData();
      each(indicatorAxes, function(indicatorAxis) {
        indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));
      });
    }, this);
    const splitNumber = radarModel.get("splitNumber");
    function increaseInterval(interval) {
      const exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));
      let f = interval / exp10;
      if (f === 2) {
        f = 5;
      } else {
        f *= 2;
      }
      return f * exp10;
    }
    each(indicatorAxes, function(indicatorAxis, idx) {
      const rawExtent = getScaleExtent(indicatorAxis.scale, indicatorAxis.model).extent;
      niceScaleExtent(indicatorAxis.scale, indicatorAxis.model);
      const axisModel = indicatorAxis.model;
      const scale4 = indicatorAxis.scale;
      const fixedMin = parseAxisModelMinMax(scale4, axisModel.get("min", true));
      const fixedMax = parseAxisModelMinMax(scale4, axisModel.get("max", true));
      let interval = scale4.getInterval();
      if (fixedMin != null && fixedMax != null) {
        scale4.setExtent(+fixedMin, +fixedMax);
        scale4.setInterval((fixedMax - fixedMin) / splitNumber);
      } else if (fixedMin != null) {
        let max4;
        do {
          max4 = fixedMin + interval * splitNumber;
          scale4.setExtent(+fixedMin, max4);
          scale4.setInterval(interval);
          interval = increaseInterval(interval);
        } while (max4 < rawExtent[1] && isFinite(max4) && isFinite(rawExtent[1]));
      } else if (fixedMax != null) {
        let min4;
        do {
          min4 = fixedMax - interval * splitNumber;
          scale4.setExtent(min4, +fixedMax);
          scale4.setInterval(interval);
          interval = increaseInterval(interval);
        } while (min4 > rawExtent[0] && isFinite(min4) && isFinite(rawExtent[0]));
      } else {
        const nicedSplitNumber = scale4.getTicks().length - 1;
        if (nicedSplitNumber > splitNumber) {
          interval = increaseInterval(interval);
        }
        const max4 = Math.ceil(rawExtent[1] / interval) * interval;
        const min4 = round2(max4 - interval * splitNumber);
        scale4.setExtent(min4, max4);
        scale4.setInterval(interval);
      }
    });
  }
  convertToPixel(ecModel, finder, value) {
    console.warn("Not implemented.");
    return null;
  }
  convertFromPixel(ecModel, finder, pixel) {
    console.warn("Not implemented.");
    return null;
  }
  containPoint(point) {
    console.warn("Not implemented.");
    return false;
  }
  static create(ecModel, api) {
    const radarList = [];
    ecModel.eachComponent("radar", function(radarModel) {
      const radar3 = new Radar6(radarModel, ecModel, api);
      radarList.push(radar3);
      radarModel.coordinateSystem = radar3;
    });
    ecModel.eachSeriesByType("radar", function(radarSeries) {
      if (radarSeries.get("coordinateSystem") === "radar") {
        radarSeries.coordinateSystem = radarList[radarSeries.get("radarIndex") || 0];
      }
    });
    return radarList;
  }
}
Radar6.dimensions = [];
CoordinateSystem_default.register("radar", Radar6);

// src/coord/radar/RadarModel.ts
const valueAxisDefault = axisDefault_default.value;
function defaultsShow(opt, show) {
  return defaults({
    show
  }, opt);
}
class RadarModel7 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = RadarModel7.type;
  }
  optionUpdated() {
    const boundaryGap = this.get("boundaryGap");
    const splitNumber = this.get("splitNumber");
    const scale4 = this.get("scale");
    const axisLine = this.get("axisLine");
    const axisTick = this.get("axisTick");
    const axisLabel = this.get("axisLabel");
    const nameTextStyle = this.get("axisName");
    const showName = this.get(["axisName", "show"]);
    const nameFormatter = this.get(["axisName", "formatter"]);
    const nameGap = this.get("axisNameGap");
    const triggerEvent = this.get("triggerEvent");
    const indicatorModels = map2(this.get("indicator") || [], function(indicatorOpt) {
      if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {
        indicatorOpt.min = 0;
      } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {
        indicatorOpt.max = 0;
      }
      let iNameTextStyle = nameTextStyle;
      if (indicatorOpt.color != null) {
        iNameTextStyle = defaults({
          color: indicatorOpt.color
        }, nameTextStyle);
      }
      const innerIndicatorOpt = merge(clone2(indicatorOpt), {
        boundaryGap,
        splitNumber,
        scale: scale4,
        axisLine,
        axisTick,
        axisLabel,
        name: indicatorOpt.text,
        nameLocation: "end",
        nameGap,
        nameTextStyle: iNameTextStyle,
        triggerEvent
      }, false);
      if (!showName) {
        innerIndicatorOpt.name = "";
      }
      if (typeof nameFormatter === "string") {
        const indName = innerIndicatorOpt.name;
        innerIndicatorOpt.name = nameFormatter.replace("{value}", indName != null ? indName : "");
      } else if (typeof nameFormatter === "function") {
        innerIndicatorOpt.name = nameFormatter(innerIndicatorOpt.name, innerIndicatorOpt);
      }
      const model65 = new Model_default(innerIndicatorOpt, null, this.ecModel);
      mixin(model65, AxisModelCommonMixin.prototype);
      model65.mainType = "radar";
      model65.componentIndex = this.componentIndex;
      return model65;
    }, this);
    this._indicatorModels = indicatorModels;
  }
  getIndicatorModels() {
    return this._indicatorModels;
  }
}
RadarModel7.type = "radar";
RadarModel7.defaultOption = {
  zlevel: 0,
  z: 0,
  center: ["50%", "50%"],
  radius: "75%",
  startAngle: 90,
  axisName: {
    show: true
  },
  boundaryGap: [0, 0],
  splitNumber: 5,
  axisNameGap: 15,
  scale: false,
  shape: "polygon",
  axisLine: merge({
    lineStyle: {
      color: "#bbb"
    }
  }, valueAxisDefault.axisLine),
  axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
  axisTick: defaultsShow(valueAxisDefault.axisTick, false),
  splitLine: defaultsShow(valueAxisDefault.splitLine, true),
  splitArea: defaultsShow(valueAxisDefault.splitArea, true),
  indicator: []
};
Component_default.registerClass(RadarModel7);

// src/component/radar/RadarView.ts
const axisBuilderAttrs4 = ["axisLine", "axisTickLabel", "axisName"];
class RadarView4 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = RadarView4.type;
  }
  render(radarModel, ecModel, api) {
    const group = this.group;
    group.removeAll();
    this._buildAxes(radarModel);
    this._buildSplitLineAndArea(radarModel);
  }
  _buildAxes(radarModel) {
    const radar3 = radarModel.coordinateSystem;
    const indicatorAxes = radar3.getIndicatorAxes();
    const axisBuilders = map2(indicatorAxes, function(indicatorAxis) {
      const axisBuilder = new AxisBuilder_default(indicatorAxis.model, {
        position: [radar3.cx, radar3.cy],
        rotation: indicatorAxis.angle,
        labelDirection: -1,
        tickDirection: -1,
        nameDirection: 1
      });
      return axisBuilder;
    });
    each(axisBuilders, function(axisBuilder) {
      each(axisBuilderAttrs4, axisBuilder.add, axisBuilder);
      this.group.add(axisBuilder.getGroup());
    }, this);
  }
  _buildSplitLineAndArea(radarModel) {
    const radar3 = radarModel.coordinateSystem;
    const indicatorAxes = radar3.getIndicatorAxes();
    if (!indicatorAxes.length) {
      return;
    }
    const shape = radarModel.get("shape");
    const splitLineModel = radarModel.getModel("splitLine");
    const splitAreaModel = radarModel.getModel("splitArea");
    const lineStyleModel = splitLineModel.getModel("lineStyle");
    const areaStyleModel = splitAreaModel.getModel("areaStyle");
    const showSplitLine = splitLineModel.get("show");
    const showSplitArea = splitAreaModel.get("show");
    const splitLineColors = lineStyleModel.get("color");
    const splitAreaColors = areaStyleModel.get("color");
    const splitLineColorsArr = isArray(splitLineColors) ? splitLineColors : [splitLineColors];
    const splitAreaColorsArr = isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];
    const splitLines = [];
    const splitAreas = [];
    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
      const colorIndex = idx % areaOrLineColorList.length;
      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
      return colorIndex;
    }
    if (shape === "circle") {
      const ticksRadius = indicatorAxes[0].getTicksCoords();
      const cx = radar3.cx;
      const cy = radar3.cy;
      for (let i = 0; i < ticksRadius.length; i++) {
        if (showSplitLine) {
          const colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);
          splitLines[colorIndex].push(new Circle_default({
            shape: {
              cx,
              cy,
              r: ticksRadius[i].coord
            }
          }));
        }
        if (showSplitArea && i < ticksRadius.length - 1) {
          const colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i);
          splitAreas[colorIndex].push(new Ring_default({
            shape: {
              cx,
              cy,
              r0: ticksRadius[i].coord,
              r: ticksRadius[i + 1].coord
            }
          }));
        }
      }
    } else {
      let realSplitNumber;
      const axesTicksPoints = map2(indicatorAxes, function(indicatorAxis, idx) {
        const ticksCoords = indicatorAxis.getTicksCoords();
        realSplitNumber = realSplitNumber == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber);
        return map2(ticksCoords, function(tickCoord) {
          return radar3.coordToPoint(tickCoord.coord, idx);
        });
      });
      let prevPoints = [];
      for (let i = 0; i <= realSplitNumber; i++) {
        const points9 = [];
        for (let j = 0; j < indicatorAxes.length; j++) {
          points9.push(axesTicksPoints[j][i]);
        }
        if (points9[0]) {
          points9.push(points9[0].slice());
        } else {
          if (__DEV__) {
            console.error("Can't draw value axis " + i);
          }
        }
        if (showSplitLine) {
          const colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);
          splitLines[colorIndex].push(new Polyline_default({
            shape: {
              points: points9
            }
          }));
        }
        if (showSplitArea && prevPoints) {
          const colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i - 1);
          splitAreas[colorIndex].push(new Polygon_default({
            shape: {
              points: points9.concat(prevPoints)
            }
          }));
        }
        prevPoints = points9.slice().reverse();
      }
    }
    const lineStyle3 = lineStyleModel.getLineStyle();
    const areaStyle2 = areaStyleModel.getAreaStyle();
    each(splitAreas, function(splitAreas2, idx) {
      this.group.add(mergePath2(splitAreas2, {
        style: defaults({
          stroke: "none",
          fill: splitAreaColorsArr[idx % splitAreaColorsArr.length]
        }, areaStyle2),
        silent: true
      }));
    }, this);
    each(splitLines, function(splitLines2, idx) {
      this.group.add(mergePath2(splitLines2, {
        style: defaults({
          fill: "none",
          stroke: splitLineColorsArr[idx % splitLineColorsArr.length]
        }, lineStyle3),
        silent: true
      }));
    }, this);
  }
}
RadarView4.type = "radar";
Component_default2.registerClass(RadarView4);

// src/component/radar.ts

// src/chart/radar/RadarSeries.ts
class RadarSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = RadarSeriesModel.type;
    this.useColorPaletteOnData = true;
    this.hasSymbolVisual = true;
  }
  init(option) {
    super.init.apply(this, arguments);
    this.legendVisualProvider = new LegendVisualProvider_default(bind(this.getData, this), bind(this.getRawData, this));
  }
  getInitialData(option, ecModel) {
    return createListSimply_default(this, {
      generateCoord: "indicator_",
      generateCoordCount: Infinity
    });
  }
  formatTooltip(dataIndex) {
    const data = this.getData();
    const coordSys = this.coordinateSystem;
    const indicatorAxes = coordSys.getIndicatorAxes();
    const name = this.getData().getName(dataIndex);
    return encodeHTML(name === "" ? this.name : name) + "<br/>" + map2(indicatorAxes, function(axis2, idx) {
      const val = data.get(data.mapDimension(axis2.dim), dataIndex);
      return encodeHTML(axis2.name + " : " + val);
    }).join("<br />");
  }
  getTooltipPosition(dataIndex) {
    if (dataIndex != null) {
      const data = this.getData();
      const coordSys = this.coordinateSystem;
      const values = data.getValues(map2(coordSys.dimensions, function(dim) {
        return data.mapDimension(dim);
      }), dataIndex);
      for (let i = 0, len2 = values.length; i < len2; i++) {
        if (!isNaN(values[i])) {
          const indicatorAxes = coordSys.getIndicatorAxes();
          return coordSys.coordToPoint(indicatorAxes[i].dataToCoord(values[i]), i);
        }
      }
    }
  }
}
RadarSeriesModel.type = "series.radar";
RadarSeriesModel.dependencies = ["radar"];
RadarSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "radar",
  legendHoverLink: true,
  radarIndex: 0,
  lineStyle: {
    width: 2,
    type: "solid"
  },
  label: {
    position: "top"
  },
  symbol: "emptyCircle",
  symbolSize: 4
};
Series_default.registerClass(RadarSeriesModel);

// src/chart/radar/RadarView.ts
function normalizeSymbolSize2(symbolSize) {
  if (!isArray(symbolSize)) {
    symbolSize = [+symbolSize, +symbolSize];
  }
  return symbolSize;
}
class RadarView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = RadarView2.type;
  }
  render(seriesModel, ecModel, api) {
    const polar2 = seriesModel.coordinateSystem;
    const group = this.group;
    const data = seriesModel.getData();
    const oldData = this._data;
    function createSymbol3(data2, idx) {
      const symbolType = data2.getItemVisual(idx, "symbol") || "circle";
      if (symbolType === "none") {
        return;
      }
      const symbolSize = normalizeSymbolSize2(data2.getItemVisual(idx, "symbolSize"));
      const symbolPath = createSymbol(symbolType, -1, -1, 2, 2);
      symbolPath.attr({
        style: {
          strokeNoScale: true
        },
        z2: 100,
        scaleX: symbolSize[0] / 2,
        scaleY: symbolSize[1] / 2
      });
      return symbolPath;
    }
    function updateSymbols(oldPoints, newPoints, symbolGroup, data2, idx, isInit) {
      symbolGroup.removeAll();
      for (let i = 0; i < newPoints.length - 1; i++) {
        const symbolPath = createSymbol3(data2, idx);
        if (symbolPath) {
          symbolPath.__dimIdx = i;
          if (oldPoints[i]) {
            symbolPath.setPosition(oldPoints[i]);
            graphic_exports[isInit ? "initProps" : "updateProps"](symbolPath, {
              x: newPoints[i][0],
              y: newPoints[i][1]
            }, seriesModel, idx);
          } else {
            symbolPath.setPosition(newPoints[i]);
          }
          symbolGroup.add(symbolPath);
        }
      }
    }
    function getInitialPoints(points9) {
      return map2(points9, function(pt) {
        return [polar2.cx, polar2.cy];
      });
    }
    data.diff(oldData).add(function(idx) {
      const points9 = data.getItemLayout(idx);
      if (!points9) {
        return;
      }
      const polygon = new Polygon_default();
      const polyline = new Polyline_default();
      const target = {
        shape: {
          points: points9
        }
      };
      polygon.shape.points = getInitialPoints(points9);
      polyline.shape.points = getInitialPoints(points9);
      initProps(polygon, target, seriesModel, idx);
      initProps(polyline, target, seriesModel, idx);
      const itemGroup = new Group_default();
      const symbolGroup = new Group_default();
      itemGroup.add(polyline);
      itemGroup.add(polygon);
      itemGroup.add(symbolGroup);
      updateSymbols(polyline.shape.points, points9, symbolGroup, data, idx, true);
      data.setItemGraphicEl(idx, itemGroup);
    }).update(function(newIdx, oldIdx) {
      const itemGroup = oldData.getItemGraphicEl(oldIdx);
      const polyline = itemGroup.childAt(0);
      const polygon = itemGroup.childAt(1);
      const symbolGroup = itemGroup.childAt(2);
      const target = {
        shape: {
          points: data.getItemLayout(newIdx)
        }
      };
      if (!target.shape.points) {
        return;
      }
      updateSymbols(polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false);
      updateProps(polyline, target, seriesModel);
      updateProps(polygon, target, seriesModel);
      data.setItemGraphicEl(newIdx, itemGroup);
    }).remove(function(idx) {
      group.remove(oldData.getItemGraphicEl(idx));
    }).execute();
    data.eachItemGraphicEl(function(itemGroup, idx) {
      const itemModel = data.getItemModel(idx);
      const polyline = itemGroup.childAt(0);
      const polygon = itemGroup.childAt(1);
      const symbolGroup = itemGroup.childAt(2);
      const itemStyle5 = data.getItemVisual(idx, "style");
      const color8 = itemStyle5.fill;
      group.add(itemGroup);
      polyline.useStyle(defaults(itemModel.getModel("lineStyle").getLineStyle(), {
        fill: "none",
        stroke: color8
      }));
      setStatesStylesFromModel(polyline, itemModel, "lineStyle");
      setStatesStylesFromModel(polygon, itemModel, "areaStyle");
      const areaStyleModel = itemModel.getModel("areaStyle");
      const polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
      polygon.ignore = polygonIgnore;
      each(["emphasis", "select", "blur"], function(stateName) {
        const stateModel = itemModel.getModel([stateName, "areaStyle"]);
        const stateIgnore = stateModel.isEmpty() && stateModel.parentModel.isEmpty();
        polygon.ensureState(stateName).ignore = stateIgnore && polygonIgnore;
      });
      polygon.useStyle(defaults(areaStyleModel.getAreaStyle(), {
        fill: color8,
        opacity: 0.7
      }));
      const emphasisModel = itemModel.getModel("emphasis");
      const itemHoverStyle = emphasisModel.getModel("itemStyle").getItemStyle();
      symbolGroup.eachChild(function(symbolPath) {
        if (symbolPath instanceof Image_default) {
          const pathStyle = symbolPath.style;
          symbolPath.useStyle(extend({
            image: pathStyle.image,
            x: pathStyle.x,
            y: pathStyle.y,
            width: pathStyle.width,
            height: pathStyle.height
          }, itemStyle5));
        } else {
          symbolPath.useStyle(itemStyle5);
          symbolPath.setColor(color8);
        }
        const pathEmphasisState = symbolPath.ensureState("emphasis");
        pathEmphasisState.style = clone2(itemHoverStyle);
        let defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);
        (defaultText == null || isNaN(defaultText)) && (defaultText = "");
        setLabelStyle(symbolPath, getLabelStatesModels(itemModel), {
          labelFetcher: data.hostModel,
          labelDataIndex: idx,
          labelDimIndex: symbolPath.__dimIdx,
          defaultText,
          inheritColor: color8
        });
      });
      enableHoverEmphasis(itemGroup, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
    });
    this._data = data;
  }
  remove() {
    this.group.removeAll();
    this._data = null;
  }
}
RadarView2.type = "radar";
Chart_default.registerClass(RadarView2);

// src/chart/radar/radarLayout.ts
function radarLayout_default(ecModel) {
  ecModel.eachSeriesByType("radar", function(seriesModel) {
    const data = seriesModel.getData();
    const points9 = [];
    const coordSys = seriesModel.coordinateSystem;
    if (!coordSys) {
      return;
    }
    const axes = coordSys.getIndicatorAxes();
    each(axes, function(axis2, axisIndex) {
      data.each(data.mapDimension(axes[axisIndex].dim), function(val, dataIndex) {
        points9[dataIndex] = points9[dataIndex] || [];
        const point = coordSys.dataToPoint(val, axisIndex);
        points9[dataIndex][axisIndex] = isValidPoint(point) ? point : getValueMissingPoint(coordSys);
      });
    });
    data.each(function(idx) {
      const firstPoint = find(points9[idx], function(point) {
        return isValidPoint(point);
      }) || getValueMissingPoint(coordSys);
      points9[idx].push(firstPoint.slice());
      data.setItemLayout(idx, points9[idx]);
    });
  });
}
function isValidPoint(point) {
  return !isNaN(point[0]) && !isNaN(point[1]);
}
function getValueMissingPoint(coordSys) {
  return [coordSys.cx, coordSys.cy];
}

// src/chart/radar/backwardCompat.ts
function backwardCompat_default(option) {
  let polarOptArr = option.polar;
  if (polarOptArr) {
    if (!isArray(polarOptArr)) {
      polarOptArr = [polarOptArr];
    }
    const polarNotRadar = [];
    each(polarOptArr, function(polarOpt, idx) {
      if (polarOpt.indicator) {
        if (polarOpt.type && !polarOpt.shape) {
          polarOpt.shape = polarOpt.type;
        }
        option.radar = option.radar || [];
        if (!isArray(option.radar)) {
          option.radar = [option.radar];
        }
        option.radar.push(polarOpt);
      } else {
        polarNotRadar.push(polarOpt);
      }
    });
    option.polar = polarNotRadar;
  }
  each(option.series, function(seriesOpt) {
    if (seriesOpt && seriesOpt.type === "radar" && seriesOpt.polarIndex) {
      seriesOpt.radarIndex = seriesOpt.polarIndex;
    }
  });
}

// src/chart/radar.ts
registerLayout(radarLayout_default);
registerProcessor(dataFilter_default("radar"));
registerPreprocessor(backwardCompat_default);

// src/coord/geo/fix/nanhai.ts
const geoCoord = [126, 25];
const points8 = [[[0, 3.5], [7, 11.2], [15, 11.9], [30, 7], [42, 0.7], [52, 0.7], [56, 7.7], [59, 0.7], [64, 0.7], [64, 0], [5, 0], [0, 3.5]], [[13, 16.1], [19, 14.7], [16, 21.7], [11, 23.1], [13, 16.1]], [[12, 32.2], [14, 38.5], [15, 38.5], [13, 32.2], [12, 32.2]], [[16, 47.6], [12, 53.2], [13, 53.2], [18, 47.6], [16, 47.6]], [[6, 64.4], [8, 70], [9, 70], [8, 64.4], [6, 64.4]], [[23, 82.6], [29, 79.8], [30, 79.8], [25, 82.6], [23, 82.6]], [[37, 70.7], [43, 62.3], [44, 62.3], [39, 70.7], [37, 70.7]], [[48, 51.1], [51, 45.5], [53, 45.5], [50, 51.1], [48, 51.1]], [[51, 35], [51, 28.7], [53, 28.7], [53, 35], [51, 35]], [[52, 22.4], [55, 17.5], [56, 17.5], [53, 22.4], [52, 22.4]], [[58, 12.6], [62, 7], [63, 7], [60, 12.6], [58, 12.6]], [[0, 3.5], [0, 93.1], [64, 93.1], [64, 0], [63, 0], [63, 92.4], [1, 92.4], [1, 3.5], [0, 3.5]]];
for (let i = 0; i < points8.length; i++) {
  for (let k = 0; k < points8[i].length; k++) {
    points8[i][k][0] /= 10.5;
    points8[i][k][1] /= -10.5 / 0.75;
    points8[i][k][0] += geoCoord[0];
    points8[i][k][1] += geoCoord[1];
  }
}
function nanhai_default(mapType, regions) {
  if (mapType === "china") {
    regions.push(new Region_default("南海诸岛", map2(points8, function(exterior) {
      return {
        type: "polygon",
        exterior
      };
    }), geoCoord));
  }
}

// src/coord/geo/fix/textCoord.ts
const coordsOffsetMap = {
  南海诸岛: [32, 80],
  广东: [0, -10],
  香港: [10, 5],
  澳门: [-10, 10],
  天津: [5, 5]
};
function textCoord_default(mapType, region) {
  if (mapType === "china") {
    const coordFix = coordsOffsetMap[region.name];
    if (coordFix) {
      const cp = region.center;
      cp[0] += coordFix[0] / 10.5;
      cp[1] += -coordFix[1] / (10.5 / 0.75);
    }
  }
}

// src/coord/geo/fix/geoCoord.ts
const geoCoordMap = {
  Russia: [100, 60],
  "United States": [-99, 38],
  "United States of America": [-99, 38]
};
function geoCoord_default(mapType, region) {
  if (mapType === "world") {
    const geoCoord3 = geoCoordMap[region.name];
    if (geoCoord3) {
      const cp = region.center;
      cp[0] = geoCoord3[0];
      cp[1] = geoCoord3[1];
    }
  }
}

// src/coord/geo/fix/diaoyuIsland.ts
const points7 = [[[123.45165252685547, 25.73527164402261], [123.49731445312499, 25.73527164402261], [123.49731445312499, 25.750734064600884], [123.45165252685547, 25.750734064600884], [123.45165252685547, 25.73527164402261]]];
function diaoyuIsland_default(mapType, region) {
  if (mapType === "china" && region.name === "台湾") {
    region.geometries.push({
      type: "polygon",
      exterior: points7[0]
    });
  }
}

// src/coord/geo/geoJSONLoader.ts
const inner15 = makeInner();
const geoJSONLoader_default = {
  load(mapName, mapRecord, nameProperty) {
    const parsed = inner15(mapRecord).parsed;
    if (parsed) {
      return parsed;
    }
    const specialAreas = mapRecord.specialAreas || {};
    const geoJSON = mapRecord.geoJSON;
    let regions;
    try {
      regions = geoJSON ? parseGeoJson_default(geoJSON, nameProperty) : [];
    } catch (e) {
      throw new Error("Invalid geoJson format\n" + e.message);
    }
    nanhai_default(mapName, regions);
    each(regions, function(region) {
      const regionName = region.name;
      textCoord_default(mapName, region);
      geoCoord_default(mapName, region);
      diaoyuIsland_default(mapName, region);
      const specialArea = specialAreas[regionName];
      if (specialArea) {
        region.transformTo(specialArea.left, specialArea.top, specialArea.width, specialArea.height);
      }
    });
    return inner15(mapRecord).parsed = {
      regions,
      boundingRect: getBoundingRect2(regions)
    };
  }
};
function getBoundingRect2(regions) {
  let rect;
  for (let i = 0; i < regions.length; i++) {
    const regionRect = regions[i].getBoundingRect();
    rect = rect || regionRect.clone();
    rect.union(regionRect);
  }
  return rect;
}

// src/coord/geo/geoSVGLoader.ts
const inner16 = makeInner();
const geoSVGLoader_default = {
  load(mapName, mapRecord) {
    const originRoot = inner16(mapRecord).originRoot;
    if (originRoot) {
      return {
        root: originRoot,
        boundingRect: inner16(mapRecord).boundingRect
      };
    }
    const graphic83 = buildGraphic(mapRecord);
    inner16(mapRecord).originRoot = graphic83.root;
    inner16(mapRecord).boundingRect = graphic83.boundingRect;
    return graphic83;
  },
  makeGraphic(mapName, mapRecord, hostKey) {
    const field = inner16(mapRecord);
    const rootMap = field.rootMap || (field.rootMap = createHashMap());
    let root = rootMap.get(hostKey);
    if (root) {
      return root;
    }
    const originRoot = field.originRoot;
    const boundingRect = field.boundingRect;
    if (!field.originRootHostKey) {
      field.originRootHostKey = hostKey;
      root = originRoot;
    } else {
      root = buildGraphic(mapRecord, boundingRect).root;
    }
    return rootMap.set(hostKey, root);
  },
  removeGraphic(mapName, mapRecord, hostKey) {
    const field = inner16(mapRecord);
    const rootMap = field.rootMap;
    rootMap && rootMap.removeKey(hostKey);
    if (hostKey === field.originRootHostKey) {
      field.originRootHostKey = null;
    }
  }
};
function buildGraphic(mapRecord, boundingRect) {
  const svgXML = mapRecord.svgXML;
  let result;
  let root;
  try {
    result = svgXML && parseSVG2(svgXML, {
      ignoreViewBox: true,
      ignoreRootClip: true
    }) || {};
    root = result.root;
    assert(root != null);
  } catch (e) {
    throw new Error("Invalid svg format\n" + e.message);
  }
  const svgWidth = result.width;
  const svgHeight = result.height;
  const viewBoxRect = result.viewBoxRect;
  if (!boundingRect) {
    boundingRect = svgWidth == null || svgHeight == null ? root.getBoundingRect() : new BoundingRect_default(0, 0, 0, 0);
    if (svgWidth != null) {
      boundingRect.width = svgWidth;
    }
    if (svgHeight != null) {
      boundingRect.height = svgHeight;
    }
  }
  if (viewBoxRect) {
    const viewBoxTransform = makeViewBoxTransform(viewBoxRect, boundingRect.width, boundingRect.height);
    const elRoot = root;
    root = new Group_default();
    root.add(elRoot);
    elRoot.scaleX = elRoot.scaleY = viewBoxTransform.scale;
    elRoot.x = viewBoxTransform.x;
    elRoot.y = viewBoxTransform.y;
  }
  root.setClipPath(new Rect_default({
    shape: boundingRect.plain()
  }));
  return {
    root,
    boundingRect
  };
}

// src/coord/geo/geoSourceManager.ts
const loaders = {
  geoJSON: geoJSONLoader_default,
  svg: geoSVGLoader_default
};
const geoSourceManager_default = {
  load: function(mapName, nameMap, nameProperty) {
    const regions = [];
    const regionsMap = createHashMap();
    const nameCoordMap = createHashMap();
    let boundingRect;
    const mapRecords = retrieveMap(mapName);
    each(mapRecords, function(record) {
      const singleSource = loaders[record.type].load(mapName, record, nameProperty);
      each(singleSource.regions, function(region) {
        let regionName = region.name;
        if (nameMap && nameMap.hasOwnProperty(regionName)) {
          region = region.cloneShallow(regionName = nameMap[regionName]);
        }
        regions.push(region);
        regionsMap.set(regionName, region);
        nameCoordMap.set(regionName, region.center);
      });
      const rect = singleSource.boundingRect;
      if (rect) {
        boundingRect ? boundingRect.union(rect) : boundingRect = rect.clone();
      }
    });
    return {
      regions,
      regionsMap,
      nameCoordMap,
      boundingRect: boundingRect || new BoundingRect_default(0, 0, 0, 0)
    };
  },
  makeGraphic: function(mapName, hostKey) {
    const mapRecords = retrieveMap(mapName);
    const results = [];
    each(mapRecords, function(record) {
      const method = loaders[record.type].makeGraphic;
      method && results.push(method(mapName, record, hostKey));
    });
    return results;
  },
  removeGraphic: function(mapName, hostKey) {
    const mapRecords = retrieveMap(mapName);
    each(mapRecords, function(record) {
      const method = loaders[record.type].makeGraphic;
      method && method(mapName, record, hostKey);
    });
  }
};
function mapNotExistsError(mapName) {
  if (__DEV__) {
    console.error("Map " + mapName + " not exists. The GeoJSON of the map must be provided.");
  }
}
function retrieveMap(mapName) {
  const mapRecords = mapDataStorage_default.retrieveMap(mapName) || [];
  if (__DEV__) {
    if (!mapRecords.length) {
      mapNotExistsError(mapName);
    }
  }
  return mapRecords;
}

// src/chart/map/MapSeries.ts
class MapSeries2 extends Series_default {
  constructor() {
    super(...arguments);
    this.type = MapSeries2.type;
    this.needsDrawMap = false;
    this.seriesGroup = [];
    this.getTooltipPosition = function(dataIndex) {
      if (dataIndex != null) {
        const name = this.getData().getName(dataIndex);
        const geo2 = this.coordinateSystem;
        const region = geo2.getRegion(name);
        return region && geo2.dataToPoint(region.center);
      }
    };
  }
  getInitialData(option) {
    const data = createListSimply_default(this, {
      coordDimensions: ["value"],
      encodeDefaulter: curry(makeSeriesEncodeForNameBased, this)
    });
    const dataNameMap = createHashMap();
    const toAppendNames = [];
    for (let i = 0, len2 = data.count(); i < len2; i++) {
      const name = data.getName(i);
      dataNameMap.set(name, true);
    }
    const geoSource = geoSourceManager_default.load(this.getMapType(), this.option.nameMap, this.option.nameProperty);
    each(geoSource.regions, function(region) {
      const name = region.name;
      if (!dataNameMap.get(name)) {
        toAppendNames.push(name);
      }
    });
    data.appendValues([], toAppendNames);
    return data;
  }
  getHostGeoModel() {
    const geoIndex = this.option.geoIndex;
    return geoIndex != null ? this.ecModel.getComponent("geo", geoIndex) : null;
  }
  getMapType() {
    return (this.getHostGeoModel() || this).option.map;
  }
  getRawValue(dataIndex) {
    const data = this.getData();
    return data.get(data.mapDimension("value"), dataIndex);
  }
  getRegionModel(regionName) {
    const data = this.getData();
    return data.getItemModel(data.indexOfName(regionName));
  }
  formatTooltip(dataIndex) {
    const data = this.getData();
    const formattedValue = addCommas(this.getRawValue(dataIndex));
    const name = data.getName(dataIndex);
    const seriesGroup = this.seriesGroup;
    const seriesNames = [];
    for (let i = 0; i < seriesGroup.length; i++) {
      const otherIndex = seriesGroup[i].originalData.indexOfName(name);
      const valueDim = data.mapDimension("value");
      if (!isNaN(seriesGroup[i].originalData.get(valueDim, otherIndex))) {
        seriesNames.push(encodeHTML(seriesGroup[i].name));
      }
    }
    return seriesNames.join(", ") + "<br />" + encodeHTML(name + " : " + formattedValue);
  }
  setZoom(zoom) {
    this.option.zoom = zoom;
  }
  setCenter(center3) {
    this.option.center = center3;
  }
}
MapSeries2.type = "series.map";
MapSeries2.dependencies = ["geo"];
MapSeries2.layoutMode = "box";
MapSeries2.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "geo",
  map: "",
  left: "center",
  top: "center",
  aspectScale: 0.75,
  showLegendSymbol: true,
  boundingCoords: null,
  center: null,
  zoom: 1,
  scaleLimit: null,
  selectedMode: true,
  label: {
    show: false,
    color: "#000"
  },
  itemStyle: {
    borderWidth: 0.5,
    borderColor: "#444",
    areaColor: "#eee"
  },
  emphasis: {
    label: {
      show: true,
      color: "rgb(100,0,0)"
    },
    itemStyle: {
      areaColor: "rgba(255,215,0,0.8)"
    }
  },
  select: {
    label: {
      show: true,
      color: "rgb(100,0,0)"
    },
    itemStyle: {
      color: "rgba(255,215,0,0.8)"
    }
  },
  nameProperty: "name"
};
Series_default.registerClass(MapSeries2);

// src/component/helper/interactionMutex.ts
const ATTR = "\0_ec_interaction_mutex";
function take(zr, resourceKey, userKey) {
  const store = getStore(zr);
  store[resourceKey] = userKey;
}
function release(zr, resourceKey, userKey) {
  const store = getStore(zr);
  const uKey = store[resourceKey];
  if (uKey === userKey) {
    store[resourceKey] = null;
  }
}
function isTaken(zr, resourceKey) {
  return !!getStore(zr)[resourceKey];
}
function getStore(zr) {
  return zr[ATTR] || (zr[ATTR] = {});
}
registerAction({
  type: "takeGlobalCursor",
  event: "globalCursorTaken",
  update: "update"
}, function() {
});

// src/component/helper/RoamController.ts
class RoamController8 extends Eventful2 {
  constructor(zr) {
    super();
    this._zr = zr;
    const mousedownHandler = bind(this._mousedownHandler, this);
    const mousemoveHandler = bind(this._mousemoveHandler, this);
    const mouseupHandler = bind(this._mouseupHandler, this);
    const mousewheelHandler = bind(this._mousewheelHandler, this);
    const pinchHandler = bind(this._pinchHandler, this);
    this.enable = function(controlType, opt) {
      this.disable();
      this._opt = defaults(clone2(opt) || {}, {
        zoomOnMouseWheel: true,
        moveOnMouseMove: true,
        moveOnMouseWheel: false,
        preventDefaultMouseMove: true
      });
      if (controlType == null) {
        controlType = true;
      }
      if (controlType === true || (controlType === "move" || controlType === "pan")) {
        zr.on("mousedown", mousedownHandler);
        zr.on("mousemove", mousemoveHandler);
        zr.on("mouseup", mouseupHandler);
      }
      if (controlType === true || (controlType === "scale" || controlType === "zoom")) {
        zr.on("mousewheel", mousewheelHandler);
        zr.on("pinch", pinchHandler);
      }
    };
    this.disable = function() {
      zr.off("mousedown", mousedownHandler);
      zr.off("mousemove", mousemoveHandler);
      zr.off("mouseup", mouseupHandler);
      zr.off("mousewheel", mousewheelHandler);
      zr.off("pinch", pinchHandler);
    };
  }
  isDragging() {
    return this._dragging;
  }
  isPinching() {
    return this._pinching;
  }
  setPointerChecker(pointerChecker) {
    this.pointerChecker = pointerChecker;
  }
  dispose() {
    this.disable();
  }
  _mousedownHandler(e) {
    if (isMiddleOrRightButtonOnMouseUpDown(e) || e.target && e.target.draggable) {
      return;
    }
    const x = e.offsetX;
    const y = e.offsetY;
    if (this.pointerChecker && this.pointerChecker(e, x, y)) {
      this._x = x;
      this._y = y;
      this._dragging = true;
    }
  }
  _mousemoveHandler(e) {
    if (!this._dragging || !isAvailableBehavior("moveOnMouseMove", e, this._opt) || e.gestureEvent === "pinch" || isTaken(this._zr, "globalPan")) {
      return;
    }
    const x = e.offsetX;
    const y = e.offsetY;
    const oldX = this._x;
    const oldY = this._y;
    const dx = x - oldX;
    const dy = y - oldY;
    this._x = x;
    this._y = y;
    this._opt.preventDefaultMouseMove && stop(e.event);
    trigger2(this, "pan", "moveOnMouseMove", e, {
      dx,
      dy,
      oldX,
      oldY,
      newX: x,
      newY: y,
      isAvailableBehavior: null
    });
  }
  _mouseupHandler(e) {
    if (!isMiddleOrRightButtonOnMouseUpDown(e)) {
      this._dragging = false;
    }
  }
  _mousewheelHandler(e) {
    const shouldZoom = isAvailableBehavior("zoomOnMouseWheel", e, this._opt);
    const shouldMove = isAvailableBehavior("moveOnMouseWheel", e, this._opt);
    const wheelDelta = e.wheelDelta;
    const absWheelDeltaDelta = Math.abs(wheelDelta);
    const originX = e.offsetX;
    const originY = e.offsetY;
    if (wheelDelta === 0 || !shouldZoom && !shouldMove) {
      return;
    }
    if (shouldZoom) {
      const factor = absWheelDeltaDelta > 3 ? 1.4 : absWheelDeltaDelta > 1 ? 1.2 : 1.1;
      const scale4 = wheelDelta > 0 ? factor : 1 / factor;
      checkPointerAndTrigger(this, "zoom", "zoomOnMouseWheel", e, {
        scale: scale4,
        originX,
        originY,
        isAvailableBehavior: null
      });
    }
    if (shouldMove) {
      const absDelta = Math.abs(wheelDelta);
      const scrollDelta = (wheelDelta > 0 ? 1 : -1) * (absDelta > 3 ? 0.4 : absDelta > 1 ? 0.15 : 0.05);
      checkPointerAndTrigger(this, "scrollMove", "moveOnMouseWheel", e, {
        scrollDelta,
        originX,
        originY,
        isAvailableBehavior: null
      });
    }
  }
  _pinchHandler(e) {
    if (isTaken(this._zr, "globalPan")) {
      return;
    }
    const scale4 = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
    checkPointerAndTrigger(this, "zoom", null, e, {
      scale: scale4,
      originX: e.pinchX,
      originY: e.pinchY,
      isAvailableBehavior: null
    });
  }
}
function checkPointerAndTrigger(controller, eventName, behaviorToCheck, e, contollerEvent) {
  if (controller.pointerChecker && controller.pointerChecker(e, contollerEvent.originX, contollerEvent.originY)) {
    stop(e.event);
    trigger2(controller, eventName, behaviorToCheck, e, contollerEvent);
  }
}
function trigger2(controller, eventName, behaviorToCheck, e, contollerEvent) {
  contollerEvent.isAvailableBehavior = bind(isAvailableBehavior, null, behaviorToCheck, e);
  controller.trigger(eventName, contollerEvent);
}
function isAvailableBehavior(behaviorToCheck, e, settings) {
  const setting = settings[behaviorToCheck];
  return !behaviorToCheck || setting && (!isString(setting) || e.event[setting + "Key"]);
}
const RoamController_default = RoamController8;

// src/component/helper/roamHelper.ts
function updateViewOnPan(controllerHost, dx, dy) {
  const target = controllerHost.target;
  target.x += dx;
  target.y += dy;
  target.dirty();
}
function updateViewOnZoom(controllerHost, zoomDelta, zoomX, zoomY) {
  const target = controllerHost.target;
  const zoomLimit = controllerHost.zoomLimit;
  let newZoom = controllerHost.zoom = controllerHost.zoom || 1;
  newZoom *= zoomDelta;
  if (zoomLimit) {
    const zoomMin = zoomLimit.min || 0;
    const zoomMax = zoomLimit.max || Infinity;
    newZoom = Math.max(Math.min(zoomMax, newZoom), zoomMin);
  }
  const zoomScale = newZoom / controllerHost.zoom;
  controllerHost.zoom = newZoom;
  target.x -= (zoomX - target.x) * (zoomScale - 1);
  target.y -= (zoomY - target.y) * (zoomScale - 1);
  target.scaleX *= zoomScale;
  target.scaleY *= zoomScale;
  target.dirty();
}

// src/component/helper/cursorHelper.ts
const IRRELEVANT_EXCLUDES = {
  axisPointer: 1,
  tooltip: 1,
  brush: 1
};
function onIrrelevantElement(e, api, targetCoordSysModel) {
  const model65 = api.getComponentByElement(e.topTarget);
  const coordSys = model65 && model65.coordinateSystem;
  return model65 && model65 !== targetCoordSysModel && !IRRELEVANT_EXCLUDES.hasOwnProperty(model65.mainType) && (coordSys && coordSys.model !== targetCoordSysModel);
}

// src/component/helper/MapDraw.ts
function getFixedItemStyle(model65) {
  const itemStyle5 = model65.getItemStyle();
  const areaColor = model65.get("areaColor");
  if (areaColor != null) {
    itemStyle5.fill = areaColor;
  }
  return itemStyle5;
}
class MapDraw3 {
  constructor(api) {
    const group = new Group_default();
    this.uid = getUID("ec_map_draw");
    this._controller = new RoamController_default(api.getZr());
    this._controllerHost = {
      target: group
    };
    this.group = group;
    group.add(this._regionsGroup = new Group_default());
    group.add(this._backgroundGroup = new Group_default());
  }
  draw(mapOrGeoModel, ecModel, api, fromView, payload) {
    const isGeo = mapOrGeoModel.mainType === "geo";
    let data = mapOrGeoModel.getData && mapOrGeoModel.getData();
    isGeo && ecModel.eachComponent({
      mainType: "series",
      subType: "map"
    }, function(mapSeries) {
      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {
        data = mapSeries.getData();
      }
    });
    const geo2 = mapOrGeoModel.coordinateSystem;
    this._updateBackground(geo2);
    const regionsGroup = this._regionsGroup;
    const group = this.group;
    const transformInfo = geo2.getTransformInfo();
    const isFirstDraw = !regionsGroup.childAt(0) || payload;
    let targetScaleX;
    let targetScaleY;
    if (isFirstDraw) {
      group.transform = transformInfo.roamTransform;
      group.decomposeTransform();
      group.dirty();
    } else {
      const target = new Transformable_default();
      target.transform = transformInfo.roamTransform;
      target.decomposeTransform();
      const props = {
        scaleX: target.scaleX,
        scaleY: target.scaleY,
        x: target.x,
        y: target.y
      };
      targetScaleX = target.scaleX;
      targetScaleY = target.scaleY;
      updateProps(group, props, mapOrGeoModel);
    }
    regionsGroup.removeAll();
    const nameMap = createHashMap();
    const isVisualEncodedByVisualMap = data && data.getVisual("visualMeta") && data.getVisual("visualMeta").length > 0;
    each(geo2.regions, function(region) {
      const regionGroup = nameMap.get(region.name) || nameMap.set(region.name, new Group_default());
      const compoundPath = new CompoundPath2({
        segmentIgnoreThreshold: 1,
        shape: {
          paths: []
        }
      });
      regionGroup.add(compoundPath);
      const regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;
      const itemStyleModel = regionModel.getModel("itemStyle");
      const emphasisModel = regionModel.getModel("emphasis");
      const emphasisItemStyleModel = emphasisModel.getModel("itemStyle");
      const blurItemStyleModel = regionModel.getModel(["blur", "itemStyle"]);
      const selectItemStyleModel = regionModel.getModel(["select", "itemStyle"]);
      const itemStyle5 = getFixedItemStyle(itemStyleModel);
      const emphasisItemStyle = getFixedItemStyle(emphasisItemStyleModel);
      const blurItemStyle = getFixedItemStyle(blurItemStyleModel);
      const selectItemStyle = getFixedItemStyle(selectItemStyleModel);
      let dataIdx;
      if (data) {
        dataIdx = data.indexOfName(region.name);
        const style2 = data.getItemVisual(dataIdx, "style");
        if (isVisualEncodedByVisualMap && style2.fill) {
          itemStyle5.fill = style2.fill;
        }
      }
      const sx = transformInfo.rawScaleX;
      const sy = transformInfo.rawScaleY;
      const offsetX = transformInfo.rawX;
      const offsetY = transformInfo.rawY;
      const transformPoint = function(point) {
        return [point[0] * sx + offsetX, point[1] * sy + offsetY];
      };
      each(region.geometries, function(geometry) {
        if (geometry.type !== "polygon") {
          return;
        }
        const points9 = [];
        for (let i = 0; i < geometry.exterior.length; ++i) {
          points9.push(transformPoint(geometry.exterior[i]));
        }
        compoundPath.shape.paths.push(new Polygon_default({
          segmentIgnoreThreshold: 1,
          shape: {
            points: points9
          }
        }));
        for (let i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {
          const interior = geometry.interiors[i];
          const points10 = [];
          for (let j = 0; j < interior.length; ++j) {
            points10.push(transformPoint(interior[j]));
          }
          compoundPath.shape.paths.push(new Polygon_default({
            segmentIgnoreThreshold: 1,
            shape: {
              points: points10
            }
          }));
        }
      });
      compoundPath.setStyle(itemStyle5);
      compoundPath.style.strokeNoScale = true;
      compoundPath.culling = true;
      compoundPath.ensureState("emphasis").style = emphasisItemStyle;
      compoundPath.ensureState("blur").style = blurItemStyle;
      compoundPath.ensureState("select").style = selectItemStyle;
      let showLabel = false;
      for (let i = 0; i < DISPLAY_STATES.length; i++) {
        const stateName = DISPLAY_STATES[i];
        if (regionModel.get(stateName === "normal" ? ["label", "show"] : [stateName, "label", "show"])) {
          showLabel = true;
          break;
        }
      }
      const isDataNaN = data && isNaN(data.get(data.mapDimension("value"), dataIdx));
      const itemLayout = data && data.getItemLayout(dataIdx);
      if (isGeo || isDataNaN && showLabel || itemLayout && itemLayout.showLabel) {
        const query = !isGeo ? dataIdx : region.name;
        let labelFetcher;
        if (!data || dataIdx >= 0) {
          labelFetcher = mapOrGeoModel;
        }
        const centerPt = transformPoint(region.center);
        const textEl = new Text_default({
          x: centerPt[0],
          y: centerPt[1],
          scaleX: 1 / group.scaleX,
          scaleY: 1 / group.scaleY,
          z2: 10,
          silent: true
        });
        setLabelStyle(textEl, getLabelStatesModels(regionModel), {
          labelFetcher,
          labelDataIndex: query,
          defaultText: region.name
        }, {
          normal: {
            align: "center",
            verticalAlign: "middle"
          }
        });
        compoundPath.setTextContent(textEl);
        compoundPath.setTextConfig({
          local: true
        });
        compoundPath.disableLabelAnimation = true;
        if (!isFirstDraw) {
          updateProps(textEl, {
            scaleX: 1 / targetScaleX,
            scaleY: 1 / targetScaleY
          }, mapOrGeoModel);
        }
      }
      if (data) {
        data.setItemGraphicEl(dataIdx, regionGroup);
      } else {
        const regionModel2 = mapOrGeoModel.getRegionModel(region.name);
        getECData(compoundPath).eventData = {
          componentType: "geo",
          componentIndex: mapOrGeoModel.componentIndex,
          geoIndex: mapOrGeoModel.componentIndex,
          name: region.name,
          region: regionModel2 && regionModel2.option || {}
        };
      }
      const groupRegions = regionGroup.__regions || (regionGroup.__regions = []);
      groupRegions.push(region);
      regionGroup.highDownSilentOnTouch = !!mapOrGeoModel.get("selectedMode");
      enableHoverEmphasis(regionGroup, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
      regionsGroup.add(regionGroup);
    });
    this._updateController(mapOrGeoModel, ecModel, api);
    this._updateMapSelectHandler(mapOrGeoModel, regionsGroup, api, fromView);
  }
  remove() {
    this._regionsGroup.removeAll();
    this._backgroundGroup.removeAll();
    this._controller.dispose();
    this._mapName && geoSourceManager_default.removeGraphic(this._mapName, this.uid);
    this._mapName = null;
    this._controllerHost = null;
  }
  _updateBackground(geo2) {
    const mapName = geo2.map;
    if (this._mapName !== mapName) {
      each(geoSourceManager_default.makeGraphic(mapName, this.uid), function(root) {
        this._backgroundGroup.add(root);
      }, this);
    }
    this._mapName = mapName;
  }
  _updateController(mapOrGeoModel, ecModel, api) {
    const geo2 = mapOrGeoModel.coordinateSystem;
    const controller = this._controller;
    const controllerHost = this._controllerHost;
    controllerHost.zoomLimit = mapOrGeoModel.get("scaleLimit");
    controllerHost.zoom = geo2.getZoom();
    controller.enable(mapOrGeoModel.get("roam") || false);
    const mainType = mapOrGeoModel.mainType;
    function makeActionBase() {
      const action = {
        type: "geoRoam",
        componentType: mainType
      };
      action[mainType + "Id"] = mapOrGeoModel.id;
      return action;
    }
    controller.off("pan").on("pan", function(e) {
      this._mouseDownFlag = false;
      updateViewOnPan(controllerHost, e.dx, e.dy);
      api.dispatchAction(extend(makeActionBase(), {
        dx: e.dx,
        dy: e.dy
      }));
    }, this);
    controller.off("zoom").on("zoom", function(e) {
      this._mouseDownFlag = false;
      updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);
      api.dispatchAction(extend(makeActionBase(), {
        zoom: e.scale,
        originX: e.originX,
        originY: e.originY
      }));
      const group = this.group;
      this._regionsGroup.traverse(function(el) {
        const textContent = el.getTextContent();
        if (textContent) {
          textContent.scaleX = 1 / group.scaleX;
          textContent.scaleY = 1 / group.scaleY;
          textContent.markRedraw();
        }
      });
    }, this);
    controller.setPointerChecker(function(e, x, y) {
      return geo2.getViewRectAfterRoam().contain(x, y) && !onIrrelevantElement(e, api, mapOrGeoModel);
    });
  }
  _updateMapSelectHandler(mapOrGeoModel, regionsGroup, api, fromView) {
    const mapDraw = this;
    regionsGroup.off("mousedown");
    if (mapOrGeoModel.get("selectedMode")) {
      regionsGroup.on("mousedown", function() {
        mapDraw._mouseDownFlag = true;
      });
      regionsGroup.on("click", function(e) {
        if (!mapDraw._mouseDownFlag) {
          return;
        }
        mapDraw._mouseDownFlag = false;
      });
    }
  }
}
const MapDraw_default = MapDraw3;

// src/chart/map/MapView.ts
class MapView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = MapView2.type;
  }
  render(mapModel, ecModel, api, payload) {
    if (payload && payload.type === "mapToggleSelect" && payload.from === this.uid) {
      return;
    }
    const group = this.group;
    group.removeAll();
    if (mapModel.getHostGeoModel()) {
      return;
    }
    if (!(payload && payload.type === "geoRoam" && payload.componentType === "series" && payload.seriesId === mapModel.id)) {
      if (mapModel.needsDrawMap) {
        const mapDraw = this._mapDraw || new MapDraw_default(api);
        group.add(mapDraw.group);
        mapDraw.draw(mapModel, ecModel, api, this, payload);
        this._mapDraw = mapDraw;
      } else {
        this._mapDraw && this._mapDraw.remove();
        this._mapDraw = null;
      }
    } else {
      const mapDraw = this._mapDraw;
      mapDraw && group.add(mapDraw.group);
    }
    mapModel.get("showLegendSymbol") && ecModel.getComponent("legend") && this._renderSymbols(mapModel, ecModel, api);
  }
  remove() {
    this._mapDraw && this._mapDraw.remove();
    this._mapDraw = null;
    this.group.removeAll();
  }
  dispose() {
    this._mapDraw && this._mapDraw.remove();
    this._mapDraw = null;
  }
  _renderSymbols(mapModel, ecModel, api) {
    const originalData = mapModel.originalData;
    const group = this.group;
    originalData.each(originalData.mapDimension("value"), function(value, originalDataIndex) {
      if (isNaN(value)) {
        return;
      }
      const layout33 = originalData.getItemLayout(originalDataIndex);
      if (!layout33 || !layout33.point) {
        return;
      }
      const point = layout33.point;
      const offset = layout33.offset;
      const circle = new Circle_default({
        style: {
          fill: mapModel.getData().getVisual("style").fill
        },
        shape: {
          cx: point[0] + offset * 9,
          cy: point[1],
          r: 3
        },
        silent: true,
        z2: 8 + (!offset ? Z2_EMPHASIS_LIFT + 1 : 0)
      });
      if (!offset) {
        const fullData = mapModel.mainSeries.getData();
        const name = originalData.getName(originalDataIndex);
        const fullIndex = fullData.indexOfName(name);
        const itemModel = originalData.getItemModel(originalDataIndex);
        const labelModel = itemModel.getModel("label");
        const regionGroup = fullData.getItemGraphicEl(fullIndex);
        setLabelStyle(circle, getLabelStatesModels(itemModel), {
          labelFetcher: {
            getFormattedLabel(idx, state) {
              return mapModel.getFormattedLabel(fullIndex, state);
            }
          }
        });
        circle.disableLabelAnimation = true;
        if (!labelModel.get("position")) {
          circle.setTextConfig({
            position: "bottom"
          });
        }
        regionGroup.onHoverStateChange = function(toState) {
          circle.useState(toState);
        };
      }
      group.add(circle);
    });
  }
}
MapView2.type = "map";
Chart_default.registerClass(MapView2);

// src/action/roamHelper.ts
function updateCenterAndZoom(view, payload, zoomLimit) {
  const previousZoom = view.getZoom();
  const center3 = view.getCenter();
  let zoom = payload.zoom;
  const point = view.dataToPoint(center3);
  if (payload.dx != null && payload.dy != null) {
    point[0] -= payload.dx;
    point[1] -= payload.dy;
    view.setCenter(view.pointToData(point));
  }
  if (zoom != null) {
    if (zoomLimit) {
      const zoomMin = zoomLimit.min || 0;
      const zoomMax = zoomLimit.max || Infinity;
      zoom = Math.max(Math.min(previousZoom * zoom, zoomMax), zoomMin) / previousZoom;
    }
    view.scaleX *= zoom;
    view.scaleY *= zoom;
    const fixX = (payload.originX - view.x) * (zoom - 1);
    const fixY = (payload.originY - view.y) * (zoom - 1);
    view.x -= fixX;
    view.y -= fixY;
    view.updateTransform();
    view.setCenter(view.pointToData(point));
    view.setZoom(zoom * previousZoom);
  }
  return {
    center: view.getCenter(),
    zoom: view.getZoom()
  };
}

// src/action/geoRoam.ts
registerAction({
  type: "geoRoam",
  event: "geoRoam",
  update: "updateTransform"
}, function(payload, ecModel) {
  const componentType = payload.componentType || "series";
  ecModel.eachComponent({
    mainType: componentType,
    query: payload
  }, function(componentModel) {
    const geo2 = componentModel.coordinateSystem;
    if (geo2.type !== "geo") {
      return;
    }
    const res = updateCenterAndZoom(geo2, payload, componentModel.get("scaleLimit"));
    componentModel.setCenter && componentModel.setCenter(res.center);
    componentModel.setZoom && componentModel.setZoom(res.zoom);
    if (componentType === "series") {
      each(componentModel.seriesGroup, function(seriesModel) {
        seriesModel.setCenter(res.center);
        seriesModel.setZoom(res.zoom);
      });
    }
  });
});

// src/coord/View.ts
const v2ApplyTransform = applyTransform;
class View14 extends Transformable_default {
  constructor(name) {
    super();
    this.type = "view";
    this.dimensions = ["x", "y"];
    this._roamTransformable = new Transformable_default();
    this._rawTransformable = new Transformable_default();
    this.name = name;
  }
  setBoundingRect(x, y, width, height) {
    this._rect = new BoundingRect_default(x, y, width, height);
    return this._rect;
  }
  getBoundingRect() {
    return this._rect;
  }
  setViewRect(x, y, width, height) {
    this.transformTo(x, y, width, height);
    this._viewRect = new BoundingRect_default(x, y, width, height);
  }
  transformTo(x, y, width, height) {
    const rect = this.getBoundingRect();
    const rawTransform = this._rawTransformable;
    rawTransform.transform = rect.calculateTransform(new BoundingRect_default(x, y, width, height));
    rawTransform.decomposeTransform();
    this._updateTransform();
  }
  setCenter(centerCoord) {
    if (!centerCoord) {
      return;
    }
    this._center = centerCoord;
    this._updateCenterAndZoom();
  }
  setZoom(zoom) {
    zoom = zoom || 1;
    const zoomLimit = this.zoomLimit;
    if (zoomLimit) {
      if (zoomLimit.max != null) {
        zoom = Math.min(zoomLimit.max, zoom);
      }
      if (zoomLimit.min != null) {
        zoom = Math.max(zoomLimit.min, zoom);
      }
    }
    this._zoom = zoom;
    this._updateCenterAndZoom();
  }
  getDefaultCenter() {
    const rawRect = this.getBoundingRect();
    const cx = rawRect.x + rawRect.width / 2;
    const cy = rawRect.y + rawRect.height / 2;
    return [cx, cy];
  }
  getCenter() {
    return this._center || this.getDefaultCenter();
  }
  getZoom() {
    return this._zoom || 1;
  }
  getRoamTransform() {
    return this._roamTransformable.getLocalTransform();
  }
  _updateCenterAndZoom() {
    const rawTransformMatrix = this._rawTransformable.getLocalTransform();
    const roamTransform = this._roamTransformable;
    let defaultCenter = this.getDefaultCenter();
    let center3 = this.getCenter();
    const zoom = this.getZoom();
    center3 = applyTransform([], center3, rawTransformMatrix);
    defaultCenter = applyTransform([], defaultCenter, rawTransformMatrix);
    roamTransform.originX = center3[0];
    roamTransform.originY = center3[1];
    roamTransform.x = defaultCenter[0] - center3[0];
    roamTransform.y = defaultCenter[1] - center3[1];
    roamTransform.scaleX = roamTransform.scaleY = zoom;
    this._updateTransform();
  }
  _updateTransform() {
    const roamTransformable = this._roamTransformable;
    const rawTransformable = this._rawTransformable;
    rawTransformable.parent = roamTransformable;
    roamTransformable.updateTransform();
    rawTransformable.updateTransform();
    copy(this.transform || (this.transform = []), rawTransformable.transform || create());
    this._rawTransform = rawTransformable.getLocalTransform();
    this.invTransform = this.invTransform || [];
    invert(this.invTransform, this.transform);
    this.decomposeTransform();
  }
  getTransformInfo() {
    const roamTransform = this._roamTransformable.transform;
    const rawTransformable = this._rawTransformable;
    return {
      roamTransform: roamTransform ? slice(roamTransform) : create(),
      rawScaleX: rawTransformable.scaleX,
      rawScaleY: rawTransformable.scaleY,
      rawX: rawTransformable.x,
      rawY: rawTransformable.y
    };
  }
  getViewRect() {
    return this._viewRect;
  }
  getViewRectAfterRoam() {
    const rect = this.getBoundingRect().clone();
    rect.applyTransform(this.transform);
    return rect;
  }
  dataToPoint(data, noRoam, out2) {
    const transform = noRoam ? this._rawTransform : this.transform;
    out2 = out2 || [];
    return transform ? v2ApplyTransform(out2, data, transform) : copy2(out2, data);
  }
  pointToData(point) {
    const invTransform = this.invTransform;
    return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];
  }
  convertToPixel(ecModel, finder, value) {
    const coordSys = getCoordSys(finder);
    return coordSys === this ? coordSys.dataToPoint(value) : null;
  }
  convertFromPixel(ecModel, finder, pixel) {
    const coordSys = getCoordSys(finder);
    return coordSys === this ? coordSys.pointToData(pixel) : null;
  }
  containPoint(point) {
    return this.getViewRectAfterRoam().contain(point[0], point[1]);
  }
}
View14.dimensions = ["x", "y"];
function getCoordSys(finder) {
  const seriesModel = finder.seriesModel;
  return seriesModel ? seriesModel.coordinateSystem : null;
}
const View_default = View14;

// src/coord/geo/Geo.ts
class Geo7 extends View_default {
  constructor(name, map3, nameMap, invertLongitute) {
    super(name);
    this.dimensions = ["lng", "lat"];
    this.type = "geo";
    this.map = map3;
    const source = geoSourceManager_default.load(map3, nameMap);
    this._nameCoordMap = source.nameCoordMap;
    this._regionsMap = source.regionsMap;
    this._invertLongitute = invertLongitute == null ? true : invertLongitute;
    this.regions = source.regions;
    this._rect = source.boundingRect;
  }
  containCoord(coord) {
    const regions = this.regions;
    for (let i = 0; i < regions.length; i++) {
      if (regions[i].contain(coord)) {
        return true;
      }
    }
    return false;
  }
  transformTo(x, y, width, height) {
    let rect = this.getBoundingRect();
    const invertLongitute = this._invertLongitute;
    rect = rect.clone();
    if (invertLongitute) {
      rect.y = -rect.y - rect.height;
    }
    const rawTransformable = this._rawTransformable;
    rawTransformable.transform = rect.calculateTransform(new BoundingRect_default(x, y, width, height));
    rawTransformable.decomposeTransform();
    if (invertLongitute) {
      rawTransformable.scaleY = -rawTransformable.scaleY;
    }
    rawTransformable.updateTransform();
    this._updateTransform();
  }
  getRegion(name) {
    return this._regionsMap.get(name);
  }
  getRegionByCoord(coord) {
    const regions = this.regions;
    for (let i = 0; i < regions.length; i++) {
      if (regions[i].contain(coord)) {
        return regions[i];
      }
    }
  }
  addGeoCoord(name, geoCoord3) {
    this._nameCoordMap.set(name, geoCoord3);
  }
  getGeoCoord(name) {
    return this._nameCoordMap.get(name);
  }
  getBoundingRect() {
    return this._rect;
  }
  dataToPoint(data, noRoam, out2) {
    if (typeof data === "string") {
      data = this.getGeoCoord(data);
    }
    if (data) {
      return View_default.prototype.dataToPoint.call(this, data, noRoam, out2);
    }
  }
  convertToPixel(ecModel, finder, value) {
    const coordSys = getCoordSys3(finder);
    return coordSys === this ? coordSys.dataToPoint(value) : null;
  }
  convertFromPixel(ecModel, finder, pixel) {
    const coordSys = getCoordSys3(finder);
    return coordSys === this ? coordSys.pointToData(pixel) : null;
  }
}
mixin(Geo7, View_default);
function getCoordSys3(finder) {
  const geoModel = finder.geoModel;
  const seriesModel = finder.seriesModel;
  return geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem || (seriesModel.getReferringComponents("geo", SINGLE_REFERRING).models[0] || {}).coordinateSystem : null;
}
const Geo_default = Geo7;

// src/coord/geo/geoCreator.ts
function resizeGeo(geoModel, api) {
  const boundingCoords = geoModel.get("boundingCoords");
  if (boundingCoords != null) {
    const leftTop = boundingCoords[0];
    const rightBottom = boundingCoords[1];
    if (isNaN(leftTop[0]) || isNaN(leftTop[1]) || isNaN(rightBottom[0]) || isNaN(rightBottom[1])) {
      if (__DEV__) {
        console.error("Invalid boundingCoords");
      }
    } else {
      this.setBoundingRect(leftTop[0], leftTop[1], rightBottom[0] - leftTop[0], rightBottom[1] - leftTop[1]);
    }
  }
  const rect = this.getBoundingRect();
  let center3 = geoModel.get("layoutCenter");
  let size = geoModel.get("layoutSize");
  const viewWidth = api.getWidth();
  const viewHeight = api.getHeight();
  const aspect = rect.width / rect.height * this.aspectScale;
  let useCenterAndSize = false;
  if (center3 && size) {
    center3 = [parsePercent3(center3[0], viewWidth), parsePercent3(center3[1], viewHeight)];
    size = parsePercent3(size, Math.min(viewWidth, viewHeight));
    if (!isNaN(center3[0]) && !isNaN(center3[1]) && !isNaN(size)) {
      useCenterAndSize = true;
    } else {
      if (__DEV__) {
        console.warn("Given layoutCenter or layoutSize data are invalid. Use left/top/width/height instead.");
      }
    }
  }
  let viewRect2;
  if (useCenterAndSize) {
    viewRect2 = {};
    if (aspect > 1) {
      viewRect2.width = size;
      viewRect2.height = size / aspect;
    } else {
      viewRect2.height = size;
      viewRect2.width = size * aspect;
    }
    viewRect2.y = center3[1] - viewRect2.height / 2;
    viewRect2.x = center3[0] - viewRect2.width / 2;
  } else {
    const boxLayoutOption = geoModel.getBoxLayoutParams();
    boxLayoutOption.aspect = aspect;
    viewRect2 = getLayoutRect(boxLayoutOption, {
      width: viewWidth,
      height: viewHeight
    });
  }
  this.setViewRect(viewRect2.x, viewRect2.y, viewRect2.width, viewRect2.height);
  this.setCenter(geoModel.get("center"));
  this.setZoom(geoModel.get("zoom"));
}
function setGeoCoords(geo2, model65) {
  each(model65.get("geoCoord"), function(geoCoord3, name) {
    geo2.addGeoCoord(name, geoCoord3);
  });
}
class GeoCreator {
  constructor() {
    this.dimensions = Geo_default.prototype.dimensions;
  }
  create(ecModel, api) {
    const geoList = [];
    ecModel.eachComponent("geo", function(geoModel, idx) {
      const name = geoModel.get("map");
      let aspectScale = geoModel.get("aspectScale");
      let invertLongitute = true;
      const mapRecords = mapDataStorage_default.retrieveMap(name);
      if (mapRecords && mapRecords[0] && mapRecords[0].type === "svg") {
        aspectScale == null && (aspectScale = 1);
        invertLongitute = false;
      } else {
        aspectScale == null && (aspectScale = 0.75);
      }
      const geo2 = new Geo_default(name + idx, name, geoModel.get("nameMap"), invertLongitute);
      geo2.aspectScale = aspectScale;
      geo2.zoomLimit = geoModel.get("scaleLimit");
      geoList.push(geo2);
      geoModel.coordinateSystem = geo2;
      geo2.model = geoModel;
      geo2.resize = resizeGeo;
      geo2.resize(geoModel, api);
    });
    ecModel.eachSeries(function(seriesModel) {
      const coordSys = seriesModel.get("coordinateSystem");
      if (coordSys === "geo") {
        const geoIndex = seriesModel.get("geoIndex") || 0;
        seriesModel.coordinateSystem = geoList[geoIndex];
      }
    });
    const mapModelGroupBySeries = {};
    ecModel.eachSeriesByType("map", function(seriesModel) {
      if (!seriesModel.getHostGeoModel()) {
        const mapType = seriesModel.getMapType();
        mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];
        mapModelGroupBySeries[mapType].push(seriesModel);
      }
    });
    each(mapModelGroupBySeries, function(mapSeries, mapType) {
      const nameMapList = map2(mapSeries, function(singleMapSeries) {
        return singleMapSeries.get("nameMap");
      });
      const geo2 = new Geo_default(mapType, mapType, mergeAll(nameMapList));
      geo2.zoomLimit = retrieve.apply(null, map2(mapSeries, function(singleMapSeries) {
        return singleMapSeries.get("scaleLimit");
      }));
      geoList.push(geo2);
      geo2.resize = resizeGeo;
      geo2.aspectScale = mapSeries[0].get("aspectScale");
      geo2.resize(mapSeries[0], api);
      each(mapSeries, function(singleMapSeries) {
        singleMapSeries.coordinateSystem = geo2;
        setGeoCoords(geo2, singleMapSeries);
      });
    });
    return geoList;
  }
  getFilledRegions(originRegionArr, mapName, nameMap) {
    const regionsArr = (originRegionArr || []).slice();
    const dataNameMap = createHashMap();
    for (let i = 0; i < regionsArr.length; i++) {
      dataNameMap.set(regionsArr[i].name, regionsArr[i]);
    }
    const source = geoSourceManager_default.load(mapName, nameMap);
    each(source.regions, function(region) {
      const name = region.name;
      !dataNameMap.get(name) && regionsArr.push({
        name
      });
    });
    return regionsArr;
  }
}
const geoCreator5 = new GeoCreator();
registerCoordinateSystem("geo", geoCreator5);
const geoCreator_default = geoCreator5;

// src/chart/map/mapSymbolLayout.ts
function mapSymbolLayout_default(ecModel) {
  const processedMapType = {};
  ecModel.eachSeriesByType("map", function(mapSeries) {
    const mapType = mapSeries.getMapType();
    if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {
      return;
    }
    const mapSymbolOffsets = {};
    each(mapSeries.seriesGroup, function(subMapSeries) {
      const geo2 = subMapSeries.coordinateSystem;
      const data2 = subMapSeries.originalData;
      if (subMapSeries.get("showLegendSymbol") && ecModel.getComponent("legend")) {
        data2.each(data2.mapDimension("value"), function(value, idx) {
          const name = data2.getName(idx);
          const region = geo2.getRegion(name);
          if (!region || isNaN(value)) {
            return;
          }
          const offset = mapSymbolOffsets[name] || 0;
          const point = geo2.dataToPoint(region.center);
          mapSymbolOffsets[name] = offset + 1;
          data2.setItemLayout(idx, {
            point,
            offset
          });
        });
      }
    });
    const data = mapSeries.getData();
    data.each(function(idx) {
      const name = data.getName(idx);
      const layout33 = data.getItemLayout(idx) || {};
      layout33.showLabel = !mapSymbolOffsets[name];
      data.setItemLayout(idx, layout33);
    });
    processedMapType[mapType] = true;
  });
}

// src/chart/map/mapDataStatistic.ts
function dataStatistics(datas, statisticType) {
  const dataNameMap = {};
  each(datas, function(data) {
    data.each(data.mapDimension("value"), function(value, idx) {
      const mapKey = "ec-" + data.getName(idx);
      dataNameMap[mapKey] = dataNameMap[mapKey] || [];
      if (!isNaN(value)) {
        dataNameMap[mapKey].push(value);
      }
    });
  });
  return datas[0].map(datas[0].mapDimension("value"), function(value, idx) {
    const mapKey = "ec-" + datas[0].getName(idx);
    let sum2 = 0;
    let min4 = Infinity;
    let max4 = -Infinity;
    const len2 = dataNameMap[mapKey].length;
    for (let i = 0; i < len2; i++) {
      min4 = Math.min(min4, dataNameMap[mapKey][i]);
      max4 = Math.max(max4, dataNameMap[mapKey][i]);
      sum2 += dataNameMap[mapKey][i];
    }
    let result;
    if (statisticType === "min") {
      result = min4;
    } else if (statisticType === "max") {
      result = max4;
    } else if (statisticType === "average") {
      result = sum2 / len2;
    } else {
      result = sum2;
    }
    return len2 === 0 ? NaN : result;
  });
}
function mapDataStatistic_default(ecModel) {
  const seriesGroups = {};
  ecModel.eachSeriesByType("map", function(seriesModel) {
    const hostGeoModel = seriesModel.getHostGeoModel();
    const key = hostGeoModel ? "o" + hostGeoModel.id : "i" + seriesModel.getMapType();
    (seriesGroups[key] = seriesGroups[key] || []).push(seriesModel);
  });
  each(seriesGroups, function(seriesList, key) {
    const data = dataStatistics(map2(seriesList, function(seriesModel) {
      return seriesModel.getData();
    }), seriesList[0].get("mapValueCalculation"));
    for (let i = 0; i < seriesList.length; i++) {
      seriesList[i].originalData = seriesList[i].getData();
    }
    for (let i = 0; i < seriesList.length; i++) {
      seriesList[i].seriesGroup = seriesList;
      seriesList[i].needsDrawMap = i === 0 && !seriesList[i].getHostGeoModel();
      seriesList[i].setData(data.cloneShallow());
      seriesList[i].mainSeries = seriesList[0];
    }
  });
}

// src/chart/map.ts
registerLayout(mapSymbolLayout_default);
registerProcessor(PRIORITY.PROCESSOR.STATISTIC, mapDataStatistic_default);
createLegacyDataSelectAction("map", registerAction);

// src/data/helper/linkList.ts
const each15 = each;
const DATAS = "\0__link_datas";
const MAIN_DATA = "\0__link_mainData";
function linkList3(opt) {
  const mainData = opt.mainData;
  let datas = opt.datas;
  if (!datas) {
    datas = {
      main: mainData
    };
    opt.datasAttr = {
      main: "data"
    };
  }
  opt.datas = opt.mainData = null;
  linkAll(mainData, datas, opt);
  each15(datas, function(data) {
    each15(mainData.TRANSFERABLE_METHODS, function(methodName) {
      data.wrapMethod(methodName, curry(transferInjection, opt));
    });
  });
  mainData.wrapMethod("cloneShallow", curry(cloneShallowInjection, opt));
  each15(mainData.CHANGABLE_METHODS, function(methodName) {
    mainData.wrapMethod(methodName, curry(changeInjection, opt));
  });
  assert(datas[mainData.dataType] === mainData);
}
function transferInjection(opt, res) {
  if (isMainData(this)) {
    const datas = extend({}, this[DATAS]);
    datas[this.dataType] = res;
    linkAll(res, datas, opt);
  } else {
    linkSingle(res, this.dataType, this[MAIN_DATA], opt);
  }
  return res;
}
function changeInjection(opt, res) {
  opt.struct && opt.struct.update(this);
  return res;
}
function cloneShallowInjection(opt, res) {
  each15(res[DATAS], function(data, dataType) {
    data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
  });
  return res;
}
function getLinkedData(dataType) {
  const mainData = this[MAIN_DATA];
  return dataType == null || mainData == null ? mainData : mainData[DATAS][dataType];
}
function getLinkedDataAll() {
  const mainData = this[MAIN_DATA];
  return mainData == null ? [{
    data: mainData
  }] : map2(keys(mainData[DATAS]), function(type) {
    return {
      type,
      data: mainData[DATAS][type]
    };
  });
}
function isMainData(data) {
  return data[MAIN_DATA] === data;
}
function linkAll(mainData, datas, opt) {
  mainData[DATAS] = {};
  each15(datas, function(data, dataType) {
    linkSingle(data, dataType, mainData, opt);
  });
}
function linkSingle(data, dataType, mainData, opt) {
  mainData[DATAS][dataType] = data;
  data[MAIN_DATA] = mainData;
  data.dataType = dataType;
  if (opt.struct) {
    data[opt.structAttr] = opt.struct;
    opt.struct[opt.datasAttr[dataType]] = data;
  }
  data.getLinkedData = getLinkedData;
  data.getLinkedDataAll = getLinkedDataAll;
}
const linkList_default = linkList3;

// src/data/Tree.ts
class TreeNode15 {
  constructor(name, hostTree) {
    this.depth = 0;
    this.height = 0;
    this.dataIndex = -1;
    this.children = [];
    this.viewChildren = [];
    this.isExpand = false;
    this.name = name || "";
    this.hostTree = hostTree;
  }
  isRemoved() {
    return this.dataIndex < 0;
  }
  eachNode(options, cb, context) {
    if (typeof options === "function") {
      context = cb;
      cb = options;
      options = null;
    }
    options = options || {};
    if (isString(options)) {
      options = {
        order: options
      };
    }
    const order = options.order || "preorder";
    const children = this[options.attr || "children"];
    let suppressVisitSub;
    order === "preorder" && (suppressVisitSub = cb.call(context, this));
    for (let i = 0; !suppressVisitSub && i < children.length; i++) {
      children[i].eachNode(options, cb, context);
    }
    order === "postorder" && cb.call(context, this);
  }
  updateDepthAndHeight(depth) {
    let height = 0;
    this.depth = depth;
    for (let i = 0; i < this.children.length; i++) {
      const child = this.children[i];
      child.updateDepthAndHeight(depth + 1);
      if (child.height > height) {
        height = child.height;
      }
    }
    this.height = height + 1;
  }
  getNodeById(id) {
    if (this.getId() === id) {
      return this;
    }
    for (let i = 0, children = this.children, len2 = children.length; i < len2; i++) {
      const res = children[i].getNodeById(id);
      if (res) {
        return res;
      }
    }
  }
  contains(node) {
    if (node === this) {
      return true;
    }
    for (let i = 0, children = this.children, len2 = children.length; i < len2; i++) {
      const res = children[i].contains(node);
      if (res) {
        return res;
      }
    }
  }
  getAncestors(includeSelf) {
    const ancestors = [];
    let node = includeSelf ? this : this.parentNode;
    while (node) {
      ancestors.push(node);
      node = node.parentNode;
    }
    ancestors.reverse();
    return ancestors;
  }
  getAncestorsIndices() {
    const indices = [];
    let currNode = this;
    while (currNode) {
      indices.push(currNode.dataIndex);
      currNode = currNode.parentNode;
    }
    indices.reverse();
    return indices;
  }
  getDescendantIndices() {
    const indices = [];
    this.eachNode((childNode) => {
      indices.push(childNode.dataIndex);
    });
    return indices;
  }
  getValue(dimension) {
    const data = this.hostTree.data;
    return data.get(data.getDimension(dimension || "value"), this.dataIndex);
  }
  setLayout(layout33, merge2) {
    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout33, merge2);
  }
  getLayout() {
    return this.hostTree.data.getItemLayout(this.dataIndex);
  }
  getModel(path2) {
    if (this.dataIndex < 0) {
      return;
    }
    const hostTree = this.hostTree;
    const itemModel = hostTree.data.getItemModel(this.dataIndex);
    const levelModel = this.getLevelModel();
    if (levelModel) {
      return itemModel.getModel(path2, levelModel.getModel(path2));
    } else {
      return itemModel.getModel(path2);
    }
  }
  getLevelModel() {
    return (this.hostTree.levelModels || [])[this.depth];
  }
  setVisual(key, value) {
    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
  }
  getVisual(key) {
    return this.hostTree.data.getItemVisual(this.dataIndex, key);
  }
  getRawIndex() {
    return this.hostTree.data.getRawIndex(this.dataIndex);
  }
  getId() {
    return this.hostTree.data.getId(this.dataIndex);
  }
  isAncestorOf(node) {
    let parent = node.parentNode;
    while (parent) {
      if (parent === this) {
        return true;
      }
      parent = parent.parentNode;
    }
    return false;
  }
  isDescendantOf(node) {
    return node !== this && node.isAncestorOf(this);
  }
}
class Tree17 {
  constructor(hostModel, levelOptions) {
    this.type = "tree";
    this._nodes = [];
    this.hostModel = hostModel;
    this.levelModels = map2(levelOptions || [], function(levelDefine) {
      return new Model_default(levelDefine, hostModel, hostModel.ecModel);
    });
  }
  eachNode(options, cb, context) {
    this.root.eachNode(options, cb, context);
  }
  getNodeByDataIndex(dataIndex) {
    const rawIndex = this.data.getRawIndex(dataIndex);
    return this._nodes[rawIndex];
  }
  getNodeById(name) {
    return this.root.getNodeById(name);
  }
  update() {
    const data = this.data;
    const nodes = this._nodes;
    for (let i = 0, len2 = nodes.length; i < len2; i++) {
      nodes[i].dataIndex = -1;
    }
    for (let i = 0, len2 = data.count(); i < len2; i++) {
      nodes[data.getRawIndex(i)].dataIndex = i;
    }
  }
  clearLayouts() {
    this.data.clearItemLayouts();
  }
  static createTree(dataRoot, hostModel, treeOptions, beforeLink) {
    const tree2 = new Tree17(hostModel, treeOptions && treeOptions.levels);
    const listData = [];
    let dimMax = 1;
    buildHierarchy(dataRoot);
    function buildHierarchy(dataNode, parentNode) {
      const value = dataNode.value;
      dimMax = Math.max(dimMax, isArray(value) ? value.length : 1);
      listData.push(dataNode);
      const node = new TreeNode15(dataNode.name, tree2);
      parentNode ? addChild(node, parentNode) : tree2.root = node;
      tree2._nodes.push(node);
      const children = dataNode.children;
      if (children) {
        for (let i = 0; i < children.length; i++) {
          buildHierarchy(children[i], node);
        }
      }
    }
    tree2.root.updateDepthAndHeight(0);
    const dimensionsInfo = createDimensions_default(listData, {
      coordDimensions: ["value"],
      dimensionsCount: dimMax
    });
    const list = new List_default(dimensionsInfo, hostModel);
    list.initData(listData);
    beforeLink && beforeLink(list);
    linkList_default({
      mainData: list,
      struct: tree2,
      structAttr: "tree"
    });
    tree2.update();
    return tree2;
  }
}
function addChild(child, node) {
  const children = node.children;
  if (child.parentNode === node) {
    return;
  }
  children.push(child);
  child.parentNode = node;
}
const Tree_default = Tree17;

// src/chart/tree/TreeSeries.ts
class TreeSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.hasSymbolVisual = true;
    this.ignoreStyleOnData = true;
  }
  getInitialData(option) {
    const root = {
      name: option.name,
      children: option.data
    };
    const leaves = option.leaves || {};
    const leavesModel = new Model_default(leaves, this, this.ecModel);
    const tree2 = Tree_default.createTree(root, this, {}, beforeLink);
    function beforeLink(nodeData) {
      nodeData.wrapMethod("getItemModel", function(model65, idx) {
        const node = tree2.getNodeByDataIndex(idx);
        if (!node.children.length || !node.isExpand) {
          model65.parentModel = leavesModel;
        }
        return model65;
      });
    }
    let treeDepth = 0;
    tree2.eachNode("preorder", function(node) {
      if (node.depth > treeDepth) {
        treeDepth = node.depth;
      }
    });
    const expandAndCollapse = option.expandAndCollapse;
    const expandTreeDepth = expandAndCollapse && option.initialTreeDepth >= 0 ? option.initialTreeDepth : treeDepth;
    tree2.root.eachNode("preorder", function(node) {
      const item = node.hostTree.data.getRawDataItem(node.dataIndex);
      node.isExpand = item && item.collapsed != null ? !item.collapsed : node.depth <= expandTreeDepth;
    });
    return tree2.data;
  }
  getOrient() {
    let orient = this.get("orient");
    if (orient === "horizontal") {
      orient = "LR";
    } else if (orient === "vertical") {
      orient = "TB";
    }
    return orient;
  }
  setZoom(zoom) {
    this.option.zoom = zoom;
  }
  setCenter(center3) {
    this.option.center = center3;
  }
  formatTooltip(dataIndex) {
    const tree2 = this.getData().tree;
    const realRoot = tree2.root.children[0];
    let node = tree2.getNodeByDataIndex(dataIndex);
    const value = node.getValue();
    let name = node.name;
    while (node && node !== realRoot) {
      name = node.parentNode.name + "." + name;
      node = node.parentNode;
    }
    return encodeHTML(name + (isNaN(value) || value == null ? "" : " : " + value));
  }
}
TreeSeriesModel.type = "series.tree";
TreeSeriesModel.layoutMode = "box";
TreeSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "view",
  left: "12%",
  top: "12%",
  right: "12%",
  bottom: "12%",
  layout: "orthogonal",
  edgeShape: "curve",
  edgeForkPosition: "50%",
  roam: false,
  nodeScaleRatio: 0.4,
  center: null,
  zoom: 1,
  orient: "LR",
  symbol: "emptyCircle",
  symbolSize: 7,
  expandAndCollapse: true,
  initialTreeDepth: 2,
  lineStyle: {
    color: "#ccc",
    width: 1.5,
    curveness: 0.5
  },
  itemStyle: {
    color: "lightsteelblue",
    borderColor: "#c23531",
    borderWidth: 1.5
  },
  label: {
    show: true
  },
  animationEasing: "linear",
  animationDuration: 700,
  animationDurationUpdate: 500
};
Series_default.registerClass(TreeSeriesModel);

// src/chart/tree/layoutHelper.ts
function init2(inRoot) {
  const root = inRoot;
  root.hierNode = {
    defaultAncestor: null,
    ancestor: root,
    prelim: 0,
    modifier: 0,
    change: 0,
    shift: 0,
    i: 0,
    thread: null
  };
  const nodes = [root];
  let node;
  let children;
  while (node = nodes.pop()) {
    children = node.children;
    if (node.isExpand && children.length) {
      const n = children.length;
      for (let i = n - 1; i >= 0; i--) {
        const child = children[i];
        child.hierNode = {
          defaultAncestor: null,
          ancestor: child,
          prelim: 0,
          modifier: 0,
          change: 0,
          shift: 0,
          i,
          thread: null
        };
        nodes.push(child);
      }
    }
  }
}
function firstWalk(node, separation2) {
  const children = node.isExpand ? node.children : [];
  const siblings = node.parentNode.children;
  const subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;
  if (children.length) {
    executeShifts(node);
    const midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;
    if (subtreeW) {
      node.hierNode.prelim = subtreeW.hierNode.prelim + separation2(node, subtreeW);
      node.hierNode.modifier = node.hierNode.prelim - midPoint;
    } else {
      node.hierNode.prelim = midPoint;
    }
  } else if (subtreeW) {
    node.hierNode.prelim = subtreeW.hierNode.prelim + separation2(node, subtreeW);
  }
  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation2);
}
function secondWalk(node) {
  const nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;
  node.setLayout({
    x: nodeX
  }, true);
  node.hierNode.modifier += node.parentNode.hierNode.modifier;
}
function separation(cb) {
  return arguments.length ? cb : defaultSeparation;
}
function radialCoordinate(rad, r) {
  rad -= Math.PI / 2;
  return {
    x: r * Math.cos(rad),
    y: r * Math.sin(rad)
  };
}
function getViewRect5(seriesModel, api) {
  return getLayoutRect(seriesModel.getBoxLayoutParams(), {
    width: api.getWidth(),
    height: api.getHeight()
  });
}
function executeShifts(node) {
  const children = node.children;
  let n = children.length;
  let shift = 0;
  let change = 0;
  while (--n >= 0) {
    const child = children[n];
    child.hierNode.prelim += shift;
    child.hierNode.modifier += shift;
    change += child.hierNode.change;
    shift += child.hierNode.shift + change;
  }
}
function apportion(subtreeV, subtreeW, ancestor, separation2) {
  if (subtreeW) {
    let nodeOutRight = subtreeV;
    let nodeInRight = subtreeV;
    let nodeOutLeft = nodeInRight.parentNode.children[0];
    let nodeInLeft = subtreeW;
    let sumOutRight = nodeOutRight.hierNode.modifier;
    let sumInRight = nodeInRight.hierNode.modifier;
    let sumOutLeft = nodeOutLeft.hierNode.modifier;
    let sumInLeft = nodeInLeft.hierNode.modifier;
    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {
      nodeOutRight = nextRight(nodeOutRight);
      nodeOutLeft = nextLeft(nodeOutLeft);
      nodeOutRight.hierNode.ancestor = subtreeV;
      const shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation2(nodeInLeft, nodeInRight);
      if (shift > 0) {
        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);
        sumInRight += shift;
        sumOutRight += shift;
      }
      sumInLeft += nodeInLeft.hierNode.modifier;
      sumInRight += nodeInRight.hierNode.modifier;
      sumOutRight += nodeOutRight.hierNode.modifier;
      sumOutLeft += nodeOutLeft.hierNode.modifier;
    }
    if (nodeInLeft && !nextRight(nodeOutRight)) {
      nodeOutRight.hierNode.thread = nodeInLeft;
      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;
    }
    if (nodeInRight && !nextLeft(nodeOutLeft)) {
      nodeOutLeft.hierNode.thread = nodeInRight;
      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;
      ancestor = subtreeV;
    }
  }
  return ancestor;
}
function nextRight(node) {
  const children = node.children;
  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;
}
function nextLeft(node) {
  const children = node.children;
  return children.length && node.isExpand ? children[0] : node.hierNode.thread;
}
function nextAncestor(nodeInLeft, node, ancestor) {
  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;
}
function moveSubtree(wl, wr, shift) {
  const change = shift / (wr.hierNode.i - wl.hierNode.i);
  wr.hierNode.change -= change;
  wr.hierNode.shift += shift;
  wr.hierNode.modifier += shift;
  wr.hierNode.prelim += shift;
  wl.hierNode.change += change;
}
function defaultSeparation(node1, node2) {
  return node1.parentNode === node2.parentNode ? 1 : 2;
}

// src/chart/tree/TreeView.ts
class TreeEdgeShape {
  constructor() {
    this.parentPoint = [];
    this.childPoints = [];
  }
}
class TreePath extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new TreeEdgeShape();
  }
  buildPath(ctx, shape) {
    const childPoints = shape.childPoints;
    const childLen = childPoints.length;
    const parentPoint = shape.parentPoint;
    const firstChildPos = childPoints[0];
    const lastChildPos = childPoints[childLen - 1];
    if (childLen === 1) {
      ctx.moveTo(parentPoint[0], parentPoint[1]);
      ctx.lineTo(firstChildPos[0], firstChildPos[1]);
      return;
    }
    const orient = shape.orient;
    const forkDim = orient === "TB" || orient === "BT" ? 0 : 1;
    const otherDim = 1 - forkDim;
    const forkPosition = parsePercent3(shape.forkPosition, 1);
    const tmpPoint = [];
    tmpPoint[forkDim] = parentPoint[forkDim];
    tmpPoint[otherDim] = parentPoint[otherDim] + (lastChildPos[otherDim] - parentPoint[otherDim]) * forkPosition;
    ctx.moveTo(parentPoint[0], parentPoint[1]);
    ctx.lineTo(tmpPoint[0], tmpPoint[1]);
    ctx.moveTo(firstChildPos[0], firstChildPos[1]);
    tmpPoint[forkDim] = firstChildPos[forkDim];
    ctx.lineTo(tmpPoint[0], tmpPoint[1]);
    tmpPoint[forkDim] = lastChildPos[forkDim];
    ctx.lineTo(tmpPoint[0], tmpPoint[1]);
    ctx.lineTo(lastChildPos[0], lastChildPos[1]);
    for (let i = 1; i < childLen - 1; i++) {
      const point = childPoints[i];
      ctx.moveTo(point[0], point[1]);
      tmpPoint[forkDim] = point[forkDim];
      ctx.lineTo(tmpPoint[0], tmpPoint[1]);
    }
  }
}
class TreeView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = TreeView2.type;
    this._mainGroup = new Group_default();
  }
  init(ecModel, api) {
    this._controller = new RoamController_default(api.getZr());
    this._controllerHost = {
      target: this.group
    };
    this.group.add(this._mainGroup);
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const layoutInfo = seriesModel.layoutInfo;
    const group = this._mainGroup;
    const layout33 = seriesModel.get("layout");
    if (layout33 === "radial") {
      group.x = layoutInfo.x + layoutInfo.width / 2;
      group.y = layoutInfo.y + layoutInfo.height / 2;
    } else {
      group.x = layoutInfo.x;
      group.y = layoutInfo.y;
    }
    this._updateViewCoordSys(seriesModel);
    this._updateController(seriesModel, ecModel, api);
    const oldData = this._data;
    data.diff(oldData).add(function(newIdx) {
      if (symbolNeedsDraw2(data, newIdx)) {
        updateNode(data, newIdx, null, group, seriesModel);
      }
    }).update(function(newIdx, oldIdx) {
      const symbolEl = oldData.getItemGraphicEl(oldIdx);
      if (!symbolNeedsDraw2(data, newIdx)) {
        symbolEl && removeNode(oldData, oldIdx, symbolEl, group, seriesModel);
        return;
      }
      updateNode(data, newIdx, symbolEl, group, seriesModel);
    }).remove(function(oldIdx) {
      const symbolEl = oldData.getItemGraphicEl(oldIdx);
      if (symbolEl) {
        removeNode(oldData, oldIdx, symbolEl, group, seriesModel);
      }
    }).execute();
    this._nodeScaleRatio = seriesModel.get("nodeScaleRatio");
    this._updateNodeAndLinkScale(seriesModel);
    if (seriesModel.get("expandAndCollapse") === true) {
      data.eachItemGraphicEl(function(el, dataIndex) {
        el.off("click").on("click", function() {
          api.dispatchAction({
            type: "treeExpandAndCollapse",
            seriesId: seriesModel.id,
            dataIndex
          });
        });
      });
    }
    this._data = data;
  }
  _updateViewCoordSys(seriesModel) {
    const data = seriesModel.getData();
    const points9 = [];
    data.each(function(idx) {
      const layout33 = data.getItemLayout(idx);
      if (layout33 && !isNaN(layout33.x) && !isNaN(layout33.y)) {
        points9.push([+layout33.x, +layout33.y]);
      }
    });
    const min4 = [];
    const max4 = [];
    fromPoints(points9, min4, max4);
    const oldMin = this._min;
    const oldMax = this._max;
    if (max4[0] - min4[0] === 0) {
      min4[0] = oldMin ? oldMin[0] : min4[0] - 1;
      max4[0] = oldMax ? oldMax[0] : max4[0] + 1;
    }
    if (max4[1] - min4[1] === 0) {
      min4[1] = oldMin ? oldMin[1] : min4[1] - 1;
      max4[1] = oldMax ? oldMax[1] : max4[1] + 1;
    }
    const viewCoordSys = seriesModel.coordinateSystem = new View_default();
    viewCoordSys.zoomLimit = seriesModel.get("scaleLimit");
    viewCoordSys.setBoundingRect(min4[0], min4[1], max4[0] - min4[0], max4[1] - min4[1]);
    viewCoordSys.setCenter(seriesModel.get("center"));
    viewCoordSys.setZoom(seriesModel.get("zoom"));
    this.group.attr({
      x: viewCoordSys.x,
      y: viewCoordSys.y,
      scaleX: viewCoordSys.scaleX,
      scaleY: viewCoordSys.scaleY
    });
    this._min = min4;
    this._max = max4;
  }
  _updateController(seriesModel, ecModel, api) {
    const controller = this._controller;
    const controllerHost = this._controllerHost;
    const group = this.group;
    controller.setPointerChecker(function(e, x, y) {
      const rect = group.getBoundingRect();
      rect.applyTransform(group.transform);
      return rect.contain(x, y) && !onIrrelevantElement(e, api, seriesModel);
    });
    controller.enable(seriesModel.get("roam"));
    controllerHost.zoomLimit = seriesModel.get("scaleLimit");
    controllerHost.zoom = seriesModel.coordinateSystem.getZoom();
    controller.off("pan").off("zoom").on("pan", (e) => {
      updateViewOnPan(controllerHost, e.dx, e.dy);
      api.dispatchAction({
        seriesId: seriesModel.id,
        type: "treeRoam",
        dx: e.dx,
        dy: e.dy
      });
    }).on("zoom", (e) => {
      updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);
      api.dispatchAction({
        seriesId: seriesModel.id,
        type: "treeRoam",
        zoom: e.scale,
        originX: e.originX,
        originY: e.originY
      });
      this._updateNodeAndLinkScale(seriesModel);
      api.updateLabelLayout();
    });
  }
  _updateNodeAndLinkScale(seriesModel) {
    const data = seriesModel.getData();
    const nodeScale = this._getNodeGlobalScale(seriesModel);
    data.eachItemGraphicEl(function(el, idx) {
      el.setSymbolScale(nodeScale);
    });
  }
  _getNodeGlobalScale(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    if (coordSys.type !== "view") {
      return 1;
    }
    const nodeScaleRatio = this._nodeScaleRatio;
    const groupZoom = coordSys.scaleX || 1;
    const roamZoom = coordSys.getZoom();
    const nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;
    return nodeScale / groupZoom;
  }
  dispose() {
    this._controller && this._controller.dispose();
    this._controllerHost = null;
  }
  remove() {
    this._mainGroup.removeAll();
    this._data = null;
  }
}
TreeView2.type = "tree";
function symbolNeedsDraw2(data, dataIndex) {
  const layout33 = data.getItemLayout(dataIndex);
  return layout33 && !isNaN(layout33.x) && !isNaN(layout33.y) && data.getItemVisual(dataIndex, "symbol") !== "none";
}
function updateNode(data, dataIndex, symbolEl, group, seriesModel) {
  const isInit = !symbolEl;
  const node = data.tree.getNodeByDataIndex(dataIndex);
  const itemModel = node.getModel();
  const visualColor = node.getVisual("style").fill;
  const symbolInnerColor = node.isExpand === false && node.children.length !== 0 ? visualColor : "#fff";
  const virtualRoot = data.tree.root;
  const source = node.parentNode === virtualRoot ? node : node.parentNode || node;
  const sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);
  const sourceLayout = source.getLayout();
  const sourceOldLayout = sourceSymbolEl ? {
    x: sourceSymbolEl.x,
    y: sourceSymbolEl.y,
    rawX: sourceSymbolEl.__radialOldRawX,
    rawY: sourceSymbolEl.__radialOldRawY
  } : sourceLayout;
  const targetLayout = node.getLayout();
  if (isInit) {
    symbolEl = new Symbol_default(data, dataIndex, null, {
      symbolInnerColor,
      useNameLabel: true
    });
    symbolEl.x = sourceOldLayout.x;
    symbolEl.y = sourceOldLayout.y;
  } else {
    symbolEl.updateData(data, dataIndex, null, {
      symbolInnerColor,
      useNameLabel: true
    });
  }
  symbolEl.__radialOldRawX = symbolEl.__radialRawX;
  symbolEl.__radialOldRawY = symbolEl.__radialRawY;
  symbolEl.__radialRawX = targetLayout.rawX;
  symbolEl.__radialRawY = targetLayout.rawY;
  group.add(symbolEl);
  data.setItemGraphicEl(dataIndex, symbolEl);
  updateProps(symbolEl, {
    x: targetLayout.x,
    y: targetLayout.y
  }, seriesModel);
  const symbolPath = symbolEl.getSymbolPath();
  if (seriesModel.get("layout") === "radial") {
    const realRoot = virtualRoot.children[0];
    const rootLayout = realRoot.getLayout();
    const length2 = realRoot.children.length;
    let rad;
    let isLeft;
    if (targetLayout.x === rootLayout.x && node.isExpand === true) {
      const center3 = {
        x: (realRoot.children[0].getLayout().x + realRoot.children[length2 - 1].getLayout().x) / 2,
        y: (realRoot.children[0].getLayout().y + realRoot.children[length2 - 1].getLayout().y) / 2
      };
      rad = Math.atan2(center3.y - rootLayout.y, center3.x - rootLayout.x);
      if (rad < 0) {
        rad = Math.PI * 2 + rad;
      }
      isLeft = center3.x < rootLayout.x;
      if (isLeft) {
        rad = rad - Math.PI;
      }
    } else {
      rad = Math.atan2(targetLayout.y - rootLayout.y, targetLayout.x - rootLayout.x);
      if (rad < 0) {
        rad = Math.PI * 2 + rad;
      }
      if (node.children.length === 0 || node.children.length !== 0 && node.isExpand === false) {
        isLeft = targetLayout.x < rootLayout.x;
        if (isLeft) {
          rad = rad - Math.PI;
        }
      } else {
        isLeft = targetLayout.x > rootLayout.x;
        if (!isLeft) {
          rad = rad - Math.PI;
        }
      }
    }
    const textPosition = isLeft ? "left" : "right";
    const normalLabelModel = itemModel.getModel("label");
    const rotate2 = normalLabelModel.get("rotate");
    const labelRotateRadian = rotate2 * (Math.PI / 180);
    const textContent = symbolPath.getTextContent();
    if (textContent) {
      symbolPath.setTextConfig({
        position: normalLabelModel.get("position") || textPosition,
        rotation: rotate2 == null ? -rad : labelRotateRadian,
        origin: "center"
      });
      textContent.setStyle("verticalAlign", "middle");
    }
  }
  const focus = itemModel.get(["emphasis", "focus"]);
  const focusDataIndices = focus === "ancestor" ? node.getAncestorsIndices() : focus === "descendant" ? node.getDescendantIndices() : null;
  if (focusDataIndices) {
    getECData(symbolEl).focus = focusDataIndices;
  }
  drawEdge(seriesModel, node, virtualRoot, symbolEl, sourceOldLayout, sourceLayout, targetLayout, group);
  if (symbolEl.__edge) {
    symbolEl.onHoverStateChange = function(toState) {
      if (toState !== "blur") {
        const parentEl = node.parentNode && data.getItemGraphicEl(node.parentNode.dataIndex);
        if (!(parentEl && parentEl.hoverState === HOVER_STATE_BLUR)) {
          setStatesFlag(symbolEl.__edge, toState);
        }
      }
    };
  }
}
function drawEdge(seriesModel, node, virtualRoot, symbolEl, sourceOldLayout, sourceLayout, targetLayout, group) {
  const itemModel = node.getModel();
  const edgeShape = seriesModel.get("edgeShape");
  const layout33 = seriesModel.get("layout");
  const orient = seriesModel.getOrient();
  const curvature = seriesModel.get(["lineStyle", "curveness"]);
  const edgeForkPosition = seriesModel.get("edgeForkPosition");
  const lineStyle3 = itemModel.getModel("lineStyle").getLineStyle();
  let edge = symbolEl.__edge;
  if (edgeShape === "curve") {
    if (node.parentNode && node.parentNode !== virtualRoot) {
      if (!edge) {
        edge = symbolEl.__edge = new BezierCurve_default({
          shape: getEdgeShape(layout33, orient, curvature, sourceOldLayout, sourceOldLayout)
        });
      }
      updateProps(edge, {
        shape: getEdgeShape(layout33, orient, curvature, sourceLayout, targetLayout)
      }, seriesModel);
    }
  } else if (edgeShape === "polyline") {
    if (layout33 === "orthogonal") {
      if (node !== virtualRoot && node.children && node.children.length !== 0 && node.isExpand === true) {
        const children = node.children;
        const childPoints = [];
        for (let i = 0; i < children.length; i++) {
          const childLayout = children[i].getLayout();
          childPoints.push([childLayout.x, childLayout.y]);
        }
        if (!edge) {
          edge = symbolEl.__edge = new TreePath({
            shape: {
              parentPoint: [targetLayout.x, targetLayout.y],
              childPoints: [[targetLayout.x, targetLayout.y]],
              orient,
              forkPosition: edgeForkPosition
            }
          });
        }
        updateProps(edge, {
          shape: {
            parentPoint: [targetLayout.x, targetLayout.y],
            childPoints
          }
        }, seriesModel);
      }
    } else {
      if (__DEV__) {
        throw new Error("The polyline edgeShape can only be used in orthogonal layout");
      }
    }
  }
  if (edge) {
    edge.useStyle(defaults({
      strokeNoScale: true,
      fill: null
    }, lineStyle3));
    setStatesStylesFromModel(edge, itemModel, "lineStyle");
    setDefaultStateProxy(edge);
    group.add(edge);
  }
}
function removeNode(data, dataIndex, symbolEl, group, seriesModel) {
  const node = data.tree.getNodeByDataIndex(dataIndex);
  const virtualRoot = data.tree.root;
  let source = node.parentNode === virtualRoot ? node : node.parentNode || node;
  let sourceLayout;
  while (sourceLayout = source.getLayout(), sourceLayout == null) {
    source = source.parentNode === virtualRoot ? source : source.parentNode || source;
  }
  updateProps(symbolEl, {
    x: sourceLayout.x + 1,
    y: sourceLayout.y + 1
  }, seriesModel, function() {
    group.remove(symbolEl);
    data.setItemGraphicEl(dataIndex, null);
  });
  symbolEl.fadeOut(null, {
    keepLabel: true
  });
  const sourceSymbolEl = data.getItemGraphicEl(source.dataIndex);
  const sourceEdge = sourceSymbolEl.__edge;
  const edge = symbolEl.__edge || (source.isExpand === false || source.children.length === 1 ? sourceEdge : void 0);
  const edgeShape = seriesModel.get("edgeShape");
  const layoutOpt = seriesModel.get("layout");
  const orient = seriesModel.get("orient");
  const curvature = seriesModel.get(["lineStyle", "curveness"]);
  if (edge) {
    if (edgeShape === "curve") {
      updateProps(edge, {
        shape: getEdgeShape(layoutOpt, orient, curvature, sourceLayout, sourceLayout),
        style: {
          opacity: 0
        }
      }, seriesModel, function() {
        group.remove(edge);
      });
    } else if (edgeShape === "polyline" && seriesModel.get("layout") === "orthogonal") {
      updateProps(edge, {
        shape: {
          parentPoint: [sourceLayout.x, sourceLayout.y],
          childPoints: [[sourceLayout.x, sourceLayout.y]]
        },
        style: {
          opacity: 0
        }
      }, seriesModel, function() {
        group.remove(edge);
      });
    }
  }
}
function getEdgeShape(layoutOpt, orient, curvature, sourceLayout, targetLayout) {
  let cpx1;
  let cpy1;
  let cpx2;
  let cpy2;
  let x1;
  let x2;
  let y1;
  let y2;
  if (layoutOpt === "radial") {
    x1 = sourceLayout.rawX;
    y1 = sourceLayout.rawY;
    x2 = targetLayout.rawX;
    y2 = targetLayout.rawY;
    const radialCoor1 = radialCoordinate(x1, y1);
    const radialCoor2 = radialCoordinate(x1, y1 + (y2 - y1) * curvature);
    const radialCoor3 = radialCoordinate(x2, y2 + (y1 - y2) * curvature);
    const radialCoor4 = radialCoordinate(x2, y2);
    return {
      x1: radialCoor1.x || 0,
      y1: radialCoor1.y || 0,
      x2: radialCoor4.x || 0,
      y2: radialCoor4.y || 0,
      cpx1: radialCoor2.x || 0,
      cpy1: radialCoor2.y || 0,
      cpx2: radialCoor3.x || 0,
      cpy2: radialCoor3.y || 0
    };
  } else {
    x1 = sourceLayout.x;
    y1 = sourceLayout.y;
    x2 = targetLayout.x;
    y2 = targetLayout.y;
    if (orient === "LR" || orient === "RL") {
      cpx1 = x1 + (x2 - x1) * curvature;
      cpy1 = y1;
      cpx2 = x2 + (x1 - x2) * curvature;
      cpy2 = y2;
    }
    if (orient === "TB" || orient === "BT") {
      cpx1 = x1;
      cpy1 = y1 + (y2 - y1) * curvature;
      cpx2 = x2;
      cpy2 = y2 + (y1 - y2) * curvature;
    }
  }
  return {
    x1,
    y1,
    x2,
    y2,
    cpx1,
    cpy1,
    cpx2,
    cpy2
  };
}
Chart_default.registerClass(TreeView2);

// src/chart/tree/treeAction.ts
registerAction({
  type: "treeExpandAndCollapse",
  event: "treeExpandAndCollapse",
  update: "update"
}, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "series",
    subType: "tree",
    query: payload
  }, function(seriesModel) {
    const dataIndex = payload.dataIndex;
    const tree2 = seriesModel.getData().tree;
    const node = tree2.getNodeByDataIndex(dataIndex);
    node.isExpand = !node.isExpand;
  });
});
registerAction({
  type: "treeRoam",
  event: "treeRoam",
  update: "none"
}, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "series",
    subType: "tree",
    query: payload
  }, function(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    const res = updateCenterAndZoom(coordSys, payload);
    seriesModel.setCenter && seriesModel.setCenter(res.center);
    seriesModel.setZoom && seriesModel.setZoom(res.zoom);
  });
});

// src/chart/tree/traversalHelper.ts
function eachAfter(root, callback, separation2) {
  const nodes = [root];
  const next = [];
  let node;
  while (node = nodes.pop()) {
    next.push(node);
    if (node.isExpand) {
      const children = node.children;
      if (children.length) {
        for (let i = 0; i < children.length; i++) {
          nodes.push(children[i]);
        }
      }
    }
  }
  while (node = next.pop()) {
    callback(node, separation2);
  }
}
function eachBefore(root, callback) {
  const nodes = [root];
  let node;
  while (node = nodes.pop()) {
    callback(node);
    if (node.isExpand) {
      const children = node.children;
      if (children.length) {
        for (let i = children.length - 1; i >= 0; i--) {
          nodes.push(children[i]);
        }
      }
    }
  }
}

// src/chart/tree/treeLayout.ts
function treeLayout_default(ecModel, api) {
  ecModel.eachSeriesByType("tree", function(seriesModel) {
    commonLayout(seriesModel, api);
  });
}
function commonLayout(seriesModel, api) {
  const layoutInfo = getViewRect5(seriesModel, api);
  seriesModel.layoutInfo = layoutInfo;
  const layout33 = seriesModel.get("layout");
  let width = 0;
  let height = 0;
  let separation2 = null;
  if (layout33 === "radial") {
    width = 2 * Math.PI;
    height = Math.min(layoutInfo.height, layoutInfo.width) / 2;
    separation2 = separation(function(node1, node2) {
      return (node1.parentNode === node2.parentNode ? 1 : 2) / node1.depth;
    });
  } else {
    width = layoutInfo.width;
    height = layoutInfo.height;
    separation2 = separation();
  }
  const virtualRoot = seriesModel.getData().tree.root;
  const realRoot = virtualRoot.children[0];
  if (realRoot) {
    init2(virtualRoot);
    eachAfter(realRoot, firstWalk, separation2);
    virtualRoot.hierNode.modifier = -realRoot.hierNode.prelim;
    eachBefore(realRoot, secondWalk);
    let left = realRoot;
    let right = realRoot;
    let bottom = realRoot;
    eachBefore(realRoot, function(node) {
      const x = node.getLayout().x;
      if (x < left.getLayout().x) {
        left = node;
      }
      if (x > right.getLayout().x) {
        right = node;
      }
      if (node.depth > bottom.depth) {
        bottom = node;
      }
    });
    const delta = left === right ? 1 : separation2(left, right) / 2;
    const tx = delta - left.getLayout().x;
    let kx = 0;
    let ky = 0;
    let coorX = 0;
    let coorY = 0;
    if (layout33 === "radial") {
      kx = width / (right.getLayout().x + delta + tx);
      ky = height / (bottom.depth - 1 || 1);
      eachBefore(realRoot, function(node) {
        coorX = (node.getLayout().x + tx) * kx;
        coorY = (node.depth - 1) * ky;
        const finalCoor = radialCoordinate(coorX, coorY);
        node.setLayout({
          x: finalCoor.x,
          y: finalCoor.y,
          rawX: coorX,
          rawY: coorY
        }, true);
      });
    } else {
      const orient = seriesModel.getOrient();
      if (orient === "RL" || orient === "LR") {
        ky = height / (right.getLayout().x + delta + tx);
        kx = width / (bottom.depth - 1 || 1);
        eachBefore(realRoot, function(node) {
          coorY = (node.getLayout().x + tx) * ky;
          coorX = orient === "LR" ? (node.depth - 1) * kx : width - (node.depth - 1) * kx;
          node.setLayout({
            x: coorX,
            y: coorY
          }, true);
        });
      } else if (orient === "TB" || orient === "BT") {
        kx = width / (right.getLayout().x + delta + tx);
        ky = height / (bottom.depth - 1 || 1);
        eachBefore(realRoot, function(node) {
          coorX = (node.getLayout().x + tx) * kx;
          coorY = orient === "TB" ? (node.depth - 1) * ky : height - (node.depth - 1) * ky;
          node.setLayout({
            x: coorX,
            y: coorY
          }, true);
        });
      }
    }
  }
}

// src/chart/tree/treeVisual.ts
function treeVisual_default(ecModel) {
  ecModel.eachSeriesByType("tree", function(seriesModel) {
    const data = seriesModel.getData();
    const tree2 = data.tree;
    tree2.eachNode(function(node) {
      const model65 = node.getModel();
      const style2 = model65.getModel("itemStyle").getItemStyle();
      const existsStyle = data.ensureUniqueItemVisual(node.dataIndex, "style");
      extend(existsStyle, style2);
    });
  });
}

// src/chart/tree.ts
registerLayout(treeLayout_default);
registerVisual(treeVisual_default);

// src/chart/helper/treeHelper.ts
function retrieveTargetInfo(payload, validPayloadTypes, seriesModel) {
  if (payload && indexOf(validPayloadTypes, payload.type) >= 0) {
    const root = seriesModel.getData().tree.root;
    let targetNode = payload.targetNode;
    if (typeof targetNode === "string") {
      targetNode = root.getNodeById(targetNode);
    }
    if (targetNode && root.contains(targetNode)) {
      return {
        node: targetNode
      };
    }
    const targetNodeId = payload.targetNodeId;
    if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
      return {
        node: targetNode
      };
    }
  }
}
function getPathToRoot(node) {
  const path2 = [];
  while (node) {
    node = node.parentNode;
    node && path2.push(node);
  }
  return path2.reverse();
}
function aboveViewRoot(viewRoot, node) {
  const viewPath = getPathToRoot(viewRoot);
  return indexOf(viewPath, node) >= 0;
}
function wrapTreePathInfo(node, seriesModel) {
  const treePathInfo = [];
  while (node) {
    const nodeDataIndex = node.dataIndex;
    treePathInfo.push({
      name: node.name,
      dataIndex: nodeDataIndex,
      value: seriesModel.getRawValue(nodeDataIndex)
    });
    node = node.parentNode;
  }
  treePathInfo.reverse();
  return treePathInfo;
}

// src/chart/treemap/TreemapSeries.ts
class TreemapSeriesModel2 extends Series_default {
  constructor() {
    super(...arguments);
    this.type = TreemapSeriesModel2.type;
    this.preventUsingHoverLayer = true;
  }
  getInitialData(option, ecModel) {
    const root = {
      name: option.name,
      children: option.data
    };
    completeTreeValue2(root);
    let levels = option.levels || [];
    levels = option.levels = setDefault(levels, ecModel);
    const levelModels = map2(levels || [], function(levelDefine) {
      return new Model_default(levelDefine, this, ecModel);
    }, this);
    const tree2 = Tree_default.createTree(root, this, null, beforeLink);
    function beforeLink(nodeData) {
      nodeData.wrapMethod("getItemModel", function(model65, idx) {
        const node = tree2.getNodeByDataIndex(idx);
        const levelModel = levelModels[node.depth];
        levelModel && (model65.parentModel = levelModel);
        return model65;
      });
    }
    return tree2.data;
  }
  optionUpdated() {
    this.resetViewRoot();
  }
  formatTooltip(dataIndex) {
    const data = this.getData();
    const value = this.getRawValue(dataIndex);
    const formattedValue = isArray(value) ? addCommas(value[0]) : addCommas(value);
    const name = data.getName(dataIndex);
    return encodeHTML(name + ": " + formattedValue);
  }
  getDataParams(dataIndex) {
    const params = super.getDataParams.apply(this, arguments);
    const node = this.getData().tree.getNodeByDataIndex(dataIndex);
    params.treePathInfo = wrapTreePathInfo(node, this);
    return params;
  }
  setLayoutInfo(layoutInfo) {
    this.layoutInfo = this.layoutInfo || {};
    extend(this.layoutInfo, layoutInfo);
  }
  mapIdToIndex(id) {
    let idIndexMap = this._idIndexMap;
    if (!idIndexMap) {
      idIndexMap = this._idIndexMap = createHashMap();
      this._idIndexMapCount = 0;
    }
    let index = idIndexMap.get(id);
    if (index == null) {
      idIndexMap.set(id, index = this._idIndexMapCount++);
    }
    return index;
  }
  getViewRoot() {
    return this._viewRoot;
  }
  resetViewRoot(viewRoot) {
    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;
    const root = this.getRawData().tree.root;
    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {
      this._viewRoot = root;
    }
  }
}
TreemapSeriesModel2.type = "series.treemap";
TreemapSeriesModel2.layoutMode = "box";
TreemapSeriesModel2.defaultOption = {
  progressive: 0,
  left: "center",
  top: "middle",
  width: "80%",
  height: "80%",
  sort: true,
  clipWindow: "origin",
  squareRatio: 0.5 * (1 + Math.sqrt(5)),
  leafDepth: null,
  drillDownIcon: "▶",
  zoomToNodeRatio: 0.32 * 0.32,
  roam: true,
  nodeClick: "zoomToNode",
  animation: true,
  animationDurationUpdate: 900,
  animationEasing: "quinticInOut",
  breadcrumb: {
    show: true,
    height: 22,
    left: "center",
    top: "bottom",
    emptyItemWidth: 25,
    itemStyle: {
      color: "rgba(0,0,0,0.7)",
      borderColor: "rgba(255,255,255,0.7)",
      borderWidth: 1,
      shadowColor: "rgba(150,150,150,1)",
      shadowBlur: 3,
      shadowOffsetX: 0,
      shadowOffsetY: 0,
      textStyle: {
        color: "#fff"
      }
    }
  },
  label: {
    show: true,
    distance: 0,
    padding: 5,
    position: "inside",
    color: "#fff",
    overflow: "truncate"
  },
  upperLabel: {
    show: false,
    position: [0, "50%"],
    height: 20,
    overflow: "truncate",
    verticalAlign: "middle"
  },
  itemStyle: {
    color: null,
    colorAlpha: null,
    colorSaturation: null,
    borderWidth: 0,
    gapWidth: 0,
    borderColor: "#fff",
    borderColorSaturation: null
  },
  emphasis: {
    upperLabel: {
      show: true,
      position: [0, "50%"],
      ellipsis: true,
      verticalAlign: "middle"
    }
  },
  visualDimension: 0,
  visualMin: null,
  visualMax: null,
  color: [],
  colorAlpha: null,
  colorSaturation: null,
  colorMappingBy: "index",
  visibleMin: 10,
  childrenVisibleMin: null,
  levels: []
};
function completeTreeValue2(dataNode) {
  let sum2 = 0;
  each(dataNode.children, function(child) {
    completeTreeValue2(child);
    let childValue = child.value;
    isArray(childValue) && (childValue = childValue[0]);
    sum2 += childValue;
  });
  let thisValue = dataNode.value;
  if (isArray(thisValue)) {
    thisValue = thisValue[0];
  }
  if (thisValue == null || isNaN(thisValue)) {
    thisValue = sum2;
  }
  if (thisValue < 0) {
    thisValue = 0;
  }
  isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;
}
function setDefault(levels, ecModel) {
  const globalColorList = normalizeToArray(ecModel.get("color"));
  if (!globalColorList) {
    return;
  }
  levels = levels || [];
  let hasColorDefine;
  each(levels, function(levelDefine) {
    const model65 = new Model_default(levelDefine);
    const modelColor = model65.get("color");
    if (model65.get(["itemStyle", "color"]) || modelColor && modelColor !== "none") {
      hasColorDefine = true;
    }
  });
  if (!hasColorDefine) {
    const level0 = levels[0] || (levels[0] = {});
    level0.color = globalColorList.slice();
  }
  return levels;
}
Series_default.registerClass(TreemapSeriesModel2);

// src/chart/treemap/Breadcrumb.ts
const TEXT_PADDING = 8;
const ITEM_GAP = 8;
const ARRAY_LENGTH = 5;
class Breadcrumb {
  constructor(containerGroup) {
    this.group = new Group_default();
    containerGroup.add(this.group);
  }
  render(seriesModel, api, targetNode, onSelect) {
    const model65 = seriesModel.getModel("breadcrumb");
    const thisGroup = this.group;
    thisGroup.removeAll();
    if (!model65.get("show") || !targetNode) {
      return;
    }
    const normalStyleModel = model65.getModel("itemStyle");
    const textStyleModel = normalStyleModel.getModel("textStyle");
    const layoutParam = {
      pos: {
        left: model65.get("left"),
        right: model65.get("right"),
        top: model65.get("top"),
        bottom: model65.get("bottom")
      },
      box: {
        width: api.getWidth(),
        height: api.getHeight()
      },
      emptyItemWidth: model65.get("emptyItemWidth"),
      totalWidth: 0,
      renderList: []
    };
    this._prepare(targetNode, layoutParam, textStyleModel);
    this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);
    positionElement(thisGroup, layoutParam.pos, layoutParam.box);
  }
  _prepare(targetNode, layoutParam, textStyleModel) {
    for (let node = targetNode; node; node = node.parentNode) {
      const text11 = node.getModel().get("name");
      const textRect = textStyleModel.getTextRect(text11);
      const itemWidth = Math.max(textRect.width + TEXT_PADDING * 2, layoutParam.emptyItemWidth);
      layoutParam.totalWidth += itemWidth + ITEM_GAP;
      layoutParam.renderList.push({
        node,
        text: text11,
        width: itemWidth
      });
    }
  }
  _renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect) {
    let lastX = 0;
    const emptyItemWidth = layoutParam.emptyItemWidth;
    const height = seriesModel.get(["breadcrumb", "height"]);
    const availableSize = getAvailableSize(layoutParam.pos, layoutParam.box);
    let totalWidth = layoutParam.totalWidth;
    const renderList = layoutParam.renderList;
    for (let i = renderList.length - 1; i >= 0; i--) {
      const item = renderList[i];
      const itemNode = item.node;
      let itemWidth = item.width;
      let text11 = item.text;
      if (totalWidth > availableSize.width) {
        totalWidth -= itemWidth - emptyItemWidth;
        itemWidth = emptyItemWidth;
        text11 = null;
      }
      const el = new Polygon_default({
        shape: {
          points: makeItemPoints(lastX, 0, itemWidth, height, i === renderList.length - 1, i === 0)
        },
        style: defaults(normalStyleModel.getItemStyle(), {
          lineJoin: "bevel"
        }),
        textContent: new Text_default({
          style: {
            text: text11,
            fill: textStyleModel.getTextColor(),
            font: textStyleModel.getFont()
          }
        }),
        textConfig: {
          position: "inside"
        },
        z: 10,
        onclick: curry(onSelect, itemNode)
      });
      this.group.add(el);
      packEventData(el, seriesModel, itemNode);
      lastX += itemWidth + ITEM_GAP;
    }
  }
  remove() {
    this.group.removeAll();
  }
}
function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
  const points9 = [[head ? x : x - ARRAY_LENGTH, y], [x + itemWidth, y], [x + itemWidth, y + itemHeight], [head ? x : x - ARRAY_LENGTH, y + itemHeight]];
  !tail && points9.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
  !head && points9.push([x, y + itemHeight / 2]);
  return points9;
}
function packEventData(el, seriesModel, itemNode) {
  getECData(el).eventData = {
    componentType: "series",
    componentSubType: "treemap",
    componentIndex: seriesModel.componentIndex,
    seriesIndex: seriesModel.componentIndex,
    seriesName: seriesModel.name,
    seriesType: "treemap",
    selfType: "breadcrumb",
    nodeData: {
      dataIndex: itemNode && itemNode.dataIndex,
      name: itemNode && itemNode.name
    },
    treePathInfo: itemNode && wrapTreePathInfo(itemNode, seriesModel)
  };
}
const Breadcrumb_default = Breadcrumb;

// src/util/animation.ts
function createWrap() {
  const storage2 = [];
  let elExistsMap = {};
  let doneCallback;
  return {
    add: function(el, target, time, delay, easing7) {
      if (isString(delay)) {
        easing7 = delay;
        delay = 0;
      }
      if (elExistsMap[el.id]) {
        return false;
      }
      elExistsMap[el.id] = 1;
      storage2.push({
        el,
        target,
        time,
        delay,
        easing: easing7
      });
      return true;
    },
    done: function(callback) {
      doneCallback = callback;
      return this;
    },
    start: function() {
      let count2 = storage2.length;
      for (let i = 0, len2 = storage2.length; i < len2; i++) {
        const item = storage2[i];
        item.el.animateTo(item.target, {
          duration: item.time,
          delay: item.delay,
          easing: item.easing,
          done
        });
      }
      return this;
      function done() {
        count2--;
        if (!count2) {
          storage2.length = 0;
          elExistsMap = {};
          doneCallback && doneCallback();
        }
      }
    }
  };
}

// src/chart/treemap/TreemapView.ts
const Group10 = Group_default;
const Rect5 = Rect_default;
const DRAG_THRESHOLD = 3;
const PATH_LABEL_NOAMAL = "label";
const PATH_UPPERLABEL_NORMAL = "upperLabel";
const Z_BASE = 10;
const Z_BG = 1;
const Z_CONTENT = 2;
const getStateItemStyle = makeStyleMapper_default([["fill", "color"], ["stroke", "strokeColor"], ["lineWidth", "strokeWidth"], ["shadowBlur"], ["shadowOffsetX"], ["shadowOffsetY"], ["shadowColor"]]);
const getItemStyleNormal = function(model65) {
  const itemStyle5 = getStateItemStyle(model65);
  itemStyle5.stroke = itemStyle5.fill = itemStyle5.lineWidth = null;
  return itemStyle5;
};
const inner2 = makeInner();
class TreemapView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = TreemapView2.type;
    this._state = "ready";
    this._storage = createStorage();
  }
  render(seriesModel, ecModel, api, payload) {
    const models = ecModel.findComponents({
      mainType: "series",
      subType: "treemap",
      query: payload
    });
    if (indexOf(models, seriesModel) < 0) {
      return;
    }
    this.seriesModel = seriesModel;
    this.api = api;
    this.ecModel = ecModel;
    const types298 = ["treemapZoomToNode", "treemapRootToNode"];
    const targetInfo = retrieveTargetInfo(payload, types298, seriesModel);
    const payloadType = payload && payload.type;
    const layoutInfo = seriesModel.layoutInfo;
    const isInit = !this._oldTree;
    const thisStorage = this._storage;
    const reRoot = payloadType === "treemapRootToNode" && targetInfo && thisStorage ? {
      rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],
      direction: payload.direction
    } : null;
    const containerGroup = this._giveContainerGroup(layoutInfo);
    const renderResult = this._doRender(containerGroup, seriesModel, reRoot);
    !isInit && (!payloadType || payloadType === "treemapZoomToNode" || payloadType === "treemapRootToNode") ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot) : renderResult.renderFinally();
    this._resetController(api);
    this._renderBreadcrumb(seriesModel, api, targetInfo);
  }
  _giveContainerGroup(layoutInfo) {
    let containerGroup = this._containerGroup;
    if (!containerGroup) {
      containerGroup = this._containerGroup = new Group10();
      this._initEvents(containerGroup);
      this.group.add(containerGroup);
    }
    containerGroup.x = layoutInfo.x;
    containerGroup.y = layoutInfo.y;
    return containerGroup;
  }
  _doRender(containerGroup, seriesModel, reRoot) {
    const thisTree = seriesModel.getData().tree;
    const oldTree = this._oldTree;
    const lastsForAnimation = createStorage();
    const thisStorage = createStorage();
    const oldStorage = this._storage;
    const willInvisibleEls = [];
    function doRenderNode(thisNode, oldNode, parentGroup, depth) {
      return renderNode(seriesModel, thisStorage, oldStorage, reRoot, lastsForAnimation, willInvisibleEls, thisNode, oldNode, parentGroup, depth);
    }
    dualTravel(thisTree.root ? [thisTree.root] : [], oldTree && oldTree.root ? [oldTree.root] : [], containerGroup, thisTree === oldTree || !oldTree, 0);
    const willDeleteEls = clearStorage(oldStorage);
    this._oldTree = thisTree;
    this._storage = thisStorage;
    return {
      lastsForAnimation,
      willDeleteEls,
      renderFinally
    };
    function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {
      if (sameTree) {
        oldViewChildren = thisViewChildren;
        each(thisViewChildren, function(child, index) {
          !child.isRemoved() && processNode(index, index);
        });
      } else {
        new DataDiffer_default(oldViewChildren, thisViewChildren, getKey2, getKey2).add(processNode).update(processNode).remove(curry(processNode, null)).execute();
      }
      function getKey2(node) {
        return node.getId();
      }
      function processNode(newIndex, oldIndex) {
        const thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
        const oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;
        const group = doRenderNode(thisNode, oldNode, parentGroup, depth);
        group && dualTravel(thisNode && thisNode.viewChildren || [], oldNode && oldNode.viewChildren || [], group, sameTree, depth + 1);
      }
    }
    function clearStorage(storage2) {
      const willDeleteEls2 = createStorage();
      storage2 && each(storage2, function(store, storageName) {
        const delEls = willDeleteEls2[storageName];
        each(store, function(el) {
          el && (delEls.push(el), inner2(el).willDelete = true);
        });
      });
      return willDeleteEls2;
    }
    function renderFinally() {
      each(willDeleteEls, function(els) {
        each(els, function(el) {
          el.parent && el.parent.remove(el);
        });
      });
      each(willInvisibleEls, function(el) {
        el.invisible = true;
        el.dirty();
      });
    }
  }
  _doAnimation(containerGroup, renderResult, seriesModel, reRoot) {
    if (!seriesModel.get("animation")) {
      return;
    }
    const duration = seriesModel.get("animationDurationUpdate");
    const easing7 = seriesModel.get("animationEasing");
    const animationWrap = createWrap();
    each(renderResult.willDeleteEls, function(store, storageName) {
      each(store, function(el, rawIndex) {
        if (el.invisible) {
          return;
        }
        const parent = el.parent;
        let target;
        const innerStore = inner2(parent);
        if (reRoot && reRoot.direction === "drillDown") {
          target = parent === reRoot.rootNodeGroup ? {
            shape: {
              x: 0,
              y: 0,
              width: innerStore.nodeWidth,
              height: innerStore.nodeHeight
            },
            style: {
              opacity: 0
            }
          } : {
            style: {
              opacity: 0
            }
          };
        } else {
          let targetX = 0;
          let targetY = 0;
          if (!innerStore.willDelete) {
            targetX = innerStore.nodeWidth / 2;
            targetY = innerStore.nodeHeight / 2;
          }
          target = storageName === "nodeGroup" ? {
            x: targetX,
            y: targetY,
            style: {
              opacity: 0
            }
          } : {
            shape: {
              x: targetX,
              y: targetY,
              width: 0,
              height: 0
            },
            style: {
              opacity: 0
            }
          };
        }
        target && animationWrap.add(el, target, duration, easing7);
      });
    });
    each(this._storage, function(store, storageName) {
      each(store, function(el, rawIndex) {
        const last = renderResult.lastsForAnimation[storageName][rawIndex];
        const target = {};
        if (!last) {
          return;
        }
        if (el instanceof Group_default) {
          if (last.oldX != null) {
            target.x = el.x;
            target.y = el.y;
            el.x = last.oldX;
            el.y = last.oldY;
          }
        } else {
          if (last.oldShape) {
            target.shape = extend({}, el.shape);
            el.setShape(last.oldShape);
          }
          if (last.fadein) {
            el.setStyle("opacity", 0);
            target.style = {
              opacity: 1
            };
          } else if (el.style.opacity !== 1) {
            target.style = {
              opacity: 1
            };
          }
        }
        animationWrap.add(el, target, duration, easing7);
      });
    }, this);
    this._state = "animating";
    animationWrap.done(bind(function() {
      this._state = "ready";
      renderResult.renderFinally();
    }, this)).start();
  }
  _resetController(api) {
    let controller = this._controller;
    if (!controller) {
      controller = this._controller = new RoamController_default(api.getZr());
      controller.enable(this.seriesModel.get("roam"));
      controller.on("pan", bind(this._onPan, this));
      controller.on("zoom", bind(this._onZoom, this));
    }
    const rect = new BoundingRect_default(0, 0, api.getWidth(), api.getHeight());
    controller.setPointerChecker(function(e, x, y) {
      return rect.contain(x, y);
    });
  }
  _clearController() {
    let controller = this._controller;
    if (controller) {
      controller.dispose();
      controller = null;
    }
  }
  _onPan(e) {
    if (this._state !== "animating" && (Math.abs(e.dx) > DRAG_THRESHOLD || Math.abs(e.dy) > DRAG_THRESHOLD)) {
      const root = this.seriesModel.getData().tree.root;
      if (!root) {
        return;
      }
      const rootLayout = root.getLayout();
      if (!rootLayout) {
        return;
      }
      this.api.dispatchAction({
        type: "treemapMove",
        from: this.uid,
        seriesId: this.seriesModel.id,
        rootRect: {
          x: rootLayout.x + e.dx,
          y: rootLayout.y + e.dy,
          width: rootLayout.width,
          height: rootLayout.height
        }
      });
    }
  }
  _onZoom(e) {
    let mouseX = e.originX;
    let mouseY = e.originY;
    if (this._state !== "animating") {
      const root = this.seriesModel.getData().tree.root;
      if (!root) {
        return;
      }
      const rootLayout = root.getLayout();
      if (!rootLayout) {
        return;
      }
      const rect = new BoundingRect_default(rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height);
      const layoutInfo = this.seriesModel.layoutInfo;
      mouseX -= layoutInfo.x;
      mouseY -= layoutInfo.y;
      const m2 = create();
      translate(m2, m2, [-mouseX, -mouseY]);
      scale(m2, m2, [e.scale, e.scale]);
      translate(m2, m2, [mouseX, mouseY]);
      rect.applyTransform(m2);
      this.api.dispatchAction({
        type: "treemapRender",
        from: this.uid,
        seriesId: this.seriesModel.id,
        rootRect: {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        }
      });
    }
  }
  _initEvents(containerGroup) {
    containerGroup.on("click", (e) => {
      if (this._state !== "ready") {
        return;
      }
      const nodeClick = this.seriesModel.get("nodeClick", true);
      if (!nodeClick) {
        return;
      }
      const targetInfo = this.findTarget(e.offsetX, e.offsetY);
      if (!targetInfo) {
        return;
      }
      const node = targetInfo.node;
      if (node.getLayout().isLeafRoot) {
        this._rootToNode(targetInfo);
      } else {
        if (nodeClick === "zoomToNode") {
          this._zoomToNode(targetInfo);
        } else if (nodeClick === "link") {
          const itemModel = node.hostTree.data.getItemModel(node.dataIndex);
          const link = itemModel.get("link", true);
          const linkTarget = itemModel.get("target", true) || "blank";
          link && windowOpen(link, linkTarget);
        }
      }
    }, this);
  }
  _renderBreadcrumb(seriesModel, api, targetInfo) {
    if (!targetInfo) {
      targetInfo = seriesModel.get("leafDepth", true) != null ? {
        node: seriesModel.getViewRoot()
      } : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);
      if (!targetInfo) {
        targetInfo = {
          node: seriesModel.getData().tree.root
        };
      }
    }
    (this._breadcrumb || (this._breadcrumb = new Breadcrumb_default(this.group))).render(seriesModel, api, targetInfo.node, (node) => {
      if (this._state !== "animating") {
        aboveViewRoot(seriesModel.getViewRoot(), node) ? this._rootToNode({
          node
        }) : this._zoomToNode({
          node
        });
      }
    });
  }
  remove() {
    this._clearController();
    this._containerGroup && this._containerGroup.removeAll();
    this._storage = createStorage();
    this._state = "ready";
    this._breadcrumb && this._breadcrumb.remove();
  }
  dispose() {
    this._clearController();
  }
  _zoomToNode(targetInfo) {
    this.api.dispatchAction({
      type: "treemapZoomToNode",
      from: this.uid,
      seriesId: this.seriesModel.id,
      targetNode: targetInfo.node
    });
  }
  _rootToNode(targetInfo) {
    this.api.dispatchAction({
      type: "treemapRootToNode",
      from: this.uid,
      seriesId: this.seriesModel.id,
      targetNode: targetInfo.node
    });
  }
  findTarget(x, y) {
    let targetInfo;
    const viewRoot = this.seriesModel.getViewRoot();
    viewRoot.eachNode({
      attr: "viewChildren",
      order: "preorder"
    }, function(node) {
      const bgEl = this._storage.background[node.getRawIndex()];
      if (bgEl) {
        const point = bgEl.transformCoordToLocal(x, y);
        const shape = bgEl.shape;
        if (shape.x <= point[0] && point[0] <= shape.x + shape.width && shape.y <= point[1] && point[1] <= shape.y + shape.height) {
          targetInfo = {
            node,
            offsetX: point[0],
            offsetY: point[1]
          };
        } else {
          return false;
        }
      }
    }, this);
    return targetInfo;
  }
}
TreemapView2.type = "treemap";
function createStorage() {
  return {
    nodeGroup: [],
    background: [],
    content: []
  };
}
function renderNode(seriesModel, thisStorage, oldStorage, reRoot, lastsForAnimation, willInvisibleEls, thisNode, oldNode, parentGroup, depth) {
  if (!thisNode) {
    return;
  }
  const thisLayout = thisNode.getLayout();
  const data = seriesModel.getData();
  const nodeModel = thisNode.getModel();
  data.setItemGraphicEl(thisNode.dataIndex, null);
  if (!thisLayout || !thisLayout.isInView) {
    return;
  }
  const thisWidth = thisLayout.width;
  const thisHeight = thisLayout.height;
  const borderWidth = thisLayout.borderWidth;
  const thisInvisible = thisLayout.invisible;
  const thisRawIndex = thisNode.getRawIndex();
  const oldRawIndex = oldNode && oldNode.getRawIndex();
  const thisViewChildren = thisNode.viewChildren;
  const upperHeight = thisLayout.upperHeight;
  const isParent = thisViewChildren && thisViewChildren.length;
  const itemStyleNormalModel = nodeModel.getModel("itemStyle");
  const itemStyleEmphasisModel = nodeModel.getModel(["emphasis", "itemStyle"]);
  const itemStyleBlurModel = nodeModel.getModel(["blur", "itemStyle"]);
  const itemStyleSelectModel = nodeModel.getModel(["select", "itemStyle"]);
  const borderRadius = itemStyleNormalModel.get("borderRadius") || 0;
  const group = giveGraphic("nodeGroup", Group10);
  if (!group) {
    return;
  }
  parentGroup.add(group);
  group.x = thisLayout.x || 0;
  group.y = thisLayout.y || 0;
  group.markRedraw();
  inner2(group).nodeWidth = thisWidth;
  inner2(group).nodeHeight = thisHeight;
  if (thisLayout.isAboveViewRoot) {
    return group;
  }
  const bg = giveGraphic("background", Rect5, depth, Z_BG);
  bg && renderBackground(group, bg, isParent && thisLayout.upperLabelHeight);
  const focus = nodeModel.get(["emphasis", "focus"]);
  const blurScope = nodeModel.get(["emphasis", "blurScope"]);
  const focusDataIndices = focus === "ancestor" ? thisNode.getAncestorsIndices() : focus === "descendant" ? thisNode.getDescendantIndices() : null;
  if (isParent) {
    if (isHighDownDispatcher(group)) {
      setAsHighDownDispatcher(group, false);
    }
    if (bg) {
      setAsHighDownDispatcher(bg, true);
      data.setItemGraphicEl(thisNode.dataIndex, bg);
      enableHoverFocus(bg, focusDataIndices || focus, blurScope);
    }
  } else {
    const content = giveGraphic("content", Rect5, depth, Z_CONTENT);
    content && renderContent(group, content);
    if (bg && isHighDownDispatcher(bg)) {
      setAsHighDownDispatcher(bg, false);
    }
    setAsHighDownDispatcher(group, true);
    data.setItemGraphicEl(thisNode.dataIndex, group);
    enableHoverFocus(group, focusDataIndices || focus, blurScope);
  }
  return group;
  function renderBackground(group2, bg2, useUpperLabel) {
    const ecData = getECData(bg2);
    ecData.dataIndex = thisNode.dataIndex;
    ecData.seriesIndex = seriesModel.seriesIndex;
    bg2.setShape({
      x: 0,
      y: 0,
      width: thisWidth,
      height: thisHeight,
      r: borderRadius
    });
    if (thisInvisible) {
      processInvisible(bg2);
    } else {
      bg2.invisible = false;
      const visualBorderColor = thisNode.getVisual("style").stroke;
      const normalStyle = getItemStyleNormal(itemStyleNormalModel);
      normalStyle.fill = visualBorderColor;
      const emphasisStyle = getStateItemStyle(itemStyleEmphasisModel);
      emphasisStyle.fill = itemStyleEmphasisModel.get("borderColor");
      const blurStyle = getStateItemStyle(itemStyleBlurModel);
      blurStyle.fill = itemStyleBlurModel.get("borderColor");
      const selectStyle = getStateItemStyle(itemStyleSelectModel);
      selectStyle.fill = itemStyleSelectModel.get("borderColor");
      if (useUpperLabel) {
        const upperLabelWidth = thisWidth - 2 * borderWidth;
        prepareText(bg2, visualBorderColor, upperLabelWidth, upperHeight, {
          x: borderWidth,
          y: 0,
          width: upperLabelWidth,
          height: upperHeight
        });
      } else {
        bg2.removeTextContent();
      }
      bg2.setStyle(normalStyle);
      bg2.ensureState("emphasis").style = emphasisStyle;
      bg2.ensureState("blur").style = blurStyle;
      bg2.ensureState("select").style = selectStyle;
      setDefaultStateProxy(bg2);
    }
    group2.add(bg2);
  }
  function renderContent(group2, content) {
    const ecData = getECData(content);
    ecData.dataIndex = thisNode.dataIndex;
    ecData.seriesIndex = seriesModel.seriesIndex;
    const contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
    const contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);
    content.culling = true;
    content.setShape({
      x: borderWidth,
      y: borderWidth,
      width: contentWidth,
      height: contentHeight,
      r: borderRadius
    });
    if (thisInvisible) {
      processInvisible(content);
    } else {
      content.invisible = false;
      const visualColor = thisNode.getVisual("style").fill;
      const normalStyle = getItemStyleNormal(itemStyleNormalModel);
      normalStyle.fill = visualColor;
      const emphasisStyle = getStateItemStyle(itemStyleEmphasisModel);
      const blurStyle = getStateItemStyle(itemStyleBlurModel);
      const selectStyle = getStateItemStyle(itemStyleSelectModel);
      prepareText(content, visualColor, contentWidth, contentHeight);
      content.setStyle(normalStyle);
      content.ensureState("emphasis").style = emphasisStyle;
      content.ensureState("blur").style = blurStyle;
      content.ensureState("select").style = selectStyle;
      setDefaultStateProxy(content);
    }
    group2.add(content);
  }
  function processInvisible(element) {
    !element.invisible && willInvisibleEls.push(element);
  }
  function prepareText(rectEl, visualColor, width, height, upperLabelRect) {
    const normalLabelModel = nodeModel.getModel(upperLabelRect ? PATH_UPPERLABEL_NORMAL : PATH_LABEL_NOAMAL);
    let text11 = retrieve(seriesModel.getFormattedLabel(thisNode.dataIndex, "normal", null, null, normalLabelModel.get("formatter")), nodeModel.get("name"));
    if (!upperLabelRect && thisLayout.isLeafRoot) {
      const iconChar = seriesModel.get("drillDownIcon", true);
      text11 = iconChar ? iconChar + " " + text11 : text11;
    }
    const isShow = normalLabelModel.getShallow("show");
    setLabelStyle(rectEl, getLabelStatesModels(nodeModel, upperLabelRect ? PATH_UPPERLABEL_NORMAL : PATH_LABEL_NOAMAL), {
      defaultText: isShow ? text11 : null,
      inheritColor: visualColor,
      labelFetcher: seriesModel,
      labelDataIndex: thisNode.dataIndex
    });
    if (upperLabelRect) {
      rectEl.setTextConfig({
        layoutRect: upperLabelRect
      });
      const textEl2 = rectEl.getTextContent();
      textEl2.disableLabelLayout = true;
    }
    const textEl = rectEl.getTextContent();
    const textStyle2 = textEl.style;
    textStyle2.truncateMinChar = 2;
    textStyle2.width = width;
    textStyle2.height = height;
    textStyle2.lineOverflow = "truncate";
    addDrillDownIcon(textStyle2, upperLabelRect, thisLayout);
    const textEmphasisState = textEl.getState("emphasis");
    addDrillDownIcon(textEmphasisState ? textEmphasisState.style : null, upperLabelRect, thisLayout);
  }
  function addDrillDownIcon(style2, upperLabelRect, thisLayout2) {
    const text11 = style2 ? style2.text : null;
    if (!upperLabelRect && thisLayout2.isLeafRoot && text11 != null) {
      const iconChar = seriesModel.get("drillDownIcon", true);
      style2.text = iconChar ? iconChar + " " + text11 : text11;
    }
  }
  function giveGraphic(storageName, Ctor, depth2, z) {
    let element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
    const lasts = lastsForAnimation[storageName];
    if (element) {
      oldStorage[storageName][oldRawIndex] = null;
      prepareAnimationWhenHasOld(lasts, element);
    } else if (!thisInvisible) {
      element = new Ctor();
      if (element instanceof Displayable_default) {
        element.z = calculateZ(depth2, z);
      }
      prepareAnimationWhenNoOld(lasts, element);
    }
    return thisStorage[storageName][thisRawIndex] = element;
  }
  function prepareAnimationWhenHasOld(lasts, element) {
    const lastCfg = lasts[thisRawIndex] = {};
    if (element instanceof Group10) {
      lastCfg.oldX = element.x;
      lastCfg.oldY = element.y;
    } else {
      lastCfg.oldShape = extend({}, element.shape);
    }
  }
  function prepareAnimationWhenNoOld(lasts, element) {
    const lastCfg = lasts[thisRawIndex] = {};
    const parentNode = thisNode.parentNode;
    const isGroup = element instanceof Group_default;
    if (parentNode && (!reRoot || reRoot.direction === "drillDown")) {
      let parentOldX = 0;
      let parentOldY = 0;
      const parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];
      if (!reRoot && parentOldBg && parentOldBg.oldShape) {
        parentOldX = parentOldBg.oldShape.width;
        parentOldY = parentOldBg.oldShape.height;
      }
      if (isGroup) {
        lastCfg.oldX = 0;
        lastCfg.oldY = parentOldY;
      } else {
        lastCfg.oldShape = {
          x: parentOldX,
          y: parentOldY,
          width: 0,
          height: 0
        };
      }
    }
    lastCfg.fadein = !isGroup;
  }
}
function calculateZ(depth, zInLevel) {
  const zb = depth * Z_BASE + zInLevel;
  return (zb - 1) / zb;
}
Chart_default.registerClass(TreemapView2);

// src/chart/treemap/treemapAction.ts
const noop2 = function() {
};
const actionTypes = ["treemapZoomToNode", "treemapRender", "treemapMove"];
for (let i = 0; i < actionTypes.length; i++) {
  registerAction({
    type: actionTypes[i],
    update: "updateView"
  }, noop2);
}
registerAction({
  type: "treemapRootToNode",
  update: "updateView"
}, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "series",
    subType: "treemap",
    query: payload
  }, handleRootToNode);
  function handleRootToNode(model65, index) {
    const types298 = ["treemapZoomToNode", "treemapRootToNode"];
    const targetInfo = retrieveTargetInfo(payload, types298, model65);
    if (targetInfo) {
      const originViewRoot = model65.getViewRoot();
      if (originViewRoot) {
        payload.direction = aboveViewRoot(originViewRoot, targetInfo.node) ? "rollUp" : "drillDown";
      }
      model65.resetViewRoot(targetInfo.node);
    }
  }
});

// src/visual/VisualMapping.ts
const each19 = each;
const isObject5 = isObject;
const CATEGORY_DEFAULT_VISUAL_INDEX = -1;
class VisualMapping9 {
  constructor(option) {
    const mappingMethod = option.mappingMethod;
    const visualType = option.type;
    const thisOption = this.option = clone2(option);
    this.type = visualType;
    this.mappingMethod = mappingMethod;
    this._normalizeData = normalizers[mappingMethod];
    const visualHandler = VisualMapping9.visualHandlers[visualType];
    this.applyVisual = visualHandler.applyVisual;
    this.getColorMapper = visualHandler.getColorMapper;
    this._normalizedToVisual = visualHandler._normalizedToVisual[mappingMethod];
    if (mappingMethod === "piecewise") {
      normalizeVisualRange(thisOption);
      preprocessForPiecewise(thisOption);
    } else if (mappingMethod === "category") {
      thisOption.categories ? preprocessForSpecifiedCategory(thisOption) : normalizeVisualRange(thisOption, true);
    } else {
      assert(mappingMethod !== "linear" || thisOption.dataExtent);
      normalizeVisualRange(thisOption);
    }
  }
  mapValueToVisual(value) {
    const normalized = this._normalizeData(value);
    return this._normalizedToVisual(normalized, value);
  }
  getNormalizer() {
    return bind(this._normalizeData, this);
  }
  static listVisualTypes() {
    return keys(VisualMapping9.visualHandlers);
  }
  static isValidType(visualType) {
    return VisualMapping9.visualHandlers.hasOwnProperty(visualType);
  }
  static eachVisual(visual, callback, context) {
    if (isObject(visual)) {
      each(visual, callback, context);
    } else {
      callback.call(context, visual);
    }
  }
  static mapVisual(visual, callback, context) {
    let isPrimary;
    let newVisual = isArray(visual) ? [] : isObject(visual) ? {} : (isPrimary = true, null);
    VisualMapping9.eachVisual(visual, function(v4, key) {
      const newVal = callback.call(context, v4, key);
      isPrimary ? newVisual = newVal : newVisual[key] = newVal;
    });
    return newVisual;
  }
  static retrieveVisuals(obj) {
    const ret = {};
    let hasVisual;
    obj && each19(VisualMapping9.visualHandlers, function(h, visualType) {
      if (obj.hasOwnProperty(visualType)) {
        ret[visualType] = obj[visualType];
        hasVisual = true;
      }
    });
    return hasVisual ? ret : null;
  }
  static prepareVisualTypes(visualTypes) {
    if (isArray(visualTypes)) {
      visualTypes = visualTypes.slice();
    } else if (isObject5(visualTypes)) {
      const types298 = [];
      each19(visualTypes, function(item, type) {
        types298.push(type);
      });
      visualTypes = types298;
    } else {
      return [];
    }
    visualTypes.sort(function(type1, type2) {
      return type2 === "color" && type1 !== "color" && type1.indexOf("color") === 0 ? 1 : -1;
    });
    return visualTypes;
  }
  static dependsOn(visualType1, visualType2) {
    return visualType2 === "color" ? !!(visualType1 && visualType1.indexOf(visualType2) === 0) : visualType1 === visualType2;
  }
  static findPieceIndex(value, pieceList, findClosestWhenOutside) {
    let possibleI;
    let abs2 = Infinity;
    for (let i = 0, len2 = pieceList.length; i < len2; i++) {
      const pieceValue = pieceList[i].value;
      if (pieceValue != null) {
        if (pieceValue === value || typeof pieceValue === "string" && pieceValue === value + "") {
          return i;
        }
        findClosestWhenOutside && updatePossible(pieceValue, i);
      }
    }
    for (let i = 0, len2 = pieceList.length; i < len2; i++) {
      const piece = pieceList[i];
      const interval = piece.interval;
      const close = piece.close;
      if (interval) {
        if (interval[0] === -Infinity) {
          if (littleThan(close[1], value, interval[1])) {
            return i;
          }
        } else if (interval[1] === Infinity) {
          if (littleThan(close[0], interval[0], value)) {
            return i;
          }
        } else if (littleThan(close[0], interval[0], value) && littleThan(close[1], value, interval[1])) {
          return i;
        }
        findClosestWhenOutside && updatePossible(interval[0], i);
        findClosestWhenOutside && updatePossible(interval[1], i);
      }
    }
    if (findClosestWhenOutside) {
      return value === Infinity ? pieceList.length - 1 : value === -Infinity ? 0 : possibleI;
    }
    function updatePossible(val, index) {
      const newAbs = Math.abs(val - value);
      if (newAbs < abs2) {
        abs2 = newAbs;
        possibleI = index;
      }
    }
  }
}
VisualMapping9.visualHandlers = {
  color: {
    applyVisual: makeApplyVisual("color"),
    getColorMapper: function() {
      const thisOption = this.option;
      return bind(thisOption.mappingMethod === "category" ? function(value, isNormalized) {
        !isNormalized && (value = this._normalizeData(value));
        return doMapCategory.call(this, value);
      } : function(value, isNormalized, out2) {
        const returnRGBArray = !!out2;
        !isNormalized && (value = this._normalizeData(value));
        out2 = fastLerp(value, thisOption.parsedVisual, out2);
        return returnRGBArray ? out2 : stringify(out2, "rgba");
      }, this);
    },
    _normalizedToVisual: {
      linear: function(normalized) {
        return stringify(fastLerp(normalized, this.option.parsedVisual), "rgba");
      },
      category: doMapCategory,
      piecewise: function(normalized, value) {
        let result = getSpecifiedVisual.call(this, value);
        if (result == null) {
          result = stringify(fastLerp(normalized, this.option.parsedVisual), "rgba");
        }
        return result;
      },
      fixed: doMapFixed
    }
  },
  colorHue: makePartialColorVisualHandler(function(color8, value) {
    return modifyHSL(color8, value);
  }),
  colorSaturation: makePartialColorVisualHandler(function(color8, value) {
    return modifyHSL(color8, null, value);
  }),
  colorLightness: makePartialColorVisualHandler(function(color8, value) {
    return modifyHSL(color8, null, null, value);
  }),
  colorAlpha: makePartialColorVisualHandler(function(color8, value) {
    return modifyAlpha(color8, value);
  }),
  opacity: {
    applyVisual: makeApplyVisual("opacity"),
    _normalizedToVisual: createNormalizedToNumericVisual([0, 1])
  },
  liftZ: {
    applyVisual: makeApplyVisual("liftZ"),
    _normalizedToVisual: {
      linear: doMapFixed,
      category: doMapFixed,
      piecewise: doMapFixed,
      fixed: doMapFixed
    }
  },
  symbol: {
    applyVisual: function(value, getter, setter) {
      const symbolCfg = this.mapValueToVisual(value);
      setter("symbol", symbolCfg);
    },
    _normalizedToVisual: {
      linear: doMapToArray,
      category: doMapCategory,
      piecewise: function(normalized, value) {
        let result = getSpecifiedVisual.call(this, value);
        if (result == null) {
          result = doMapToArray.call(this, normalized);
        }
        return result;
      },
      fixed: doMapFixed
    }
  },
  symbolSize: {
    applyVisual: makeApplyVisual("symbolSize"),
    _normalizedToVisual: createNormalizedToNumericVisual([0, 1])
  }
};
function preprocessForPiecewise(thisOption) {
  const pieceList = thisOption.pieceList;
  thisOption.hasSpecialVisual = false;
  each(pieceList, function(piece, index) {
    piece.originIndex = index;
    if (piece.visual != null) {
      thisOption.hasSpecialVisual = true;
    }
  });
}
function preprocessForSpecifiedCategory(thisOption) {
  const categories = thisOption.categories;
  const categoryMap = thisOption.categoryMap = {};
  let visual = thisOption.visual;
  each19(categories, function(cate, index) {
    categoryMap[cate] = index;
  });
  if (!isArray(visual)) {
    const visualArr = [];
    if (isObject(visual)) {
      each19(visual, function(v4, cate) {
        const index = categoryMap[cate];
        visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v4;
      });
    } else {
      visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
    }
    visual = setVisualToOption(thisOption, visualArr);
  }
  for (let i = categories.length - 1; i >= 0; i--) {
    if (visual[i] == null) {
      delete categoryMap[categories[i]];
      categories.pop();
    }
  }
}
function normalizeVisualRange(thisOption, isCategory2) {
  const visual = thisOption.visual;
  const visualArr = [];
  if (isObject(visual)) {
    each19(visual, function(v4) {
      visualArr.push(v4);
    });
  } else if (visual != null) {
    visualArr.push(visual);
  }
  const doNotNeedPair = {
    color: 1,
    symbol: 1
  };
  if (!isCategory2 && visualArr.length === 1 && !doNotNeedPair.hasOwnProperty(thisOption.type)) {
    visualArr[1] = visualArr[0];
  }
  setVisualToOption(thisOption, visualArr);
}
function makePartialColorVisualHandler(applyValue) {
  return {
    applyVisual: function(value, getter, setter) {
      const colorChannel = this.mapValueToVisual(value);
      setter("color", applyValue(getter("color"), colorChannel));
    },
    _normalizedToVisual: createNormalizedToNumericVisual([0, 1])
  };
}
function doMapToArray(normalized) {
  const visual = this.option.visual;
  return visual[Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))] || {};
}
function makeApplyVisual(visualType) {
  return function(value, getter, setter) {
    setter(visualType, this.mapValueToVisual(value));
  };
}
function doMapCategory(normalized) {
  const visual = this.option.visual;
  return visual[this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX ? normalized % visual.length : normalized];
}
function doMapFixed() {
  return this.option.visual[0];
}
function createNormalizedToNumericVisual(sourceExtent) {
  return {
    linear: function(normalized) {
      return linearMap(normalized, sourceExtent, this.option.visual, true);
    },
    category: doMapCategory,
    piecewise: function(normalized, value) {
      let result = getSpecifiedVisual.call(this, value);
      if (result == null) {
        result = linearMap(normalized, sourceExtent, this.option.visual, true);
      }
      return result;
    },
    fixed: doMapFixed
  };
}
function getSpecifiedVisual(value) {
  const thisOption = this.option;
  const pieceList = thisOption.pieceList;
  if (thisOption.hasSpecialVisual) {
    const pieceIndex = VisualMapping9.findPieceIndex(value, pieceList);
    const piece = pieceList[pieceIndex];
    if (piece && piece.visual) {
      return piece.visual[this.type];
    }
  }
}
function setVisualToOption(thisOption, visualArr) {
  thisOption.visual = visualArr;
  if (thisOption.type === "color") {
    thisOption.parsedVisual = map2(visualArr, function(item) {
      return parse(item);
    });
  }
  return visualArr;
}
const normalizers = {
  linear: function(value) {
    return linearMap(value, this.option.dataExtent, [0, 1], true);
  },
  piecewise: function(value) {
    const pieceList = this.option.pieceList;
    const pieceIndex = VisualMapping9.findPieceIndex(value, pieceList, true);
    if (pieceIndex != null) {
      return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
    }
  },
  category: function(value) {
    const index = this.option.categories ? this.option.categoryMap[value] : value;
    return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
  },
  fixed: noop
};
function littleThan(close, a, b) {
  return close ? a <= b : a < b;
}
const VisualMapping_default = VisualMapping9;

// src/chart/treemap/treemapVisual.ts
const ITEM_STYLE_NORMAL = "itemStyle";
const inner3 = makeInner();
const treemapVisual_default = {
  seriesType: "treemap",
  reset(seriesModel) {
    const tree2 = seriesModel.getData().tree;
    const root = tree2.root;
    const seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);
    if (root.isRemoved()) {
      return;
    }
    const levelItemStyles = map2(tree2.levelModels, function(levelModel) {
      return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
    });
    travelTree(root, {}, levelItemStyles, seriesItemStyleModel, seriesModel.getViewRoot().getAncestors(), seriesModel);
  }
};
function travelTree(node, designatedVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel) {
  const nodeModel = node.getModel();
  const nodeLayout = node.getLayout();
  const data = node.hostTree.data;
  if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {
    return;
  }
  const nodeItemStyleModel = nodeModel.getModel(ITEM_STYLE_NORMAL);
  const levelItemStyle = levelItemStyles[node.depth];
  const visuals = buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel);
  const existsStyle = data.ensureUniqueItemVisual(node.dataIndex, "style");
  let borderColor = nodeItemStyleModel.get("borderColor");
  const borderColorSaturation = nodeItemStyleModel.get("borderColorSaturation");
  let thisNodeColor;
  if (borderColorSaturation != null) {
    thisNodeColor = calculateColor(visuals);
    borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
  }
  existsStyle.stroke = borderColor;
  const viewChildren = node.viewChildren;
  if (!viewChildren || !viewChildren.length) {
    thisNodeColor = calculateColor(visuals);
    existsStyle.fill = thisNodeColor;
  } else {
    const mapping = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren);
    each(viewChildren, function(child, index) {
      if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {
        const childVisual = mapVisual(nodeModel, visuals, child, index, mapping, seriesModel);
        travelTree(child, childVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel);
      }
    });
  }
}
function buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel) {
  const visuals = extend({}, designatedVisual);
  each(["color", "colorAlpha", "colorSaturation"], function(visualName) {
    let val = nodeItemStyleModel.get(visualName, true);
    val == null && levelItemStyle && (val = levelItemStyle[visualName]);
    val == null && (val = designatedVisual[visualName]);
    val == null && (val = seriesItemStyleModel.get(visualName));
    val != null && (visuals[visualName] = val);
  });
  return visuals;
}
function calculateColor(visuals) {
  let color8 = getValueVisualDefine(visuals, "color");
  if (color8) {
    const colorAlpha = getValueVisualDefine(visuals, "colorAlpha");
    const colorSaturation = getValueVisualDefine(visuals, "colorSaturation");
    if (colorSaturation) {
      color8 = modifyHSL(color8, null, null, colorSaturation);
    }
    if (colorAlpha) {
      color8 = modifyAlpha(color8, colorAlpha);
    }
    return color8;
  }
}
function calculateBorderColor(borderColorSaturation, thisNodeColor) {
  return thisNodeColor != null ? modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;
}
function getValueVisualDefine(visuals, name) {
  const value = visuals[name];
  if (value != null && value !== "none") {
    return value;
  }
}
function buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {
  if (!viewChildren || !viewChildren.length) {
    return;
  }
  const rangeVisual = getRangeVisual(nodeModel, "color") || visuals.color != null && visuals.color !== "none" && (getRangeVisual(nodeModel, "colorAlpha") || getRangeVisual(nodeModel, "colorSaturation"));
  if (!rangeVisual) {
    return;
  }
  const visualMin = nodeModel.get("visualMin");
  const visualMax = nodeModel.get("visualMax");
  const dataExtent = nodeLayout.dataExtent.slice();
  visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);
  visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);
  const colorMappingBy = nodeModel.get("colorMappingBy");
  const opt = {
    type: rangeVisual.name,
    dataExtent,
    visual: rangeVisual.range
  };
  if (opt.type === "color" && (colorMappingBy === "index" || colorMappingBy === "id")) {
    opt.mappingMethod = "category";
    opt.loop = true;
  } else {
    opt.mappingMethod = "linear";
  }
  const mapping = new VisualMapping_default(opt);
  inner3(mapping).drColorMappingBy = colorMappingBy;
  return mapping;
}
function getRangeVisual(nodeModel, name) {
  const range = nodeModel.get(name);
  return isArray(range) && range.length ? {
    name,
    range
  } : null;
}
function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
  const childVisuals = extend({}, visuals);
  if (mapping) {
    const mappingType = mapping.type;
    const colorMappingBy = mappingType === "color" && inner3(mapping).drColorMappingBy;
    const value = colorMappingBy === "index" ? index : colorMappingBy === "id" ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get("visualDimension"));
    childVisuals[mappingType] = mapping.mapValueToVisual(value);
  }
  return childVisuals;
}

// src/chart/treemap/treemapLayout.ts
const mathMax5 = Math.max;
const mathMin5 = Math.min;
const retrieveValue = retrieve;
const each3 = each;
const PATH_BORDER_WIDTH = ["itemStyle", "borderWidth"];
const PATH_GAP_WIDTH = ["itemStyle", "gapWidth"];
const PATH_UPPER_LABEL_SHOW = ["upperLabel", "show"];
const PATH_UPPER_LABEL_HEIGHT = ["upperLabel", "height"];
const treemapLayout_default = {
  seriesType: "treemap",
  reset: function(seriesModel, ecModel, api, payload) {
    const ecWidth = api.getWidth();
    const ecHeight = api.getHeight();
    const seriesOption = seriesModel.option;
    const layoutInfo = getLayoutRect(seriesModel.getBoxLayoutParams(), {
      width: api.getWidth(),
      height: api.getHeight()
    });
    const size = seriesOption.size || [];
    const containerWidth = parsePercent3(retrieveValue(layoutInfo.width, size[0]), ecWidth);
    const containerHeight = parsePercent3(retrieveValue(layoutInfo.height, size[1]), ecHeight);
    const payloadType = payload && payload.type;
    const types298 = ["treemapZoomToNode", "treemapRootToNode"];
    const targetInfo = retrieveTargetInfo(payload, types298, seriesModel);
    const rootRect = payloadType === "treemapRender" || payloadType === "treemapMove" ? payload.rootRect : null;
    const viewRoot = seriesModel.getViewRoot();
    const viewAbovePath = getPathToRoot(viewRoot);
    if (payloadType !== "treemapMove") {
      const rootSize = payloadType === "treemapZoomToNode" ? estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) : rootRect ? [rootRect.width, rootRect.height] : [containerWidth, containerHeight];
      let sort4 = seriesOption.sort;
      if (sort4 && sort4 !== "asc" && sort4 !== "desc") {
        sort4 = "desc";
      }
      const options = {
        squareRatio: seriesOption.squareRatio,
        sort: sort4,
        leafDepth: seriesOption.leafDepth
      };
      viewRoot.hostTree.clearLayouts();
      let viewRootLayout = {
        x: 0,
        y: 0,
        width: rootSize[0],
        height: rootSize[1],
        area: rootSize[0] * rootSize[1]
      };
      viewRoot.setLayout(viewRootLayout);
      squarify(viewRoot, options, false, 0);
      viewRootLayout = viewRoot.getLayout();
      each3(viewAbovePath, function(node, index) {
        const childValue = (viewAbovePath[index + 1] || viewRoot).getValue();
        node.setLayout(extend({
          dataExtent: [childValue, childValue],
          borderWidth: 0,
          upperHeight: 0
        }, viewRootLayout));
      });
    }
    const treeRoot = seriesModel.getData().tree.root;
    treeRoot.setLayout(calculateRootPosition(layoutInfo, rootRect, targetInfo), true);
    seriesModel.setLayoutInfo(layoutInfo);
    prunning(treeRoot, new BoundingRect_default(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight), viewAbovePath, viewRoot, 0);
  }
};
function squarify(node, options, hideChildren, depth) {
  let width;
  let height;
  if (node.isRemoved()) {
    return;
  }
  const thisLayout = node.getLayout();
  width = thisLayout.width;
  height = thisLayout.height;
  const nodeModel = node.getModel();
  const borderWidth = nodeModel.get(PATH_BORDER_WIDTH);
  const halfGapWidth = nodeModel.get(PATH_GAP_WIDTH) / 2;
  const upperLabelHeight = getUpperLabelHeight(nodeModel);
  const upperHeight = Math.max(borderWidth, upperLabelHeight);
  const layoutOffset = borderWidth - halfGapWidth;
  const layoutOffsetUpper = upperHeight - halfGapWidth;
  node.setLayout({
    borderWidth,
    upperHeight,
    upperLabelHeight
  }, true);
  width = mathMax5(width - 2 * layoutOffset, 0);
  height = mathMax5(height - layoutOffset - layoutOffsetUpper, 0);
  const totalArea = width * height;
  const viewChildren = initChildren2(node, nodeModel, totalArea, options, hideChildren, depth);
  if (!viewChildren.length) {
    return;
  }
  const rect = {
    x: layoutOffset,
    y: layoutOffsetUpper,
    width,
    height
  };
  let rowFixedLength = mathMin5(width, height);
  let best = Infinity;
  const row = [];
  row.area = 0;
  for (let i = 0, len2 = viewChildren.length; i < len2; ) {
    const child = viewChildren[i];
    row.push(child);
    row.area += child.getLayout().area;
    const score = worst(row, rowFixedLength, options.squareRatio);
    if (score <= best) {
      i++;
      best = score;
    } else {
      row.area -= row.pop().getLayout().area;
      position(row, rowFixedLength, rect, halfGapWidth, false);
      rowFixedLength = mathMin5(rect.width, rect.height);
      row.length = row.area = 0;
      best = Infinity;
    }
  }
  if (row.length) {
    position(row, rowFixedLength, rect, halfGapWidth, true);
  }
  if (!hideChildren) {
    const childrenVisibleMin = nodeModel.get("childrenVisibleMin");
    if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
      hideChildren = true;
    }
  }
  for (let i = 0, len2 = viewChildren.length; i < len2; i++) {
    squarify(viewChildren[i], options, hideChildren, depth + 1);
  }
}
function initChildren2(node, nodeModel, totalArea, options, hideChildren, depth) {
  let viewChildren = node.children || [];
  let orderBy = options.sort;
  orderBy !== "asc" && orderBy !== "desc" && (orderBy = null);
  const overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;
  if (hideChildren && !overLeafDepth) {
    return node.viewChildren = [];
  }
  viewChildren = filter(viewChildren, function(child) {
    return !child.isRemoved();
  });
  sort3(viewChildren, orderBy);
  const info = statistic(nodeModel, viewChildren, orderBy);
  if (info.sum === 0) {
    return node.viewChildren = [];
  }
  info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);
  if (info.sum === 0) {
    return node.viewChildren = [];
  }
  for (let i = 0, len2 = viewChildren.length; i < len2; i++) {
    const area = viewChildren[i].getValue() / info.sum * totalArea;
    viewChildren[i].setLayout({
      area
    });
  }
  if (overLeafDepth) {
    viewChildren.length && node.setLayout({
      isLeafRoot: true
    }, true);
    viewChildren.length = 0;
  }
  node.viewChildren = viewChildren;
  node.setLayout({
    dataExtent: info.dataExtent
  }, true);
  return viewChildren;
}
function filterByThreshold(nodeModel, totalArea, sum2, orderBy, orderedChildren) {
  if (!orderBy) {
    return sum2;
  }
  const visibleMin = nodeModel.get("visibleMin");
  const len2 = orderedChildren.length;
  let deletePoint = len2;
  for (let i = len2 - 1; i >= 0; i--) {
    const value = orderedChildren[orderBy === "asc" ? len2 - i - 1 : i].getValue();
    if (value / sum2 * totalArea < visibleMin) {
      deletePoint = i;
      sum2 -= value;
    }
  }
  orderBy === "asc" ? orderedChildren.splice(0, len2 - deletePoint) : orderedChildren.splice(deletePoint, len2 - deletePoint);
  return sum2;
}
function sort3(viewChildren, orderBy) {
  if (orderBy) {
    viewChildren.sort(function(a, b) {
      const diff2 = orderBy === "asc" ? a.getValue() - b.getValue() : b.getValue() - a.getValue();
      return diff2 === 0 ? orderBy === "asc" ? a.dataIndex - b.dataIndex : b.dataIndex - a.dataIndex : diff2;
    });
  }
  return viewChildren;
}
function statistic(nodeModel, children, orderBy) {
  let sum2 = 0;
  for (let i = 0, len2 = children.length; i < len2; i++) {
    sum2 += children[i].getValue();
  }
  const dimension = nodeModel.get("visualDimension");
  let dataExtent;
  if (!children || !children.length) {
    dataExtent = [NaN, NaN];
  } else if (dimension === "value" && orderBy) {
    dataExtent = [children[children.length - 1].getValue(), children[0].getValue()];
    orderBy === "asc" && dataExtent.reverse();
  } else {
    dataExtent = [Infinity, -Infinity];
    each3(children, function(child) {
      const value = child.getValue(dimension);
      value < dataExtent[0] && (dataExtent[0] = value);
      value > dataExtent[1] && (dataExtent[1] = value);
    });
  }
  return {
    sum: sum2,
    dataExtent
  };
}
function worst(row, rowFixedLength, ratio) {
  let areaMax = 0;
  let areaMin = Infinity;
  for (let i = 0, area, len2 = row.length; i < len2; i++) {
    area = row[i].getLayout().area;
    if (area) {
      area < areaMin && (areaMin = area);
      area > areaMax && (areaMax = area);
    }
  }
  const squareArea = row.area * row.area;
  const f = rowFixedLength * rowFixedLength * ratio;
  return squareArea ? mathMax5(f * areaMax / squareArea, squareArea / (f * areaMin)) : Infinity;
}
function position(row, rowFixedLength, rect, halfGapWidth, flush) {
  const idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
  const idx1WhenH = 1 - idx0WhenH;
  const xy = ["x", "y"];
  const wh = ["width", "height"];
  let last = rect[xy[idx0WhenH]];
  let rowOtherLength = rowFixedLength ? row.area / rowFixedLength : 0;
  if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
    rowOtherLength = rect[wh[idx1WhenH]];
  }
  for (let i = 0, rowLen = row.length; i < rowLen; i++) {
    const node = row[i];
    const nodeLayout = {};
    const step2 = rowOtherLength ? node.getLayout().area / rowOtherLength : 0;
    const wh1 = nodeLayout[wh[idx1WhenH]] = mathMax5(rowOtherLength - 2 * halfGapWidth, 0);
    const remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
    const modWH = i === rowLen - 1 || remain < step2 ? remain : step2;
    const wh0 = nodeLayout[wh[idx0WhenH]] = mathMax5(modWH - 2 * halfGapWidth, 0);
    nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin5(halfGapWidth, wh1 / 2);
    nodeLayout[xy[idx0WhenH]] = last + mathMin5(halfGapWidth, wh0 / 2);
    last += modWH;
    node.setLayout(nodeLayout, true);
  }
  rect[xy[idx1WhenH]] += rowOtherLength;
  rect[wh[idx1WhenH]] -= rowOtherLength;
}
function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {
  let currNode = (targetInfo || {}).node;
  const defaultSize = [containerWidth, containerHeight];
  if (!currNode || currNode === viewRoot) {
    return defaultSize;
  }
  let parent;
  const viewArea = containerWidth * containerHeight;
  let area = viewArea * seriesModel.option.zoomToNodeRatio;
  while (parent = currNode.parentNode) {
    let sum2 = 0;
    const siblings = parent.children;
    for (let i = 0, len2 = siblings.length; i < len2; i++) {
      sum2 += siblings[i].getValue();
    }
    const currNodeValue = currNode.getValue();
    if (currNodeValue === 0) {
      return defaultSize;
    }
    area *= sum2 / currNodeValue;
    const parentModel = parent.getModel();
    const borderWidth = parentModel.get(PATH_BORDER_WIDTH);
    const upperHeight = Math.max(borderWidth, getUpperLabelHeight(parentModel));
    area += 4 * borderWidth * borderWidth + (3 * borderWidth + upperHeight) * Math.pow(area, 0.5);
    area > MAX_SAFE_INTEGER && (area = MAX_SAFE_INTEGER);
    currNode = parent;
  }
  area < viewArea && (area = viewArea);
  const scale4 = Math.pow(area / viewArea, 0.5);
  return [containerWidth * scale4, containerHeight * scale4];
}
function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
  if (rootRect) {
    return {
      x: rootRect.x,
      y: rootRect.y
    };
  }
  const defaultPosition = {
    x: 0,
    y: 0
  };
  if (!targetInfo) {
    return defaultPosition;
  }
  const targetNode = targetInfo.node;
  const layout33 = targetNode.getLayout();
  if (!layout33) {
    return defaultPosition;
  }
  const targetCenter = [layout33.width / 2, layout33.height / 2];
  let node = targetNode;
  while (node) {
    const nodeLayout = node.getLayout();
    targetCenter[0] += nodeLayout.x;
    targetCenter[1] += nodeLayout.y;
    node = node.parentNode;
  }
  return {
    x: layoutInfo.width / 2 - targetCenter[0],
    y: layoutInfo.height / 2 - targetCenter[1]
  };
}
function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {
  const nodeLayout = node.getLayout();
  const nodeInViewAbovePath = viewAbovePath[depth];
  const isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;
  if (nodeInViewAbovePath && !isAboveViewRoot || depth === viewAbovePath.length && node !== viewRoot) {
    return;
  }
  node.setLayout({
    isInView: true,
    invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),
    isAboveViewRoot
  }, true);
  const childClipRect = new BoundingRect_default(clipRect.x - nodeLayout.x, clipRect.y - nodeLayout.y, clipRect.width, clipRect.height);
  each3(node.viewChildren || [], function(child) {
    prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);
  });
}
function getUpperLabelHeight(model65) {
  return model65.get(PATH_UPPER_LABEL_SHOW) ? model65.get(PATH_UPPER_LABEL_HEIGHT) : 0;
}

// src/chart/treemap.ts
registerVisual(treemapVisual_default);
registerLayout(treemapLayout_default);

// src/data/Graph.ts
function generateNodeKey(id) {
  return "_EC_" + id;
}
class Graph12 {
  constructor(directed) {
    this.type = "graph";
    this.nodes = [];
    this.edges = [];
    this._nodesMap = {};
    this._edgesMap = {};
    this._directed = directed || false;
  }
  isDirected() {
    return this._directed;
  }
  addNode(id, dataIndex) {
    id = id == null ? "" + dataIndex : "" + id;
    const nodesMap = this._nodesMap;
    if (nodesMap[generateNodeKey(id)]) {
      if (__DEV__) {
        console.error("Graph nodes have duplicate name or id");
      }
      return;
    }
    const node = new GraphNode3(id, dataIndex);
    node.hostGraph = this;
    this.nodes.push(node);
    nodesMap[generateNodeKey(id)] = node;
    return node;
  }
  getNodeByIndex(dataIndex) {
    const rawIdx = this.data.getRawIndex(dataIndex);
    return this.nodes[rawIdx];
  }
  getNodeById(id) {
    return this._nodesMap[generateNodeKey(id)];
  }
  addEdge(n1, n2, dataIndex) {
    const nodesMap = this._nodesMap;
    const edgesMap = this._edgesMap;
    if (typeof n1 === "number") {
      n1 = this.nodes[n1];
    }
    if (typeof n2 === "number") {
      n2 = this.nodes[n2];
    }
    if (!(n1 instanceof GraphNode3)) {
      n1 = nodesMap[generateNodeKey(n1)];
    }
    if (!(n2 instanceof GraphNode3)) {
      n2 = nodesMap[generateNodeKey(n2)];
    }
    if (!n1 || !n2) {
      return;
    }
    const key = n1.id + "-" + n2.id;
    if (edgesMap[key]) {
      return;
    }
    const edge = new GraphEdge2(n1, n2, dataIndex);
    edge.hostGraph = this;
    if (this._directed) {
      n1.outEdges.push(edge);
      n2.inEdges.push(edge);
    }
    n1.edges.push(edge);
    if (n1 !== n2) {
      n2.edges.push(edge);
    }
    this.edges.push(edge);
    edgesMap[key] = edge;
    return edge;
  }
  getEdgeByIndex(dataIndex) {
    const rawIdx = this.edgeData.getRawIndex(dataIndex);
    return this.edges[rawIdx];
  }
  getEdge(n1, n2) {
    if (n1 instanceof GraphNode3) {
      n1 = n1.id;
    }
    if (n2 instanceof GraphNode3) {
      n2 = n2.id;
    }
    const edgesMap = this._edgesMap;
    if (this._directed) {
      return edgesMap[n1 + "-" + n2];
    } else {
      return edgesMap[n1 + "-" + n2] || edgesMap[n2 + "-" + n1];
    }
  }
  eachNode(cb, context) {
    const nodes = this.nodes;
    const len2 = nodes.length;
    for (let i = 0; i < len2; i++) {
      if (nodes[i].dataIndex >= 0) {
        cb.call(context, nodes[i], i);
      }
    }
  }
  eachEdge(cb, context) {
    const edges = this.edges;
    const len2 = edges.length;
    for (let i = 0; i < len2; i++) {
      if (edges[i].dataIndex >= 0 && edges[i].node1.dataIndex >= 0 && edges[i].node2.dataIndex >= 0) {
        cb.call(context, edges[i], i);
      }
    }
  }
  breadthFirstTraverse(cb, startNode, direction, context) {
    if (!(startNode instanceof GraphNode3)) {
      startNode = this._nodesMap[generateNodeKey(startNode)];
    }
    if (!startNode) {
      return;
    }
    const edgeType = direction === "out" ? "outEdges" : direction === "in" ? "inEdges" : "edges";
    for (let i = 0; i < this.nodes.length; i++) {
      this.nodes[i].__visited = false;
    }
    if (cb.call(context, startNode, null)) {
      return;
    }
    const queue = [startNode];
    while (queue.length) {
      const currentNode = queue.shift();
      const edges = currentNode[edgeType];
      for (let i = 0; i < edges.length; i++) {
        const e = edges[i];
        const otherNode = e.node1 === currentNode ? e.node2 : e.node1;
        if (!otherNode.__visited) {
          if (cb.call(context, otherNode, currentNode)) {
            return;
          }
          queue.push(otherNode);
          otherNode.__visited = true;
        }
      }
    }
  }
  update() {
    const data = this.data;
    const edgeData = this.edgeData;
    const nodes = this.nodes;
    const edges = this.edges;
    for (let i = 0, len2 = nodes.length; i < len2; i++) {
      nodes[i].dataIndex = -1;
    }
    for (let i = 0, len2 = data.count(); i < len2; i++) {
      nodes[data.getRawIndex(i)].dataIndex = i;
    }
    edgeData.filterSelf(function(idx) {
      const edge = edges[edgeData.getRawIndex(idx)];
      return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
    });
    for (let i = 0, len2 = edges.length; i < len2; i++) {
      edges[i].dataIndex = -1;
    }
    for (let i = 0, len2 = edgeData.count(); i < len2; i++) {
      edges[edgeData.getRawIndex(i)].dataIndex = i;
    }
  }
  clone() {
    const graph2 = new Graph12(this._directed);
    const nodes = this.nodes;
    const edges = this.edges;
    for (let i = 0; i < nodes.length; i++) {
      graph2.addNode(nodes[i].id, nodes[i].dataIndex);
    }
    for (let i = 0; i < edges.length; i++) {
      const e = edges[i];
      graph2.addEdge(e.node1.id, e.node2.id, e.dataIndex);
    }
    return graph2;
  }
}
class GraphNode3 {
  constructor(id, dataIndex) {
    this.inEdges = [];
    this.outEdges = [];
    this.edges = [];
    this.dataIndex = -1;
    this.id = id == null ? "" : id;
    this.dataIndex = dataIndex == null ? -1 : dataIndex;
  }
  degree() {
    return this.edges.length;
  }
  inDegree() {
    return this.inEdges.length;
  }
  outDegree() {
    return this.outEdges.length;
  }
  getModel(path2) {
    if (this.dataIndex < 0) {
      return;
    }
    const graph2 = this.hostGraph;
    const itemModel = graph2.data.getItemModel(this.dataIndex);
    return itemModel.getModel(path2);
  }
  getAdjacentDataIndices() {
    const dataIndices = {
      edge: [],
      node: []
    };
    for (let i = 0; i < this.edges.length; i++) {
      const adjacentEdge = this.edges[i];
      if (adjacentEdge.dataIndex < 0) {
        continue;
      }
      dataIndices.edge.push(adjacentEdge.dataIndex);
      dataIndices.node.push(adjacentEdge.node1.dataIndex, adjacentEdge.node2.dataIndex);
    }
    return dataIndices;
  }
}
class GraphEdge2 {
  constructor(n1, n2, dataIndex) {
    this.dataIndex = -1;
    this.node1 = n1;
    this.node2 = n2;
    this.dataIndex = dataIndex == null ? -1 : dataIndex;
  }
  getModel(path2) {
    if (this.dataIndex < 0) {
      return;
    }
    const graph2 = this.hostGraph;
    const itemModel = graph2.edgeData.getItemModel(this.dataIndex);
    return itemModel.getModel(path2);
  }
  getAdjacentDataIndices() {
    return {
      edge: [this.dataIndex],
      node: [this.node1.dataIndex, this.node2.dataIndex]
    };
  }
}
function createGraphDataProxyMixin(hostName, dataName) {
  return {
    getValue(dimension) {
      const data = this[hostName][dataName];
      return data.get(data.getDimension(dimension || "value"), this.dataIndex);
    },
    setVisual(key, value) {
      this.dataIndex >= 0 && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
    },
    getVisual(key) {
      return this[hostName][dataName].getItemVisual(this.dataIndex, key);
    },
    setLayout(layout33, merge2) {
      this.dataIndex >= 0 && this[hostName][dataName].setItemLayout(this.dataIndex, layout33, merge2);
    },
    getLayout() {
      return this[hostName][dataName].getItemLayout(this.dataIndex);
    },
    getGraphicEl() {
      return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
    },
    getRawIndex() {
      return this[hostName][dataName].getRawIndex(this.dataIndex);
    }
  };
}
mixin(GraphNode3, createGraphDataProxyMixin("hostGraph", "data"));
mixin(GraphEdge2, createGraphDataProxyMixin("hostGraph", "edgeData"));
const Graph_default = Graph12;

// src/chart/helper/createGraphFromNodeEdge.ts
function createGraphFromNodeEdge_default(nodes, edges, seriesModel, directed, beforeLink) {
  const graph2 = new Graph_default(directed);
  for (let i = 0; i < nodes.length; i++) {
    graph2.addNode(retrieve(nodes[i].id, nodes[i].name, i), i);
  }
  const linkNameList = [];
  const validEdges = [];
  let linkCount = 0;
  for (let i = 0; i < edges.length; i++) {
    const link = edges[i];
    const source = link.source;
    const target = link.target;
    if (graph2.addEdge(source, target, linkCount)) {
      validEdges.push(link);
      linkNameList.push(retrieve(link.id, source + " > " + target));
      linkCount++;
    }
  }
  const coordSys = seriesModel.get("coordinateSystem");
  let nodeData;
  if (coordSys === "cartesian2d" || coordSys === "polar") {
    nodeData = createListFromArray_default(nodes, seriesModel);
  } else {
    const coordSysCtor = CoordinateSystem_default.get(coordSys);
    const coordDimensions = coordSysCtor && coordSysCtor.type !== "view" ? coordSysCtor.dimensions || [] : [];
    if (indexOf(coordDimensions, "value") < 0) {
      coordDimensions.concat(["value"]);
    }
    const dimensionNames = createDimensions_default(nodes, {
      coordDimensions
    });
    nodeData = new List_default(dimensionNames, seriesModel);
    nodeData.initData(nodes);
  }
  const edgeData = new List_default(["value"], seriesModel);
  edgeData.initData(validEdges, linkNameList);
  beforeLink && beforeLink(nodeData, edgeData);
  linkList_default({
    mainData: nodeData,
    struct: graph2,
    structAttr: "graph",
    datas: {
      node: nodeData,
      edge: edgeData
    },
    datasAttr: {
      node: "data",
      edge: "edgeData"
    }
  });
  graph2.update();
  return graph2;
}

// src/chart/graph/GraphSeries.ts
class GraphSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = GraphSeriesModel.type;
    this.hasSymbolVisual = true;
  }
  init(option) {
    super.init.apply(this, arguments);
    const self2 = this;
    function getCategoriesData() {
      return self2._categoriesData;
    }
    this.legendVisualProvider = new LegendVisualProvider_default(getCategoriesData, getCategoriesData);
    this.fillDataTextStyle(option.edges || option.links);
    this._updateCategoriesData();
  }
  mergeOption(option) {
    super.mergeOption.apply(this, arguments);
    this.fillDataTextStyle(option.edges || option.links);
    this._updateCategoriesData();
  }
  mergeDefaultAndTheme(option) {
    super.mergeDefaultAndTheme.apply(this, arguments);
    defaultEmphasis(option, "edgeLabel", ["show"]);
  }
  getInitialData(option, ecModel) {
    const edges = option.edges || option.links || [];
    const nodes = option.data || option.nodes || [];
    const self2 = this;
    if (nodes && edges) {
      return createGraphFromNodeEdge_default(nodes, edges, this, true, beforeLink).data;
    }
    function beforeLink(nodeData, edgeData) {
      nodeData.wrapMethod("getItemModel", function(model65) {
        const categoriesModels = self2._categoriesModels;
        const categoryIdx = model65.getShallow("category");
        const categoryModel = categoriesModels[categoryIdx];
        if (categoryModel) {
          categoryModel.parentModel = model65.parentModel;
          model65.parentModel = categoryModel;
        }
        return model65;
      });
      const oldGetModel = Model_default.prototype.getModel;
      function newGetModel(path2, parentModel) {
        const model65 = oldGetModel.call(this, path2, parentModel);
        model65.resolveParentPath = resolveParentPath;
        return model65;
      }
      edgeData.wrapMethod("getItemModel", function(model65) {
        model65.resolveParentPath = resolveParentPath;
        model65.getModel = newGetModel;
        return model65;
      });
      function resolveParentPath(pathArr) {
        if (pathArr && (pathArr[0] === "label" || pathArr[1] === "label")) {
          const newPathArr = pathArr.slice();
          if (pathArr[0] === "label") {
            newPathArr[0] = "edgeLabel";
          } else if (pathArr[1] === "label") {
            newPathArr[1] = "edgeLabel";
          }
          return newPathArr;
        }
        return pathArr;
      }
    }
  }
  getGraph() {
    return this.getData().graph;
  }
  getEdgeData() {
    return this.getGraph().edgeData;
  }
  getCategoriesData() {
    return this._categoriesData;
  }
  formatTooltip(dataIndex, multipleSeries, dataType) {
    if (dataType === "edge") {
      const nodeData = this.getData();
      const params = this.getDataParams(dataIndex, dataType);
      const edge = nodeData.graph.getEdgeByIndex(dataIndex);
      const sourceName = nodeData.getName(edge.node1.dataIndex);
      const targetName = nodeData.getName(edge.node2.dataIndex);
      const html = [];
      sourceName != null && html.push(sourceName);
      targetName != null && html.push(targetName);
      let htmlStr = encodeHTML(html.join(" > "));
      if (params.value) {
        htmlStr += " : " + encodeHTML(params.value);
      }
      return htmlStr;
    } else {
      return super.formatTooltip.apply(this, arguments);
    }
  }
  _updateCategoriesData() {
    const categories = map2(this.option.categories || [], function(category) {
      return category.value != null ? category : extend({
        value: 0
      }, category);
    });
    const categoriesData = new List_default(["value"], this);
    categoriesData.initData(categories);
    this._categoriesData = categoriesData;
    this._categoriesModels = categoriesData.mapArray(function(idx) {
      return categoriesData.getItemModel(idx);
    });
  }
  setZoom(zoom) {
    this.option.zoom = zoom;
  }
  setCenter(center3) {
    this.option.center = center3;
  }
  isAnimationEnabled() {
    return super.isAnimationEnabled() && !(this.get("layout") === "force" && this.get(["force", "layoutAnimation"]));
  }
}
GraphSeriesModel.type = "series.graph";
GraphSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "view",
  legendHoverLink: true,
  layout: null,
  focusNodeAdjacency: false,
  circular: {
    rotateLabel: false
  },
  force: {
    initLayout: null,
    repulsion: [0, 50],
    gravity: 0.1,
    friction: 0.6,
    edgeLength: 30,
    layoutAnimation: true
  },
  left: "center",
  top: "center",
  symbol: "circle",
  symbolSize: 10,
  edgeSymbol: ["none", "none"],
  edgeSymbolSize: 10,
  edgeLabel: {
    position: "middle",
    distance: 5
  },
  draggable: false,
  roam: false,
  center: null,
  zoom: 1,
  nodeScaleRatio: 0.6,
  label: {
    show: false,
    formatter: "{b}"
  },
  itemStyle: {},
  lineStyle: {
    color: "#aaa",
    width: 1,
    curveness: 0,
    opacity: 0.5
  },
  emphasis: {
    scale: true,
    label: {
      show: true
    }
  },
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  }
};
Series_default.registerClass(GraphSeriesModel);

// src/chart/helper/LinePath.ts
const straightLineProto = Line_default.prototype;
const bezierCurveProto = BezierCurve_default.prototype;
class StraightLineShape {
  constructor() {
    this.x1 = 0;
    this.y1 = 0;
    this.x2 = 0;
    this.y2 = 0;
    this.percent = 1;
  }
}
function isStraightLine(shape) {
  return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);
}
class ECLinePath extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "ec-line";
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new StraightLineShape();
  }
  buildPath(ctx, shape) {
    if (isStraightLine(shape)) {
      straightLineProto.buildPath.call(this, ctx, shape);
    } else {
      bezierCurveProto.buildPath.call(this, ctx, shape);
    }
  }
  pointAt(t) {
    if (isStraightLine(this.shape)) {
      return straightLineProto.pointAt.call(this, t);
    } else {
      return bezierCurveProto.pointAt.call(this, t);
    }
  }
  tangentAt(t) {
    const shape = this.shape;
    const p = isStraightLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : bezierCurveProto.tangentAt.call(this, t);
    return normalize(p, p);
  }
}
const LinePath_default = ECLinePath;

// src/chart/helper/Line.ts
const SYMBOL_CATEGORIES = ["fromSymbol", "toSymbol"];
function makeSymbolTypeKey(symbolCategory) {
  return "_" + symbolCategory + "Type";
}
function createSymbol2(name, lineData, idx) {
  const symbolType = lineData.getItemVisual(idx, name);
  const symbolSize = lineData.getItemVisual(idx, name + "Size");
  if (!symbolType || symbolType === "none") {
    return;
  }
  const symbolSizeArr = isArray(symbolSize) ? symbolSize : [symbolSize, symbolSize];
  const symbolPath = createSymbol(symbolType, -symbolSizeArr[0] / 2, -symbolSizeArr[1] / 2, symbolSizeArr[0], symbolSizeArr[1]);
  symbolPath.name = name;
  return symbolPath;
}
function createLine(points9) {
  const line3 = new LinePath_default({
    name: "line",
    subPixelOptimize: true
  });
  setLinePoints(line3.shape, points9);
  return line3;
}
function setLinePoints(targetShape, points9) {
  targetShape.x1 = points9[0][0];
  targetShape.y1 = points9[0][1];
  targetShape.x2 = points9[1][0];
  targetShape.y2 = points9[1][1];
  targetShape.percent = 1;
  const cp12 = points9[2];
  if (cp12) {
    targetShape.cpx1 = cp12[0];
    targetShape.cpy1 = cp12[1];
  } else {
    targetShape.cpx1 = NaN;
    targetShape.cpy1 = NaN;
  }
}
class Line7 extends Group_default {
  constructor(lineData, idx, seriesScope) {
    super();
    this._createLine(lineData, idx, seriesScope);
  }
  _createLine(lineData, idx, seriesScope) {
    const seriesModel = lineData.hostModel;
    const linePoints = lineData.getItemLayout(idx);
    const line3 = createLine(linePoints);
    line3.shape.percent = 0;
    initProps(line3, {
      shape: {
        percent: 1
      }
    }, seriesModel, idx);
    this.add(line3);
    each(SYMBOL_CATEGORIES, function(symbolCategory) {
      const symbol14 = createSymbol2(symbolCategory, lineData, idx);
      this.add(symbol14);
      this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);
    }, this);
    this._updateCommonStl(lineData, idx, seriesScope);
  }
  updateData(lineData, idx, seriesScope) {
    const seriesModel = lineData.hostModel;
    const line3 = this.childOfName("line");
    const linePoints = lineData.getItemLayout(idx);
    const target = {
      shape: {}
    };
    setLinePoints(target.shape, linePoints);
    updateProps(line3, target, seriesModel, idx);
    each(SYMBOL_CATEGORIES, function(symbolCategory) {
      const symbolType = lineData.getItemVisual(idx, symbolCategory);
      const key = makeSymbolTypeKey(symbolCategory);
      if (this[key] !== symbolType) {
        this.remove(this.childOfName(symbolCategory));
        const symbol14 = createSymbol2(symbolCategory, lineData, idx);
        this.add(symbol14);
      }
      this[key] = symbolType;
    }, this);
    this._updateCommonStl(lineData, idx, seriesScope);
  }
  getLinePath() {
    return this.childAt(0);
  }
  _updateCommonStl(lineData, idx, seriesScope) {
    const seriesModel = lineData.hostModel;
    const line3 = this.childOfName("line");
    let emphasisLineStyle = seriesScope && seriesScope.emphasisLineStyle;
    let blurLineStyle = seriesScope && seriesScope.blurLineStyle;
    let selectLineStyle = seriesScope && seriesScope.selectLineStyle;
    let labelStatesModels = seriesScope && seriesScope.labelStatesModels;
    if (!seriesScope || lineData.hasItemOption) {
      const itemModel = lineData.getItemModel(idx);
      emphasisLineStyle = itemModel.getModel(["emphasis", "lineStyle"]).getLineStyle();
      blurLineStyle = itemModel.getModel(["blur", "lineStyle"]).getLineStyle();
      selectLineStyle = itemModel.getModel(["select", "lineStyle"]).getLineStyle();
      labelStatesModels = getLabelStatesModels(itemModel);
    }
    const lineStyle3 = lineData.getItemVisual(idx, "style");
    const visualColor = lineStyle3.stroke;
    line3.useStyle(lineStyle3);
    line3.style.fill = null;
    line3.style.strokeNoScale = true;
    line3.ensureState("emphasis").style = emphasisLineStyle;
    line3.ensureState("blur").style = blurLineStyle;
    line3.ensureState("select").style = selectLineStyle;
    each(SYMBOL_CATEGORIES, function(symbolCategory) {
      const symbol14 = this.childOfName(symbolCategory);
      if (symbol14) {
        symbol14.setColor(visualColor);
        symbol14.style.opacity = lineStyle3.opacity;
        for (let i = 0; i < SPECIAL_STATES.length; i++) {
          const stateName = SPECIAL_STATES[i];
          const lineState = line3.getState(stateName);
          if (lineState) {
            const lineStateStyle = lineState.style || {};
            const state = symbol14.ensureState(stateName);
            const stateStyle = state.style || (state.style = {});
            if (lineStateStyle.stroke != null) {
              stateStyle[symbol14.__isEmptyBrush ? "stroke" : "fill"] = lineStateStyle.stroke;
            }
            if (lineStateStyle.opacity != null) {
              stateStyle.opacity = lineStateStyle.opacity;
            }
          }
        }
        symbol14.markRedraw();
      }
    }, this);
    const rawVal = seriesModel.getRawValue(idx);
    setLabelStyle(this, labelStatesModels, {
      labelDataIndex: idx,
      labelFetcher: {
        getFormattedLabel(dataIndex, stateName) {
          return seriesModel.getFormattedLabel(dataIndex, stateName, lineData.dataType);
        }
      },
      inheritColor: visualColor || "#000",
      defaultText: (rawVal == null ? lineData.getName(idx) : isFinite(rawVal) ? round2(rawVal) : rawVal) + ""
    });
    const label = this.getTextContent();
    if (label) {
      const labelNormalModel = labelStatesModels.normal;
      label.__align = label.style.align;
      label.__verticalAlign = label.style.verticalAlign;
      label.__position = labelNormalModel.get("position") || "middle";
      let distance2 = labelNormalModel.get("distance");
      if (!isArray(distance2)) {
        distance2 = [distance2, distance2];
      }
      label.__labelDistance = distance2;
    }
    this.setTextConfig({
      position: null,
      local: true,
      inside: false
    });
    enableHoverEmphasis(this);
  }
  highlight() {
    enterEmphasis(this);
  }
  downplay() {
    leaveEmphasis(this);
  }
  updateLayout(lineData, idx) {
    this.setLinePoints(lineData.getItemLayout(idx));
  }
  setLinePoints(points9) {
    const linePath = this.childOfName("line");
    setLinePoints(linePath.shape, points9);
    linePath.dirty();
  }
  beforeUpdate() {
    const lineGroup = this;
    const symbolFrom = lineGroup.childOfName("fromSymbol");
    const symbolTo = lineGroup.childOfName("toSymbol");
    const label = lineGroup.getTextContent();
    if (!symbolFrom && !symbolTo && (!label || label.ignore)) {
      return;
    }
    let invScale = 1;
    let parentNode = this.parent;
    while (parentNode) {
      if (parentNode.scaleX) {
        invScale /= parentNode.scaleX;
      }
      parentNode = parentNode.parent;
    }
    const line3 = lineGroup.childOfName("line");
    if (!this.__dirty && !line3.__dirty) {
      return;
    }
    const percent = line3.shape.percent;
    const fromPos = line3.pointAt(0);
    const toPos = line3.pointAt(percent);
    const d = sub([], toPos, fromPos);
    normalize(d, d);
    if (symbolFrom) {
      symbolFrom.setPosition(fromPos);
      const tangent = line3.tangentAt(0);
      symbolFrom.rotation = Math.PI / 2 - Math.atan2(tangent[1], tangent[0]);
      symbolFrom.scaleX = symbolFrom.scaleY = invScale * percent;
      symbolFrom.markRedraw();
    }
    if (symbolTo) {
      symbolTo.setPosition(toPos);
      const tangent = line3.tangentAt(1);
      symbolTo.rotation = -Math.PI / 2 - Math.atan2(tangent[1], tangent[0]);
      symbolTo.scaleX = symbolTo.scaleY = invScale * percent;
      symbolTo.markRedraw();
    }
    if (label && !label.ignore) {
      label.x = label.y = 0;
      label.originX = label.originY = 0;
      let textAlign;
      let textVerticalAlign;
      const distance2 = label.__labelDistance;
      const distanceX = distance2[0] * invScale;
      const distanceY = distance2[1] * invScale;
      const halfPercent = percent / 2;
      const tangent = line3.tangentAt(halfPercent);
      const n = [tangent[1], -tangent[0]];
      const cp = line3.pointAt(halfPercent);
      if (n[1] > 0) {
        n[0] = -n[0];
        n[1] = -n[1];
      }
      const dir3 = tangent[0] < 0 ? -1 : 1;
      if (label.__position !== "start" && label.__position !== "end") {
        let rotation = -Math.atan2(tangent[1], tangent[0]);
        if (toPos[0] < fromPos[0]) {
          rotation = Math.PI + rotation;
        }
        label.rotation = rotation;
      }
      let dy;
      switch (label.__position) {
        case "insideStartTop":
        case "insideMiddleTop":
        case "insideEndTop":
        case "middle":
          dy = -distanceY;
          textVerticalAlign = "bottom";
          break;
        case "insideStartBottom":
        case "insideMiddleBottom":
        case "insideEndBottom":
          dy = distanceY;
          textVerticalAlign = "top";
          break;
        default:
          dy = 0;
          textVerticalAlign = "middle";
      }
      switch (label.__position) {
        case "end":
          label.x = d[0] * distanceX + toPos[0];
          label.y = d[1] * distanceY + toPos[1];
          textAlign = d[0] > 0.8 ? "left" : d[0] < -0.8 ? "right" : "center";
          textVerticalAlign = d[1] > 0.8 ? "top" : d[1] < -0.8 ? "bottom" : "middle";
          break;
        case "start":
          label.x = -d[0] * distanceX + fromPos[0];
          label.y = -d[1] * distanceY + fromPos[1];
          textAlign = d[0] > 0.8 ? "right" : d[0] < -0.8 ? "left" : "center";
          textVerticalAlign = d[1] > 0.8 ? "bottom" : d[1] < -0.8 ? "top" : "middle";
          break;
        case "insideStartTop":
        case "insideStart":
        case "insideStartBottom":
          label.x = distanceX * dir3 + fromPos[0];
          label.y = fromPos[1] + dy;
          textAlign = tangent[0] < 0 ? "right" : "left";
          label.originX = -distanceX * dir3;
          label.originY = -dy;
          break;
        case "insideMiddleTop":
        case "insideMiddle":
        case "insideMiddleBottom":
        case "middle":
          label.x = cp[0];
          label.y = cp[1] + dy;
          textAlign = "center";
          label.originY = -dy;
          break;
        case "insideEndTop":
        case "insideEnd":
        case "insideEndBottom":
          label.x = -distanceX * dir3 + toPos[0];
          label.y = toPos[1] + dy;
          textAlign = tangent[0] >= 0 ? "right" : "left";
          label.originX = distanceX * dir3;
          label.originY = -dy;
          break;
      }
      label.scaleX = label.scaleY = invScale;
      label.setStyle({
        verticalAlign: label.__verticalAlign || textVerticalAlign,
        align: label.__align || textAlign
      });
    }
  }
}
const Line_default2 = Line7;

// src/chart/helper/LineDraw.ts
class LineDraw4 {
  constructor(LineCtor) {
    this.group = new Group_default();
    this._LineCtor = LineCtor || Line_default2;
  }
  isPersistent() {
    return true;
  }
  updateData(lineData) {
    const lineDraw = this;
    const group = lineDraw.group;
    const oldLineData = lineDraw._lineData;
    lineDraw._lineData = lineData;
    if (!oldLineData) {
      group.removeAll();
    }
    const seriesScope = makeSeriesScope(lineData);
    lineData.diff(oldLineData).add((idx) => {
      this._doAdd(lineData, idx, seriesScope);
    }).update((newIdx, oldIdx) => {
      this._doUpdate(oldLineData, lineData, oldIdx, newIdx, seriesScope);
    }).remove((idx) => {
      group.remove(oldLineData.getItemGraphicEl(idx));
    }).execute();
  }
  updateLayout() {
    const lineData = this._lineData;
    if (!lineData) {
      return;
    }
    lineData.eachItemGraphicEl(function(el, idx) {
      el.updateLayout(lineData, idx);
    }, this);
  }
  incrementalPrepareUpdate(lineData) {
    this._seriesScope = makeSeriesScope(lineData);
    this._lineData = null;
    this.group.removeAll();
  }
  incrementalUpdate(taskParams, lineData) {
    function updateIncrementalAndHover(el) {
      if (!el.isGroup && !isEffectObject(el)) {
        el.incremental = true;
        el.ensureState("emphasis").hoverLayer = true;
      }
    }
    for (let idx = taskParams.start; idx < taskParams.end; idx++) {
      const itemLayout = lineData.getItemLayout(idx);
      if (lineNeedsDraw(itemLayout)) {
        const el = new this._LineCtor(lineData, idx, this._seriesScope);
        el.traverse(updateIncrementalAndHover);
        this.group.add(el);
        lineData.setItemGraphicEl(idx, el);
      }
    }
  }
  remove() {
    this.group.removeAll();
  }
  _doAdd(lineData, idx, seriesScope) {
    const itemLayout = lineData.getItemLayout(idx);
    if (!lineNeedsDraw(itemLayout)) {
      return;
    }
    const el = new this._LineCtor(lineData, idx, seriesScope);
    lineData.setItemGraphicEl(idx, el);
    this.group.add(el);
  }
  _doUpdate(oldLineData, newLineData, oldIdx, newIdx, seriesScope) {
    let itemEl = oldLineData.getItemGraphicEl(oldIdx);
    if (!lineNeedsDraw(newLineData.getItemLayout(newIdx))) {
      this.group.remove(itemEl);
      return;
    }
    if (!itemEl) {
      itemEl = new this._LineCtor(newLineData, newIdx, seriesScope);
    } else {
      itemEl.updateData(newLineData, newIdx, seriesScope);
    }
    newLineData.setItemGraphicEl(newIdx, itemEl);
    this.group.add(itemEl);
  }
}
function isEffectObject(el) {
  return el.animators && el.animators.length > 0;
}
function makeSeriesScope(lineData) {
  const hostModel = lineData.hostModel;
  return {
    lineStyle: hostModel.getModel("lineStyle").getLineStyle(),
    emphasisLineStyle: hostModel.getModel(["emphasis", "lineStyle"]).getLineStyle(),
    blurLineStyle: hostModel.getModel(["blur", "lineStyle"]).getLineStyle(),
    selectLineStyle: hostModel.getModel(["select", "lineStyle"]).getLineStyle(),
    labelStatesModels: getLabelStatesModels(hostModel)
  };
}
function isPointNaN(pt) {
  return isNaN(pt[0]) || isNaN(pt[1]);
}
function lineNeedsDraw(pts) {
  return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);
}
const LineDraw_default = LineDraw4;

// src/chart/graph/graphHelper.ts
function getNodeGlobalScale(seriesModel) {
  const coordSys = seriesModel.coordinateSystem;
  if (coordSys.type !== "view") {
    return 1;
  }
  const nodeScaleRatio = seriesModel.option.nodeScaleRatio;
  const groupZoom = coordSys.scaleX;
  const roamZoom = coordSys.getZoom();
  const nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;
  return nodeScale / groupZoom;
}
function getSymbolSize(node) {
  let symbolSize = node.getVisual("symbolSize");
  if (symbolSize instanceof Array) {
    symbolSize = (symbolSize[0] + symbolSize[1]) / 2;
  }
  return +symbolSize;
}

// src/chart/graph/adjustEdge.ts
const v1 = [];
const v2 = [];
const v3 = [];
const quadraticAt2 = quadraticAt;
const v2DistSquare = distSquare;
const mathAbs2 = Math.abs;
function intersectCurveCircle(curvePoints, center3, radius) {
  const p0 = curvePoints[0];
  const p1 = curvePoints[1];
  const p2 = curvePoints[2];
  let d = Infinity;
  let t;
  const radiusSquare = radius * radius;
  let interval = 0.1;
  for (let _t = 0.1; _t <= 0.9; _t += 0.1) {
    v1[0] = quadraticAt2(p0[0], p1[0], p2[0], _t);
    v1[1] = quadraticAt2(p0[1], p1[1], p2[1], _t);
    const diff2 = mathAbs2(v2DistSquare(v1, center3) - radiusSquare);
    if (diff2 < d) {
      d = diff2;
      t = _t;
    }
  }
  for (let i = 0; i < 32; i++) {
    const next = t + interval;
    v2[0] = quadraticAt2(p0[0], p1[0], p2[0], t);
    v2[1] = quadraticAt2(p0[1], p1[1], p2[1], t);
    v3[0] = quadraticAt2(p0[0], p1[0], p2[0], next);
    v3[1] = quadraticAt2(p0[1], p1[1], p2[1], next);
    const diff2 = v2DistSquare(v2, center3) - radiusSquare;
    if (mathAbs2(diff2) < 0.01) {
      break;
    }
    const nextDiff = v2DistSquare(v3, center3) - radiusSquare;
    interval /= 2;
    if (diff2 < 0) {
      if (nextDiff >= 0) {
        t = t + interval;
      } else {
        t = t - interval;
      }
    } else {
      if (nextDiff >= 0) {
        t = t - interval;
      } else {
        t = t + interval;
      }
    }
  }
  return t;
}
function adjustEdge_default(graph2, scale4) {
  const tmp0 = [];
  const quadraticSubdivide2 = quadraticSubdivide;
  const pts = [[], [], []];
  const pts2 = [[], []];
  const v4 = [];
  scale4 /= 2;
  graph2.eachEdge(function(edge, idx) {
    const linePoints = edge.getLayout();
    const fromSymbol = edge.getVisual("fromSymbol");
    const toSymbol = edge.getVisual("toSymbol");
    if (!linePoints.__original) {
      linePoints.__original = [clone3(linePoints[0]), clone3(linePoints[1])];
      if (linePoints[2]) {
        linePoints.__original.push(clone3(linePoints[2]));
      }
    }
    const originalPoints = linePoints.__original;
    if (linePoints[2] != null) {
      copy2(pts[0], originalPoints[0]);
      copy2(pts[1], originalPoints[2]);
      copy2(pts[2], originalPoints[1]);
      if (fromSymbol && fromSymbol !== "none") {
        const symbolSize = getSymbolSize(edge.node1);
        const t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale4);
        quadraticSubdivide2(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
        pts[0][0] = tmp0[3];
        pts[1][0] = tmp0[4];
        quadraticSubdivide2(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
        pts[0][1] = tmp0[3];
        pts[1][1] = tmp0[4];
      }
      if (toSymbol && toSymbol !== "none") {
        const symbolSize = getSymbolSize(edge.node2);
        const t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale4);
        quadraticSubdivide2(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
        pts[1][0] = tmp0[1];
        pts[2][0] = tmp0[2];
        quadraticSubdivide2(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
        pts[1][1] = tmp0[1];
        pts[2][1] = tmp0[2];
      }
      copy2(linePoints[0], pts[0]);
      copy2(linePoints[1], pts[2]);
      copy2(linePoints[2], pts[1]);
    } else {
      copy2(pts2[0], originalPoints[0]);
      copy2(pts2[1], originalPoints[1]);
      sub(v4, pts2[1], pts2[0]);
      normalize(v4, v4);
      if (fromSymbol && fromSymbol !== "none") {
        const symbolSize = getSymbolSize(edge.node1);
        scaleAndAdd(pts2[0], pts2[0], v4, symbolSize * scale4);
      }
      if (toSymbol && toSymbol !== "none") {
        const symbolSize = getSymbolSize(edge.node2);
        scaleAndAdd(pts2[1], pts2[1], v4, -symbolSize * scale4);
      }
      copy2(linePoints[0], pts2[0]);
      copy2(linePoints[1], pts2[1]);
    }
  });
}

// src/chart/graph/GraphView.ts
function isViewCoordSys(coordSys) {
  return coordSys.type === "view";
}
class GraphView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = GraphView2.type;
  }
  init(ecModel, api) {
    const symbolDraw = new SymbolDraw_default();
    const lineDraw = new LineDraw_default();
    const group = this.group;
    this._controller = new RoamController_default(api.getZr());
    this._controllerHost = {
      target: group
    };
    group.add(symbolDraw.group);
    group.add(lineDraw.group);
    this._symbolDraw = symbolDraw;
    this._lineDraw = lineDraw;
    this._firstRender = true;
  }
  render(seriesModel, ecModel, api) {
    const coordSys = seriesModel.coordinateSystem;
    this._model = seriesModel;
    const symbolDraw = this._symbolDraw;
    const lineDraw = this._lineDraw;
    const group = this.group;
    if (isViewCoordSys(coordSys)) {
      const groupNewProp = {
        x: coordSys.x,
        y: coordSys.y,
        scaleX: coordSys.scaleX,
        scaleY: coordSys.scaleY
      };
      if (this._firstRender) {
        group.attr(groupNewProp);
      } else {
        updateProps(group, groupNewProp, seriesModel);
      }
    }
    adjustEdge_default(seriesModel.getGraph(), getNodeGlobalScale(seriesModel));
    const data = seriesModel.getData();
    symbolDraw.updateData(data);
    const edgeData = seriesModel.getEdgeData();
    lineDraw.updateData(edgeData);
    this._updateNodeAndLinkScale();
    this._updateController(seriesModel, ecModel, api);
    clearTimeout(this._layoutTimeout);
    const forceLayout4 = seriesModel.forceLayout;
    const layoutAnimation = seriesModel.get(["force", "layoutAnimation"]);
    if (forceLayout4) {
      this._startForceLayoutIteration(forceLayout4, layoutAnimation);
    }
    data.graph.eachNode((node) => {
      const idx = node.dataIndex;
      const el = node.getGraphicEl();
      const itemModel = node.getModel();
      el.off("drag").off("dragend");
      const draggable = itemModel.get("draggable");
      if (draggable) {
        el.on("drag", () => {
          if (forceLayout4) {
            forceLayout4.warmUp();
            !this._layouting && this._startForceLayoutIteration(forceLayout4, layoutAnimation);
            forceLayout4.setFixed(idx);
            data.setItemLayout(idx, [el.x, el.y]);
          }
        }).on("dragend", () => {
          if (forceLayout4) {
            forceLayout4.setUnfixed(idx);
          }
        });
      }
      el.setDraggable(draggable && !!forceLayout4);
      const focus = itemModel.get(["emphasis", "focus"]);
      if (focus === "adjacency") {
        getECData(el).focus = node.getAdjacentDataIndices();
      }
    });
    data.graph.eachEdge(function(edge) {
      const el = edge.getGraphicEl();
      const focus = edge.getModel().get(["emphasis", "focus"]);
      if (focus === "adjacency") {
        getECData(el).focus = {
          edge: [edge.dataIndex],
          node: [edge.node1.dataIndex, edge.node2.dataIndex]
        };
      }
    });
    const circularRotateLabel = seriesModel.get("layout") === "circular" && seriesModel.get(["circular", "rotateLabel"]);
    const cx = data.getLayout("cx");
    const cy = data.getLayout("cy");
    data.eachItemGraphicEl(function(el, idx) {
      const itemModel = data.getItemModel(idx);
      let labelRotate = itemModel.get(["label", "rotate"]) || 0;
      const symbolPath = el.getSymbolPath();
      if (circularRotateLabel) {
        const pos = data.getItemLayout(idx);
        let rad = Math.atan2(pos[1] - cy, pos[0] - cx);
        if (rad < 0) {
          rad = Math.PI * 2 + rad;
        }
        const isLeft = pos[0] < cx;
        if (isLeft) {
          rad = rad - Math.PI;
        }
        const textPosition = isLeft ? "left" : "right";
        symbolPath.setTextConfig({
          rotation: -rad,
          position: textPosition,
          origin: "center"
        });
        const emphasisState = symbolPath.ensureState("emphasis");
        extend(emphasisState.textConfig || (emphasisState.textConfig = {}), {
          position: textPosition
        });
      } else {
        symbolPath.setTextConfig({
          rotation: labelRotate *= Math.PI / 180
        });
      }
    });
    this._firstRender = false;
  }
  dispose() {
    this._controller && this._controller.dispose();
    this._controllerHost = null;
  }
  _startForceLayoutIteration(forceLayout4, layoutAnimation) {
    const self2 = this;
    (function step2() {
      forceLayout4.step(function(stopped) {
        self2.updateLayout(self2._model);
        (self2._layouting = !stopped) && (layoutAnimation ? self2._layoutTimeout = setTimeout(step2, 16) : step2());
      });
    })();
  }
  _updateController(seriesModel, ecModel, api) {
    const controller = this._controller;
    const controllerHost = this._controllerHost;
    const group = this.group;
    controller.setPointerChecker(function(e, x, y) {
      const rect = group.getBoundingRect();
      rect.applyTransform(group.transform);
      return rect.contain(x, y) && !onIrrelevantElement(e, api, seriesModel);
    });
    if (!isViewCoordSys(seriesModel.coordinateSystem)) {
      controller.disable();
      return;
    }
    controller.enable(seriesModel.get("roam"));
    controllerHost.zoomLimit = seriesModel.get("scaleLimit");
    controllerHost.zoom = seriesModel.coordinateSystem.getZoom();
    controller.off("pan").off("zoom").on("pan", (e) => {
      updateViewOnPan(controllerHost, e.dx, e.dy);
      api.dispatchAction({
        seriesId: seriesModel.id,
        type: "graphRoam",
        dx: e.dx,
        dy: e.dy
      });
    }).on("zoom", (e) => {
      updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);
      api.dispatchAction({
        seriesId: seriesModel.id,
        type: "graphRoam",
        zoom: e.scale,
        originX: e.originX,
        originY: e.originY
      });
      this._updateNodeAndLinkScale();
      adjustEdge_default(seriesModel.getGraph(), getNodeGlobalScale(seriesModel));
      this._lineDraw.updateLayout();
      api.updateLabelLayout();
    });
  }
  _updateNodeAndLinkScale() {
    const seriesModel = this._model;
    const data = seriesModel.getData();
    const nodeScale = getNodeGlobalScale(seriesModel);
    data.eachItemGraphicEl(function(el, idx) {
      el.setSymbolScale(nodeScale);
    });
  }
  updateLayout(seriesModel) {
    adjustEdge_default(seriesModel.getGraph(), getNodeGlobalScale(seriesModel));
    this._symbolDraw.updateLayout();
    this._lineDraw.updateLayout();
  }
  remove(ecModel, api) {
    this._symbolDraw && this._symbolDraw.remove();
    this._lineDraw && this._lineDraw.remove();
  }
}
GraphView2.type = "graph";
Chart_default.registerClass(GraphView2);

// src/chart/helper/focusNodeAdjacencyAction.ts
registerAction({
  type: "focusNodeAdjacency",
  event: "focusNodeAdjacency",
  update: "series:focusNodeAdjacency"
}, function() {
});
registerAction({
  type: "unfocusNodeAdjacency",
  event: "unfocusNodeAdjacency",
  update: "series:unfocusNodeAdjacency"
}, function() {
});

// src/chart/graph/graphAction.ts
const actionInfo = {
  type: "graphRoam",
  event: "graphRoam",
  update: "none"
};
registerAction(actionInfo, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "series",
    query: payload
  }, function(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    const res = updateCenterAndZoom(coordSys, payload);
    seriesModel.setCenter && seriesModel.setCenter(res.center);
    seriesModel.setZoom && seriesModel.setZoom(res.zoom);
  });
});

// src/chart/graph/categoryFilter.ts
function categoryFilter_default(ecModel) {
  const legendModels = ecModel.findComponents({
    mainType: "legend"
  });
  if (!legendModels || !legendModels.length) {
    return;
  }
  ecModel.eachSeriesByType("graph", function(graphSeries) {
    const categoriesData = graphSeries.getCategoriesData();
    const graph2 = graphSeries.getGraph();
    const data = graph2.data;
    const categoryNames = categoriesData.mapArray(categoriesData.getName);
    data.filterSelf(function(idx) {
      const model65 = data.getItemModel(idx);
      let category = model65.getShallow("category");
      if (category != null) {
        if (typeof category === "number") {
          category = categoryNames[category];
        }
        for (let i = 0; i < legendModels.length; i++) {
          if (!legendModels[i].isSelected(category)) {
            return false;
          }
        }
      }
      return true;
    });
  });
}

// src/chart/graph/categoryVisual.ts
function categoryVisual_default(ecModel) {
  const paletteScope = {};
  ecModel.eachSeriesByType("graph", function(seriesModel) {
    const categoriesData = seriesModel.getCategoriesData();
    const data = seriesModel.getData();
    const categoryNameIdxMap = {};
    categoriesData.each(function(idx) {
      const name = categoriesData.getName(idx);
      categoryNameIdxMap["ec-" + name] = idx;
      const itemModel = categoriesData.getItemModel(idx);
      const style2 = itemModel.getModel("itemStyle").getItemStyle();
      if (!style2.fill) {
        style2.fill = seriesModel.getColorFromPalette(name, paletteScope);
      }
      categoriesData.setItemVisual(idx, "style", style2);
      const symbolVisualList = ["symbol", "symbolSize", "symbolKeepAspect"];
      for (let i = 0; i < symbolVisualList.length; i++) {
        const symbolVisual = itemModel.getShallow(symbolVisualList[i], true);
        if (symbolVisual != null) {
          categoriesData.setItemVisual(idx, symbolVisualList[i], symbolVisual);
        }
      }
    });
    if (categoriesData.count()) {
      data.each(function(idx) {
        const model65 = data.getItemModel(idx);
        let categoryIdx = model65.getShallow("category");
        if (categoryIdx != null) {
          if (typeof categoryIdx === "string") {
            categoryIdx = categoryNameIdxMap["ec-" + categoryIdx];
          }
          const categoryStyle = categoriesData.getItemVisual(categoryIdx, "style");
          const style2 = data.ensureUniqueItemVisual(idx, "style");
          extend(style2, categoryStyle);
          const visualList = ["symbol", "symbolSize", "symbolKeepAspect"];
          for (let i = 0; i < visualList.length; i++) {
            data.setItemVisual(idx, visualList[i], categoriesData.getItemVisual(categoryIdx, visualList[i]));
          }
        }
      });
    }
  });
}

// src/chart/graph/edgeVisual.ts
function normalize2(a) {
  if (!(a instanceof Array)) {
    a = [a, a];
  }
  return a;
}
function edgeVisual_default(ecModel) {
  ecModel.eachSeriesByType("graph", function(seriesModel) {
    const graph2 = seriesModel.getGraph();
    const edgeData = seriesModel.getEdgeData();
    const symbolType = normalize2(seriesModel.get("edgeSymbol"));
    const symbolSize = normalize2(seriesModel.get("edgeSymbolSize"));
    edgeData.setVisual("fromSymbol", symbolType && symbolType[0]);
    edgeData.setVisual("toSymbol", symbolType && symbolType[1]);
    edgeData.setVisual("fromSymbolSize", symbolSize && symbolSize[0]);
    edgeData.setVisual("toSymbolSize", symbolSize && symbolSize[1]);
    edgeData.setVisual("style", seriesModel.getModel("lineStyle").getLineStyle());
    edgeData.each(function(idx) {
      const itemModel = edgeData.getItemModel(idx);
      const edge = graph2.getEdgeByIndex(idx);
      const symbolType2 = normalize2(itemModel.getShallow("symbol", true));
      const symbolSize2 = normalize2(itemModel.getShallow("symbolSize", true));
      const style2 = itemModel.getModel("lineStyle").getLineStyle();
      const existsStyle = edgeData.ensureUniqueItemVisual(idx, "style");
      extend(existsStyle, style2);
      switch (existsStyle.stroke) {
        case "source": {
          const nodeStyle = edge.node1.getVisual("style");
          existsStyle.stroke = nodeStyle && nodeStyle.fill;
          break;
        }
        case "target": {
          const nodeStyle = edge.node2.getVisual("style");
          existsStyle.stroke = nodeStyle && nodeStyle.fill;
          break;
        }
      }
      symbolType2[0] && edge.setVisual("fromSymbol", symbolType2[0]);
      symbolType2[1] && edge.setVisual("toSymbol", symbolType2[1]);
      symbolSize2[0] && edge.setVisual("fromSymbolSize", symbolSize2[0]);
      symbolSize2[1] && edge.setVisual("toSymbolSize", symbolSize2[1]);
    });
  });
}

// src/chart/graph/simpleLayoutHelper.ts
function simpleLayout2(seriesModel) {
  const coordSys = seriesModel.coordinateSystem;
  if (coordSys && coordSys.type !== "view") {
    return;
  }
  const graph2 = seriesModel.getGraph();
  graph2.eachNode(function(node) {
    const model65 = node.getModel();
    node.setLayout([+model65.get("x"), +model65.get("y")]);
  });
  simpleLayoutEdge(graph2);
}
function simpleLayoutEdge(graph2) {
  graph2.eachEdge(function(edge, idx) {
    const curveness = edge.getModel().get(["lineStyle", "curveness"]) || 0;
    const p1 = clone3(edge.node1.getLayout());
    const p2 = clone3(edge.node2.getLayout());
    const points9 = [p1, p2];
    if (+curveness) {
      points9.push([(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness]);
    }
    edge.setLayout(points9);
  });
}

// src/chart/graph/simpleLayout.ts
function simpleLayout_default(ecModel, api) {
  ecModel.eachSeriesByType("graph", function(seriesModel) {
    const layout33 = seriesModel.get("layout");
    const coordSys = seriesModel.coordinateSystem;
    if (coordSys && coordSys.type !== "view") {
      const data = seriesModel.getData();
      let dimensions = [];
      each(coordSys.dimensions, function(coordDim) {
        dimensions = dimensions.concat(data.mapDimensionsAll(coordDim));
      });
      for (let dataIndex = 0; dataIndex < data.count(); dataIndex++) {
        const value = [];
        let hasValue = false;
        for (let i = 0; i < dimensions.length; i++) {
          const val = data.get(dimensions[i], dataIndex);
          if (!isNaN(val)) {
            hasValue = true;
          }
          value.push(val);
        }
        if (hasValue) {
          data.setItemLayout(dataIndex, coordSys.dataToPoint(value));
        } else {
          data.setItemLayout(dataIndex, [NaN, NaN]);
        }
      }
      simpleLayoutEdge(data.graph);
    } else if (!layout33 || layout33 === "none") {
      simpleLayout2(seriesModel);
    }
  });
}

// src/chart/graph/circularLayoutHelper.ts
const PI7 = Math.PI;
const _symbolRadiansHalf = [];
function circularLayout2(seriesModel, basedOn) {
  const coordSys = seriesModel.coordinateSystem;
  if (coordSys && coordSys.type !== "view") {
    return;
  }
  const rect = coordSys.getBoundingRect();
  const nodeData = seriesModel.getData();
  const graph2 = nodeData.graph;
  const cx = rect.width / 2 + rect.x;
  const cy = rect.height / 2 + rect.y;
  const r = Math.min(rect.width, rect.height) / 2;
  const count2 = nodeData.count();
  nodeData.setLayout({
    cx,
    cy
  });
  if (!count2) {
    return;
  }
  _layoutNodesBasedOn[basedOn](seriesModel, graph2, nodeData, r, cx, cy, count2);
  graph2.eachEdge(function(edge) {
    let curveness = edge.getModel().get(["lineStyle", "curveness"]) || 0;
    const p1 = clone3(edge.node1.getLayout());
    const p2 = clone3(edge.node2.getLayout());
    let cp12;
    const x12 = (p1[0] + p2[0]) / 2;
    const y12 = (p1[1] + p2[1]) / 2;
    if (+curveness) {
      curveness *= 3;
      cp12 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];
    }
    edge.setLayout([p1, p2, cp12]);
  });
}
const _layoutNodesBasedOn = {
  value(seriesModel, graph2, nodeData, r, cx, cy, count2) {
    let angle = 0;
    const sum2 = nodeData.getSum("value");
    const unitAngle = Math.PI * 2 / (sum2 || count2);
    graph2.eachNode(function(node) {
      const value = node.getValue("value");
      const radianHalf = unitAngle * (sum2 ? value : 1) / 2;
      angle += radianHalf;
      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);
      angle += radianHalf;
    });
  },
  symbolSize(seriesModel, graph2, nodeData, r, cx, cy, count2) {
    let sumRadian = 0;
    _symbolRadiansHalf.length = count2;
    const nodeScale = getNodeGlobalScale(seriesModel);
    graph2.eachNode(function(node) {
      let symbolSize = getSymbolSize(node);
      isNaN(symbolSize) && (symbolSize = 2);
      symbolSize < 0 && (symbolSize = 0);
      symbolSize *= nodeScale;
      let symbolRadianHalf = Math.asin(symbolSize / 2 / r);
      isNaN(symbolRadianHalf) && (symbolRadianHalf = PI7 / 2);
      _symbolRadiansHalf[node.dataIndex] = symbolRadianHalf;
      sumRadian += symbolRadianHalf * 2;
    });
    const halfRemainRadian = (2 * PI7 - sumRadian) / count2 / 2;
    let angle = 0;
    graph2.eachNode(function(node) {
      const radianHalf = halfRemainRadian + _symbolRadiansHalf[node.dataIndex];
      angle += radianHalf;
      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);
      angle += radianHalf;
    });
  }
};

// src/chart/graph/circularLayout.ts
function circularLayout_default(ecModel) {
  ecModel.eachSeriesByType("graph", function(seriesModel) {
    if (seriesModel.get("layout") === "circular") {
      circularLayout2(seriesModel, "symbolSize");
    }
  });
}

// src/chart/graph/forceHelper.ts
const scaleAndAdd2 = scaleAndAdd;
function forceLayout3(inNodes, inEdges, opts) {
  const nodes = inNodes;
  const edges = inEdges;
  const rect = opts.rect;
  const width = rect.width;
  const height = rect.height;
  const center3 = [rect.x + width / 2, rect.y + height / 2];
  const gravity = opts.gravity == null ? 0.1 : opts.gravity;
  for (let i = 0; i < nodes.length; i++) {
    const n = nodes[i];
    if (!n.p) {
      n.p = create2(width * (Math.random() - 0.5) + center3[0], height * (Math.random() - 0.5) + center3[1]);
    }
    n.pp = clone3(n.p);
    n.edges = null;
  }
  const initialFriction = opts.friction == null ? 0.6 : opts.friction;
  let friction = initialFriction;
  let beforeStepCallback;
  let afterStepCallback;
  return {
    warmUp: function() {
      friction = initialFriction * 0.8;
    },
    setFixed: function(idx) {
      nodes[idx].fixed = true;
    },
    setUnfixed: function(idx) {
      nodes[idx].fixed = false;
    },
    beforeStep: function(cb) {
      beforeStepCallback = cb;
    },
    afterStep: function(cb) {
      afterStepCallback = cb;
    },
    step: function(cb) {
      beforeStepCallback && beforeStepCallback(nodes, edges);
      const v12 = [];
      const nLen = nodes.length;
      for (let i = 0; i < edges.length; i++) {
        const e = edges[i];
        if (e.ignoreForceLayout) {
          continue;
        }
        const n1 = e.n1;
        const n2 = e.n2;
        sub(v12, n2.p, n1.p);
        const d = len(v12) - e.d;
        let w = n2.w / (n1.w + n2.w);
        if (isNaN(w)) {
          w = 0;
        }
        normalize(v12, v12);
        !n1.fixed && scaleAndAdd2(n1.p, n1.p, v12, w * d * friction);
        !n2.fixed && scaleAndAdd2(n2.p, n2.p, v12, -(1 - w) * d * friction);
      }
      for (let i = 0; i < nLen; i++) {
        const n = nodes[i];
        if (!n.fixed) {
          sub(v12, center3, n.p);
          scaleAndAdd2(n.p, n.p, v12, gravity * friction);
        }
      }
      for (let i = 0; i < nLen; i++) {
        const n1 = nodes[i];
        for (let j = i + 1; j < nLen; j++) {
          const n2 = nodes[j];
          sub(v12, n2.p, n1.p);
          let d = len(v12);
          if (d === 0) {
            set(v12, Math.random() - 0.5, Math.random() - 0.5);
            d = 1;
          }
          const repFact = (n1.rep + n2.rep) / d / d;
          !n1.fixed && scaleAndAdd2(n1.pp, n1.pp, v12, repFact);
          !n2.fixed && scaleAndAdd2(n2.pp, n2.pp, v12, -repFact);
        }
      }
      const v4 = [];
      for (let i = 0; i < nLen; i++) {
        const n = nodes[i];
        if (!n.fixed) {
          sub(v4, n.p, n.pp);
          scaleAndAdd2(n.p, n.p, v4, friction);
          copy2(n.pp, n.p);
        }
      }
      friction = friction * 0.992;
      const finished = friction < 0.01;
      afterStepCallback && afterStepCallback(nodes, edges, finished);
      cb && cb(finished);
    }
  };
}

// src/chart/graph/forceLayout.ts
function forceLayout_default(ecModel) {
  ecModel.eachSeriesByType("graph", function(graphSeries) {
    const coordSys = graphSeries.coordinateSystem;
    if (coordSys && coordSys.type !== "view") {
      return;
    }
    if (graphSeries.get("layout") === "force") {
      const preservedPoints = graphSeries.preservedPoints || {};
      const graph2 = graphSeries.getGraph();
      const nodeData = graph2.data;
      const edgeData = graph2.edgeData;
      const forceModel = graphSeries.getModel("force");
      const initLayout = forceModel.get("initLayout");
      if (graphSeries.preservedPoints) {
        nodeData.each(function(idx) {
          const id = nodeData.getId(idx);
          nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
        });
      } else if (!initLayout || initLayout === "none") {
        simpleLayout2(graphSeries);
      } else if (initLayout === "circular") {
        circularLayout2(graphSeries, "value");
      }
      const nodeDataExtent = nodeData.getDataExtent("value");
      const edgeDataExtent = edgeData.getDataExtent("value");
      const repulsion = forceModel.get("repulsion");
      const edgeLength = forceModel.get("edgeLength");
      const repulsionArr = isArray(repulsion) ? repulsion : [repulsion, repulsion];
      let edgeLengthArr = isArray(edgeLength) ? edgeLength : [edgeLength, edgeLength];
      edgeLengthArr = [edgeLengthArr[1], edgeLengthArr[0]];
      const nodes = nodeData.mapArray("value", function(value, idx) {
        const point = nodeData.getItemLayout(idx);
        let rep = linearMap(value, nodeDataExtent, repulsionArr);
        if (isNaN(rep)) {
          rep = (repulsionArr[0] + repulsionArr[1]) / 2;
        }
        return {
          w: rep,
          rep,
          fixed: nodeData.getItemModel(idx).get("fixed"),
          p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point
        };
      });
      const edges = edgeData.mapArray("value", function(value, idx) {
        const edge = graph2.getEdgeByIndex(idx);
        let d = linearMap(value, edgeDataExtent, edgeLengthArr);
        if (isNaN(d)) {
          d = (edgeLengthArr[0] + edgeLengthArr[1]) / 2;
        }
        const edgeModel = edge.getModel();
        return {
          n1: nodes[edge.node1.dataIndex],
          n2: nodes[edge.node2.dataIndex],
          d,
          curveness: edgeModel.get(["lineStyle", "curveness"]) || 0,
          ignoreForceLayout: edgeModel.get("ignoreForceLayout")
        };
      });
      const rect = coordSys.getBoundingRect();
      const forceInstance = forceLayout3(nodes, edges, {
        rect,
        gravity: forceModel.get("gravity"),
        friction: forceModel.get("friction")
      });
      forceInstance.beforeStep(function(nodes2, edges2) {
        for (let i = 0, l = nodes2.length; i < l; i++) {
          if (nodes2[i].fixed) {
            copy2(nodes2[i].p, graph2.getNodeByIndex(i).getLayout());
          }
        }
      });
      forceInstance.afterStep(function(nodes2, edges2, stopped) {
        for (let i = 0, l = nodes2.length; i < l; i++) {
          if (!nodes2[i].fixed) {
            graph2.getNodeByIndex(i).setLayout(nodes2[i].p);
          }
          preservedPoints[nodeData.getId(i)] = nodes2[i].p;
        }
        for (let i = 0, l = edges2.length; i < l; i++) {
          const e = edges2[i];
          const edge = graph2.getEdgeByIndex(i);
          const p1 = e.n1.p;
          const p2 = e.n2.p;
          let points9 = edge.getLayout();
          points9 = points9 ? points9.slice() : [];
          points9[0] = points9[0] || [];
          points9[1] = points9[1] || [];
          copy2(points9[0], p1);
          copy2(points9[1], p2);
          if (+e.curveness) {
            points9[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];
          }
          edge.setLayout(points9);
        }
      });
      graphSeries.forceLayout = forceInstance;
      graphSeries.preservedPoints = preservedPoints;
      forceInstance.step();
    } else {
      graphSeries.forceLayout = null;
    }
  });
}

// src/chart/graph/createView.ts
function getViewRect2(seriesModel, api, aspect) {
  const option = extend(seriesModel.getBoxLayoutParams(), {
    aspect
  });
  return getLayoutRect(option, {
    width: api.getWidth(),
    height: api.getHeight()
  });
}
function createView_default(ecModel, api) {
  const viewList = [];
  ecModel.eachSeriesByType("graph", function(seriesModel) {
    const coordSysType = seriesModel.get("coordinateSystem");
    if (!coordSysType || coordSysType === "view") {
      const data = seriesModel.getData();
      const positions = data.mapArray(function(idx) {
        const itemModel = data.getItemModel(idx);
        return [+itemModel.get("x"), +itemModel.get("y")];
      });
      let min4 = [];
      let max4 = [];
      fromPoints(positions, min4, max4);
      if (max4[0] - min4[0] === 0) {
        max4[0] += 1;
        min4[0] -= 1;
      }
      if (max4[1] - min4[1] === 0) {
        max4[1] += 1;
        min4[1] -= 1;
      }
      const aspect = (max4[0] - min4[0]) / (max4[1] - min4[1]);
      const viewRect2 = getViewRect2(seriesModel, api, aspect);
      if (isNaN(aspect)) {
        min4 = [viewRect2.x, viewRect2.y];
        max4 = [viewRect2.x + viewRect2.width, viewRect2.y + viewRect2.height];
      }
      const bbWidth = max4[0] - min4[0];
      const bbHeight = max4[1] - min4[1];
      const viewWidth = viewRect2.width;
      const viewHeight = viewRect2.height;
      const viewCoordSys = seriesModel.coordinateSystem = new View_default();
      viewCoordSys.zoomLimit = seriesModel.get("scaleLimit");
      viewCoordSys.setBoundingRect(min4[0], min4[1], bbWidth, bbHeight);
      viewCoordSys.setViewRect(viewRect2.x, viewRect2.y, viewWidth, viewHeight);
      viewCoordSys.setCenter(seriesModel.get("center"));
      viewCoordSys.setZoom(seriesModel.get("zoom"));
      viewList.push(viewCoordSys);
    }
  });
  return viewList;
}

// src/chart/graph.ts
registerProcessor(categoryFilter_default);
registerVisual(categoryVisual_default);
registerVisual(edgeVisual_default);
registerLayout(simpleLayout_default);
registerLayout(PRIORITY.VISUAL.POST_CHART_LAYOUT, circularLayout_default);
registerLayout(forceLayout_default);
registerCoordinateSystem("graphView", {
  dimensions: View_default.dimensions,
  create: createView_default
});

// src/chart/gauge/GaugeSeries.ts
class GaugeSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = GaugeSeriesModel.type;
  }
  getInitialData(option, ecModel) {
    return createListSimply_default(this, ["value"]);
  }
}
GaugeSeriesModel.type = "series.gauge";
GaugeSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  center: ["50%", "50%"],
  legendHoverLink: true,
  radius: "75%",
  startAngle: 225,
  endAngle: -45,
  clockwise: true,
  min: 0,
  max: 100,
  splitNumber: 10,
  axisLine: {
    show: true,
    lineStyle: {
      color: [[0.2, "#91c7ae"], [0.8, "#63869e"], [1, "#c23531"]],
      width: 30
    }
  },
  splitLine: {
    show: true,
    length: 30,
    lineStyle: {
      color: "#eee",
      width: 2,
      type: "solid"
    }
  },
  axisTick: {
    show: true,
    splitNumber: 5,
    length: 8,
    lineStyle: {
      color: "#eee",
      width: 1,
      type: "solid"
    }
  },
  axisLabel: {
    show: true,
    distance: 5,
    color: "auto"
  },
  pointer: {
    show: true,
    length: "80%",
    width: 8
  },
  itemStyle: {
    color: "auto"
  },
  title: {
    show: true,
    offsetCenter: [0, "-40%"],
    color: "#333",
    fontSize: 15
  },
  detail: {
    show: true,
    backgroundColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    borderColor: "#ccc",
    width: 100,
    height: null,
    padding: [5, 10],
    offsetCenter: [0, "40%"],
    color: "auto",
    fontSize: 30
  }
};
Series_default.registerClass(GaugeSeriesModel);

// src/chart/gauge/PointerPath.ts
class PointerShape {
  constructor() {
    this.angle = 0;
    this.width = 10;
    this.r = 10;
    this.x = 0;
    this.y = 0;
  }
}
class PointerPath2 extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "pointer";
  }
  getDefaultShape() {
    return new PointerShape();
  }
  buildPath(ctx, shape) {
    const mathCos5 = Math.cos;
    const mathSin5 = Math.sin;
    const r = shape.r;
    const width = shape.width;
    let angle = shape.angle;
    const x = shape.x - mathCos5(angle) * width * (width >= r / 3 ? 1 : 2);
    const y = shape.y - mathSin5(angle) * width * (width >= r / 3 ? 1 : 2);
    angle = shape.angle - Math.PI / 2;
    ctx.moveTo(x, y);
    ctx.lineTo(shape.x + mathCos5(angle) * width, shape.y + mathSin5(angle) * width);
    ctx.lineTo(shape.x + mathCos5(shape.angle) * r, shape.y + mathSin5(shape.angle) * r);
    ctx.lineTo(shape.x - mathCos5(angle) * width, shape.y - mathSin5(angle) * width);
    ctx.lineTo(x, y);
  }
}

// src/chart/gauge/GaugeView.ts
function parsePosition(seriesModel, api) {
  const center3 = seriesModel.get("center");
  const width = api.getWidth();
  const height = api.getHeight();
  const size = Math.min(width, height);
  const cx = parsePercent3(center3[0], api.getWidth());
  const cy = parsePercent3(center3[1], api.getHeight());
  const r = parsePercent3(seriesModel.get("radius"), size / 2);
  return {
    cx,
    cy,
    r
  };
}
function formatLabel(value, labelFormatter) {
  let label = value == null ? "" : value + "";
  if (labelFormatter) {
    if (typeof labelFormatter === "string") {
      label = labelFormatter.replace("{value}", label);
    } else if (typeof labelFormatter === "function") {
      label = labelFormatter(value);
    }
  }
  return label;
}
const PI27 = Math.PI * 2;
class GaugeView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = GaugeView2.type;
  }
  render(seriesModel, ecModel, api) {
    this.group.removeAll();
    const colorList = seriesModel.get(["axisLine", "lineStyle", "color"]);
    const posInfo = parsePosition(seriesModel, api);
    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);
  }
  dispose() {
  }
  _renderMain(seriesModel, ecModel, api, colorList, posInfo) {
    const group = this.group;
    const axisLineModel = seriesModel.getModel("axisLine");
    const lineStyleModel = axisLineModel.getModel("lineStyle");
    const clockwise = seriesModel.get("clockwise");
    let startAngle = -seriesModel.get("startAngle") / 180 * Math.PI;
    let endAngle = -seriesModel.get("endAngle") / 180 * Math.PI;
    const angleRangeSpan = (endAngle - startAngle) % PI27;
    let prevEndAngle = startAngle;
    const axisLineWidth = lineStyleModel.get("width");
    const showAxis = axisLineModel.get("show");
    for (let i = 0; showAxis && i < colorList.length; i++) {
      const percent = Math.min(Math.max(colorList[i][0], 0), 1);
      endAngle = startAngle + angleRangeSpan * percent;
      const sector = new Sector_default({
        shape: {
          startAngle: prevEndAngle,
          endAngle,
          cx: posInfo.cx,
          cy: posInfo.cy,
          clockwise,
          r0: posInfo.r - axisLineWidth,
          r: posInfo.r
        },
        silent: true
      });
      sector.setStyle({
        fill: colorList[i][1]
      });
      sector.setStyle(lineStyleModel.getLineStyle(["color", "width"]));
      group.add(sector);
      prevEndAngle = endAngle;
    }
    const getColor = function(percent) {
      if (percent <= 0) {
        return colorList[0][1];
      }
      let i;
      for (i = 0; i < colorList.length; i++) {
        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {
          return colorList[i][1];
        }
      }
      return colorList[i - 1][1];
    };
    if (!clockwise) {
      const tmp = startAngle;
      startAngle = endAngle;
      endAngle = tmp;
    }
    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);
    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);
    this._renderTitle(seriesModel, ecModel, api, getColor, posInfo);
    this._renderDetail(seriesModel, ecModel, api, getColor, posInfo);
  }
  _renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
    const group = this.group;
    const cx = posInfo.cx;
    const cy = posInfo.cy;
    const r = posInfo.r;
    const minVal = +seriesModel.get("min");
    const maxVal = +seriesModel.get("max");
    const splitLineModel = seriesModel.getModel("splitLine");
    const tickModel = seriesModel.getModel("axisTick");
    const labelModel = seriesModel.getModel("axisLabel");
    const splitNumber = seriesModel.get("splitNumber");
    const subSplitNumber = tickModel.get("splitNumber");
    const splitLineLen = parsePercent3(splitLineModel.get("length"), r);
    const tickLen = parsePercent3(tickModel.get("length"), r);
    let angle = startAngle;
    const step2 = (endAngle - startAngle) / splitNumber;
    const subStep = step2 / subSplitNumber;
    const splitLineStyle = splitLineModel.getModel("lineStyle").getLineStyle();
    const tickLineStyle = tickModel.getModel("lineStyle").getLineStyle();
    let unitX;
    let unitY;
    for (let i = 0; i <= splitNumber; i++) {
      unitX = Math.cos(angle);
      unitY = Math.sin(angle);
      if (splitLineModel.get("show")) {
        const splitLine = new Line_default({
          shape: {
            x1: unitX * r + cx,
            y1: unitY * r + cy,
            x2: unitX * (r - splitLineLen) + cx,
            y2: unitY * (r - splitLineLen) + cy
          },
          style: splitLineStyle,
          silent: true
        });
        if (splitLineStyle.stroke === "auto") {
          splitLine.setStyle({
            stroke: getColor(i / splitNumber)
          });
        }
        group.add(splitLine);
      }
      if (labelModel.get("show")) {
        const label = formatLabel(round2(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get("formatter"));
        const distance2 = labelModel.get("distance");
        const autoColor = getColor(i / splitNumber);
        group.add(new Text_default({
          style: createTextStyle(labelModel, {
            text: label,
            x: unitX * (r - splitLineLen - distance2) + cx,
            y: unitY * (r - splitLineLen - distance2) + cy,
            verticalAlign: unitY < -0.4 ? "top" : unitY > 0.4 ? "bottom" : "middle",
            align: unitX < -0.4 ? "left" : unitX > 0.4 ? "right" : "center"
          }, {
            inheritColor: autoColor
          }),
          silent: true
        }));
      }
      if (tickModel.get("show") && i !== splitNumber) {
        for (let j = 0; j <= subSplitNumber; j++) {
          unitX = Math.cos(angle);
          unitY = Math.sin(angle);
          const tickLine = new Line_default({
            shape: {
              x1: unitX * r + cx,
              y1: unitY * r + cy,
              x2: unitX * (r - tickLen) + cx,
              y2: unitY * (r - tickLen) + cy
            },
            silent: true,
            style: tickLineStyle
          });
          if (tickLineStyle.stroke === "auto") {
            tickLine.setStyle({
              stroke: getColor((i + j / subSplitNumber) / splitNumber)
            });
          }
          group.add(tickLine);
          angle += subStep;
        }
        angle -= subStep;
      } else {
        angle += step2;
      }
    }
  }
  _renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
    const group = this.group;
    const oldData = this._data;
    if (!seriesModel.get(["pointer", "show"])) {
      oldData && oldData.eachItemGraphicEl(function(el) {
        group.remove(el);
      });
      return;
    }
    const valueExtent = [+seriesModel.get("min"), +seriesModel.get("max")];
    const angleExtent = [startAngle, endAngle];
    const data = seriesModel.getData();
    const valueDim = data.mapDimension("value");
    data.diff(oldData).add(function(idx) {
      const pointer = new PointerPath2({
        shape: {
          angle: startAngle
        }
      });
      initProps(pointer, {
        shape: {
          angle: linearMap(data.get(valueDim, idx), valueExtent, angleExtent, true)
        }
      }, seriesModel);
      group.add(pointer);
      data.setItemGraphicEl(idx, pointer);
    }).update(function(newIdx, oldIdx) {
      const pointer = oldData.getItemGraphicEl(oldIdx);
      updateProps(pointer, {
        shape: {
          angle: linearMap(data.get(valueDim, newIdx), valueExtent, angleExtent, true)
        }
      }, seriesModel);
      group.add(pointer);
      data.setItemGraphicEl(newIdx, pointer);
    }).remove(function(idx) {
      const pointer = oldData.getItemGraphicEl(idx);
      group.remove(pointer);
    }).execute();
    data.eachItemGraphicEl(function(pointer, idx) {
      const itemModel = data.getItemModel(idx);
      const pointerModel = itemModel.getModel("pointer");
      const emphasisModel = itemModel.getModel("emphasis");
      pointer.setShape({
        x: posInfo.cx,
        y: posInfo.cy,
        width: parsePercent3(pointerModel.get("width"), posInfo.r),
        r: parsePercent3(pointerModel.get("length"), posInfo.r)
      });
      pointer.useStyle(itemModel.getModel("itemStyle").getItemStyle());
      if (pointer.style.fill === "auto") {
        pointer.setStyle("fill", getColor(linearMap(data.get(valueDim, idx), valueExtent, [0, 1], true)));
      }
      setStatesStylesFromModel(pointer, itemModel);
      enableHoverEmphasis(pointer, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
    });
    this._data = data;
  }
  _renderTitle(seriesModel, ecModel, api, getColor, posInfo) {
    const data = seriesModel.getData();
    const valueDim = data.mapDimension("value");
    const titleModel = seriesModel.getModel("title");
    if (titleModel.get("show")) {
      const offsetCenter = titleModel.get("offsetCenter");
      const x = posInfo.cx + parsePercent3(offsetCenter[0], posInfo.r);
      const y = posInfo.cy + parsePercent3(offsetCenter[1], posInfo.r);
      const minVal = +seriesModel.get("min");
      const maxVal = +seriesModel.get("max");
      const value = seriesModel.getData().get(valueDim, 0);
      const autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));
      this.group.add(new Text_default({
        silent: true,
        style: createTextStyle(titleModel, {
          x,
          y,
          text: data.getName(0),
          align: "center",
          verticalAlign: "middle"
        }, {
          inheritColor: autoColor
        })
      }));
    }
  }
  _renderDetail(seriesModel, ecModel, api, getColor, posInfo) {
    const detailModel = seriesModel.getModel("detail");
    const minVal = +seriesModel.get("min");
    const maxVal = +seriesModel.get("max");
    if (detailModel.get("show")) {
      const offsetCenter = detailModel.get("offsetCenter");
      const x = posInfo.cx + parsePercent3(offsetCenter[0], posInfo.r);
      const y = posInfo.cy + parsePercent3(offsetCenter[1], posInfo.r);
      const width = parsePercent3(detailModel.get("width"), posInfo.r);
      const height = parsePercent3(detailModel.get("height"), posInfo.r);
      const data = seriesModel.getData();
      const value = data.get(data.mapDimension("value"), 0);
      const autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));
      this.group.add(new Text_default({
        silent: true,
        style: createTextStyle(detailModel, {
          x,
          y,
          text: formatLabel(value, detailModel.get("formatter")),
          width: isNaN(width) ? null : width,
          height: isNaN(height) ? null : height,
          align: "center",
          verticalAlign: "middle"
        }, {
          inheritColor: autoColor
        })
      }));
    }
  }
}
GaugeView2.type = "gauge";
Chart_default.registerClass(GaugeView2);

// src/chart/gauge.ts

// src/chart/funnel/FunnelSeries.ts
class FunnelSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = FunnelSeriesModel.type;
    this.useColorPaletteOnData = true;
  }
  init(option) {
    super.init.apply(this, arguments);
    this.legendVisualProvider = new LegendVisualProvider_default(bind(this.getData, this), bind(this.getRawData, this));
    this._defaultLabelLine(option);
  }
  getInitialData(option, ecModel) {
    return createListSimply_default(this, {
      coordDimensions: ["value"],
      encodeDefaulter: curry(makeSeriesEncodeForNameBased, this)
    });
  }
  _defaultLabelLine(option) {
    defaultEmphasis(option, "labelLine", ["show"]);
    const labelLineNormalOpt = option.labelLine;
    const labelLineEmphasisOpt = option.emphasis.labelLine;
    labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.show;
    labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.emphasis.label.show;
  }
  getDataParams(dataIndex) {
    const data = this.getData();
    const params = super.getDataParams(dataIndex);
    const valueDim = data.mapDimension("value");
    const sum2 = data.getSum(valueDim);
    params.percent = !sum2 ? 0 : +(data.get(valueDim, dataIndex) / sum2 * 100).toFixed(2);
    params.$vars.push("percent");
    return params;
  }
}
FunnelSeriesModel.type = "series.funnel";
FunnelSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  legendHoverLink: true,
  left: 80,
  top: 60,
  right: 80,
  bottom: 60,
  minSize: "0%",
  maxSize: "100%",
  sort: "descending",
  gap: 0,
  funnelAlign: "center",
  label: {
    show: true,
    position: "outer"
  },
  labelLine: {
    show: true,
    length: 20,
    lineStyle: {
      width: 1
    }
  },
  itemStyle: {
    borderColor: "#fff",
    borderWidth: 1
  },
  emphasis: {
    label: {
      show: true
    }
  },
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  }
};
Component_default.registerClass(FunnelSeriesModel);

// src/chart/funnel/FunnelView.ts
const opacityAccessPath = ["itemStyle", "opacity"];
class FunnelPiece extends Polygon_default {
  constructor(data, idx) {
    super();
    const polygon = this;
    const labelLine = new Polyline_default();
    const text11 = new Text_default();
    polygon.setTextContent(text11);
    this.setTextGuideLine(labelLine);
    this.updateData(data, idx, true);
  }
  updateData(data, idx, firstCreate) {
    const polygon = this;
    const seriesModel = data.hostModel;
    const itemModel = data.getItemModel(idx);
    const layout33 = data.getItemLayout(idx);
    const emphasisModel = itemModel.getModel("emphasis");
    let opacity = itemModel.get(opacityAccessPath);
    opacity = opacity == null ? 1 : opacity;
    polygon.useStyle(data.getItemVisual(idx, "style"));
    polygon.style.lineJoin = "round";
    if (firstCreate) {
      polygon.setShape({
        points: layout33.points
      });
      polygon.style.opacity = 0;
      initProps(polygon, {
        style: {
          opacity
        }
      }, seriesModel, idx);
    } else {
      updateProps(polygon, {
        style: {
          opacity
        },
        shape: {
          points: layout33.points
        }
      }, seriesModel, idx);
    }
    setStatesStylesFromModel(polygon, itemModel);
    this._updateLabel(data, idx);
    enableHoverEmphasis(this, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
  }
  _updateLabel(data, idx) {
    const polygon = this;
    const labelLine = this.getTextGuideLine();
    const labelText = polygon.getTextContent();
    const seriesModel = data.hostModel;
    const itemModel = data.getItemModel(idx);
    const layout33 = data.getItemLayout(idx);
    const labelLayout3 = layout33.label;
    const visualColor = data.getItemVisual(idx, "style").fill;
    setLabelStyle(labelText, getLabelStatesModels(itemModel), {
      labelFetcher: data.hostModel,
      labelDataIndex: idx,
      defaultText: data.getName(idx)
    }, {
      normal: {
        align: labelLayout3.textAlign,
        verticalAlign: labelLayout3.verticalAlign
      }
    });
    polygon.setTextConfig({
      local: true,
      inside: !!labelLayout3.inside,
      insideStroke: visualColor,
      outsideFill: visualColor
    });
    const linePoints = labelLayout3.linePoints;
    labelLine.setShape({
      points: linePoints
    });
    polygon.textGuideLineConfig = {
      anchor: linePoints ? new Point4(linePoints[0][0], linePoints[0][1]) : null
    };
    updateProps(labelText, {
      style: {
        x: labelLayout3.x,
        y: labelLayout3.y
      }
    }, seriesModel, idx);
    labelText.attr({
      rotation: labelLayout3.rotation,
      originX: labelLayout3.x,
      originY: labelLayout3.y,
      z2: 10
    });
    setLabelLineStyle(polygon, getLabelLineStatesModels(itemModel), {
      stroke: visualColor
    });
  }
}
class FunnelView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = FunnelView2.type;
    this.ignoreLabelLineUpdate = true;
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const oldData = this._data;
    const group = this.group;
    data.diff(oldData).add(function(idx) {
      const funnelPiece = new FunnelPiece(data, idx);
      data.setItemGraphicEl(idx, funnelPiece);
      group.add(funnelPiece);
    }).update(function(newIdx, oldIdx) {
      const piece = oldData.getItemGraphicEl(oldIdx);
      piece.updateData(data, newIdx);
      group.add(piece);
      data.setItemGraphicEl(newIdx, piece);
    }).remove(function(idx) {
      const piece = oldData.getItemGraphicEl(idx);
      removeElementWithFadeOut(piece, seriesModel, idx);
    }).execute();
    this._data = data;
  }
  remove() {
    this.group.removeAll();
    this._data = null;
  }
  dispose() {
  }
}
FunnelView2.type = "funnel";
Chart_default.registerClass(FunnelView2);

// src/chart/funnel/funnelLayout.ts
function getViewRect(seriesModel, api) {
  return getLayoutRect(seriesModel.getBoxLayoutParams(), {
    width: api.getWidth(),
    height: api.getHeight()
  });
}
function getSortedIndices(data, sort4) {
  const valueDim = data.mapDimension("value");
  const valueArr = data.mapArray(valueDim, function(val) {
    return val;
  });
  const indices = [];
  const isAscending = sort4 === "ascending";
  for (let i = 0, len2 = data.count(); i < len2; i++) {
    indices[i] = i;
  }
  if (typeof sort4 === "function") {
    indices.sort(sort4);
  } else if (sort4 !== "none") {
    indices.sort(function(a, b) {
      return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
    });
  }
  return indices;
}
function labelLayout(data) {
  data.each(function(idx) {
    const itemModel = data.getItemModel(idx);
    const labelModel = itemModel.getModel("label");
    const labelPosition = labelModel.get("position");
    const labelLineModel = itemModel.getModel("labelLine");
    const layout33 = data.getItemLayout(idx);
    const points9 = layout33.points;
    const isLabelInside = labelPosition === "inner" || labelPosition === "inside" || labelPosition === "center" || labelPosition === "insideLeft" || labelPosition === "insideRight";
    let textAlign;
    let textX;
    let textY;
    let linePoints;
    if (isLabelInside) {
      if (labelPosition === "insideLeft") {
        textX = (points9[0][0] + points9[3][0]) / 2 + 5;
        textY = (points9[0][1] + points9[3][1]) / 2;
        textAlign = "left";
      } else if (labelPosition === "insideRight") {
        textX = (points9[1][0] + points9[2][0]) / 2 - 5;
        textY = (points9[1][1] + points9[2][1]) / 2;
        textAlign = "right";
      } else {
        textX = (points9[0][0] + points9[1][0] + points9[2][0] + points9[3][0]) / 4;
        textY = (points9[0][1] + points9[1][1] + points9[2][1] + points9[3][1]) / 4;
        textAlign = "center";
      }
      linePoints = [[textX, textY], [textX, textY]];
    } else {
      let x1;
      let y1;
      let x2;
      const labelLineLen = labelLineModel.get("length");
      if (labelPosition === "left") {
        x1 = (points9[3][0] + points9[0][0]) / 2;
        y1 = (points9[3][1] + points9[0][1]) / 2;
        x2 = x1 - labelLineLen;
        textX = x2 - 5;
        textAlign = "right";
      } else if (labelPosition === "right") {
        x1 = (points9[1][0] + points9[2][0]) / 2;
        y1 = (points9[1][1] + points9[2][1]) / 2;
        x2 = x1 + labelLineLen;
        textX = x2 + 5;
        textAlign = "left";
      } else if (labelPosition === "rightTop") {
        x1 = points9[1][0];
        y1 = points9[1][1];
        x2 = x1 + labelLineLen;
        textX = x2 + 5;
        textAlign = "top";
      } else if (labelPosition === "rightBottom") {
        x1 = points9[2][0];
        y1 = points9[2][1];
        x2 = x1 + labelLineLen;
        textX = x2 + 5;
        textAlign = "bottom";
      } else if (labelPosition === "leftTop") {
        x1 = points9[0][0];
        y1 = points9[1][1];
        x2 = x1 - labelLineLen;
        textX = x2 - 5;
        textAlign = "right";
      } else if (labelPosition === "leftBottom") {
        x1 = points9[3][0];
        y1 = points9[2][1];
        x2 = x1 - labelLineLen;
        textX = x2 - 5;
        textAlign = "right";
      } else {
        x1 = (points9[1][0] + points9[2][0]) / 2;
        y1 = (points9[1][1] + points9[2][1]) / 2;
        x2 = x1 + labelLineLen;
        textX = x2 + 5;
        textAlign = "left";
      }
      const y2 = y1;
      linePoints = [[x1, y1], [x2, y2]];
      textY = y2;
    }
    layout33.label = {
      linePoints,
      x: textX,
      y: textY,
      verticalAlign: "middle",
      textAlign,
      inside: isLabelInside
    };
  });
}
function funnelLayout_default(ecModel, api) {
  ecModel.eachSeriesByType("funnel", function(seriesModel) {
    const data = seriesModel.getData();
    const valueDim = data.mapDimension("value");
    const sort4 = seriesModel.get("sort");
    const viewRect2 = getViewRect(seriesModel, api);
    let indices = getSortedIndices(data, sort4);
    const sizeExtent = [parsePercent3(seriesModel.get("minSize"), viewRect2.width), parsePercent3(seriesModel.get("maxSize"), viewRect2.width)];
    const dataExtent = data.getDataExtent(valueDim);
    let min4 = seriesModel.get("min");
    let max4 = seriesModel.get("max");
    if (min4 == null) {
      min4 = Math.min(dataExtent[0], 0);
    }
    if (max4 == null) {
      max4 = dataExtent[1];
    }
    const funnelAlign = seriesModel.get("funnelAlign");
    let gap = seriesModel.get("gap");
    let itemHeight = (viewRect2.height - gap * (data.count() - 1)) / data.count();
    let y = viewRect2.y;
    const getLinePoints = function(idx, offY) {
      const val = data.get(valueDim, idx) || 0;
      const itemWidth = linearMap(val, [min4, max4], sizeExtent, true);
      let x0;
      switch (funnelAlign) {
        case "left":
          x0 = viewRect2.x;
          break;
        case "center":
          x0 = viewRect2.x + (viewRect2.width - itemWidth) / 2;
          break;
        case "right":
          x0 = viewRect2.x + viewRect2.width - itemWidth;
          break;
      }
      return [[x0, offY], [x0 + itemWidth, offY]];
    };
    if (sort4 === "ascending") {
      itemHeight = -itemHeight;
      gap = -gap;
      y += viewRect2.height;
      indices = indices.reverse();
    }
    for (let i = 0; i < indices.length; i++) {
      const idx = indices[i];
      const nextIdx = indices[i + 1];
      const itemModel = data.getItemModel(idx);
      let height = itemModel.get(["itemStyle", "height"]);
      if (height == null) {
        height = itemHeight;
      } else {
        height = parsePercent3(height, viewRect2.height);
        if (sort4 === "ascending") {
          height = -height;
        }
      }
      const start2 = getLinePoints(idx, y);
      const end2 = getLinePoints(nextIdx, y + height);
      y += height + gap;
      data.setItemLayout(idx, {
        points: start2.concat(end2.slice().reverse())
      });
    }
    labelLayout(data);
  });
}

// src/chart/funnel.ts
registerLayout(funnelLayout_default);
registerProcessor(dataFilter_default("funnel"));

// src/coord/parallel/parallelPreprocessor.ts
function parallelPreprocessor_default(option) {
  createParallelIfNeeded(option);
  mergeAxisOptionFromParallel(option);
}
function createParallelIfNeeded(option) {
  if (option.parallel) {
    return;
  }
  let hasParallelSeries = false;
  each(option.series, function(seriesOpt) {
    if (seriesOpt && seriesOpt.type === "parallel") {
      hasParallelSeries = true;
    }
  });
  if (hasParallelSeries) {
    option.parallel = [{}];
  }
}
function mergeAxisOptionFromParallel(option) {
  const axes = normalizeToArray(option.parallelAxis);
  each(axes, function(axisOption) {
    if (!isObject(axisOption)) {
      return;
    }
    const parallelIndex = axisOption.parallelIndex || 0;
    const parallelOption = normalizeToArray(option.parallel)[parallelIndex];
    if (parallelOption && parallelOption.parallelAxisDefault) {
      merge(axisOption, parallelOption.parallelAxisDefault, false);
    }
  });
}

// src/coord/parallel/ParallelAxis.ts
class ParallelAxis4 extends Axis_default {
  constructor(dim, scale4, coordExtent, axisType, axisIndex) {
    super(dim, scale4, coordExtent);
    this.type = axisType || "value";
    this.axisIndex = axisIndex;
  }
  isHorizontal() {
    return this.coordinateSystem.getModel().get("layout") !== "horizontal";
  }
}
const ParallelAxis_default = ParallelAxis4;

// src/component/helper/sliderMove.ts
function sliderMove_default(delta, handleEnds, extent3, handleIndex, minSpan, maxSpan) {
  delta = delta || 0;
  const extentSpan = extent3[1] - extent3[0];
  if (minSpan != null) {
    minSpan = restrict(minSpan, [0, extentSpan]);
  }
  if (maxSpan != null) {
    maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);
  }
  if (handleIndex === "all") {
    let handleSpan = Math.abs(handleEnds[1] - handleEnds[0]);
    handleSpan = restrict(handleSpan, [0, extentSpan]);
    minSpan = maxSpan = restrict(handleSpan, [minSpan, maxSpan]);
    handleIndex = 0;
  }
  handleEnds[0] = restrict(handleEnds[0], extent3);
  handleEnds[1] = restrict(handleEnds[1], extent3);
  const originalDistSign = getSpanSign(handleEnds, handleIndex);
  handleEnds[handleIndex] += delta;
  const extentMinSpan = minSpan || 0;
  const realExtent = extent3.slice();
  originalDistSign.sign < 0 ? realExtent[0] += extentMinSpan : realExtent[1] -= extentMinSpan;
  handleEnds[handleIndex] = restrict(handleEnds[handleIndex], realExtent);
  let currDistSign;
  currDistSign = getSpanSign(handleEnds, handleIndex);
  if (minSpan != null && (currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan)) {
    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;
  }
  currDistSign = getSpanSign(handleEnds, handleIndex);
  if (maxSpan != null && currDistSign.span > maxSpan) {
    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;
  }
  return handleEnds;
}
function getSpanSign(handleEnds, handleIndex) {
  const dist3 = handleEnds[handleIndex] - handleEnds[1 - handleIndex];
  return {
    span: Math.abs(dist3),
    sign: dist3 > 0 ? -1 : dist3 < 0 ? 1 : handleIndex ? -1 : 1
  };
}
function restrict(value, extend2) {
  return Math.min(extend2[1] != null ? extend2[1] : Infinity, Math.max(extend2[0] != null ? extend2[0] : -Infinity, value));
}

// src/coord/parallel/Parallel.ts
const each14 = each;
const mathMin8 = Math.min;
const mathMax8 = Math.max;
const mathFloor = Math.floor;
const mathCeil = Math.ceil;
const round3 = round2;
const PI10 = Math.PI;
class Parallel8 {
  constructor(parallelModel, ecModel, api) {
    this.type = "parallel";
    this._axesMap = createHashMap();
    this._axesLayout = {};
    this.dimensions = parallelModel.dimensions;
    this._model = parallelModel;
    this._init(parallelModel, ecModel, api);
  }
  _init(parallelModel, ecModel, api) {
    const dimensions = parallelModel.dimensions;
    const parallelAxisIndex = parallelModel.parallelAxisIndex;
    each14(dimensions, function(dim, idx) {
      const axisIndex = parallelAxisIndex[idx];
      const axisModel = ecModel.getComponent("parallelAxis", axisIndex);
      const axis2 = this._axesMap.set(dim, new ParallelAxis_default(dim, createScaleByModel2(axisModel), [0, 0], axisModel.get("type"), axisIndex));
      const isCategory2 = axis2.type === "category";
      axis2.onBand = isCategory2 && axisModel.get("boundaryGap");
      axis2.inverse = axisModel.get("inverse");
      axisModel.axis = axis2;
      axis2.model = axisModel;
      axis2.coordinateSystem = axisModel.coordinateSystem = this;
    }, this);
  }
  update(ecModel, api) {
    this._updateAxesFromSeries(this._model, ecModel);
  }
  containPoint(point) {
    const layoutInfo = this._makeLayoutInfo();
    const axisBase = layoutInfo.axisBase;
    const layoutBase = layoutInfo.layoutBase;
    const pixelDimIndex = layoutInfo.pixelDimIndex;
    const pAxis = point[1 - pixelDimIndex];
    const pLayout = point[pixelDimIndex];
    return pAxis >= axisBase && pAxis <= axisBase + layoutInfo.axisLength && pLayout >= layoutBase && pLayout <= layoutBase + layoutInfo.layoutLength;
  }
  getModel() {
    return this._model;
  }
  _updateAxesFromSeries(parallelModel, ecModel) {
    ecModel.eachSeries(function(seriesModel) {
      if (!parallelModel.contains(seriesModel, ecModel)) {
        return;
      }
      const data = seriesModel.getData();
      each14(this.dimensions, function(dim) {
        const axis2 = this._axesMap.get(dim);
        axis2.scale.unionExtentFromData(data, data.mapDimension(dim));
        niceScaleExtent(axis2.scale, axis2.model);
      }, this);
    }, this);
  }
  resize(parallelModel, api) {
    this._rect = getLayoutRect(parallelModel.getBoxLayoutParams(), {
      width: api.getWidth(),
      height: api.getHeight()
    });
    this._layoutAxes();
  }
  getRect() {
    return this._rect;
  }
  _makeLayoutInfo() {
    const parallelModel = this._model;
    const rect = this._rect;
    const xy = ["x", "y"];
    const wh = ["width", "height"];
    const layout33 = parallelModel.get("layout");
    const pixelDimIndex = layout33 === "horizontal" ? 0 : 1;
    const layoutLength = rect[wh[pixelDimIndex]];
    const layoutExtent = [0, layoutLength];
    const axisCount = this.dimensions.length;
    const axisExpandWidth = restrict2(parallelModel.get("axisExpandWidth"), layoutExtent);
    const axisExpandCount = restrict2(parallelModel.get("axisExpandCount") || 0, [0, axisCount]);
    const axisExpandable = parallelModel.get("axisExpandable") && axisCount > 3 && axisCount > axisExpandCount && axisExpandCount > 1 && axisExpandWidth > 0 && layoutLength > 0;
    let axisExpandWindow = parallelModel.get("axisExpandWindow");
    let winSize;
    if (!axisExpandWindow) {
      winSize = restrict2(axisExpandWidth * (axisExpandCount - 1), layoutExtent);
      const axisExpandCenter = parallelModel.get("axisExpandCenter") || mathFloor(axisCount / 2);
      axisExpandWindow = [axisExpandWidth * axisExpandCenter - winSize / 2];
      axisExpandWindow[1] = axisExpandWindow[0] + winSize;
    } else {
      winSize = restrict2(axisExpandWindow[1] - axisExpandWindow[0], layoutExtent);
      axisExpandWindow[1] = axisExpandWindow[0] + winSize;
    }
    let axisCollapseWidth = (layoutLength - winSize) / (axisCount - axisExpandCount);
    axisCollapseWidth < 3 && (axisCollapseWidth = 0);
    const winInnerIndices = [mathFloor(round3(axisExpandWindow[0] / axisExpandWidth, 1)) + 1, mathCeil(round3(axisExpandWindow[1] / axisExpandWidth, 1)) - 1];
    const axisExpandWindow0Pos = axisCollapseWidth / axisExpandWidth * axisExpandWindow[0];
    return {
      layout: layout33,
      pixelDimIndex,
      layoutBase: rect[xy[pixelDimIndex]],
      layoutLength,
      axisBase: rect[xy[1 - pixelDimIndex]],
      axisLength: rect[wh[1 - pixelDimIndex]],
      axisExpandable,
      axisExpandWidth,
      axisCollapseWidth,
      axisExpandWindow,
      axisCount,
      winInnerIndices,
      axisExpandWindow0Pos
    };
  }
  _layoutAxes() {
    const rect = this._rect;
    const axes = this._axesMap;
    const dimensions = this.dimensions;
    const layoutInfo = this._makeLayoutInfo();
    const layout33 = layoutInfo.layout;
    axes.each(function(axis2) {
      const axisExtent = [0, layoutInfo.axisLength];
      const idx = axis2.inverse ? 1 : 0;
      axis2.setExtent(axisExtent[idx], axisExtent[1 - idx]);
    });
    each14(dimensions, function(dim, idx) {
      const posInfo = (layoutInfo.axisExpandable ? layoutAxisWithExpand : layoutAxisWithoutExpand)(idx, layoutInfo);
      const positionTable = {
        horizontal: {
          x: posInfo.position,
          y: layoutInfo.axisLength
        },
        vertical: {
          x: 0,
          y: posInfo.position
        }
      };
      const rotationTable = {
        horizontal: PI10 / 2,
        vertical: 0
      };
      const position2 = [positionTable[layout33].x + rect.x, positionTable[layout33].y + rect.y];
      const rotation = rotationTable[layout33];
      const transform = create();
      rotate(transform, transform, rotation);
      translate(transform, transform, position2);
      this._axesLayout[dim] = {
        position: position2,
        rotation,
        transform,
        axisNameAvailableWidth: posInfo.axisNameAvailableWidth,
        axisLabelShow: posInfo.axisLabelShow,
        nameTruncateMaxWidth: posInfo.nameTruncateMaxWidth,
        tickDirection: 1,
        labelDirection: 1
      };
    }, this);
  }
  getAxis(dim) {
    return this._axesMap.get(dim);
  }
  dataToPoint(value, dim) {
    return this.axisCoordToPoint(this._axesMap.get(dim).dataToCoord(value), dim);
  }
  eachActiveState(data, callback, start2, end2) {
    start2 == null && (start2 = 0);
    end2 == null && (end2 = data.count());
    const axesMap = this._axesMap;
    const dimensions = this.dimensions;
    const dataDimensions = [];
    const axisModels = [];
    each(dimensions, function(axisDim) {
      dataDimensions.push(data.mapDimension(axisDim));
      axisModels.push(axesMap.get(axisDim).model);
    });
    const hasActiveSet = this.hasAxisBrushed();
    for (let dataIndex = start2; dataIndex < end2; dataIndex++) {
      let activeState;
      if (!hasActiveSet) {
        activeState = "normal";
      } else {
        activeState = "active";
        const values = data.getValues(dataDimensions, dataIndex);
        for (let j = 0, lenj = dimensions.length; j < lenj; j++) {
          const state = axisModels[j].getActiveState(values[j]);
          if (state === "inactive") {
            activeState = "inactive";
            break;
          }
        }
      }
      callback(activeState, dataIndex);
    }
  }
  hasAxisBrushed() {
    const dimensions = this.dimensions;
    const axesMap = this._axesMap;
    let hasActiveSet = false;
    for (let j = 0, lenj = dimensions.length; j < lenj; j++) {
      if (axesMap.get(dimensions[j]).model.getActiveState() !== "normal") {
        hasActiveSet = true;
      }
    }
    return hasActiveSet;
  }
  axisCoordToPoint(coord, dim) {
    const axisLayout = this._axesLayout[dim];
    return applyTransform2([coord, 0], axisLayout.transform);
  }
  getAxisLayout(dim) {
    return clone2(this._axesLayout[dim]);
  }
  getSlidedAxisExpandWindow(point) {
    const layoutInfo = this._makeLayoutInfo();
    const pixelDimIndex = layoutInfo.pixelDimIndex;
    let axisExpandWindow = layoutInfo.axisExpandWindow.slice();
    const winSize = axisExpandWindow[1] - axisExpandWindow[0];
    const extent3 = [0, layoutInfo.axisExpandWidth * (layoutInfo.axisCount - 1)];
    if (!this.containPoint(point)) {
      return {
        behavior: "none",
        axisExpandWindow
      };
    }
    const pointCoord = point[pixelDimIndex] - layoutInfo.layoutBase - layoutInfo.axisExpandWindow0Pos;
    let delta;
    let behavior = "slide";
    const axisCollapseWidth = layoutInfo.axisCollapseWidth;
    const triggerArea = this._model.get("axisExpandSlideTriggerArea");
    const useJump = triggerArea[0] != null;
    if (axisCollapseWidth) {
      if (useJump && axisCollapseWidth && pointCoord < winSize * triggerArea[0]) {
        behavior = "jump";
        delta = pointCoord - winSize * triggerArea[2];
      } else if (useJump && axisCollapseWidth && pointCoord > winSize * (1 - triggerArea[0])) {
        behavior = "jump";
        delta = pointCoord - winSize * (1 - triggerArea[2]);
      } else {
        (delta = pointCoord - winSize * triggerArea[1]) >= 0 && (delta = pointCoord - winSize * (1 - triggerArea[1])) <= 0 && (delta = 0);
      }
      delta *= layoutInfo.axisExpandWidth / axisCollapseWidth;
      delta ? sliderMove_default(delta, axisExpandWindow, extent3, "all") : behavior = "none";
    } else {
      const winSize2 = axisExpandWindow[1] - axisExpandWindow[0];
      const pos = extent3[1] * pointCoord / winSize2;
      axisExpandWindow = [mathMax8(0, pos - winSize2 / 2)];
      axisExpandWindow[1] = mathMin8(extent3[1], axisExpandWindow[0] + winSize2);
      axisExpandWindow[0] = axisExpandWindow[1] - winSize2;
    }
    return {
      axisExpandWindow,
      behavior
    };
  }
}
function restrict2(len2, extent3) {
  return mathMin8(mathMax8(len2, extent3[0]), extent3[1]);
}
function layoutAxisWithoutExpand(axisIndex, layoutInfo) {
  const step2 = layoutInfo.layoutLength / (layoutInfo.axisCount - 1);
  return {
    position: step2 * axisIndex,
    axisNameAvailableWidth: step2,
    axisLabelShow: true
  };
}
function layoutAxisWithExpand(axisIndex, layoutInfo) {
  const layoutLength = layoutInfo.layoutLength;
  const axisExpandWidth = layoutInfo.axisExpandWidth;
  const axisCount = layoutInfo.axisCount;
  const axisCollapseWidth = layoutInfo.axisCollapseWidth;
  const winInnerIndices = layoutInfo.winInnerIndices;
  let position2;
  let axisNameAvailableWidth = axisCollapseWidth;
  let axisLabelShow = false;
  let nameTruncateMaxWidth;
  if (axisIndex < winInnerIndices[0]) {
    position2 = axisIndex * axisCollapseWidth;
    nameTruncateMaxWidth = axisCollapseWidth;
  } else if (axisIndex <= winInnerIndices[1]) {
    position2 = layoutInfo.axisExpandWindow0Pos + axisIndex * axisExpandWidth - layoutInfo.axisExpandWindow[0];
    axisNameAvailableWidth = axisExpandWidth;
    axisLabelShow = true;
  } else {
    position2 = layoutLength - (axisCount - 1 - axisIndex) * axisCollapseWidth;
    nameTruncateMaxWidth = axisCollapseWidth;
  }
  return {
    position: position2,
    axisNameAvailableWidth,
    axisLabelShow,
    nameTruncateMaxWidth
  };
}
const Parallel_default = Parallel8;

// src/coord/parallel/parallelCreator.ts
function create3(ecModel, api) {
  const coordSysList = [];
  ecModel.eachComponent("parallel", function(parallelModel, idx) {
    const coordSys = new Parallel_default(parallelModel, ecModel, api);
    coordSys.name = "parallel_" + idx;
    coordSys.resize(parallelModel, api);
    parallelModel.coordinateSystem = coordSys;
    coordSys.model = parallelModel;
    coordSysList.push(coordSys);
  });
  ecModel.eachSeries(function(seriesModel) {
    if (seriesModel.get("coordinateSystem") === "parallel") {
      const parallelModel = seriesModel.getReferringComponents("parallel", SINGLE_REFERRING).models[0];
      seriesModel.coordinateSystem = parallelModel.coordinateSystem;
    }
  });
  return coordSysList;
}
CoordinateSystem_default.register("parallel", {
  create: create3
});

// src/coord/parallel/AxisModel.ts
class ParallelAxisModel3 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = ParallelAxisModel3.type;
    this.activeIntervals = [];
  }
  getAreaSelectStyle() {
    return makeStyleMapper_default([["fill", "color"], ["lineWidth", "borderWidth"], ["stroke", "borderColor"], ["width", "width"], ["opacity", "opacity"]])(this.getModel("areaSelectStyle"));
  }
  setActiveIntervals(intervals) {
    const activeIntervals = this.activeIntervals = clone2(intervals);
    if (activeIntervals) {
      for (let i = activeIntervals.length - 1; i >= 0; i--) {
        asc2(activeIntervals[i]);
      }
    }
  }
  getActiveState(value) {
    const activeIntervals = this.activeIntervals;
    if (!activeIntervals.length) {
      return "normal";
    }
    if (value == null || isNaN(+value)) {
      return "inactive";
    }
    if (activeIntervals.length === 1) {
      const interval = activeIntervals[0];
      if (interval[0] <= value && value <= interval[1]) {
        return "active";
      }
    } else {
      for (let i = 0, len2 = activeIntervals.length; i < len2; i++) {
        if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
          return "active";
        }
      }
    }
    return "inactive";
  }
}
const defaultOption2 = {
  type: "value",
  areaSelectStyle: {
    width: 20,
    borderWidth: 1,
    borderColor: "rgba(160,197,232)",
    color: "rgba(160,197,232)",
    opacity: 0.3
  },
  realtime: true,
  z: 10
};
Component_default.registerClass(ParallelAxisModel3);
mixin(ParallelAxisModel3, AxisModelCommonMixin);
axisModelCreator_default("parallel", ParallelAxisModel3, defaultOption2);

// src/coord/parallel/ParallelModel.ts
class ParallelModel13 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = ParallelModel13.type;
  }
  init() {
    super.init.apply(this, arguments);
    this.mergeOption({});
  }
  mergeOption(newOption) {
    const thisOption = this.option;
    newOption && merge(thisOption, newOption, true);
    this._initDimensions();
  }
  contains(model65, ecModel) {
    const parallelIndex = model65.get("parallelIndex");
    return parallelIndex != null && ecModel.getComponent("parallel", parallelIndex) === this;
  }
  setAxisExpand(opt) {
    each(["axisExpandable", "axisExpandCenter", "axisExpandCount", "axisExpandWidth", "axisExpandWindow"], function(name) {
      if (opt.hasOwnProperty(name)) {
        this.option[name] = opt[name];
      }
    }, this);
  }
  _initDimensions() {
    const dimensions = this.dimensions = [];
    const parallelAxisIndex = this.parallelAxisIndex = [];
    const axisModels = filter(this.ecModel.queryComponents({
      mainType: "parallelAxis"
    }), function(axisModel) {
      return (axisModel.get("parallelIndex") || 0) === this.componentIndex;
    }, this);
    each(axisModels, function(axisModel) {
      dimensions.push("dim" + axisModel.get("dim"));
      parallelAxisIndex.push(axisModel.componentIndex);
    });
  }
}
ParallelModel13.type = "parallel";
ParallelModel13.dependencies = ["parallelAxis"];
ParallelModel13.layoutMode = "box";
ParallelModel13.defaultOption = {
  zlevel: 0,
  z: 0,
  left: 80,
  top: 60,
  right: 80,
  bottom: 60,
  layout: "horizontal",
  axisExpandable: false,
  axisExpandCenter: null,
  axisExpandCount: 0,
  axisExpandWidth: 50,
  axisExpandRate: 17,
  axisExpandDebounce: 50,
  axisExpandSlideTriggerArea: [-0.15, 0.05, 0.4],
  axisExpandTriggerOn: "click",
  parallelAxisDefault: null
};
Component_default.registerClass(ParallelModel13);

// src/component/axis/parallelAxisAction.ts
const actionInfo2 = {
  type: "axisAreaSelect",
  event: "axisAreaSelected"
};
registerAction(actionInfo2, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "parallelAxis",
    query: payload
  }, function(parallelAxisModel) {
    parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
  });
});
registerAction("parallelAxisExpand", function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "parallel",
    query: payload
  }, function(parallelModel) {
    parallelModel.setAxisExpand(payload);
  });
});

// src/component/helper/BrushController.ts
const BRUSH_PANEL_GLOBAL = true;
const mathMin6 = Math.min;
const mathMax6 = Math.max;
const mathPow2 = Math.pow;
const COVER_Z = 10000;
const UNSELECT_THRESHOLD = 6;
const MIN_RESIZE_LINE_WIDTH = 6;
const MUTEX_RESOURCE_KEY = "globalPan";
const DIRECTION_MAP = {
  w: [0, 0],
  e: [0, 1],
  n: [1, 0],
  s: [1, 1]
};
const CURSOR_MAP = {
  w: "ew",
  e: "ew",
  n: "ns",
  s: "ns",
  ne: "nesw",
  sw: "nesw",
  nw: "nwse",
  se: "nwse"
};
const DEFAULT_BRUSH_OPT = {
  brushStyle: {
    lineWidth: 2,
    stroke: "rgba(0,0,0,0.3)",
    fill: "rgba(0,0,0,0.1)"
  },
  transformable: true,
  brushMode: "single",
  removeOnClick: false
};
let baseUID = 0;
class BrushController6 extends Eventful2 {
  constructor(zr) {
    super();
    this._track = [];
    this._covers = [];
    this._handlers = {};
    if (__DEV__) {
      assert(zr);
    }
    this._zr = zr;
    this.group = new Group_default();
    this._uid = "brushController_" + baseUID++;
    each(pointerHandlers, function(handler, eventName) {
      this._handlers[eventName] = bind(handler, this);
    }, this);
  }
  enableBrush(brushOption) {
    if (__DEV__) {
      assert(this._mounted);
    }
    this._brushType && this._doDisableBrush();
    brushOption.brushType && this._doEnableBrush(brushOption);
    return this;
  }
  _doEnableBrush(brushOption) {
    const zr = this._zr;
    if (!this._enableGlobalPan) {
      take(zr, MUTEX_RESOURCE_KEY, this._uid);
    }
    each(this._handlers, function(handler, eventName) {
      zr.on(eventName, handler);
    });
    this._brushType = brushOption.brushType;
    this._brushOption = merge(clone2(DEFAULT_BRUSH_OPT), brushOption, true);
  }
  _doDisableBrush() {
    const zr = this._zr;
    release(zr, MUTEX_RESOURCE_KEY, this._uid);
    each(this._handlers, function(handler, eventName) {
      zr.off(eventName, handler);
    });
    this._brushType = this._brushOption = null;
  }
  setPanels(panelOpts) {
    if (panelOpts && panelOpts.length) {
      const panels = this._panels = {};
      each(panelOpts, function(panelOpts2) {
        panels[panelOpts2.panelId] = clone2(panelOpts2);
      });
    } else {
      this._panels = null;
    }
    return this;
  }
  mount(opt) {
    opt = opt || {};
    if (__DEV__) {
      this._mounted = true;
    }
    this._enableGlobalPan = opt.enableGlobalPan;
    const thisGroup = this.group;
    this._zr.add(thisGroup);
    thisGroup.attr({
      x: opt.x || 0,
      y: opt.y || 0,
      rotation: opt.rotation || 0,
      scaleX: opt.scaleX || 1,
      scaleY: opt.scaleY || 1
    });
    this._transform = thisGroup.getLocalTransform();
    return this;
  }
  updateCovers(coverConfigList) {
    if (__DEV__) {
      assert(this._mounted);
    }
    coverConfigList = map2(coverConfigList, function(coverConfig) {
      return merge(clone2(DEFAULT_BRUSH_OPT), coverConfig, true);
    });
    const tmpIdPrefix = "\0-brush-index-";
    const oldCovers = this._covers;
    const newCovers = this._covers = [];
    const controller = this;
    const creatingCover = this._creatingCover;
    new DataDiffer_default(oldCovers, coverConfigList, oldGetKey, getKey2).add(addOrUpdate).update(addOrUpdate).remove(remove2).execute();
    return this;
    function getKey2(brushOption, index) {
      return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + "-" + brushOption.brushType;
    }
    function oldGetKey(cover, index) {
      return getKey2(cover.__brushOption, index);
    }
    function addOrUpdate(newIndex, oldIndex) {
      const newBrushInternal = coverConfigList[newIndex];
      if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
        newCovers[newIndex] = oldCovers[oldIndex];
      } else {
        const cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushInternal, oldCovers[oldIndex]) : endCreating(controller, createCover(controller, newBrushInternal));
        updateCoverAfterCreation(controller, cover);
      }
    }
    function remove2(oldIndex) {
      if (oldCovers[oldIndex] !== creatingCover) {
        controller.group.remove(oldCovers[oldIndex]);
      }
    }
  }
  unmount() {
    if (__DEV__) {
      if (!this._mounted) {
        return;
      }
    }
    this.enableBrush(false);
    clearCovers(this);
    this._zr.remove(this.group);
    if (__DEV__) {
      this._mounted = false;
    }
    return this;
  }
  dispose() {
    this.unmount();
    this.off();
  }
}
function createCover(controller, brushOption) {
  const cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
  cover.__brushOption = brushOption;
  updateZ2(cover, brushOption);
  controller.group.add(cover);
  return cover;
}
function endCreating(controller, creatingCover) {
  const coverRenderer = getCoverRenderer(creatingCover);
  if (coverRenderer.endCreating) {
    coverRenderer.endCreating(controller, creatingCover);
    updateZ2(creatingCover, creatingCover.__brushOption);
  }
  return creatingCover;
}
function updateCoverShape(controller, cover) {
  const brushOption = cover.__brushOption;
  getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);
}
function updateZ2(cover, brushOption) {
  let z = brushOption.z;
  z == null && (z = COVER_Z);
  cover.traverse(function(el) {
    el.z = z;
    el.z2 = z;
  });
}
function updateCoverAfterCreation(controller, cover) {
  getCoverRenderer(cover).updateCommon(controller, cover);
  updateCoverShape(controller, cover);
}
function getCoverRenderer(cover) {
  return coverRenderers[cover.__brushOption.brushType];
}
function getPanelByPoint(controller, e, localCursorPoint) {
  const panels = controller._panels;
  if (!panels) {
    return BRUSH_PANEL_GLOBAL;
  }
  let panel;
  const transform = controller._transform;
  each(panels, function(pn) {
    pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);
  });
  return panel;
}
function getPanelByCover(controller, cover) {
  const panels = controller._panels;
  if (!panels) {
    return BRUSH_PANEL_GLOBAL;
  }
  const panelId = cover.__brushOption.panelId;
  return panelId != null ? panels[panelId] : BRUSH_PANEL_GLOBAL;
}
function clearCovers(controller) {
  const covers = controller._covers;
  const originalLength = covers.length;
  each(covers, function(cover) {
    controller.group.remove(cover);
  }, controller);
  covers.length = 0;
  return !!originalLength;
}
function trigger(controller, opt) {
  const areas = map2(controller._covers, function(cover) {
    const brushOption = cover.__brushOption;
    const range = clone2(brushOption.range);
    return {
      brushType: brushOption.brushType,
      panelId: brushOption.panelId,
      range
    };
  });
  controller.trigger("brush", {
    areas,
    isEnd: !!opt.isEnd,
    removeOnClick: !!opt.removeOnClick
  });
}
function shouldShowCover(controller) {
  const track = controller._track;
  if (!track.length) {
    return false;
  }
  const p2 = track[track.length - 1];
  const p1 = track[0];
  const dx = p2[0] - p1[0];
  const dy = p2[1] - p1[1];
  const dist3 = mathPow2(dx * dx + dy * dy, 0.5);
  return dist3 > UNSELECT_THRESHOLD;
}
function getTrackEnds(track) {
  let tail = track.length - 1;
  tail < 0 && (tail = 0);
  return [track[0], track[tail]];
}
function createBaseRectCover(rectRangeConverter, controller, brushOption, edgeNameSequences) {
  const cover = new Group_default();
  cover.add(new Rect_default({
    name: "main",
    style: makeStyle(brushOption),
    silent: true,
    draggable: true,
    cursor: "move",
    drift: curry(driftRect, rectRangeConverter, controller, cover, ["n", "s", "w", "e"]),
    ondragend: curry(trigger, controller, {
      isEnd: true
    })
  }));
  each(edgeNameSequences, function(nameSequence) {
    cover.add(new Rect_default({
      name: nameSequence.join(""),
      style: {
        opacity: 0
      },
      draggable: true,
      silent: true,
      invisible: true,
      drift: curry(driftRect, rectRangeConverter, controller, cover, nameSequence),
      ondragend: curry(trigger, controller, {
        isEnd: true
      })
    }));
  });
  return cover;
}
function updateBaseRect(controller, cover, localRange, brushOption) {
  const lineWidth = brushOption.brushStyle.lineWidth || 0;
  const handleSize = mathMax6(lineWidth, MIN_RESIZE_LINE_WIDTH);
  const x = localRange[0][0];
  const y = localRange[1][0];
  const xa = x - lineWidth / 2;
  const ya = y - lineWidth / 2;
  const x2 = localRange[0][1];
  const y2 = localRange[1][1];
  const x2a = x2 - handleSize + lineWidth / 2;
  const y2a = y2 - handleSize + lineWidth / 2;
  const width = x2 - x;
  const height = y2 - y;
  const widtha = width + lineWidth;
  const heighta = height + lineWidth;
  updateRectShape(controller, cover, "main", x, y, width, height);
  if (brushOption.transformable) {
    updateRectShape(controller, cover, "w", xa, ya, handleSize, heighta);
    updateRectShape(controller, cover, "e", x2a, ya, handleSize, heighta);
    updateRectShape(controller, cover, "n", xa, ya, widtha, handleSize);
    updateRectShape(controller, cover, "s", xa, y2a, widtha, handleSize);
    updateRectShape(controller, cover, "nw", xa, ya, handleSize, handleSize);
    updateRectShape(controller, cover, "ne", x2a, ya, handleSize, handleSize);
    updateRectShape(controller, cover, "sw", xa, y2a, handleSize, handleSize);
    updateRectShape(controller, cover, "se", x2a, y2a, handleSize, handleSize);
  }
}
function updateCommon2(controller, cover) {
  const brushOption = cover.__brushOption;
  const transformable = brushOption.transformable;
  const mainEl = cover.childAt(0);
  mainEl.useStyle(makeStyle(brushOption));
  mainEl.attr({
    silent: !transformable,
    cursor: transformable ? "move" : "default"
  });
  each([["w"], ["e"], ["n"], ["s"], ["s", "e"], ["s", "w"], ["n", "e"], ["n", "w"]], function(nameSequence) {
    const el = cover.childOfName(nameSequence.join(""));
    const globalDir = nameSequence.length === 1 ? getGlobalDirection1(controller, nameSequence[0]) : getGlobalDirection2(controller, nameSequence);
    el && el.attr({
      silent: !transformable,
      invisible: !transformable,
      cursor: transformable ? CURSOR_MAP[globalDir] + "-resize" : null
    });
  });
}
function updateRectShape(controller, cover, name, x, y, w, h) {
  const el = cover.childOfName(name);
  el && el.setShape(pointsToRect(clipByPanel(controller, cover, [[x, y], [x + w, y + h]])));
}
function makeStyle(brushOption) {
  return defaults({
    strokeNoScale: true
  }, brushOption.brushStyle);
}
function formatRectRange(x, y, x2, y2) {
  const min4 = [mathMin6(x, x2), mathMin6(y, y2)];
  const max4 = [mathMax6(x, x2), mathMax6(y, y2)];
  return [[min4[0], max4[0]], [min4[1], max4[1]]];
}
function getTransform2(controller) {
  return getTransform(controller.group);
}
function getGlobalDirection1(controller, localDirName) {
  const map3 = {
    w: "left",
    e: "right",
    n: "top",
    s: "bottom"
  };
  const inverseMap = {
    left: "w",
    right: "e",
    top: "n",
    bottom: "s"
  };
  const dir3 = transformDirection(map3[localDirName], getTransform2(controller));
  return inverseMap[dir3];
}
function getGlobalDirection2(controller, localDirNameSeq) {
  const globalDir = [getGlobalDirection1(controller, localDirNameSeq[0]), getGlobalDirection1(controller, localDirNameSeq[1])];
  (globalDir[0] === "e" || globalDir[0] === "w") && globalDir.reverse();
  return globalDir.join("");
}
function driftRect(rectRangeConverter, controller, cover, dirNameSequence, dx, dy) {
  const brushOption = cover.__brushOption;
  const rectRange = rectRangeConverter.toRectRange(brushOption.range);
  const localDelta = toLocalDelta(controller, dx, dy);
  each(dirNameSequence, function(dirName) {
    const ind = DIRECTION_MAP[dirName];
    rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
  });
  brushOption.range = rectRangeConverter.fromRectRange(formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));
  updateCoverAfterCreation(controller, cover);
  trigger(controller, {
    isEnd: false
  });
}
function driftPolygon(controller, cover, dx, dy) {
  const range = cover.__brushOption.range;
  const localDelta = toLocalDelta(controller, dx, dy);
  each(range, function(point) {
    point[0] += localDelta[0];
    point[1] += localDelta[1];
  });
  updateCoverAfterCreation(controller, cover);
  trigger(controller, {
    isEnd: false
  });
}
function toLocalDelta(controller, dx, dy) {
  const thisGroup = controller.group;
  const localD = thisGroup.transformCoordToLocal(dx, dy);
  const localZero = thisGroup.transformCoordToLocal(0, 0);
  return [localD[0] - localZero[0], localD[1] - localZero[1]];
}
function clipByPanel(controller, cover, data) {
  const panel = getPanelByCover(controller, cover);
  return panel && panel !== BRUSH_PANEL_GLOBAL ? panel.clipPath(data, controller._transform) : clone2(data);
}
function pointsToRect(points9) {
  const xmin = mathMin6(points9[0][0], points9[1][0]);
  const ymin = mathMin6(points9[0][1], points9[1][1]);
  const xmax = mathMax6(points9[0][0], points9[1][0]);
  const ymax = mathMax6(points9[0][1], points9[1][1]);
  return {
    x: xmin,
    y: ymin,
    width: xmax - xmin,
    height: ymax - ymin
  };
}
function resetCursor(controller, e, localCursorPoint) {
  if (!controller._brushType || isOutsideZrArea(controller, e.offsetX, e.offsetY)) {
    return;
  }
  const zr = controller._zr;
  const covers = controller._covers;
  const currPanel = getPanelByPoint(controller, e, localCursorPoint);
  if (!controller._dragging) {
    for (let i = 0; i < covers.length; i++) {
      const brushOption = covers[i].__brushOption;
      if (currPanel && (currPanel === BRUSH_PANEL_GLOBAL || brushOption.panelId === currPanel.panelId) && coverRenderers[brushOption.brushType].contain(covers[i], localCursorPoint[0], localCursorPoint[1])) {
        return;
      }
    }
  }
  currPanel && zr.setCursorStyle("crosshair");
}
function preventDefault(e) {
  const rawE = e.event;
  rawE.preventDefault && rawE.preventDefault();
}
function mainShapeContain(cover, x, y) {
  return cover.childOfName("main").contain(x, y);
}
function updateCoverByMouse(controller, e, localCursorPoint, isEnd) {
  let creatingCover = controller._creatingCover;
  const panel = controller._creatingPanel;
  const thisBrushOption = controller._brushOption;
  let eventParams;
  controller._track.push(localCursorPoint.slice());
  if (shouldShowCover(controller) || creatingCover) {
    if (panel && !creatingCover) {
      thisBrushOption.brushMode === "single" && clearCovers(controller);
      const brushOption = clone2(thisBrushOption);
      brushOption.brushType = determineBrushType(brushOption.brushType, panel);
      brushOption.panelId = panel === BRUSH_PANEL_GLOBAL ? null : panel.panelId;
      creatingCover = controller._creatingCover = createCover(controller, brushOption);
      controller._covers.push(creatingCover);
    }
    if (creatingCover) {
      const coverRenderer = coverRenderers[determineBrushType(controller._brushType, panel)];
      const coverBrushOption = creatingCover.__brushOption;
      coverBrushOption.range = coverRenderer.getCreatingRange(clipByPanel(controller, creatingCover, controller._track));
      if (isEnd) {
        endCreating(controller, creatingCover);
        coverRenderer.updateCommon(controller, creatingCover);
      }
      updateCoverShape(controller, creatingCover);
      eventParams = {
        isEnd
      };
    }
  } else if (isEnd && thisBrushOption.brushMode === "single" && thisBrushOption.removeOnClick) {
    if (getPanelByPoint(controller, e, localCursorPoint) && clearCovers(controller)) {
      eventParams = {
        isEnd,
        removeOnClick: true
      };
    }
  }
  return eventParams;
}
function determineBrushType(brushType, panel) {
  if (brushType === "auto") {
    if (__DEV__) {
      assert(panel && panel.defaultBrushType, 'MUST have defaultBrushType when brushType is "atuo"');
    }
    return panel.defaultBrushType;
  }
  return brushType;
}
const pointerHandlers = {
  mousedown: function(e) {
    if (this._dragging) {
      handleDragEnd(this, e);
    } else if (!e.target || !e.target.draggable) {
      preventDefault(e);
      const localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
      this._creatingCover = null;
      const panel = this._creatingPanel = getPanelByPoint(this, e, localCursorPoint);
      if (panel) {
        this._dragging = true;
        this._track = [localCursorPoint.slice()];
      }
    }
  },
  mousemove: function(e) {
    const x = e.offsetX;
    const y = e.offsetY;
    const localCursorPoint = this.group.transformCoordToLocal(x, y);
    resetCursor(this, e, localCursorPoint);
    if (this._dragging) {
      preventDefault(e);
      const eventParams = updateCoverByMouse(this, e, localCursorPoint, false);
      eventParams && trigger(this, eventParams);
    }
  },
  mouseup: function(e) {
    handleDragEnd(this, e);
  }
};
function handleDragEnd(controller, e) {
  if (controller._dragging) {
    preventDefault(e);
    const x = e.offsetX;
    const y = e.offsetY;
    const localCursorPoint = controller.group.transformCoordToLocal(x, y);
    const eventParams = updateCoverByMouse(controller, e, localCursorPoint, true);
    controller._dragging = false;
    controller._track = [];
    controller._creatingCover = null;
    eventParams && trigger(controller, eventParams);
  }
}
function isOutsideZrArea(controller, x, y) {
  const zr = controller._zr;
  return x < 0 || x > zr.getWidth() || y < 0 || y > zr.getHeight();
}
const coverRenderers = {
  lineX: getLineRenderer(0),
  lineY: getLineRenderer(1),
  rect: {
    createCover: function(controller, brushOption) {
      function returnInput(range) {
        return range;
      }
      return createBaseRectCover({
        toRectRange: returnInput,
        fromRectRange: returnInput
      }, controller, brushOption, [["w"], ["e"], ["n"], ["s"], ["s", "e"], ["s", "w"], ["n", "e"], ["n", "w"]]);
    },
    getCreatingRange: function(localTrack) {
      const ends = getTrackEnds(localTrack);
      return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
    },
    updateCoverShape: function(controller, cover, localRange, brushOption) {
      updateBaseRect(controller, cover, localRange, brushOption);
    },
    updateCommon: updateCommon2,
    contain: mainShapeContain
  },
  polygon: {
    createCover: function(controller, brushOption) {
      const cover = new Group_default();
      cover.add(new Polyline_default({
        name: "main",
        style: makeStyle(brushOption),
        silent: true
      }));
      return cover;
    },
    getCreatingRange: function(localTrack) {
      return localTrack;
    },
    endCreating: function(controller, cover) {
      cover.remove(cover.childAt(0));
      cover.add(new Polygon_default({
        name: "main",
        draggable: true,
        drift: curry(driftPolygon, controller, cover),
        ondragend: curry(trigger, controller, {
          isEnd: true
        })
      }));
    },
    updateCoverShape: function(controller, cover, localRange, brushOption) {
      cover.childAt(0).setShape({
        points: clipByPanel(controller, cover, localRange)
      });
    },
    updateCommon: updateCommon2,
    contain: mainShapeContain
  }
};
function getLineRenderer(xyIndex) {
  return {
    createCover: function(controller, brushOption) {
      return createBaseRectCover({
        toRectRange: function(range) {
          const rectRange = [range, [0, 100]];
          xyIndex && rectRange.reverse();
          return rectRange;
        },
        fromRectRange: function(rectRange) {
          return rectRange[xyIndex];
        }
      }, controller, brushOption, [[["w"], ["e"]], [["n"], ["s"]]][xyIndex]);
    },
    getCreatingRange: function(localTrack) {
      const ends = getTrackEnds(localTrack);
      const min4 = mathMin6(ends[0][xyIndex], ends[1][xyIndex]);
      const max4 = mathMax6(ends[0][xyIndex], ends[1][xyIndex]);
      return [min4, max4];
    },
    updateCoverShape: function(controller, cover, localRange, brushOption) {
      let otherExtent;
      const panel = getPanelByCover(controller, cover);
      if (panel !== BRUSH_PANEL_GLOBAL && panel.getLinearBrushOtherExtent) {
        otherExtent = panel.getLinearBrushOtherExtent(xyIndex);
      } else {
        const zr = controller._zr;
        otherExtent = [0, [zr.getWidth(), zr.getHeight()][1 - xyIndex]];
      }
      const rectRange = [localRange, otherExtent];
      xyIndex && rectRange.reverse();
      updateBaseRect(controller, cover, rectRange, brushOption);
    },
    updateCommon: updateCommon2,
    contain: mainShapeContain
  };
}
const BrushController_default = BrushController6;

// src/component/helper/brushHelper.ts
function makeRectPanelClipPath(rect) {
  rect = normalizeRect(rect);
  return function(localPoints) {
    return clipPointsByRect(localPoints, rect);
  };
}
function makeLinearBrushOtherExtent(rect, specifiedXYIndex) {
  rect = normalizeRect(rect);
  return function(xyIndex) {
    const idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;
    const brushWidth = idx ? rect.width : rect.height;
    const base2 = idx ? rect.x : rect.y;
    return [base2, base2 + (brushWidth || 0)];
  };
}
function makeRectIsTargetByCursor(rect, api, targetModel) {
  const boundingRect = normalizeRect(rect);
  return function(e, localCursorPoint) {
    return boundingRect.contain(localCursorPoint[0], localCursorPoint[1]) && !onIrrelevantElement(e, api, targetModel);
  };
}
function normalizeRect(rect) {
  return BoundingRect_default.create(rect);
}

// src/component/axis/ParallelAxisView.ts
const elementList2 = ["axisLine", "axisTickLabel", "axisName"];
class ParallelAxisView extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = ParallelAxisView.type;
  }
  init(ecModel, api) {
    super.init.apply(this, arguments);
    (this._brushController = new BrushController_default(api.getZr())).on("brush", bind(this._onBrush, this));
  }
  render(axisModel, ecModel, api, payload) {
    if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
      return;
    }
    this.axisModel = axisModel;
    this.api = api;
    this.group.removeAll();
    const oldAxisGroup = this._axisGroup;
    this._axisGroup = new Group_default();
    this.group.add(this._axisGroup);
    if (!axisModel.get("show")) {
      return;
    }
    const coordSysModel = getCoordSysModel(axisModel, ecModel);
    const coordSys = coordSysModel.coordinateSystem;
    const areaSelectStyle = axisModel.getAreaSelectStyle();
    const areaWidth = areaSelectStyle.width;
    const dim = axisModel.axis.dim;
    const axisLayout = coordSys.getAxisLayout(dim);
    const builderOpt = extend({
      strokeContainThreshold: areaWidth
    }, axisLayout);
    const axisBuilder = new AxisBuilder_default(axisModel, builderOpt);
    each(elementList2, axisBuilder.add, axisBuilder);
    this._axisGroup.add(axisBuilder.getGroup());
    this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api);
    groupTransition(oldAxisGroup, this._axisGroup, axisModel);
  }
  _refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api) {
    const extent3 = axisModel.axis.getExtent();
    const extentLen = extent3[1] - extent3[0];
    const extra = Math.min(30, Math.abs(extentLen) * 0.1);
    const rect = BoundingRect_default.create({
      x: extent3[0],
      y: -areaWidth / 2,
      width: extentLen,
      height: areaWidth
    });
    rect.x -= extra;
    rect.width += 2 * extra;
    this._brushController.mount({
      enableGlobalPan: true,
      rotation: builderOpt.rotation,
      x: builderOpt.position[0],
      y: builderOpt.position[1]
    }).setPanels([{
      panelId: "pl",
      clipPath: makeRectPanelClipPath(rect),
      isTargetByCursor: makeRectIsTargetByCursor(rect, api, coordSysModel),
      getLinearBrushOtherExtent: makeLinearBrushOtherExtent(rect, 0)
    }]).enableBrush({
      brushType: "lineX",
      brushStyle: areaSelectStyle,
      removeOnClick: true
    }).updateCovers(getCoverInfoList(axisModel));
  }
  _onBrush(eventParam) {
    const coverInfoList = eventParam.areas;
    const axisModel = this.axisModel;
    const axis2 = axisModel.axis;
    const intervals = map2(coverInfoList, function(coverInfo) {
      return [axis2.coordToData(coverInfo.range[0], true), axis2.coordToData(coverInfo.range[1], true)];
    });
    if (!axisModel.option.realtime === eventParam.isEnd || eventParam.removeOnClick) {
      this.api.dispatchAction({
        type: "axisAreaSelect",
        parallelAxisId: axisModel.id,
        intervals
      });
    }
  }
  dispose() {
    this._brushController.dispose();
  }
}
ParallelAxisView.type = "parallelAxis";
Component_default2.registerClass(ParallelAxisView);
function fromAxisAreaSelect(axisModel, ecModel, payload) {
  return payload && payload.type === "axisAreaSelect" && ecModel.findComponents({
    mainType: "parallelAxis",
    query: payload
  })[0] === axisModel;
}
function getCoverInfoList(axisModel) {
  const axis2 = axisModel.axis;
  return map2(axisModel.activeIntervals, function(interval) {
    return {
      brushType: "lineX",
      panelId: "pl",
      range: [axis2.dataToCoord(interval[0], true), axis2.dataToCoord(interval[1], true)]
    };
  });
}
function getCoordSysModel(axisModel, ecModel) {
  return ecModel.getComponent("parallel", axisModel.get("parallelIndex"));
}

// src/component/parallelAxis.ts

// src/component/parallel.ts
const CLICK_THRESHOLD = 5;
class ParallelView3 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = ParallelView3.type;
  }
  render(parallelModel, ecModel, api) {
    this._model = parallelModel;
    this._api = api;
    if (!this._handlers) {
      this._handlers = {};
      each(handlers, function(handler, eventName) {
        api.getZr().on(eventName, this._handlers[eventName] = bind(handler, this));
      }, this);
    }
    createOrUpdate(this, "_throttledDispatchExpand", parallelModel.get("axisExpandRate"), "fixRate");
  }
  dispose(ecModel, api) {
    each(this._handlers, function(handler, eventName) {
      api.getZr().off(eventName, handler);
    });
    this._handlers = null;
  }
  _throttledDispatchExpand(opt) {
    this._dispatchExpand(opt);
  }
  _dispatchExpand(opt) {
    opt && this._api.dispatchAction(extend({
      type: "parallelAxisExpand"
    }, opt));
  }
}
ParallelView3.type = "parallel";
Component_default2.registerClass(ParallelView3);
const handlers = {
  mousedown: function(e) {
    if (checkTrigger(this, "click")) {
      this._mouseDownPoint = [e.offsetX, e.offsetY];
    }
  },
  mouseup: function(e) {
    const mouseDownPoint = this._mouseDownPoint;
    if (checkTrigger(this, "click") && mouseDownPoint) {
      const point = [e.offsetX, e.offsetY];
      const dist3 = Math.pow(mouseDownPoint[0] - point[0], 2) + Math.pow(mouseDownPoint[1] - point[1], 2);
      if (dist3 > CLICK_THRESHOLD) {
        return;
      }
      const result = this._model.coordinateSystem.getSlidedAxisExpandWindow([e.offsetX, e.offsetY]);
      result.behavior !== "none" && this._dispatchExpand({
        axisExpandWindow: result.axisExpandWindow
      });
    }
    this._mouseDownPoint = null;
  },
  mousemove: function(e) {
    if (this._mouseDownPoint || !checkTrigger(this, "mousemove")) {
      return;
    }
    const model65 = this._model;
    const result = model65.coordinateSystem.getSlidedAxisExpandWindow([e.offsetX, e.offsetY]);
    const behavior = result.behavior;
    behavior === "jump" && this._throttledDispatchExpand.debounceNextCall(model65.get("axisExpandDebounce"));
    this._throttledDispatchExpand(behavior === "none" ? null : {
      axisExpandWindow: result.axisExpandWindow,
      animation: behavior === "jump" ? null : {
        duration: 0
      }
    });
  }
};
function checkTrigger(view, triggerOn) {
  const model65 = view._model;
  return model65.get("axisExpandable") && model65.get("axisExpandTriggerOn") === triggerOn;
}
registerPreprocessor(parallelPreprocessor_default);

// src/chart/parallel/ParallelSeries.ts
class ParallelSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = ParallelSeriesModel.type;
    this.visualStyleAccessPath = "lineStyle";
    this.visualDrawType = "stroke";
  }
  getInitialData(option, ecModel) {
    const source = this.getSource();
    setEncodeAndDimensions(source, this);
    return createListFromArray_default(source, this);
  }
  getRawIndicesByActiveState(activeState) {
    const coordSys = this.coordinateSystem;
    const data = this.getData();
    const indices = [];
    coordSys.eachActiveState(data, function(theActiveState, dataIndex) {
      if (activeState === theActiveState) {
        indices.push(data.getRawIndex(dataIndex));
      }
    });
    return indices;
  }
}
ParallelSeriesModel.type = "series.parallel";
ParallelSeriesModel.dependencies = ["parallel"];
ParallelSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "parallel",
  parallelIndex: 0,
  label: {
    show: false
  },
  inactiveOpacity: 0.05,
  activeOpacity: 1,
  lineStyle: {
    width: 1,
    opacity: 0.45,
    type: "solid"
  },
  emphasis: {
    label: {
      show: false
    }
  },
  progressive: 500,
  smooth: false,
  animationEasing: "linear"
};
Series_default.registerClass(ParallelSeriesModel);
function setEncodeAndDimensions(source, seriesModel) {
  if (source.encodeDefine) {
    return;
  }
  const parallelModel = seriesModel.ecModel.getComponent("parallel", seriesModel.get("parallelIndex"));
  if (!parallelModel) {
    return;
  }
  const encodeDefine = source.encodeDefine = createHashMap();
  each(parallelModel.dimensions, function(axisDim) {
    const dataDimIndex = convertDimNameToNumber(axisDim);
    encodeDefine.set(axisDim, dataDimIndex);
  });
}
function convertDimNameToNumber(dimName) {
  return +dimName.replace("dim", "");
}

// src/chart/parallel/ParallelView.ts
const DEFAULT_SMOOTH = 0.3;
class ParallelView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = ParallelView2.type;
    this._dataGroup = new Group_default();
    this._initialized = false;
  }
  init() {
    this.group.add(this._dataGroup);
  }
  render(seriesModel, ecModel, api, payload) {
    const dataGroup = this._dataGroup;
    const data = seriesModel.getData();
    const oldData = this._data;
    const coordSys = seriesModel.coordinateSystem;
    const dimensions = coordSys.dimensions;
    const seriesScope = makeSeriesScope3(seriesModel);
    data.diff(oldData).add(add2).update(update).remove(remove2).execute();
    function add2(newDataIndex) {
      const line3 = addEl(data, dataGroup, newDataIndex, dimensions, coordSys);
      updateElCommon(line3, data, newDataIndex, seriesScope);
    }
    function update(newDataIndex, oldDataIndex) {
      const line3 = oldData.getItemGraphicEl(oldDataIndex);
      const points9 = createLinePoints(data, newDataIndex, dimensions, coordSys);
      data.setItemGraphicEl(newDataIndex, line3);
      updateProps(line3, {
        shape: {
          points: points9
        }
      }, seriesModel, newDataIndex);
      updateElCommon(line3, data, newDataIndex, seriesScope);
    }
    function remove2(oldDataIndex) {
      const line3 = oldData.getItemGraphicEl(oldDataIndex);
      dataGroup.remove(line3);
    }
    if (!this._initialized) {
      this._initialized = true;
      const clipPath = createGridClipShape(coordSys, seriesModel, function() {
        setTimeout(function() {
          dataGroup.removeClipPath();
        });
      });
      dataGroup.setClipPath(clipPath);
    }
    this._data = data;
  }
  incrementalPrepareRender(seriesModel, ecModel, api) {
    this._initialized = true;
    this._data = null;
    this._dataGroup.removeAll();
  }
  incrementalRender(taskParams, seriesModel, ecModel) {
    const data = seriesModel.getData();
    const coordSys = seriesModel.coordinateSystem;
    const dimensions = coordSys.dimensions;
    const seriesScope = makeSeriesScope3(seriesModel);
    for (let dataIndex = taskParams.start; dataIndex < taskParams.end; dataIndex++) {
      const line3 = addEl(data, this._dataGroup, dataIndex, dimensions, coordSys);
      line3.incremental = true;
      updateElCommon(line3, data, dataIndex, seriesScope);
    }
  }
  remove() {
    this._dataGroup && this._dataGroup.removeAll();
    this._data = null;
  }
}
ParallelView2.type = "parallel";
function createGridClipShape(coordSys, seriesModel, cb) {
  const parallelModel = coordSys.model;
  const rect = coordSys.getRect();
  const rectEl = new Rect_default({
    shape: {
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height
    }
  });
  const dim = parallelModel.get("layout") === "horizontal" ? "width" : "height";
  rectEl.setShape(dim, 0);
  initProps(rectEl, {
    shape: {
      width: rect.width,
      height: rect.height
    }
  }, seriesModel, cb);
  return rectEl;
}
function createLinePoints(data, dataIndex, dimensions, coordSys) {
  const points9 = [];
  for (let i = 0; i < dimensions.length; i++) {
    const dimName = dimensions[i];
    const value = data.get(data.mapDimension(dimName), dataIndex);
    if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {
      points9.push(coordSys.dataToPoint(value, dimName));
    }
  }
  return points9;
}
function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {
  const points9 = createLinePoints(data, dataIndex, dimensions, coordSys);
  const line3 = new Polyline_default({
    shape: {
      points: points9
    },
    z2: 10
  });
  dataGroup.add(line3);
  data.setItemGraphicEl(dataIndex, line3);
  return line3;
}
function makeSeriesScope3(seriesModel) {
  let smooth = seriesModel.get("smooth", true);
  smooth === true && (smooth = DEFAULT_SMOOTH);
  return {
    smooth: smooth != null ? +smooth : DEFAULT_SMOOTH
  };
}
function updateElCommon(el, data, dataIndex, seriesScope) {
  el.useStyle(data.getItemVisual(dataIndex, "style"));
  el.style.fill = null;
  seriesScope.smooth && (el.shape.smooth = seriesScope.smooth);
  const itemModel = data.getItemModel(dataIndex);
  const emphasisModel = itemModel.getModel("emphasis");
  setStatesStylesFromModel(el, itemModel, "lineStyle", "getLineStyle");
  enableHoverEmphasis(el, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
}
function isEmptyValue(val, axisType) {
  return axisType === "category" ? val == null : val == null || isNaN(val);
}
Chart_default.registerClass(ParallelView2);

// src/chart/parallel/parallelVisual.ts
const opacityAccessPath2 = ["lineStyle", "opacity"];
const parallelVisual2 = {
  seriesType: "parallel",
  reset: function(seriesModel, ecModel) {
    const coordSys = seriesModel.coordinateSystem;
    const opacityMap = {
      normal: seriesModel.get(["lineStyle", "opacity"]),
      active: seriesModel.get("activeOpacity"),
      inactive: seriesModel.get("inactiveOpacity")
    };
    return {
      progress(params, data) {
        coordSys.eachActiveState(data, function(activeState, dataIndex) {
          let opacity = opacityMap[activeState];
          if (activeState === "normal" && data.hasItemOption) {
            const itemOpacity = data.getItemModel(dataIndex).get(opacityAccessPath2, true);
            itemOpacity != null && (opacity = itemOpacity);
          }
          const existsStyle = data.ensureUniqueItemVisual(dataIndex, "style");
          existsStyle.opacity = opacity;
        }, params.start, params.end);
      }
    };
  }
};
const parallelVisual_default = parallelVisual2;

// src/chart/parallel.ts
registerVisual(parallelVisual_default);

// src/chart/sankey/SankeySeries.ts
class SankeySeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = SankeySeriesModel.type;
  }
  getInitialData(option, ecModel) {
    const links = option.edges || option.links;
    const nodes = option.data || option.nodes;
    const levels = option.levels;
    this.levelModels = [];
    const levelModels = this.levelModels;
    for (let i = 0; i < levels.length; i++) {
      if (levels[i].depth != null && levels[i].depth >= 0) {
        levelModels[levels[i].depth] = new Model_default(levels[i], this, ecModel);
      } else {
        if (__DEV__) {
          throw new Error("levels[i].depth is mandatory and should be natural number");
        }
      }
    }
    if (nodes && links) {
      const graph2 = createGraphFromNodeEdge_default(nodes, links, this, true, beforeLink);
      return graph2.data;
    }
    function beforeLink(nodeData, edgeData) {
      nodeData.wrapMethod("getItemModel", function(model65, idx) {
        const seriesModel = model65.parentModel;
        const layout33 = seriesModel.getData().getItemLayout(idx);
        if (layout33) {
          const nodeDepth = layout33.depth;
          const levelModel = seriesModel.levelModels[nodeDepth];
          if (levelModel) {
            model65.parentModel = levelModel;
          }
        }
        return model65;
      });
      edgeData.wrapMethod("getItemModel", function(model65, idx) {
        const seriesModel = model65.parentModel;
        const edge = seriesModel.getGraph().getEdgeByIndex(idx);
        const layout33 = edge.node1.getLayout();
        if (layout33) {
          const depth = layout33.depth;
          const levelModel = seriesModel.levelModels[depth];
          if (levelModel) {
            model65.parentModel = levelModel;
          }
        }
        return model65;
      });
    }
  }
  setNodePosition(dataIndex, localPosition) {
    const dataItem = this.option.data[dataIndex];
    dataItem.localX = localPosition[0];
    dataItem.localY = localPosition[1];
  }
  getGraph() {
    return this.getData().graph;
  }
  getEdgeData() {
    return this.getGraph().edgeData;
  }
  formatTooltip(dataIndex, multipleSeries, dataType) {
    if (dataType === "edge") {
      const params = this.getDataParams(dataIndex, dataType);
      const rawDataOpt = params.data;
      let html = rawDataOpt.source + " -- " + rawDataOpt.target;
      if (params.value) {
        html += " : " + params.value;
      }
      return encodeHTML(html);
    } else if (dataType === "node") {
      const node = this.getGraph().getNodeByIndex(dataIndex);
      const value = node.getLayout().value;
      const name = this.getDataParams(dataIndex, dataType).data.name;
      const html = value ? name + " : " + value : "";
      return encodeHTML(html);
    }
    return super.formatTooltip(dataIndex, multipleSeries);
  }
  optionUpdated() {
    const option = this.option;
    if (option.focusNodeAdjacency === true) {
      option.focusNodeAdjacency = "allEdges";
    }
  }
  getDataParams(dataIndex, dataType) {
    const params = super.getDataParams(dataIndex, dataType);
    if (params.value == null && dataType === "node") {
      const node = this.getGraph().getNodeByIndex(dataIndex);
      const nodeValue = node.getLayout().value;
      params.value = nodeValue;
    }
    return params;
  }
}
SankeySeriesModel.type = "series.sankey";
SankeySeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "view",
  left: "5%",
  top: "5%",
  right: "20%",
  bottom: "5%",
  orient: "horizontal",
  nodeWidth: 20,
  nodeGap: 8,
  draggable: true,
  focusNodeAdjacency: false,
  layoutIterations: 32,
  label: {
    show: true,
    position: "right",
    color: "#000",
    fontSize: 12
  },
  levels: [],
  nodeAlign: "justify",
  itemStyle: {
    borderWidth: 1,
    borderColor: "#333"
  },
  lineStyle: {
    color: "#314656",
    opacity: 0.2,
    curveness: 0.5
  },
  emphasis: {
    label: {
      show: true
    },
    lineStyle: {
      opacity: 0.5
    }
  },
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  },
  animationEasing: "linear",
  animationDuration: 1000
};
Series_default.registerClass(SankeySeriesModel);

// src/chart/sankey/SankeyView.ts
class SankeyPathShape {
  constructor() {
    this.x1 = 0;
    this.y1 = 0;
    this.x2 = 0;
    this.y2 = 0;
    this.cpx1 = 0;
    this.cpy1 = 0;
    this.cpx2 = 0;
    this.cpy2 = 0;
    this.extent = 0;
  }
}
class SankeyPath extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultShape() {
    return new SankeyPathShape();
  }
  buildPath(ctx, shape) {
    const extent3 = shape.extent;
    ctx.moveTo(shape.x1, shape.y1);
    ctx.bezierCurveTo(shape.cpx1, shape.cpy1, shape.cpx2, shape.cpy2, shape.x2, shape.y2);
    if (shape.orient === "vertical") {
      ctx.lineTo(shape.x2 + extent3, shape.y2);
      ctx.bezierCurveTo(shape.cpx2 + extent3, shape.cpy2, shape.cpx1 + extent3, shape.cpy1, shape.x1 + extent3, shape.y1);
    } else {
      ctx.lineTo(shape.x2, shape.y2 + extent3);
      ctx.bezierCurveTo(shape.cpx2, shape.cpy2 + extent3, shape.cpx1, shape.cpy1 + extent3, shape.x1, shape.y1 + extent3);
    }
    ctx.closePath();
  }
  highlight() {
    enterEmphasis(this);
  }
  downplay() {
    leaveEmphasis(this);
  }
}
class SankeyView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = SankeyView2.type;
    this._focusAdjacencyDisabled = false;
  }
  render(seriesModel, ecModel, api) {
    const sankeyView = this;
    const graph2 = seriesModel.getGraph();
    const group = this.group;
    const layoutInfo = seriesModel.layoutInfo;
    const width = layoutInfo.width;
    const height = layoutInfo.height;
    const nodeData = seriesModel.getData();
    const edgeData = seriesModel.getData("edge");
    const orient = seriesModel.get("orient");
    this._model = seriesModel;
    group.removeAll();
    group.x = layoutInfo.x;
    group.y = layoutInfo.y;
    graph2.eachEdge(function(edge) {
      const curve8 = new SankeyPath();
      const ecData = getECData(curve8);
      ecData.dataIndex = edge.dataIndex;
      ecData.seriesIndex = seriesModel.seriesIndex;
      ecData.dataType = "edge";
      const edgeModel = edge.getModel();
      const lineStyleModel = edgeModel.getModel("lineStyle");
      const curvature = lineStyleModel.get("curveness");
      const n1Layout = edge.node1.getLayout();
      const node1Model = edge.node1.getModel();
      const dragX1 = node1Model.get("localX");
      const dragY1 = node1Model.get("localY");
      const n2Layout = edge.node2.getLayout();
      const node2Model = edge.node2.getModel();
      const dragX2 = node2Model.get("localX");
      const dragY2 = node2Model.get("localY");
      const edgeLayout = edge.getLayout();
      let x1;
      let y1;
      let x2;
      let y2;
      let cpx1;
      let cpy1;
      let cpx2;
      let cpy2;
      curve8.shape.extent = Math.max(1, edgeLayout.dy);
      curve8.shape.orient = orient;
      if (orient === "vertical") {
        x1 = (dragX1 != null ? dragX1 * width : n1Layout.x) + edgeLayout.sy;
        y1 = (dragY1 != null ? dragY1 * height : n1Layout.y) + n1Layout.dy;
        x2 = (dragX2 != null ? dragX2 * width : n2Layout.x) + edgeLayout.ty;
        y2 = dragY2 != null ? dragY2 * height : n2Layout.y;
        cpx1 = x1;
        cpy1 = y1 * (1 - curvature) + y2 * curvature;
        cpx2 = x2;
        cpy2 = y1 * curvature + y2 * (1 - curvature);
      } else {
        x1 = (dragX1 != null ? dragX1 * width : n1Layout.x) + n1Layout.dx;
        y1 = (dragY1 != null ? dragY1 * height : n1Layout.y) + edgeLayout.sy;
        x2 = dragX2 != null ? dragX2 * width : n2Layout.x;
        y2 = (dragY2 != null ? dragY2 * height : n2Layout.y) + edgeLayout.ty;
        cpx1 = x1 * (1 - curvature) + x2 * curvature;
        cpy1 = y1;
        cpx2 = x1 * curvature + x2 * (1 - curvature);
        cpy2 = y2;
      }
      curve8.setShape({
        x1,
        y1,
        x2,
        y2,
        cpx1,
        cpy1,
        cpx2,
        cpy2
      });
      curve8.useStyle(lineStyleModel.getItemStyle());
      switch (curve8.style.fill) {
        case "source":
          curve8.style.fill = edge.node1.getVisual("color");
          break;
        case "target":
          curve8.style.fill = edge.node2.getVisual("color");
          break;
        case "gradient":
          const sourceColor = edge.node1.getVisual("color");
          const targetColor = edge.node2.getVisual("color");
          if (typeof sourceColor === "string" && typeof targetColor === "string") {
            curve8.style.fill = new LinearGradient4(0, 0, 1, 0, [{
              color: sourceColor,
              offset: 0
            }, {
              color: targetColor,
              offset: 1
            }]);
          }
      }
      const emphasisModel = edgeModel.getModel("emphasis");
      setStatesStylesFromModel(curve8, edgeModel, "lineStyle", "getItemStyle");
      group.add(curve8);
      edgeData.setItemGraphicEl(edge.dataIndex, curve8);
      const focus = emphasisModel.get("focus");
      enableHoverEmphasis(curve8, focus === "adjacency" ? edge.getAdjacentDataIndices() : focus, emphasisModel.get("blurScope"));
      getECData(curve8).dataType = "edge";
    });
    graph2.eachNode(function(node) {
      const layout33 = node.getLayout();
      const itemModel = node.getModel();
      const dragX = itemModel.get("localX");
      const dragY = itemModel.get("localY");
      const emphasisModel = itemModel.getModel("emphasis");
      const rect = new Rect_default({
        shape: {
          x: dragX != null ? dragX * width : layout33.x,
          y: dragY != null ? dragY * height : layout33.y,
          width: layout33.dx,
          height: layout33.dy
        },
        style: itemModel.getModel("itemStyle").getItemStyle()
      });
      setLabelStyle(rect, getLabelStatesModels(itemModel), {
        labelFetcher: seriesModel,
        labelDataIndex: node.dataIndex,
        defaultText: node.id
      });
      rect.disableLabelAnimation = true;
      rect.setStyle("fill", node.getVisual("color"));
      setStatesStylesFromModel(rect, itemModel);
      group.add(rect);
      nodeData.setItemGraphicEl(node.dataIndex, rect);
      getECData(rect).dataType = "node";
      const focus = emphasisModel.get("focus");
      enableHoverEmphasis(rect, focus === "adjacency" ? node.getAdjacentDataIndices() : focus, emphasisModel.get("blurScope"));
    });
    nodeData.eachItemGraphicEl(function(el, dataIndex) {
      const itemModel = nodeData.getItemModel(dataIndex);
      if (itemModel.get("draggable")) {
        el.drift = function(dx, dy) {
          sankeyView._focusAdjacencyDisabled = true;
          this.shape.x += dx;
          this.shape.y += dy;
          this.dirty();
          api.dispatchAction({
            type: "dragNode",
            seriesId: seriesModel.id,
            dataIndex: nodeData.getRawIndex(dataIndex),
            localX: this.shape.x / width,
            localY: this.shape.y / height
          });
        };
        el.ondragend = function() {
          sankeyView._focusAdjacencyDisabled = false;
        };
        el.draggable = true;
        el.cursor = "move";
      }
    });
    if (!this._data && seriesModel.isAnimationEnabled()) {
      group.setClipPath(createGridClipShape2(group.getBoundingRect(), seriesModel, function() {
        group.removeClipPath();
      }));
    }
    this._data = seriesModel.getData();
  }
  dispose() {
  }
}
SankeyView2.type = "sankey";
function createGridClipShape2(rect, seriesModel, cb) {
  const rectEl = new Rect_default({
    shape: {
      x: rect.x - 10,
      y: rect.y - 10,
      width: 0,
      height: rect.height + 20
    }
  });
  initProps(rectEl, {
    shape: {
      width: rect.width + 20
    }
  }, seriesModel, cb);
  return rectEl;
}
Chart_default.registerClass(SankeyView2);

// src/chart/sankey/sankeyAction.ts
registerAction({
  type: "dragNode",
  event: "dragnode",
  update: "update"
}, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "series",
    subType: "sankey",
    query: payload
  }, function(seriesModel) {
    seriesModel.setNodePosition(payload.dataIndex, [payload.localX, payload.localY]);
  });
});

// src/chart/sankey/sankeyLayout.ts
function sankeyLayout_default(ecModel, api) {
  ecModel.eachSeriesByType("sankey", function(seriesModel) {
    const nodeWidth = seriesModel.get("nodeWidth");
    const nodeGap = seriesModel.get("nodeGap");
    const layoutInfo = getViewRect4(seriesModel, api);
    seriesModel.layoutInfo = layoutInfo;
    const width = layoutInfo.width;
    const height = layoutInfo.height;
    const graph2 = seriesModel.getGraph();
    const nodes = graph2.nodes;
    const edges = graph2.edges;
    computeNodeValues(nodes);
    const filteredNodes = filter(nodes, function(node) {
      return node.getLayout().value === 0;
    });
    const iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get("layoutIterations");
    const orient = seriesModel.get("orient");
    const nodeAlign = seriesModel.get("nodeAlign");
    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);
  });
}
function getViewRect4(seriesModel, api) {
  return getLayoutRect(seriesModel.getBoxLayoutParams(), {
    width: api.getWidth(),
    height: api.getHeight()
  });
}
function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {
  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);
  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);
  computeEdgeDepths(nodes, orient);
}
function computeNodeValues(nodes) {
  each(nodes, function(node) {
    const value1 = sum(node.outEdges, getEdgeValue);
    const value2 = sum(node.inEdges, getEdgeValue);
    const nodeRawValue = node.getValue() || 0;
    const value = Math.max(value1, value2, nodeRawValue);
    node.setLayout({
      value
    }, true);
  });
}
function computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {
  const remainEdges = [];
  const indegreeArr = [];
  let zeroIndegrees = [];
  let nextTargetNode = [];
  let x = 0;
  for (let i = 0; i < edges.length; i++) {
    remainEdges[i] = 1;
  }
  for (let i = 0; i < nodes.length; i++) {
    indegreeArr[i] = nodes[i].inEdges.length;
    if (indegreeArr[i] === 0) {
      zeroIndegrees.push(nodes[i]);
    }
  }
  let maxNodeDepth = -1;
  while (zeroIndegrees.length) {
    for (let idx = 0; idx < zeroIndegrees.length; idx++) {
      const node = zeroIndegrees[idx];
      const item = node.hostGraph.data.getRawDataItem(node.dataIndex);
      const isItemDepth = item.depth != null && item.depth >= 0;
      if (isItemDepth && item.depth > maxNodeDepth) {
        maxNodeDepth = item.depth;
      }
      node.setLayout({
        depth: isItemDepth ? item.depth : x
      }, true);
      orient === "vertical" ? node.setLayout({
        dy: nodeWidth
      }, true) : node.setLayout({
        dx: nodeWidth
      }, true);
      for (let edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {
        const edge = node.outEdges[edgeIdx];
        const indexEdge = edges.indexOf(edge);
        remainEdges[indexEdge] = 0;
        const targetNode = edge.node2;
        const nodeIndex = nodes.indexOf(targetNode);
        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {
          nextTargetNode.push(targetNode);
        }
      }
    }
    ++x;
    zeroIndegrees = nextTargetNode;
    nextTargetNode = [];
  }
  for (let i = 0; i < remainEdges.length; i++) {
    if (remainEdges[i] === 1) {
      throw new Error("Sankey is a DAG, the original data has cycle!");
    }
  }
  const maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;
  if (nodeAlign && nodeAlign !== "left") {
    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);
  }
  const kx = orient === "vertical" ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;
  scaleNodeBreadths(nodes, kx, orient);
}
function isNodeDepth(node) {
  const item = node.hostGraph.data.getRawDataItem(node.dataIndex);
  return item.depth != null && item.depth >= 0;
}
function adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {
  if (nodeAlign === "right") {
    let nextSourceNode = [];
    let remainNodes = nodes;
    let nodeHeight = 0;
    while (remainNodes.length) {
      for (let i = 0; i < remainNodes.length; i++) {
        const node = remainNodes[i];
        node.setLayout({
          skNodeHeight: nodeHeight
        }, true);
        for (let j = 0; j < node.inEdges.length; j++) {
          const edge = node.inEdges[j];
          if (nextSourceNode.indexOf(edge.node1) < 0) {
            nextSourceNode.push(edge.node1);
          }
        }
      }
      remainNodes = nextSourceNode;
      nextSourceNode = [];
      ++nodeHeight;
    }
    each(nodes, function(node) {
      if (!isNodeDepth(node)) {
        node.setLayout({
          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)
        }, true);
      }
    });
  } else if (nodeAlign === "justify") {
    moveSinksRight(nodes, maxDepth);
  }
}
function moveSinksRight(nodes, maxDepth) {
  each(nodes, function(node) {
    if (!isNodeDepth(node) && !node.outEdges.length) {
      node.setLayout({
        depth: maxDepth
      }, true);
    }
  });
}
function scaleNodeBreadths(nodes, kx, orient) {
  each(nodes, function(node) {
    const nodeDepth = node.getLayout().depth * kx;
    orient === "vertical" ? node.setLayout({
      y: nodeDepth
    }, true) : node.setLayout({
      x: nodeDepth
    }, true);
  });
}
function computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {
  const nodesByBreadth = prepareNodesByBreadth(nodes, orient);
  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);
  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);
  for (let alpha = 1; iterations > 0; iterations--) {
    alpha *= 0.99;
    relaxRightToLeft(nodesByBreadth, alpha, orient);
    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);
    relaxLeftToRight(nodesByBreadth, alpha, orient);
    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);
  }
}
function prepareNodesByBreadth(nodes, orient) {
  const nodesByBreadth = [];
  const keyAttr = orient === "vertical" ? "y" : "x";
  const groupResult = groupData(nodes, function(node) {
    return node.getLayout()[keyAttr];
  });
  groupResult.keys.sort(function(a, b) {
    return a - b;
  });
  each(groupResult.keys, function(key) {
    nodesByBreadth.push(groupResult.buckets.get(key));
  });
  return nodesByBreadth;
}
function initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {
  let minKy = Infinity;
  each(nodesByBreadth, function(nodes) {
    const n = nodes.length;
    let sum2 = 0;
    each(nodes, function(node) {
      sum2 += node.getLayout().value;
    });
    const ky = orient === "vertical" ? (width - (n - 1) * nodeGap) / sum2 : (height - (n - 1) * nodeGap) / sum2;
    if (ky < minKy) {
      minKy = ky;
    }
  });
  each(nodesByBreadth, function(nodes) {
    each(nodes, function(node, i) {
      const nodeDy = node.getLayout().value * minKy;
      if (orient === "vertical") {
        node.setLayout({
          x: i
        }, true);
        node.setLayout({
          dx: nodeDy
        }, true);
      } else {
        node.setLayout({
          y: i
        }, true);
        node.setLayout({
          dy: nodeDy
        }, true);
      }
    });
  });
  each(edges, function(edge) {
    const edgeDy = +edge.getValue() * minKy;
    edge.setLayout({
      dy: edgeDy
    }, true);
  });
}
function resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {
  const keyAttr = orient === "vertical" ? "x" : "y";
  each(nodesByBreadth, function(nodes) {
    nodes.sort(function(a, b) {
      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];
    });
    let nodeX;
    let node;
    let dy;
    let y0 = 0;
    const n = nodes.length;
    const nodeDyAttr = orient === "vertical" ? "dx" : "dy";
    for (let i = 0; i < n; i++) {
      node = nodes[i];
      dy = y0 - node.getLayout()[keyAttr];
      if (dy > 0) {
        nodeX = node.getLayout()[keyAttr] + dy;
        orient === "vertical" ? node.setLayout({
          x: nodeX
        }, true) : node.setLayout({
          y: nodeX
        }, true);
      }
      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;
    }
    const viewWidth = orient === "vertical" ? width : height;
    dy = y0 - nodeGap - viewWidth;
    if (dy > 0) {
      nodeX = node.getLayout()[keyAttr] - dy;
      orient === "vertical" ? node.setLayout({
        x: nodeX
      }, true) : node.setLayout({
        y: nodeX
      }, true);
      y0 = nodeX;
      for (let i = n - 2; i >= 0; --i) {
        node = nodes[i];
        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;
        if (dy > 0) {
          nodeX = node.getLayout()[keyAttr] - dy;
          orient === "vertical" ? node.setLayout({
            x: nodeX
          }, true) : node.setLayout({
            y: nodeX
          }, true);
        }
        y0 = node.getLayout()[keyAttr];
      }
    }
  });
}
function relaxRightToLeft(nodesByBreadth, alpha, orient) {
  each(nodesByBreadth.slice().reverse(), function(nodes) {
    each(nodes, function(node) {
      if (node.outEdges.length) {
        let y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue);
        if (isNaN(y)) {
          const len2 = node.outEdges.length;
          y = len2 ? sum(node.outEdges, centerTarget, orient) / len2 : 0;
        }
        if (orient === "vertical") {
          const nodeX = node.getLayout().x + (y - center2(node, orient)) * alpha;
          node.setLayout({
            x: nodeX
          }, true);
        } else {
          const nodeY = node.getLayout().y + (y - center2(node, orient)) * alpha;
          node.setLayout({
            y: nodeY
          }, true);
        }
      }
    });
  });
}
function weightedTarget(edge, orient) {
  return center2(edge.node2, orient) * edge.getValue();
}
function centerTarget(edge, orient) {
  return center2(edge.node2, orient);
}
function weightedSource(edge, orient) {
  return center2(edge.node1, orient) * edge.getValue();
}
function centerSource(edge, orient) {
  return center2(edge.node1, orient);
}
function center2(node, orient) {
  return orient === "vertical" ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;
}
function getEdgeValue(edge) {
  return edge.getValue();
}
function sum(array, cb, orient) {
  let sum2 = 0;
  const len2 = array.length;
  let i = -1;
  while (++i < len2) {
    const value = +cb(array[i], orient);
    if (!isNaN(value)) {
      sum2 += value;
    }
  }
  return sum2;
}
function relaxLeftToRight(nodesByBreadth, alpha, orient) {
  each(nodesByBreadth, function(nodes) {
    each(nodes, function(node) {
      if (node.inEdges.length) {
        let y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue);
        if (isNaN(y)) {
          const len2 = node.inEdges.length;
          y = len2 ? sum(node.inEdges, centerSource, orient) / len2 : 0;
        }
        if (orient === "vertical") {
          const nodeX = node.getLayout().x + (y - center2(node, orient)) * alpha;
          node.setLayout({
            x: nodeX
          }, true);
        } else {
          const nodeY = node.getLayout().y + (y - center2(node, orient)) * alpha;
          node.setLayout({
            y: nodeY
          }, true);
        }
      }
    });
  });
}
function computeEdgeDepths(nodes, orient) {
  const keyAttr = orient === "vertical" ? "x" : "y";
  each(nodes, function(node) {
    node.outEdges.sort(function(a, b) {
      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];
    });
    node.inEdges.sort(function(a, b) {
      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];
    });
  });
  each(nodes, function(node) {
    let sy = 0;
    let ty = 0;
    each(node.outEdges, function(edge) {
      edge.setLayout({
        sy
      }, true);
      sy += edge.getLayout().dy;
    });
    each(node.inEdges, function(edge) {
      edge.setLayout({
        ty
      }, true);
      ty += edge.getLayout().dy;
    });
  });
}

// src/chart/sankey/sankeyVisual.ts
function sankeyVisual_default(ecModel) {
  ecModel.eachSeriesByType("sankey", function(seriesModel) {
    const graph2 = seriesModel.getGraph();
    const nodes = graph2.nodes;
    if (nodes.length) {
      let minValue = Infinity;
      let maxValue = -Infinity;
      each(nodes, function(node) {
        const nodeValue = node.getLayout().value;
        if (nodeValue < minValue) {
          minValue = nodeValue;
        }
        if (nodeValue > maxValue) {
          maxValue = nodeValue;
        }
      });
      each(nodes, function(node) {
        const mapping = new VisualMapping_default({
          type: "color",
          mappingMethod: "linear",
          dataExtent: [minValue, maxValue],
          visual: seriesModel.get("color")
        });
        const mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
        const customColor = node.getModel().get(["itemStyle", "color"]);
        customColor != null ? node.setVisual("color", customColor) : node.setVisual("color", mapValueToColor);
      });
    }
  });
}

// src/chart/sankey.ts
registerLayout(sankeyLayout_default);
registerVisual(sankeyVisual_default);

// src/chart/helper/whiskerBoxCommon.ts
class WhiskerBoxCommonMixin {
  getInitialData(option, ecModel) {
    let ordinalMeta;
    const xAxisModel = ecModel.getComponent("xAxis", this.get("xAxisIndex"));
    const yAxisModel = ecModel.getComponent("yAxis", this.get("yAxisIndex"));
    const xAxisType = xAxisModel.get("type");
    const yAxisType = yAxisModel.get("type");
    let addOrdinal;
    if (xAxisType === "category") {
      option.layout = "horizontal";
      ordinalMeta = xAxisModel.getOrdinalMeta();
      addOrdinal = true;
    } else if (yAxisType === "category") {
      option.layout = "vertical";
      ordinalMeta = yAxisModel.getOrdinalMeta();
      addOrdinal = true;
    } else {
      option.layout = option.layout || "horizontal";
    }
    const coordDims = ["x", "y"];
    const baseAxisDimIndex = option.layout === "horizontal" ? 0 : 1;
    const baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];
    const otherAxisDim = coordDims[1 - baseAxisDimIndex];
    const axisModels = [xAxisModel, yAxisModel];
    const baseAxisType = axisModels[baseAxisDimIndex].get("type");
    const otherAxisType = axisModels[1 - baseAxisDimIndex].get("type");
    const data = option.data;
    if (data && addOrdinal) {
      const newOptionData = [];
      each(data, function(item, index) {
        let newItem;
        if (isArray(item)) {
          newItem = item.slice();
          item.unshift(index);
        } else if (isArray(item.value)) {
          newItem = item.value.slice();
          item.value.unshift(index);
        } else {
          newItem = item;
        }
        newOptionData.push(newItem);
      });
      option.data = newOptionData;
    }
    const defaultValueDimensions = this.defaultValueDimensions;
    const coordDimensions = [{
      name: baseAxisDim,
      type: getDimensionTypeByAxis(baseAxisType),
      ordinalMeta,
      otherDims: {
        tooltip: false,
        itemName: 0
      },
      dimsDef: ["base"]
    }, {
      name: otherAxisDim,
      type: getDimensionTypeByAxis(otherAxisType),
      dimsDef: defaultValueDimensions.slice()
    }];
    return createListSimply_default(this, {
      coordDimensions,
      dimensionsCount: defaultValueDimensions.length + 1,
      encodeDefaulter: curry(makeSeriesEncodeForAxisCoordSys, coordDimensions, this)
    });
  }
  getBaseAxis() {
    const dim = this._baseAxisDim;
    return this.ecModel.getComponent(dim + "Axis", this.get(dim + "AxisIndex")).axis;
  }
}

// src/chart/boxplot/BoxplotSeries.ts
class BoxplotSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = BoxplotSeriesModel.type;
    this.defaultValueDimensions = [{
      name: "min",
      defaultTooltip: true
    }, {
      name: "Q1",
      defaultTooltip: true
    }, {
      name: "median",
      defaultTooltip: true
    }, {
      name: "Q3",
      defaultTooltip: true
    }, {
      name: "max",
      defaultTooltip: true
    }];
    this.visualDrawType = "stroke";
  }
}
BoxplotSeriesModel.type = "series.boxplot";
BoxplotSeriesModel.dependencies = ["xAxis", "yAxis", "grid"];
BoxplotSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "cartesian2d",
  legendHoverLink: true,
  layout: null,
  boxWidth: [7, 50],
  itemStyle: {
    color: "#fff",
    borderWidth: 1
  },
  emphasis: {
    scale: true,
    itemStyle: {
      borderWidth: 2,
      shadowBlur: 5,
      shadowOffsetX: 1,
      shadowOffsetY: 1,
      shadowColor: "rgba(0,0,0,0.2)"
    }
  },
  animationDuration: 800
};
mixin(BoxplotSeriesModel, WhiskerBoxCommonMixin, true);
Series_default.registerClass(BoxplotSeriesModel);

// src/chart/boxplot/BoxplotView.ts
class BoxplotView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = BoxplotView2.type;
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const group = this.group;
    const oldData = this._data;
    if (!this._data) {
      group.removeAll();
    }
    const constDim = seriesModel.get("layout") === "horizontal" ? 1 : 0;
    data.diff(oldData).add(function(newIdx) {
      if (data.hasValue(newIdx)) {
        const itemLayout = data.getItemLayout(newIdx);
        const symbolEl = createNormalBox(itemLayout, data, newIdx, constDim, true);
        data.setItemGraphicEl(newIdx, symbolEl);
        group.add(symbolEl);
      }
    }).update(function(newIdx, oldIdx) {
      let symbolEl = oldData.getItemGraphicEl(oldIdx);
      if (!data.hasValue(newIdx)) {
        group.remove(symbolEl);
        return;
      }
      const itemLayout = data.getItemLayout(newIdx);
      if (!symbolEl) {
        symbolEl = createNormalBox(itemLayout, data, newIdx, constDim);
      } else {
        updateNormalBoxData(itemLayout, symbolEl, data, newIdx);
      }
      group.add(symbolEl);
      data.setItemGraphicEl(newIdx, symbolEl);
    }).remove(function(oldIdx) {
      const el = oldData.getItemGraphicEl(oldIdx);
      el && group.remove(el);
    }).execute();
    this._data = data;
  }
  remove(ecModel) {
    const group = this.group;
    const data = this._data;
    this._data = null;
    data && data.eachItemGraphicEl(function(el) {
      el && group.remove(el);
    });
  }
}
BoxplotView2.type = "boxplot";
class BoxPathShape {
}
class BoxPath extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "boxplotBoxPath";
  }
  getDefaultShape() {
    return new BoxPathShape();
  }
  buildPath(ctx, shape) {
    const ends = shape.points;
    let i = 0;
    ctx.moveTo(ends[i][0], ends[i][1]);
    i++;
    for (; i < 4; i++) {
      ctx.lineTo(ends[i][0], ends[i][1]);
    }
    ctx.closePath();
    for (; i < ends.length; i++) {
      ctx.moveTo(ends[i][0], ends[i][1]);
      i++;
      ctx.lineTo(ends[i][0], ends[i][1]);
    }
  }
}
function createNormalBox(itemLayout, data, dataIndex, constDim, isInit) {
  const ends = itemLayout.ends;
  const el = new BoxPath({
    shape: {
      points: isInit ? transInit(ends, constDim, itemLayout) : ends
    }
  });
  updateNormalBoxData(itemLayout, el, data, dataIndex, isInit);
  return el;
}
function updateNormalBoxData(itemLayout, el, data, dataIndex, isInit) {
  const seriesModel = data.hostModel;
  const updateMethod = graphic_exports[isInit ? "initProps" : "updateProps"];
  updateMethod(el, {
    shape: {
      points: itemLayout.ends
    }
  }, seriesModel, dataIndex);
  el.useStyle(data.getItemVisual(dataIndex, "style"));
  el.style.strokeNoScale = true;
  el.z2 = 100;
  const itemModel = data.getItemModel(dataIndex);
  setStatesStylesFromModel(el, itemModel);
  enableHoverEmphasis(el, itemModel.get(["emphasis", "focus"]), itemModel.get(["emphasis", "blurScope"]));
}
function transInit(points9, dim, itemLayout) {
  return map2(points9, function(point) {
    point = point.slice();
    point[dim] = itemLayout.initBaseline;
    return point;
  });
}
Chart_default.registerClass(BoxplotView2);

// src/chart/boxplot/boxplotVisual.ts
function boxplotVisual_default(ecModel, api) {
  ecModel.eachRawSeriesByType("boxplot", function(seriesModel) {
    seriesModel.getData().setVisual("legendSymbol", "roundRect");
  });
}

// src/chart/boxplot/boxplotLayout.ts
const each2 = each;
function boxplotLayout_default(ecModel) {
  const groupResult = groupSeriesByAxis(ecModel);
  each2(groupResult, function(groupItem) {
    const seriesModels = groupItem.seriesModels;
    if (!seriesModels.length) {
      return;
    }
    calculateBase(groupItem);
    each2(seriesModels, function(seriesModel, idx) {
      layoutSingleSeries(seriesModel, groupItem.boxOffsetList[idx], groupItem.boxWidthList[idx]);
    });
  });
}
function groupSeriesByAxis(ecModel) {
  const result = [];
  const axisList = [];
  ecModel.eachSeriesByType("boxplot", function(seriesModel) {
    const baseAxis = seriesModel.getBaseAxis();
    let idx = indexOf(axisList, baseAxis);
    if (idx < 0) {
      idx = axisList.length;
      axisList[idx] = baseAxis;
      result[idx] = {
        axis: baseAxis,
        seriesModels: []
      };
    }
    result[idx].seriesModels.push(seriesModel);
  });
  return result;
}
function calculateBase(groupItem) {
  let extent3;
  const baseAxis = groupItem.axis;
  const seriesModels = groupItem.seriesModels;
  const seriesCount = seriesModels.length;
  const boxWidthList = groupItem.boxWidthList = [];
  const boxOffsetList = groupItem.boxOffsetList = [];
  const boundList = [];
  let bandWidth;
  if (baseAxis.type === "category") {
    bandWidth = baseAxis.getBandWidth();
  } else {
    let maxDataCount = 0;
    each2(seriesModels, function(seriesModel) {
      maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
    });
    extent3 = baseAxis.getExtent(), Math.abs(extent3[1] - extent3[0]) / maxDataCount;
  }
  each2(seriesModels, function(seriesModel) {
    let boxWidthBound = seriesModel.get("boxWidth");
    if (!isArray(boxWidthBound)) {
      boxWidthBound = [boxWidthBound, boxWidthBound];
    }
    boundList.push([parsePercent3(boxWidthBound[0], bandWidth) || 0, parsePercent3(boxWidthBound[1], bandWidth) || 0]);
  });
  const availableWidth = bandWidth * 0.8 - 2;
  const boxGap = availableWidth / seriesCount * 0.3;
  const boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
  let base2 = boxWidth / 2 - availableWidth / 2;
  each2(seriesModels, function(seriesModel, idx) {
    boxOffsetList.push(base2);
    base2 += boxGap + boxWidth;
    boxWidthList.push(Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1]));
  });
}
function layoutSingleSeries(seriesModel, offset, boxWidth) {
  const coordSys = seriesModel.coordinateSystem;
  const data = seriesModel.getData();
  const halfWidth = boxWidth / 2;
  const cDimIdx = seriesModel.get("layout") === "horizontal" ? 0 : 1;
  const vDimIdx = 1 - cDimIdx;
  const coordDims = ["x", "y"];
  const cDim = data.mapDimension(coordDims[cDimIdx]);
  const vDims = data.mapDimensionsAll(coordDims[vDimIdx]);
  if (cDim == null || vDims.length < 5) {
    return;
  }
  for (let dataIndex = 0; dataIndex < data.count(); dataIndex++) {
    const axisDimVal = data.get(cDim, dataIndex);
    const median = getPoint(axisDimVal, vDims[2], dataIndex);
    const end1 = getPoint(axisDimVal, vDims[0], dataIndex);
    const end2 = getPoint(axisDimVal, vDims[1], dataIndex);
    const end4 = getPoint(axisDimVal, vDims[3], dataIndex);
    const end5 = getPoint(axisDimVal, vDims[4], dataIndex);
    const ends = [];
    addBodyEnd(ends, end2, false);
    addBodyEnd(ends, end4, true);
    ends.push(end1, end2, end5, end4);
    layEndLine(ends, end1);
    layEndLine(ends, end5);
    layEndLine(ends, median);
    data.setItemLayout(dataIndex, {
      initBaseline: median[vDimIdx],
      ends
    });
  }
  function getPoint(axisDimVal, dim, dataIndex) {
    const val = data.get(dim, dataIndex);
    const p = [];
    p[cDimIdx] = axisDimVal;
    p[vDimIdx] = val;
    let point;
    if (isNaN(axisDimVal) || isNaN(val)) {
      point = [NaN, NaN];
    } else {
      point = coordSys.dataToPoint(p);
      point[cDimIdx] += offset;
    }
    return point;
  }
  function addBodyEnd(ends, point, start2) {
    const point1 = point.slice();
    const point2 = point.slice();
    point1[cDimIdx] += halfWidth;
    point2[cDimIdx] -= halfWidth;
    start2 ? ends.push(point1, point2) : ends.push(point2, point1);
  }
  function layEndLine(ends, endCenter) {
    const from = endCenter.slice();
    const to = endCenter.slice();
    from[cDimIdx] -= halfWidth;
    to[cDimIdx] += halfWidth;
    ends.push(from, to);
  }
}

// src/chart/boxplot.ts
registerVisual(boxplotVisual_default);
registerLayout(boxplotLayout_default);

// src/chart/candlestick/CandlestickSeries.ts
class CandlestickSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = CandlestickSeriesModel.type;
    this.defaultValueDimensions = [{
      name: "open",
      defaultTooltip: true
    }, {
      name: "close",
      defaultTooltip: true
    }, {
      name: "lowest",
      defaultTooltip: true
    }, {
      name: "highest",
      defaultTooltip: true
    }];
  }
  getShadowDim() {
    return "open";
  }
  brushSelector(dataIndex, data, selectors) {
    const itemLayout = data.getItemLayout(dataIndex);
    return itemLayout && selectors.rect(itemLayout.brushRect);
  }
}
CandlestickSeriesModel.type = "series.candlestick";
CandlestickSeriesModel.dependencies = ["xAxis", "yAxis", "grid"];
CandlestickSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "cartesian2d",
  legendHoverLink: true,
  layout: null,
  clip: true,
  itemStyle: {
    color: "#c23531",
    color0: "#314656",
    borderWidth: 1,
    borderColor: "#c23531",
    borderColor0: "#314656"
  },
  emphasis: {
    scale: true,
    itemStyle: {
      borderWidth: 2
    }
  },
  barMaxWidth: null,
  barMinWidth: null,
  barWidth: null,
  large: true,
  largeThreshold: 600,
  progressive: 3000,
  progressiveThreshold: 10000,
  progressiveChunkMode: "mod",
  animationEasing: "linear",
  animationDuration: 300
};
mixin(CandlestickSeriesModel, WhiskerBoxCommonMixin, true);
Series_default.registerClass(CandlestickSeriesModel);

// src/chart/candlestick/CandlestickView.ts
const SKIP_PROPS = ["color", "borderColor"];
class CandlestickView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = CandlestickView2.type;
  }
  render(seriesModel, ecModel, api) {
    this.group.removeClipPath();
    this._updateDrawMode(seriesModel);
    this._isLargeDraw ? this._renderLarge(seriesModel) : this._renderNormal(seriesModel);
  }
  incrementalPrepareRender(seriesModel, ecModel, api) {
    this._clear();
    this._updateDrawMode(seriesModel);
  }
  incrementalRender(params, seriesModel, ecModel, api) {
    this._isLargeDraw ? this._incrementalRenderLarge(params, seriesModel) : this._incrementalRenderNormal(params, seriesModel);
  }
  _updateDrawMode(seriesModel) {
    const isLargeDraw = seriesModel.pipelineContext.large;
    if (this._isLargeDraw == null || isLargeDraw !== this._isLargeDraw) {
      this._isLargeDraw = isLargeDraw;
      this._clear();
    }
  }
  _renderNormal(seriesModel) {
    const data = seriesModel.getData();
    const oldData = this._data;
    const group = this.group;
    const isSimpleBox = data.getLayout("isSimpleBox");
    const needsClip = seriesModel.get("clip", true);
    const coord = seriesModel.coordinateSystem;
    const clipArea = coord.getArea && coord.getArea();
    if (!this._data) {
      group.removeAll();
    }
    data.diff(oldData).add(function(newIdx) {
      if (data.hasValue(newIdx)) {
        const itemLayout = data.getItemLayout(newIdx);
        if (needsClip && isNormalBoxClipped(clipArea, itemLayout)) {
          return;
        }
        const el = createNormalBox2(itemLayout, newIdx, true);
        initProps(el, {
          shape: {
            points: itemLayout.ends
          }
        }, seriesModel, newIdx);
        setBoxCommon(el, data, newIdx, isSimpleBox);
        group.add(el);
        data.setItemGraphicEl(newIdx, el);
      }
    }).update(function(newIdx, oldIdx) {
      let el = oldData.getItemGraphicEl(oldIdx);
      if (!data.hasValue(newIdx)) {
        group.remove(el);
        return;
      }
      const itemLayout = data.getItemLayout(newIdx);
      if (needsClip && isNormalBoxClipped(clipArea, itemLayout)) {
        group.remove(el);
        return;
      }
      if (!el) {
        el = createNormalBox2(itemLayout, newIdx);
      } else {
        updateProps(el, {
          shape: {
            points: itemLayout.ends
          }
        }, seriesModel, newIdx);
      }
      setBoxCommon(el, data, newIdx, isSimpleBox);
      group.add(el);
      data.setItemGraphicEl(newIdx, el);
    }).remove(function(oldIdx) {
      const el = oldData.getItemGraphicEl(oldIdx);
      el && group.remove(el);
    }).execute();
    this._data = data;
  }
  _renderLarge(seriesModel) {
    this._clear();
    createLarge2(seriesModel, this.group);
    const clipPath = seriesModel.get("clip", true) ? createClipPath(seriesModel.coordinateSystem, false, seriesModel) : null;
    if (clipPath) {
      this.group.setClipPath(clipPath);
    } else {
      this.group.removeClipPath();
    }
  }
  _incrementalRenderNormal(params, seriesModel) {
    const data = seriesModel.getData();
    const isSimpleBox = data.getLayout("isSimpleBox");
    let dataIndex;
    while ((dataIndex = params.next()) != null) {
      const itemLayout = data.getItemLayout(dataIndex);
      const el = createNormalBox2(itemLayout, dataIndex);
      setBoxCommon(el, data, dataIndex, isSimpleBox);
      el.incremental = true;
      this.group.add(el);
    }
  }
  _incrementalRenderLarge(params, seriesModel) {
    createLarge2(seriesModel, this.group, true);
  }
  remove(ecModel) {
    this._clear();
  }
  _clear() {
    this.group.removeAll();
    this._data = null;
  }
}
CandlestickView2.type = "candlestick";
Chart_default.registerClass(CandlestickView2);
class NormalBoxPathShape {
}
class NormalBoxPath extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "normalCandlestickBox";
  }
  getDefaultShape() {
    return new NormalBoxPathShape();
  }
  buildPath(ctx, shape) {
    const ends = shape.points;
    if (this.__simpleBox) {
      ctx.moveTo(ends[4][0], ends[4][1]);
      ctx.lineTo(ends[6][0], ends[6][1]);
    } else {
      ctx.moveTo(ends[0][0], ends[0][1]);
      ctx.lineTo(ends[1][0], ends[1][1]);
      ctx.lineTo(ends[2][0], ends[2][1]);
      ctx.lineTo(ends[3][0], ends[3][1]);
      ctx.closePath();
      ctx.moveTo(ends[4][0], ends[4][1]);
      ctx.lineTo(ends[5][0], ends[5][1]);
      ctx.moveTo(ends[6][0], ends[6][1]);
      ctx.lineTo(ends[7][0], ends[7][1]);
    }
  }
}
function createNormalBox2(itemLayout, dataIndex, isInit) {
  const ends = itemLayout.ends;
  return new NormalBoxPath({
    shape: {
      points: isInit ? transInit2(ends, itemLayout) : ends
    },
    z2: 100
  });
}
function isNormalBoxClipped(clipArea, itemLayout) {
  let clipped = true;
  for (let i = 0; i < itemLayout.ends.length; i++) {
    if (clipArea.contain(itemLayout.ends[i][0], itemLayout.ends[i][1])) {
      clipped = false;
      break;
    }
  }
  return clipped;
}
function setBoxCommon(el, data, dataIndex, isSimpleBox) {
  const itemModel = data.getItemModel(dataIndex);
  el.useStyle(data.getItemVisual(dataIndex, "style"));
  el.style.strokeNoScale = true;
  el.__simpleBox = isSimpleBox;
  setStatesStylesFromModel(el, itemModel);
}
function transInit2(points9, itemLayout) {
  return map2(points9, function(point) {
    point = point.slice();
    point[1] = itemLayout.initBaseline;
    return point;
  });
}
class LargeBoxPathShape {
}
class LargeBoxPath extends Path_default {
  constructor(opts) {
    super(opts);
    this.type = "largeCandlestickBox";
  }
  getDefaultShape() {
    return new LargeBoxPathShape();
  }
  buildPath(ctx, shape) {
    const points9 = shape.points;
    for (let i = 0; i < points9.length; ) {
      if (this.__sign === points9[i++]) {
        const x = points9[i++];
        ctx.moveTo(x, points9[i++]);
        ctx.lineTo(x, points9[i++]);
      } else {
        i += 3;
      }
    }
  }
}
function createLarge2(seriesModel, group, incremental) {
  const data = seriesModel.getData();
  const largePoints = data.getLayout("largePoints");
  const elP = new LargeBoxPath({
    shape: {
      points: largePoints
    },
    __sign: 1
  });
  group.add(elP);
  const elN = new LargeBoxPath({
    shape: {
      points: largePoints
    },
    __sign: -1
  });
  group.add(elN);
  setLargeStyle2(1, elP, seriesModel, data);
  setLargeStyle2(-1, elN, seriesModel, data);
  if (incremental) {
    elP.incremental = true;
    elN.incremental = true;
  }
}
function setLargeStyle2(sign, el, seriesModel, data) {
  const borderColor = seriesModel.get(["itemStyle", sign > 0 ? "borderColor" : "borderColor0"]) || seriesModel.get(["itemStyle", sign > 0 ? "color" : "color0"]);
  const itemStyle5 = seriesModel.getModel("itemStyle").getItemStyle(SKIP_PROPS);
  el.useStyle(itemStyle5);
  el.style.fill = null;
  el.style.stroke = borderColor;
}

// src/chart/candlestick/preprocessor.ts
function preprocessor_default(option) {
  if (!option || !isArray(option.series)) {
    return;
  }
  each(option.series, function(seriesItem) {
    if (isObject(seriesItem) && seriesItem.type === "k") {
      seriesItem.type = "candlestick";
    }
  });
}

// src/chart/candlestick/candlestickVisual.ts
const positiveBorderColorQuery = ["itemStyle", "borderColor"];
const negativeBorderColorQuery = ["itemStyle", "borderColor0"];
const positiveColorQuery = ["itemStyle", "color"];
const negativeColorQuery = ["itemStyle", "color0"];
const candlestickVisual2 = {
  seriesType: "candlestick",
  plan: createRenderPlanner_default(),
  performRawSeries: true,
  reset: function(seriesModel, ecModel) {
    function getColor(sign, model65) {
      return model65.get(sign > 0 ? positiveColorQuery : negativeColorQuery);
    }
    function getBorderColor(sign, model65) {
      return model65.get(sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery);
    }
    const data = seriesModel.getData();
    data.setVisual("legendSymbol", "roundRect");
    if (ecModel.isSeriesFiltered(seriesModel)) {
      return;
    }
    const isLargeRender = seriesModel.pipelineContext.large;
    return !isLargeRender && {
      progress(params, data2) {
        let dataIndex;
        while ((dataIndex = params.next()) != null) {
          const itemModel = data2.getItemModel(dataIndex);
          const sign = data2.getItemLayout(dataIndex).sign;
          const style2 = itemModel.getItemStyle();
          style2.fill = getColor(sign, itemModel);
          style2.stroke = getBorderColor(sign, itemModel) || style2.fill;
          const existsStyle = data2.ensureUniqueItemVisual(dataIndex, "style");
          extend(existsStyle, style2);
        }
      }
    };
  }
};
const candlestickVisual_default = candlestickVisual2;

// src/chart/candlestick/candlestickLayout.ts
const LargeArr = typeof Float32Array !== "undefined" ? Float32Array : Array;
const candlestickLayout3 = {
  seriesType: "candlestick",
  plan: createRenderPlanner_default(),
  reset: function(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    const data = seriesModel.getData();
    const candleWidth = calculateCandleWidth(seriesModel, data);
    const cDimIdx = 0;
    const vDimIdx = 1;
    const coordDims = ["x", "y"];
    const cDim = data.mapDimension(coordDims[cDimIdx]);
    const vDims = data.mapDimensionsAll(coordDims[vDimIdx]);
    const openDim = vDims[0];
    const closeDim = vDims[1];
    const lowestDim = vDims[2];
    const highestDim = vDims[3];
    data.setLayout({
      candleWidth,
      isSimpleBox: candleWidth <= 1.3
    });
    if (cDim == null || vDims.length < 4) {
      return;
    }
    return {
      progress: seriesModel.pipelineContext.large ? largeProgress : normalProgress
    };
    function normalProgress(params, data2) {
      let dataIndex;
      while ((dataIndex = params.next()) != null) {
        const axisDimVal = data2.get(cDim, dataIndex);
        const openVal = data2.get(openDim, dataIndex);
        const closeVal = data2.get(closeDim, dataIndex);
        const lowestVal = data2.get(lowestDim, dataIndex);
        const highestVal = data2.get(highestDim, dataIndex);
        const ocLow = Math.min(openVal, closeVal);
        const ocHigh = Math.max(openVal, closeVal);
        const ocLowPoint = getPoint(ocLow, axisDimVal);
        const ocHighPoint = getPoint(ocHigh, axisDimVal);
        const lowestPoint = getPoint(lowestVal, axisDimVal);
        const highestPoint = getPoint(highestVal, axisDimVal);
        const ends = [];
        addBodyEnd(ends, ocHighPoint, 0);
        addBodyEnd(ends, ocLowPoint, 1);
        ends.push(subPixelOptimizePoint(highestPoint), subPixelOptimizePoint(ocHighPoint), subPixelOptimizePoint(lowestPoint), subPixelOptimizePoint(ocLowPoint));
        data2.setItemLayout(dataIndex, {
          sign: getSign(data2, dataIndex, openVal, closeVal, closeDim),
          initBaseline: openVal > closeVal ? ocHighPoint[vDimIdx] : ocLowPoint[vDimIdx],
          ends,
          brushRect: makeBrushRect(lowestVal, highestVal, axisDimVal)
        });
      }
      function getPoint(val, axisDimVal) {
        const p = [];
        p[cDimIdx] = axisDimVal;
        p[vDimIdx] = val;
        return isNaN(axisDimVal) || isNaN(val) ? [NaN, NaN] : coordSys.dataToPoint(p);
      }
      function addBodyEnd(ends, point, start2) {
        const point1 = point.slice();
        const point2 = point.slice();
        point1[cDimIdx] = subPixelOptimize4(point1[cDimIdx] + candleWidth / 2, 1, false);
        point2[cDimIdx] = subPixelOptimize4(point2[cDimIdx] - candleWidth / 2, 1, true);
        start2 ? ends.push(point1, point2) : ends.push(point2, point1);
      }
      function makeBrushRect(lowestVal, highestVal, axisDimVal) {
        const pmin = getPoint(lowestVal, axisDimVal);
        const pmax = getPoint(highestVal, axisDimVal);
        pmin[cDimIdx] -= candleWidth / 2;
        pmax[cDimIdx] -= candleWidth / 2;
        return {
          x: pmin[0],
          y: pmin[1],
          width: vDimIdx ? candleWidth : pmax[0] - pmin[0],
          height: vDimIdx ? pmax[1] - pmin[1] : candleWidth
        };
      }
      function subPixelOptimizePoint(point) {
        point[cDimIdx] = subPixelOptimize4(point[cDimIdx], 1);
        return point;
      }
    }
    function largeProgress(params, data2) {
      const points9 = new LargeArr(params.count * 4);
      let offset = 0;
      let point;
      const tmpIn = [];
      const tmpOut = [];
      let dataIndex;
      while ((dataIndex = params.next()) != null) {
        const axisDimVal = data2.get(cDim, dataIndex);
        const openVal = data2.get(openDim, dataIndex);
        const closeVal = data2.get(closeDim, dataIndex);
        const lowestVal = data2.get(lowestDim, dataIndex);
        const highestVal = data2.get(highestDim, dataIndex);
        if (isNaN(axisDimVal) || isNaN(lowestVal) || isNaN(highestVal)) {
          points9[offset++] = NaN;
          offset += 3;
          continue;
        }
        points9[offset++] = getSign(data2, dataIndex, openVal, closeVal, closeDim);
        tmpIn[cDimIdx] = axisDimVal;
        tmpIn[vDimIdx] = lowestVal;
        point = coordSys.dataToPoint(tmpIn, null, tmpOut);
        points9[offset++] = point ? point[0] : NaN;
        points9[offset++] = point ? point[1] : NaN;
        tmpIn[vDimIdx] = highestVal;
        point = coordSys.dataToPoint(tmpIn, null, tmpOut);
        points9[offset++] = point ? point[1] : NaN;
      }
      data2.setLayout("largePoints", points9);
    }
  }
};
function getSign(data, dataIndex, openVal, closeVal, closeDim) {
  let sign;
  if (openVal > closeVal) {
    sign = -1;
  } else if (openVal < closeVal) {
    sign = 1;
  } else {
    sign = dataIndex > 0 ? data.get(closeDim, dataIndex - 1) <= closeVal ? 1 : -1 : 1;
  }
  return sign;
}
function calculateCandleWidth(seriesModel, data) {
  const baseAxis = seriesModel.getBaseAxis();
  let extent3;
  const bandWidth = baseAxis.type === "category" ? baseAxis.getBandWidth() : (extent3 = baseAxis.getExtent(), Math.abs(extent3[1] - extent3[0]) / data.count());
  const barMaxWidth = parsePercent3(retrieve2(seriesModel.get("barMaxWidth"), bandWidth), bandWidth);
  const barMinWidth = parsePercent3(retrieve2(seriesModel.get("barMinWidth"), 1), bandWidth);
  const barWidth = seriesModel.get("barWidth");
  return barWidth != null ? parsePercent3(barWidth, bandWidth) : Math.max(Math.min(bandWidth / 2, barMaxWidth), barMinWidth);
}
const candlestickLayout_default = candlestickLayout3;

// src/chart/candlestick.ts
registerPreprocessor(preprocessor_default);
registerVisual(candlestickVisual_default);
registerLayout(candlestickLayout_default);

// src/chart/effectScatter/EffectScatterSeries.ts
class EffectScatterSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = EffectScatterSeriesModel.type;
    this.hasSymbolVisual = true;
  }
  getInitialData(option, ecModel) {
    return createListFromArray_default(this.getSource(), this, {
      useEncodeDefaulter: true
    });
  }
  brushSelector(dataIndex, data, selectors) {
    return selectors.point(data.getItemLayout(dataIndex));
  }
}
EffectScatterSeriesModel.type = "series.effectScatter";
EffectScatterSeriesModel.dependencies = ["grid", "polar"];
EffectScatterSeriesModel.defaultOption = {
  coordinateSystem: "cartesian2d",
  zlevel: 0,
  z: 2,
  legendHoverLink: true,
  effectType: "ripple",
  progressive: 0,
  showEffectOn: "render",
  rippleEffect: {
    period: 4,
    scale: 2.5,
    brushType: "fill"
  },
  symbolSize: 10
};
Series_default.registerClass(EffectScatterSeriesModel);

// src/chart/helper/EffectSymbol.ts
const EFFECT_RIPPLE_NUMBER = 3;
function normalizeSymbolSize(symbolSize) {
  if (!isArray(symbolSize)) {
    symbolSize = [+symbolSize, +symbolSize];
  }
  return symbolSize;
}
function updateRipplePath(rippleGroup, effectCfg) {
  const color8 = effectCfg.rippleEffectColor || effectCfg.color;
  rippleGroup.eachChild(function(ripplePath) {
    ripplePath.attr({
      z: effectCfg.z,
      zlevel: effectCfg.zlevel,
      style: {
        stroke: effectCfg.brushType === "stroke" ? color8 : null,
        fill: effectCfg.brushType === "fill" ? color8 : null
      }
    });
  });
}
class EffectSymbol2 extends Group_default {
  constructor(data, idx) {
    super();
    const symbol14 = new Symbol_default(data, idx);
    const rippleGroup = new Group_default();
    this.add(symbol14);
    this.add(rippleGroup);
    this.updateData(data, idx);
  }
  stopEffectAnimation() {
    this.childAt(1).removeAll();
  }
  startEffectAnimation(effectCfg) {
    const symbolType = effectCfg.symbolType;
    const color8 = effectCfg.color;
    const rippleGroup = this.childAt(1);
    for (let i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
      const ripplePath = createSymbol(symbolType, -1, -1, 2, 2, color8);
      ripplePath.attr({
        style: {
          strokeNoScale: true
        },
        z2: 99,
        silent: true,
        scaleX: 0.5,
        scaleY: 0.5
      });
      const delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset;
      ripplePath.animate("", true).when(effectCfg.period, {
        scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]
      }).delay(delay).start();
      ripplePath.animateStyle(true).when(effectCfg.period, {
        opacity: 0
      }).delay(delay).start();
      rippleGroup.add(ripplePath);
    }
    updateRipplePath(rippleGroup, effectCfg);
  }
  updateEffectAnimation(effectCfg) {
    const oldEffectCfg = this._effectCfg;
    const rippleGroup = this.childAt(1);
    const DIFFICULT_PROPS = ["symbolType", "period", "rippleScale"];
    for (let i = 0; i < DIFFICULT_PROPS.length; i++) {
      const propName = DIFFICULT_PROPS[i];
      if (oldEffectCfg[propName] !== effectCfg[propName]) {
        this.stopEffectAnimation();
        this.startEffectAnimation(effectCfg);
        return;
      }
    }
    updateRipplePath(rippleGroup, effectCfg);
  }
  highlight() {
    enterEmphasis(this);
  }
  downplay() {
    leaveEmphasis(this);
  }
  updateData(data, idx) {
    const seriesModel = data.hostModel;
    this.childAt(0).updateData(data, idx);
    const rippleGroup = this.childAt(1);
    const itemModel = data.getItemModel(idx);
    const symbolType = data.getItemVisual(idx, "symbol");
    const symbolSize = normalizeSymbolSize(data.getItemVisual(idx, "symbolSize"));
    const symbolStyle = data.getItemVisual(idx, "style");
    const color8 = symbolStyle && symbolStyle.fill;
    rippleGroup.setScale(symbolSize);
    rippleGroup.traverse(function(ripplePath) {
      ripplePath.setStyle("fill", color8);
    });
    const symbolOffset = itemModel.getShallow("symbolOffset");
    if (symbolOffset) {
      rippleGroup.x = parsePercent3(symbolOffset[0], symbolSize[0]);
      rippleGroup.y = parsePercent3(symbolOffset[1], symbolSize[1]);
    }
    const symbolRotate = data.getItemVisual(idx, "symbolRotate");
    rippleGroup.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
    const effectCfg = {};
    effectCfg.showEffectOn = seriesModel.get("showEffectOn");
    effectCfg.rippleScale = itemModel.get(["rippleEffect", "scale"]);
    effectCfg.brushType = itemModel.get(["rippleEffect", "brushType"]);
    effectCfg.period = itemModel.get(["rippleEffect", "period"]) * 1000;
    effectCfg.effectOffset = idx / data.count();
    effectCfg.z = seriesModel.getShallow("z") || 0;
    effectCfg.zlevel = seriesModel.getShallow("zlevel") || 0;
    effectCfg.symbolType = symbolType;
    effectCfg.color = color8;
    effectCfg.rippleEffectColor = itemModel.get(["rippleEffect", "color"]);
    this.off("mouseover").off("mouseout").off("emphasis").off("normal");
    if (effectCfg.showEffectOn === "render") {
      this._effectCfg ? this.updateEffectAnimation(effectCfg) : this.startEffectAnimation(effectCfg);
      this._effectCfg = effectCfg;
    } else {
      this._effectCfg = null;
      this.stopEffectAnimation();
      this.onHoverStateChange = (toState) => {
        if (toState === "emphasis") {
          if (effectCfg.showEffectOn !== "render") {
            this.startEffectAnimation(effectCfg);
          }
        } else if (toState === "normal") {
          if (effectCfg.showEffectOn !== "render") {
            this.stopEffectAnimation();
          }
        }
      };
    }
    this._effectCfg = effectCfg;
    enableHoverEmphasis(this);
  }
  fadeOut(cb) {
    this.off("mouseover").off("mouseout");
    cb && cb();
  }
}
inherits(EffectSymbol2, Group_default);
const EffectSymbol_default = EffectSymbol2;

// src/chart/effectScatter/EffectScatterView.ts
class EffectScatterView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = EffectScatterView2.type;
  }
  init() {
    this._symbolDraw = new SymbolDraw_default(EffectSymbol_default);
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const effectSymbolDraw = this._symbolDraw;
    effectSymbolDraw.updateData(data);
    this.group.add(effectSymbolDraw.group);
  }
  updateTransform(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    this.group.dirty();
    const res = points_default().reset(seriesModel, ecModel, api);
    if (res.progress) {
      res.progress({
        start: 0,
        end: data.count(),
        count: data.count()
      }, data);
    }
    this._symbolDraw.updateLayout();
  }
  _updateGroupTransform(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    if (coordSys && coordSys.getRoamTransform) {
      this.group.transform = clone(coordSys.getRoamTransform());
      this.group.decomposeTransform();
    }
  }
  remove(ecModel, api) {
    this._symbolDraw && this._symbolDraw.remove(true);
  }
}
EffectScatterView2.type = "effectScatter";
Chart_default.registerClass(EffectScatterView2);

// src/chart/effectScatter.ts
registerLayout(points_default("effectScatter"));

// src/chart/lines/LinesSeries.ts
const Uint32Arr = typeof Uint32Array === "undefined" ? Array : Uint32Array;
const Float64Arr = typeof Float64Array === "undefined" ? Array : Float64Array;
function compatEc2(seriesOpt) {
  const data = seriesOpt.data;
  if (data && data[0] && data[0][0] && data[0][0].coord) {
    if (__DEV__) {
      console.warn("Lines data configuration has been changed to { coords:[[1,2],[2,3]] }");
    }
    seriesOpt.data = map2(data, function(itemOpt) {
      const coords = [itemOpt[0].coord, itemOpt[1].coord];
      const target = {
        coords
      };
      if (itemOpt[0].name) {
        target.fromName = itemOpt[0].name;
      }
      if (itemOpt[1].name) {
        target.toName = itemOpt[1].name;
      }
      return mergeAll([target, itemOpt[0], itemOpt[1]]);
    });
  }
}
class LinesSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = LinesSeriesModel.type;
    this.visualStyleAccessPath = "lineStyle";
    this.visualDrawType = "stroke";
  }
  init(option) {
    option.data = option.data || [];
    compatEc2(option);
    const result = this._processFlatCoordsArray(option.data);
    this._flatCoords = result.flatCoords;
    this._flatCoordsOffset = result.flatCoordsOffset;
    if (result.flatCoords) {
      option.data = new Float32Array(result.count);
    }
    super.init.apply(this, arguments);
  }
  mergeOption(option) {
    option.data = option.data || [];
    compatEc2(option);
    if (option.data) {
      const result = this._processFlatCoordsArray(option.data);
      this._flatCoords = result.flatCoords;
      this._flatCoordsOffset = result.flatCoordsOffset;
      if (result.flatCoords) {
        option.data = new Float32Array(result.count);
      }
    }
    super.mergeOption.apply(this, arguments);
  }
  appendData(params) {
    const result = this._processFlatCoordsArray(params.data);
    if (result.flatCoords) {
      if (!this._flatCoords) {
        this._flatCoords = result.flatCoords;
        this._flatCoordsOffset = result.flatCoordsOffset;
      } else {
        this._flatCoords = concatArray(this._flatCoords, result.flatCoords);
        this._flatCoordsOffset = concatArray(this._flatCoordsOffset, result.flatCoordsOffset);
      }
      params.data = new Float32Array(result.count);
    }
    this.getRawData().appendData(params.data);
  }
  _getCoordsFromItemModel(idx) {
    const itemModel = this.getData().getItemModel(idx);
    const coords = itemModel.option instanceof Array ? itemModel.option : itemModel.getShallow("coords");
    if (__DEV__) {
      if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
        throw new Error("Invalid coords " + JSON.stringify(coords) + ". Lines must have 2d coords array in data item.");
      }
    }
    return coords;
  }
  getLineCoordsCount(idx) {
    if (this._flatCoordsOffset) {
      return this._flatCoordsOffset[idx * 2 + 1];
    } else {
      return this._getCoordsFromItemModel(idx).length;
    }
  }
  getLineCoords(idx, out2) {
    if (this._flatCoordsOffset) {
      const offset = this._flatCoordsOffset[idx * 2];
      const len2 = this._flatCoordsOffset[idx * 2 + 1];
      for (let i = 0; i < len2; i++) {
        out2[i] = out2[i] || [];
        out2[i][0] = this._flatCoords[offset + i * 2];
        out2[i][1] = this._flatCoords[offset + i * 2 + 1];
      }
      return len2;
    } else {
      const coords = this._getCoordsFromItemModel(idx);
      for (let i = 0; i < coords.length; i++) {
        out2[i] = out2[i] || [];
        out2[i][0] = coords[i][0];
        out2[i][1] = coords[i][1];
      }
      return coords.length;
    }
  }
  _processFlatCoordsArray(data) {
    let startOffset = 0;
    if (this._flatCoords) {
      startOffset = this._flatCoords.length;
    }
    if (typeof data[0] === "number") {
      const len2 = data.length;
      const coordsOffsetAndLenStorage = new Uint32Arr(len2);
      const coordsStorage = new Float64Arr(len2);
      let coordsCursor = 0;
      let offsetCursor = 0;
      let dataCount = 0;
      for (let i = 0; i < len2; ) {
        dataCount++;
        const count2 = data[i++];
        coordsOffsetAndLenStorage[offsetCursor++] = coordsCursor + startOffset;
        coordsOffsetAndLenStorage[offsetCursor++] = count2;
        for (let k = 0; k < count2; k++) {
          const x = data[i++];
          const y = data[i++];
          coordsStorage[coordsCursor++] = x;
          coordsStorage[coordsCursor++] = y;
          if (i > len2) {
            if (__DEV__) {
              throw new Error("Invalid data format.");
            }
          }
        }
      }
      return {
        flatCoordsOffset: new Uint32Array(coordsOffsetAndLenStorage.buffer, 0, offsetCursor),
        flatCoords: coordsStorage,
        count: dataCount
      };
    }
    return {
      flatCoordsOffset: null,
      flatCoords: null,
      count: data.length
    };
  }
  getInitialData(option, ecModel) {
    if (__DEV__) {
      const CoordSys = CoordinateSystem_default.get(option.coordinateSystem);
      if (!CoordSys) {
        throw new Error("Unkown coordinate system " + option.coordinateSystem);
      }
    }
    const lineData = new List_default(["value"], this);
    lineData.hasItemOption = false;
    lineData.initData(option.data, [], function(dataItem, dimName, dataIndex, dimIndex) {
      if (dataItem instanceof Array) {
        return NaN;
      } else {
        lineData.hasItemOption = true;
        const value = dataItem.value;
        if (value != null) {
          return value instanceof Array ? value[dimIndex] : value;
        }
      }
    });
    return lineData;
  }
  formatTooltip(dataIndex) {
    const data = this.getData();
    const itemModel = data.getItemModel(dataIndex);
    const name = itemModel.get("name");
    if (name) {
      return name;
    }
    const fromName = itemModel.get("fromName");
    const toName = itemModel.get("toName");
    const html = [];
    fromName != null && html.push(fromName);
    toName != null && html.push(toName);
    return encodeHTML(html.join(" > "));
  }
  preventIncremental() {
    return !!this.get(["effect", "show"]);
  }
  getProgressive() {
    const progressive = this.option.progressive;
    if (progressive == null) {
      return this.option.large ? 10000 : this.get("progressive");
    }
    return progressive;
  }
  getProgressiveThreshold() {
    const progressiveThreshold = this.option.progressiveThreshold;
    if (progressiveThreshold == null) {
      return this.option.large ? 20000 : this.get("progressiveThreshold");
    }
    return progressiveThreshold;
  }
}
LinesSeriesModel.type = "series.lines";
LinesSeriesModel.dependencies = ["grid", "polar", "geo", "calendar"];
LinesSeriesModel.defaultOption = {
  coordinateSystem: "geo",
  zlevel: 0,
  z: 2,
  legendHoverLink: true,
  xAxisIndex: 0,
  yAxisIndex: 0,
  symbol: ["none", "none"],
  symbolSize: [10, 10],
  geoIndex: 0,
  effect: {
    show: false,
    period: 4,
    constantSpeed: 0,
    symbol: "circle",
    symbolSize: 3,
    loop: true,
    trailLength: 0.2
  },
  large: false,
  largeThreshold: 2000,
  polyline: false,
  clip: true,
  label: {
    show: false,
    position: "end"
  },
  lineStyle: {
    opacity: 0.5
  }
};
Series_default.registerClass(LinesSeriesModel);

// src/chart/helper/EffectLine.ts
class EffectLine extends Group_default {
  constructor(lineData, idx, seriesScope) {
    super();
    this.add(this.createLine(lineData, idx, seriesScope));
    this._updateEffectSymbol(lineData, idx);
  }
  createLine(lineData, idx, seriesScope) {
    return new Line_default2(lineData, idx, seriesScope);
  }
  _updateEffectSymbol(lineData, idx) {
    const itemModel = lineData.getItemModel(idx);
    const effectModel = itemModel.getModel("effect");
    let size = effectModel.get("symbolSize");
    const symbolType = effectModel.get("symbol");
    if (!isArray(size)) {
      size = [size, size];
    }
    const lineStyle3 = lineData.getItemVisual(idx, "style");
    const color8 = effectModel.get("color") || lineStyle3 && lineStyle3.stroke;
    let symbol14 = this.childAt(1);
    if (this._symbolType !== symbolType) {
      this.remove(symbol14);
      symbol14 = createSymbol(symbolType, -0.5, -0.5, 1, 1, color8);
      symbol14.z2 = 100;
      symbol14.culling = true;
      this.add(symbol14);
    }
    if (!symbol14) {
      return;
    }
    symbol14.setStyle("shadowColor", color8);
    symbol14.setStyle(effectModel.getItemStyle(["color"]));
    symbol14.scaleX = size[0];
    symbol14.scaleY = size[1];
    symbol14.setColor(color8);
    this._symbolType = symbolType;
    this._symbolScale = size;
    this._updateEffectAnimation(lineData, effectModel, idx);
  }
  _updateEffectAnimation(lineData, effectModel, idx) {
    const symbol14 = this.childAt(1);
    if (!symbol14) {
      return;
    }
    const self2 = this;
    const points9 = lineData.getItemLayout(idx);
    let period = effectModel.get("period") * 1000;
    const loop = effectModel.get("loop");
    const constantSpeed = effectModel.get("constantSpeed");
    const delayExpr = retrieve(effectModel.get("delay"), function(idx2) {
      return idx2 / lineData.count() * period / 3;
    });
    symbol14.ignore = true;
    this._updateAnimationPoints(symbol14, points9);
    if (constantSpeed > 0) {
      period = this._getLineLength(symbol14) / constantSpeed * 1000;
    }
    if (period !== this._period || loop !== this._loop) {
      symbol14.stopAnimation();
      if (period > 0) {
        let delayNum;
        if (typeof delayExpr === "function") {
          delayNum = delayExpr(idx);
        } else {
          delayNum = delayExpr;
        }
        if (symbol14.__t > 0) {
          delayNum = -period * symbol14.__t;
        }
        symbol14.__t = 0;
        const animator = symbol14.animate("", loop).when(period, {
          __t: 1
        }).delay(delayNum).during(function() {
          self2._updateSymbolPosition(symbol14);
        });
        if (!loop) {
          animator.done(function() {
            self2.remove(symbol14);
          });
        }
        animator.start();
      }
    }
    this._period = period;
    this._loop = loop;
  }
  _getLineLength(symbol14) {
    return dist(symbol14.__p1, symbol14.__cp1) + dist(symbol14.__cp1, symbol14.__p2);
  }
  _updateAnimationPoints(symbol14, points9) {
    symbol14.__p1 = points9[0];
    symbol14.__p2 = points9[1];
    symbol14.__cp1 = points9[2] || [(points9[0][0] + points9[1][0]) / 2, (points9[0][1] + points9[1][1]) / 2];
  }
  updateData(lineData, idx, seriesScope) {
    this.childAt(0).updateData(lineData, idx, seriesScope);
    this._updateEffectSymbol(lineData, idx);
  }
  _updateSymbolPosition(symbol14) {
    const p1 = symbol14.__p1;
    const p2 = symbol14.__p2;
    const cp12 = symbol14.__cp1;
    const t = symbol14.__t;
    const pos = [symbol14.x, symbol14.y];
    const lastPos = pos.slice();
    const quadraticAt3 = quadraticAt;
    const quadraticDerivativeAt2 = quadraticDerivativeAt;
    pos[0] = quadraticAt3(p1[0], cp12[0], p2[0], t);
    pos[1] = quadraticAt3(p1[1], cp12[1], p2[1], t);
    const tx = quadraticDerivativeAt2(p1[0], cp12[0], p2[0], t);
    const ty = quadraticDerivativeAt2(p1[1], cp12[1], p2[1], t);
    symbol14.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
    if (this._symbolType === "line" || this._symbolType === "rect" || this._symbolType === "roundRect") {
      if (symbol14.__lastT !== void 0 && symbol14.__lastT < symbol14.__t) {
        symbol14.scaleY = dist(lastPos, pos) * 1.05;
        if (t === 1) {
          pos[0] = lastPos[0] + (pos[0] - lastPos[0]) / 2;
          pos[1] = lastPos[1] + (pos[1] - lastPos[1]) / 2;
        }
      } else if (symbol14.__lastT === 1) {
        symbol14.scaleY = 2 * dist(p1, pos);
      } else {
        symbol14.scaleY = this._symbolScale[1];
      }
    }
    symbol14.__lastT = symbol14.__t;
    symbol14.ignore = false;
    symbol14.x = pos[0];
    symbol14.y = pos[1];
  }
  updateLayout(lineData, idx) {
    this.childAt(0).updateLayout(lineData, idx);
    const effectModel = lineData.getItemModel(idx).getModel("effect");
    this._updateEffectAnimation(lineData, effectModel, idx);
  }
}
const EffectLine_default = EffectLine;

// src/chart/helper/Polyline.ts
class Polyline7 extends Group_default {
  constructor(lineData, idx, seriesScope) {
    super();
    this._createPolyline(lineData, idx, seriesScope);
  }
  _createPolyline(lineData, idx, seriesScope) {
    const points9 = lineData.getItemLayout(idx);
    const line3 = new Polyline_default({
      shape: {
        points: points9
      }
    });
    this.add(line3);
    this._updateCommonStl(lineData, idx, seriesScope);
  }
  updateData(lineData, idx, seriesScope) {
    const seriesModel = lineData.hostModel;
    const line3 = this.childAt(0);
    const target = {
      shape: {
        points: lineData.getItemLayout(idx)
      }
    };
    updateProps(line3, target, seriesModel, idx);
    this._updateCommonStl(lineData, idx, seriesScope);
  }
  _updateCommonStl(lineData, idx, seriesScope) {
    const line3 = this.childAt(0);
    const itemModel = lineData.getItemModel(idx);
    let hoverLineStyle = seriesScope && seriesScope.emphasisLineStyle;
    if (!seriesScope || lineData.hasItemOption) {
      hoverLineStyle = itemModel.getModel(["emphasis", "lineStyle"]).getLineStyle();
    }
    line3.useStyle(lineData.getItemVisual(idx, "style"));
    line3.style.fill = null;
    line3.style.strokeNoScale = true;
    const lineEmphasisState = line3.ensureState("emphasis");
    lineEmphasisState.style = hoverLineStyle;
    enableHoverEmphasis(this);
  }
  updateLayout(lineData, idx) {
    const polyline = this.childAt(0);
    polyline.setShape("points", lineData.getItemLayout(idx));
  }
}
const Polyline_default2 = Polyline7;

// src/chart/helper/EffectPolyline.ts
class EffectPolyline extends EffectLine_default {
  constructor() {
    super(...arguments);
    this._lastFrame = 0;
    this._lastFramePercent = 0;
  }
  createLine(lineData, idx, seriesScope) {
    return new Polyline_default2(lineData, idx, seriesScope);
  }
  _updateAnimationPoints(symbol14, points9) {
    this._points = points9;
    const accLenArr = [0];
    let len2 = 0;
    for (let i = 1; i < points9.length; i++) {
      const p1 = points9[i - 1];
      const p2 = points9[i];
      len2 += dist(p1, p2);
      accLenArr.push(len2);
    }
    if (len2 === 0) {
      this._length = 0;
      return;
    }
    for (let i = 0; i < accLenArr.length; i++) {
      accLenArr[i] /= len2;
    }
    this._offsets = accLenArr;
    this._length = len2;
  }
  _getLineLength() {
    return this._length;
  }
  _updateSymbolPosition(symbol14) {
    const t = symbol14.__t;
    const points9 = this._points;
    const offsets = this._offsets;
    const len2 = points9.length;
    if (!offsets) {
      return;
    }
    const lastFrame = this._lastFrame;
    let frame;
    if (t < this._lastFramePercent) {
      const start2 = Math.min(lastFrame + 1, len2 - 1);
      for (frame = start2; frame >= 0; frame--) {
        if (offsets[frame] <= t) {
          break;
        }
      }
      frame = Math.min(frame, len2 - 2);
    } else {
      for (frame = lastFrame; frame < len2; frame++) {
        if (offsets[frame] > t) {
          break;
        }
      }
      frame = Math.min(frame - 1, len2 - 2);
    }
    const p = (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame]);
    const p0 = points9[frame];
    const p1 = points9[frame + 1];
    symbol14.x = p0[0] * (1 - p) + p * p1[0];
    symbol14.y = p0[1] * (1 - p) + p * p1[1];
    const tx = p1[0] - p0[0];
    const ty = p1[1] - p0[1];
    symbol14.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
    this._lastFrame = frame;
    this._lastFramePercent = t;
    symbol14.ignore = false;
  }
}
const EffectPolyline_default = EffectPolyline;

// src/chart/helper/LargeLineDraw.ts
class LargeLinesPathShape {
  constructor() {
    this.polyline = false;
    this.curveness = 0;
    this.segs = [];
  }
}
class LargeLinesPath extends Path_default {
  constructor(opts) {
    super(opts);
  }
  getDefaultStyle() {
    return {
      stroke: "#000",
      fill: null
    };
  }
  getDefaultShape() {
    return new LargeLinesPathShape();
  }
  buildPath(ctx, shape) {
    const segs = shape.segs;
    const curveness = shape.curveness;
    if (shape.polyline) {
      for (let i = 0; i < segs.length; ) {
        const count2 = segs[i++];
        if (count2 > 0) {
          ctx.moveTo(segs[i++], segs[i++]);
          for (let k = 1; k < count2; k++) {
            ctx.lineTo(segs[i++], segs[i++]);
          }
        }
      }
    } else {
      for (let i = 0; i < segs.length; ) {
        const x0 = segs[i++];
        const y0 = segs[i++];
        const x1 = segs[i++];
        const y1 = segs[i++];
        ctx.moveTo(x0, y0);
        if (curveness > 0) {
          const x2 = (x0 + x1) / 2 - (y0 - y1) * curveness;
          const y2 = (y0 + y1) / 2 - (x1 - x0) * curveness;
          ctx.quadraticCurveTo(x2, y2, x1, y1);
        } else {
          ctx.lineTo(x1, y1);
        }
      }
    }
  }
  findDataIndex(x, y) {
    const shape = this.shape;
    const segs = shape.segs;
    const curveness = shape.curveness;
    const lineWidth = this.style.lineWidth;
    if (shape.polyline) {
      let dataIndex = 0;
      for (let i = 0; i < segs.length; ) {
        const count2 = segs[i++];
        if (count2 > 0) {
          const x0 = segs[i++];
          const y0 = segs[i++];
          for (let k = 1; k < count2; k++) {
            const x1 = segs[i++];
            const y1 = segs[i++];
            if (containStroke3(x0, y0, x1, y1, lineWidth, x, y)) {
              return dataIndex;
            }
          }
        }
        dataIndex++;
      }
    } else {
      let dataIndex = 0;
      for (let i = 0; i < segs.length; ) {
        const x0 = segs[i++];
        const y0 = segs[i++];
        const x1 = segs[i++];
        const y1 = segs[i++];
        if (curveness > 0) {
          const x2 = (x0 + x1) / 2 - (y0 - y1) * curveness;
          const y2 = (y0 + y1) / 2 - (x1 - x0) * curveness;
          if (containStroke5(x0, y0, x2, y2, x1, y1, lineWidth, x, y)) {
            return dataIndex;
          }
        } else {
          if (containStroke3(x0, y0, x1, y1, lineWidth, x, y)) {
            return dataIndex;
          }
        }
        dataIndex++;
      }
    }
    return -1;
  }
}
class LargeLineDraw {
  constructor() {
    this.group = new Group_default();
  }
  isPersistent() {
    return !this._incremental;
  }
  updateData(data) {
    this.group.removeAll();
    const lineEl = new LargeLinesPath({
      rectHover: true,
      cursor: "default"
    });
    lineEl.setShape({
      segs: data.getLayout("linesPoints")
    });
    this._setCommon(lineEl, data);
    this.group.add(lineEl);
    this._incremental = null;
  }
  incrementalPrepareUpdate(data) {
    this.group.removeAll();
    this._clearIncremental();
    if (data.count() > 500000) {
      if (!this._incremental) {
        this._incremental = new IncrementalDisplayble({
          silent: true
        });
      }
      this.group.add(this._incremental);
    } else {
      this._incremental = null;
    }
  }
  incrementalUpdate(taskParams, data) {
    const lineEl = new LargeLinesPath();
    lineEl.setShape({
      segs: data.getLayout("linesPoints")
    });
    this._setCommon(lineEl, data, !!this._incremental);
    if (!this._incremental) {
      lineEl.rectHover = true;
      lineEl.cursor = "default";
      lineEl.__startIndex = taskParams.start;
      this.group.add(lineEl);
    } else {
      this._incremental.addDisplayable(lineEl, true);
    }
  }
  remove() {
    this._clearIncremental();
    this._incremental = null;
    this.group.removeAll();
  }
  _setCommon(lineEl, data, isIncremental) {
    const hostModel = data.hostModel;
    lineEl.setShape({
      polyline: hostModel.get("polyline"),
      curveness: hostModel.get(["lineStyle", "curveness"])
    });
    lineEl.useStyle(hostModel.getModel("lineStyle").getLineStyle());
    lineEl.style.strokeNoScale = true;
    const style2 = data.getVisual("style");
    if (style2 && style2.stroke) {
      lineEl.setStyle("stroke", style2.stroke);
    }
    lineEl.setStyle("fill", null);
    if (!isIncremental) {
      const ecData = getECData(lineEl);
      ecData.seriesIndex = hostModel.seriesIndex;
      lineEl.on("mousemove", function(e) {
        ecData.dataIndex = null;
        const dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);
        if (dataIndex > 0) {
          ecData.dataIndex = dataIndex + lineEl.__startIndex;
        }
      });
    }
  }
  _clearIncremental() {
    const incremental = this._incremental;
    if (incremental) {
      incremental.clearDisplaybles();
    }
  }
}
const LargeLineDraw_default = LargeLineDraw;

// src/chart/lines/linesLayout.ts
const linesLayout3 = {
  seriesType: "lines",
  plan: createRenderPlanner_default(),
  reset: function(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    const isPolyline = seriesModel.get("polyline");
    const isLarge = seriesModel.pipelineContext.large;
    return {
      progress(params, lineData) {
        const lineCoords = [];
        if (isLarge) {
          let points9;
          const segCount = params.end - params.start;
          if (isPolyline) {
            let totalCoordsCount = 0;
            for (let i = params.start; i < params.end; i++) {
              totalCoordsCount += seriesModel.getLineCoordsCount(i);
            }
            points9 = new Float32Array(segCount + totalCoordsCount * 2);
          } else {
            points9 = new Float32Array(segCount * 4);
          }
          let offset = 0;
          let pt = [];
          for (let i = params.start; i < params.end; i++) {
            const len2 = seriesModel.getLineCoords(i, lineCoords);
            if (isPolyline) {
              points9[offset++] = len2;
            }
            for (let k = 0; k < len2; k++) {
              pt = coordSys.dataToPoint(lineCoords[k], false, pt);
              points9[offset++] = pt[0];
              points9[offset++] = pt[1];
            }
          }
          lineData.setLayout("linesPoints", points9);
        } else {
          for (let i = params.start; i < params.end; i++) {
            const itemModel = lineData.getItemModel(i);
            const len2 = seriesModel.getLineCoords(i, lineCoords);
            const pts = [];
            if (isPolyline) {
              for (let j = 0; j < len2; j++) {
                pts.push(coordSys.dataToPoint(lineCoords[j]));
              }
            } else {
              pts[0] = coordSys.dataToPoint(lineCoords[0]);
              pts[1] = coordSys.dataToPoint(lineCoords[1]);
              const curveness = itemModel.get(["lineStyle", "curveness"]);
              if (+curveness) {
                pts[2] = [(pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness, (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness];
              }
            }
            lineData.setItemLayout(i, pts);
          }
        }
      }
    };
  }
};
const linesLayout_default = linesLayout3;

// src/chart/lines/LinesView.ts
class LinesView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = LinesView2.type;
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const lineDraw = this._updateLineDraw(data, seriesModel);
    const zlevel = seriesModel.get("zlevel");
    const trailLength = seriesModel.get(["effect", "trailLength"]);
    const zr = api.getZr();
    const isSvg = zr.painter.getType() === "svg";
    if (!isSvg) {
      zr.painter.getLayer(zlevel).clear(true);
    }
    if (this._lastZlevel != null && !isSvg) {
      zr.configLayer(this._lastZlevel, {
        motionBlur: false
      });
    }
    if (this._showEffect(seriesModel) && trailLength) {
      if (__DEV__) {
        let notInIndividual = false;
        ecModel.eachSeries(function(otherSeriesModel) {
          if (otherSeriesModel !== seriesModel && otherSeriesModel.get("zlevel") === zlevel) {
            notInIndividual = true;
          }
        });
        notInIndividual && console.warn("Lines with trail effect should have an individual zlevel");
      }
      if (!isSvg) {
        zr.configLayer(zlevel, {
          motionBlur: true,
          lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
        });
      }
    }
    lineDraw.updateData(data);
    const clipPath = seriesModel.get("clip", true) && createClipPath(seriesModel.coordinateSystem, false, seriesModel);
    if (clipPath) {
      this.group.setClipPath(clipPath);
    } else {
      this.group.removeClipPath();
    }
    this._lastZlevel = zlevel;
    this._finished = true;
  }
  incrementalPrepareRender(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const lineDraw = this._updateLineDraw(data, seriesModel);
    lineDraw.incrementalPrepareUpdate(data);
    this._clearLayer(api);
    this._finished = false;
  }
  incrementalRender(taskParams, seriesModel, ecModel) {
    this._lineDraw.incrementalUpdate(taskParams, seriesModel.getData());
    this._finished = taskParams.end === seriesModel.getData().count();
  }
  updateTransform(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const pipelineContext = seriesModel.pipelineContext;
    if (!this._finished || pipelineContext.large || pipelineContext.progressiveRender) {
      return {
        update: true
      };
    } else {
      const res = linesLayout_default.reset(seriesModel, ecModel, api);
      if (res.progress) {
        res.progress({
          start: 0,
          end: data.count(),
          count: data.count()
        }, data);
      }
      this._lineDraw.updateLayout();
      this._clearLayer(api);
    }
  }
  _updateLineDraw(data, seriesModel) {
    let lineDraw = this._lineDraw;
    const hasEffect = this._showEffect(seriesModel);
    const isPolyline = !!seriesModel.get("polyline");
    const pipelineContext = seriesModel.pipelineContext;
    const isLargeDraw = pipelineContext.large;
    if (__DEV__) {
      if (hasEffect && isLargeDraw) {
        console.warn("Large lines not support effect");
      }
    }
    if (!lineDraw || hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLargeDraw !== this._isLargeDraw) {
      if (lineDraw) {
        lineDraw.remove();
      }
      lineDraw = this._lineDraw = isLargeDraw ? new LargeLineDraw_default() : new LineDraw_default(isPolyline ? hasEffect ? EffectPolyline_default : Polyline_default2 : hasEffect ? EffectLine_default : Line_default2);
      this._hasEffet = hasEffect;
      this._isPolyline = isPolyline;
      this._isLargeDraw = isLargeDraw;
      this.group.removeAll();
    }
    this.group.add(lineDraw.group);
    return lineDraw;
  }
  _showEffect(seriesModel) {
    return !!seriesModel.get(["effect", "show"]);
  }
  _clearLayer(api) {
    const zr = api.getZr();
    const isSvg = zr.painter.getType() === "svg";
    if (!isSvg && this._lastZlevel != null) {
      zr.painter.getLayer(this._lastZlevel).clear(true);
    }
  }
  remove(ecModel, api) {
    this._lineDraw && this._lineDraw.remove();
    this._lineDraw = null;
    this._clearLayer(api);
  }
}
LinesView2.type = "lines";
Chart_default.registerClass(LinesView2);

// src/chart/lines/linesVisual.ts
function normalize3(a) {
  if (!(a instanceof Array)) {
    a = [a, a];
  }
  return a;
}
const linesVisual2 = {
  seriesType: "lines",
  reset(seriesModel) {
    const symbolType = normalize3(seriesModel.get("symbol"));
    const symbolSize = normalize3(seriesModel.get("symbolSize"));
    const data = seriesModel.getData();
    data.setVisual("fromSymbol", symbolType && symbolType[0]);
    data.setVisual("toSymbol", symbolType && symbolType[1]);
    data.setVisual("fromSymbolSize", symbolSize && symbolSize[0]);
    data.setVisual("toSymbolSize", symbolSize && symbolSize[1]);
    function dataEach(data2, idx) {
      const itemModel = data2.getItemModel(idx);
      const symbolType2 = normalize3(itemModel.getShallow("symbol", true));
      const symbolSize2 = normalize3(itemModel.getShallow("symbolSize", true));
      symbolType2[0] && data2.setItemVisual(idx, "fromSymbol", symbolType2[0]);
      symbolType2[1] && data2.setItemVisual(idx, "toSymbol", symbolType2[1]);
      symbolSize2[0] && data2.setItemVisual(idx, "fromSymbolSize", symbolSize2[0]);
      symbolSize2[1] && data2.setItemVisual(idx, "toSymbolSize", symbolSize2[1]);
    }
    return {
      dataEach: data.hasItemOption ? dataEach : null
    };
  }
};
const linesVisual_default = linesVisual2;

// src/chart/lines.ts
registerLayout(linesLayout_default);
registerVisual(linesVisual_default);

// src/chart/heatmap/HeatmapSeries.ts
class HeatmapSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = HeatmapSeriesModel.type;
  }
  getInitialData(option, ecModel) {
    return createListFromArray_default(this.getSource(), this, {
      generateCoord: "value"
    });
  }
  preventIncremental() {
    const coordSysCreator = CoordinateSystem_default.get(this.get("coordinateSystem"));
    if (coordSysCreator && coordSysCreator.dimensions) {
      return coordSysCreator.dimensions[0] === "lng" && coordSysCreator.dimensions[1] === "lat";
    }
  }
}
HeatmapSeriesModel.type = "series.heatmap";
HeatmapSeriesModel.defaultOption = {
  coordinateSystem: "cartesian2d",
  zlevel: 0,
  z: 2,
  geoIndex: 0,
  blurSize: 30,
  pointSize: 20,
  maxOpacity: 1,
  minOpacity: 0,
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  }
};
Series_default.registerClass(HeatmapSeriesModel);

// src/chart/heatmap/HeatmapLayer.ts
const GRADIENT_LEVELS = 256;
class HeatmapLayer {
  constructor() {
    this.blurSize = 30;
    this.pointSize = 20;
    this.maxOpacity = 1;
    this.minOpacity = 0;
    this._gradientPixels = {
      inRange: null,
      outOfRange: null
    };
    const canvas2 = createCanvas();
    this.canvas = canvas2;
  }
  update(data, width, height, normalize5, colorFunc, isInRange) {
    const brush3 = this._getBrush();
    const gradientInRange = this._getGradient(colorFunc, "inRange");
    const gradientOutOfRange = this._getGradient(colorFunc, "outOfRange");
    const r = this.pointSize + this.blurSize;
    const canvas2 = this.canvas;
    const ctx = canvas2.getContext("2d");
    const len2 = data.length;
    canvas2.width = width;
    canvas2.height = height;
    for (let i = 0; i < len2; ++i) {
      const p = data[i];
      const x = p[0];
      const y = p[1];
      const value = p[2];
      const alpha = normalize5(value);
      ctx.globalAlpha = alpha;
      ctx.drawImage(brush3, x - r, y - r);
    }
    if (!canvas2.width || !canvas2.height) {
      return canvas2;
    }
    const imageData = ctx.getImageData(0, 0, canvas2.width, canvas2.height);
    const pixels = imageData.data;
    let offset = 0;
    const pixelLen = pixels.length;
    const minOpacity = this.minOpacity;
    const maxOpacity = this.maxOpacity;
    const diffOpacity = maxOpacity - minOpacity;
    while (offset < pixelLen) {
      let alpha = pixels[offset + 3] / 256;
      const gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;
      if (alpha > 0) {
        const gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;
        alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);
        pixels[offset++] = gradient[gradientOffset];
        pixels[offset++] = gradient[gradientOffset + 1];
        pixels[offset++] = gradient[gradientOffset + 2];
        pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;
      } else {
        offset += 4;
      }
    }
    ctx.putImageData(imageData, 0, 0);
    return canvas2;
  }
  _getBrush() {
    const brushCanvas = this._brushCanvas || (this._brushCanvas = createCanvas());
    const r = this.pointSize + this.blurSize;
    const d = r * 2;
    brushCanvas.width = d;
    brushCanvas.height = d;
    const ctx = brushCanvas.getContext("2d");
    ctx.clearRect(0, 0, d, d);
    ctx.shadowOffsetX = d;
    ctx.shadowBlur = this.blurSize;
    ctx.shadowColor = "#000";
    ctx.beginPath();
    ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
    ctx.closePath();
    ctx.fill();
    return brushCanvas;
  }
  _getGradient(colorFunc, state) {
    const gradientPixels = this._gradientPixels;
    const pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
    const color8 = [0, 0, 0, 0];
    let off = 0;
    for (let i = 0; i < 256; i++) {
      colorFunc[state](i / 255, true, color8);
      pixelsSingleState[off++] = color8[0];
      pixelsSingleState[off++] = color8[1];
      pixelsSingleState[off++] = color8[2];
      pixelsSingleState[off++] = color8[3];
    }
    return pixelsSingleState;
  }
}
const HeatmapLayer_default = HeatmapLayer;

// src/chart/heatmap/HeatmapView.ts
function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
  const dataSpan = dataExtent[1] - dataExtent[0];
  pieceList = map2(pieceList, function(piece) {
    return {
      interval: [(piece.interval[0] - dataExtent[0]) / dataSpan, (piece.interval[1] - dataExtent[0]) / dataSpan]
    };
  });
  const len2 = pieceList.length;
  let lastIndex = 0;
  return function(val) {
    let i;
    for (i = lastIndex; i < len2; i++) {
      const interval = pieceList[i].interval;
      if (interval[0] <= val && val <= interval[1]) {
        lastIndex = i;
        break;
      }
    }
    if (i === len2) {
      for (i = lastIndex - 1; i >= 0; i--) {
        const interval = pieceList[i].interval;
        if (interval[0] <= val && val <= interval[1]) {
          lastIndex = i;
          break;
        }
      }
    }
    return i >= 0 && i < len2 && selected[i];
  };
}
function getIsInContinuousRange(dataExtent, range) {
  const dataSpan = dataExtent[1] - dataExtent[0];
  range = [(range[0] - dataExtent[0]) / dataSpan, (range[1] - dataExtent[0]) / dataSpan];
  return function(val) {
    return val >= range[0] && val <= range[1];
  };
}
function isGeoCoordSys(coordSys) {
  const dimensions = coordSys.dimensions;
  return dimensions[0] === "lng" && dimensions[1] === "lat";
}
class HeatmapView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = HeatmapView2.type;
  }
  render(seriesModel, ecModel, api) {
    let visualMapOfThisSeries;
    ecModel.eachComponent("visualMap", function(visualMap2) {
      visualMap2.eachTargetSeries(function(targetSeries) {
        if (targetSeries === seriesModel) {
          visualMapOfThisSeries = visualMap2;
        }
      });
    });
    if (__DEV__) {
      if (!visualMapOfThisSeries) {
        throw new Error("Heatmap must use with visualMap");
      }
    }
    this.group.removeAll();
    this._incrementalDisplayable = null;
    const coordSys = seriesModel.coordinateSystem;
    if (coordSys.type === "cartesian2d" || coordSys.type === "calendar") {
      this._renderOnCartesianAndCalendar(seriesModel, api, 0, seriesModel.getData().count());
    } else if (isGeoCoordSys(coordSys)) {
      this._renderOnGeo(coordSys, seriesModel, visualMapOfThisSeries, api);
    }
  }
  incrementalPrepareRender(seriesModel, ecModel, api) {
    this.group.removeAll();
  }
  incrementalRender(params, seriesModel, ecModel, api) {
    const coordSys = seriesModel.coordinateSystem;
    if (coordSys) {
      this._renderOnCartesianAndCalendar(seriesModel, api, params.start, params.end, true);
    }
  }
  _renderOnCartesianAndCalendar(seriesModel, api, start2, end2, incremental) {
    const coordSys = seriesModel.coordinateSystem;
    let width;
    let height;
    let xAxisExtent;
    let yAxisExtent;
    if (isCoordinateSystemType(coordSys, "cartesian2d")) {
      const xAxis = coordSys.getAxis("x");
      const yAxis = coordSys.getAxis("y");
      if (__DEV__) {
        if (!(xAxis.type === "category" && yAxis.type === "category")) {
          throw new Error("Heatmap on cartesian must have two category axes");
        }
        if (!(xAxis.onBand && yAxis.onBand)) {
          throw new Error("Heatmap on cartesian must have two axes with boundaryGap true");
        }
      }
      width = xAxis.getBandWidth();
      height = yAxis.getBandWidth();
      xAxisExtent = xAxis.scale.getExtent();
      yAxisExtent = yAxis.scale.getExtent();
    }
    const group = this.group;
    const data = seriesModel.getData();
    let emphasisStyle = seriesModel.getModel(["emphasis", "itemStyle"]).getItemStyle();
    let blurStyle = seriesModel.getModel(["blur", "itemStyle"]).getItemStyle();
    let selectStyle = seriesModel.getModel(["select", "itemStyle"]).getItemStyle();
    let labelStatesModels = getLabelStatesModels(seriesModel);
    let focus = seriesModel.get(["emphasis", "focus"]);
    let blurScope = seriesModel.get(["emphasis", "blurScope"]);
    const dataDims = isCoordinateSystemType(coordSys, "cartesian2d") ? [data.mapDimension("x"), data.mapDimension("y"), data.mapDimension("value")] : [data.mapDimension("time"), data.mapDimension("value")];
    for (let idx = start2; idx < end2; idx++) {
      let rect;
      if (isCoordinateSystemType(coordSys, "cartesian2d")) {
        const dataDimX = data.get(dataDims[0], idx);
        const dataDimY = data.get(dataDims[1], idx);
        if (isNaN(data.get(dataDims[2], idx)) || dataDimX < xAxisExtent[0] || dataDimX > xAxisExtent[1] || dataDimY < yAxisExtent[0] || dataDimY > yAxisExtent[1]) {
          continue;
        }
        const point = coordSys.dataToPoint([dataDimX, dataDimY]);
        rect = new Rect_default({
          shape: {
            x: Math.floor(Math.round(point[0]) - width / 2),
            y: Math.floor(Math.round(point[1]) - height / 2),
            width: Math.ceil(width),
            height: Math.ceil(height)
          },
          style: data.getItemVisual(idx, "style")
        });
      } else {
        if (isNaN(data.get(dataDims[1], idx))) {
          continue;
        }
        rect = new Rect_default({
          z2: 1,
          shape: coordSys.dataToRect([data.get(dataDims[0], idx)]).contentShape,
          style: data.getItemVisual(idx, "style")
        });
      }
      const itemModel = data.getItemModel(idx);
      if (data.hasItemOption) {
        const emphasisModel = itemModel.getModel("emphasis");
        emphasisStyle = emphasisModel.getModel("itemStyle").getItemStyle();
        blurStyle = itemModel.getModel(["blur", "itemStyle"]).getItemStyle();
        selectStyle = itemModel.getModel(["select", "itemStyle"]).getItemStyle();
        focus = emphasisModel.get("focus");
        blurScope = emphasisModel.get("blurScope");
        labelStatesModels = getLabelStatesModels(itemModel);
      }
      const rawValue = seriesModel.getRawValue(idx);
      let defaultText = "-";
      if (rawValue && rawValue[2] != null) {
        defaultText = rawValue[2] + "";
      }
      setLabelStyle(rect, labelStatesModels, {
        labelFetcher: seriesModel,
        labelDataIndex: idx,
        defaultText
      });
      rect.ensureState("emphasis").style = emphasisStyle;
      rect.ensureState("blur").style = blurStyle;
      rect.ensureState("select").style = selectStyle;
      enableHoverEmphasis(rect, focus, blurScope);
      rect.incremental = incremental;
      if (incremental) {
        rect.states.emphasis.hoverLayer = true;
      }
      group.add(rect);
      data.setItemGraphicEl(idx, rect);
    }
  }
  _renderOnGeo(geo2, seriesModel, visualMapModel, api) {
    const inRangeVisuals = visualMapModel.targetVisuals.inRange;
    const outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;
    const data = seriesModel.getData();
    const hmLayer = this._hmLayer || (this._hmLayer || new HeatmapLayer_default());
    hmLayer.blurSize = seriesModel.get("blurSize");
    hmLayer.pointSize = seriesModel.get("pointSize");
    hmLayer.minOpacity = seriesModel.get("minOpacity");
    hmLayer.maxOpacity = seriesModel.get("maxOpacity");
    const rect = geo2.getViewRect().clone();
    const roamTransform = geo2.getRoamTransform();
    rect.applyTransform(roamTransform);
    const x = Math.max(rect.x, 0);
    const y = Math.max(rect.y, 0);
    const x2 = Math.min(rect.width + rect.x, api.getWidth());
    const y2 = Math.min(rect.height + rect.y, api.getHeight());
    const width = x2 - x;
    const height = y2 - y;
    const dims = [data.mapDimension("lng"), data.mapDimension("lat"), data.mapDimension("value")];
    const points9 = data.mapArray(dims, function(lng, lat, value) {
      const pt = geo2.dataToPoint([lng, lat]);
      pt[0] -= x;
      pt[1] -= y;
      pt.push(value);
      return pt;
    });
    const dataExtent = visualMapModel.getExtent();
    const isInRange = visualMapModel.type === "visualMap.continuous" ? getIsInContinuousRange(dataExtent, visualMapModel.option.range) : getIsInPiecewiseRange(dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected);
    hmLayer.update(points9, width, height, inRangeVisuals.color.getNormalizer(), {
      inRange: inRangeVisuals.color.getColorMapper(),
      outOfRange: outOfRangeVisuals.color.getColorMapper()
    }, isInRange);
    const img = new Image_default({
      style: {
        width,
        height,
        x,
        y,
        image: hmLayer.canvas
      },
      silent: true
    });
    this.group.add(img);
  }
}
HeatmapView2.type = "heatmap";
Chart_default.registerClass(HeatmapView2);

// src/chart/heatmap.ts

// src/chart/bar/PictorialBarSeries.ts
class PictorialBarSeriesModel extends BaseBarSeries_default {
  constructor() {
    super(...arguments);
    this.type = PictorialBarSeriesModel.type;
    this.hasSymbolVisual = true;
    this.defaultSymbol = "roundRect";
  }
  getInitialData(option) {
    option.stack = null;
    return super.getInitialData.apply(this, arguments);
  }
}
PictorialBarSeriesModel.type = "series.pictorialBar";
PictorialBarSeriesModel.dependencies = ["grid"];
PictorialBarSeriesModel.defaultOption = inheritDefaultOption(BaseBarSeries_default.defaultOption, {
  symbol: "circle",
  symbolSize: null,
  symbolRotate: null,
  symbolPosition: null,
  symbolOffset: null,
  symbolMargin: null,
  symbolRepeat: false,
  symbolRepeatDirection: "end",
  symbolClip: false,
  symbolBoundingData: null,
  symbolPatternSize: 400,
  barGap: "-100%",
  progressive: 0,
  emphasis: {
    scale: false
  },
  select: {
    itemStyle: {
      borderColor: "#212121"
    }
  }
});
Series_default.registerClass(PictorialBarSeriesModel);

// src/chart/bar/PictorialBarView.ts
const BAR_BORDER_WIDTH_QUERY2 = ["itemStyle", "borderWidth"];
const LAYOUT_ATTRS = [{
  xy: "x",
  wh: "width",
  index: 0,
  posDesc: ["left", "right"]
}, {
  xy: "y",
  wh: "height",
  index: 1,
  posDesc: ["top", "bottom"]
}];
const pathForLineWidth = new Circle_default();
class PictorialBarView extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = PictorialBarView.type;
  }
  render(seriesModel, ecModel, api) {
    const group = this.group;
    const data = seriesModel.getData();
    const oldData = this._data;
    const cartesian = seriesModel.coordinateSystem;
    const baseAxis = cartesian.getBaseAxis();
    const isHorizontal = baseAxis.isHorizontal();
    const coordSysRect = cartesian.master.getRect();
    const opt = {
      ecSize: {
        width: api.getWidth(),
        height: api.getHeight()
      },
      seriesModel,
      coordSys: cartesian,
      coordSysExtent: [[coordSysRect.x, coordSysRect.x + coordSysRect.width], [coordSysRect.y, coordSysRect.y + coordSysRect.height]],
      isHorizontal,
      valueDim: LAYOUT_ATTRS[+isHorizontal],
      categoryDim: LAYOUT_ATTRS[1 - +isHorizontal]
    };
    data.diff(oldData).add(function(dataIndex) {
      if (!data.hasValue(dataIndex)) {
        return;
      }
      const itemModel = getItemModel(data, dataIndex);
      const symbolMeta = getSymbolMeta(data, dataIndex, itemModel, opt);
      const bar2 = createBar(data, opt, symbolMeta);
      data.setItemGraphicEl(dataIndex, bar2);
      group.add(bar2);
      updateCommon(bar2, opt, symbolMeta);
    }).update(function(newIndex, oldIndex) {
      let bar2 = oldData.getItemGraphicEl(oldIndex);
      if (!data.hasValue(newIndex)) {
        group.remove(bar2);
        return;
      }
      const itemModel = getItemModel(data, newIndex);
      const symbolMeta = getSymbolMeta(data, newIndex, itemModel, opt);
      const pictorialShapeStr = getShapeStr(data, symbolMeta);
      if (bar2 && pictorialShapeStr !== bar2.__pictorialShapeStr) {
        group.remove(bar2);
        data.setItemGraphicEl(newIndex, null);
        bar2 = null;
      }
      if (bar2) {
        updateBar(bar2, opt, symbolMeta);
      } else {
        bar2 = createBar(data, opt, symbolMeta, true);
      }
      data.setItemGraphicEl(newIndex, bar2);
      bar2.__pictorialSymbolMeta = symbolMeta;
      group.add(bar2);
      updateCommon(bar2, opt, symbolMeta);
    }).remove(function(dataIndex) {
      const bar2 = oldData.getItemGraphicEl(dataIndex);
      bar2 && removeBar(oldData, dataIndex, bar2.__pictorialSymbolMeta.animationModel, bar2);
    }).execute();
    this._data = data;
    return this.group;
  }
  remove(ecModel, api) {
    const group = this.group;
    const data = this._data;
    if (ecModel.get("animation")) {
      if (data) {
        data.eachItemGraphicEl(function(bar2) {
          removeBar(data, getECData(bar2).dataIndex, ecModel, bar2);
        });
      }
    } else {
      group.removeAll();
    }
  }
}
PictorialBarView.type = "pictorialBar";
function getSymbolMeta(data, dataIndex, itemModel, opt) {
  const layout33 = data.getItemLayout(dataIndex);
  const symbolRepeat = itemModel.get("symbolRepeat");
  const symbolClip = itemModel.get("symbolClip");
  const symbolPosition = itemModel.get("symbolPosition") || "start";
  const symbolRotate = itemModel.get("symbolRotate");
  const rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
  const symbolPatternSize = itemModel.get("symbolPatternSize") || 2;
  const isAnimationEnabled2 = itemModel.isAnimationEnabled();
  const symbolMeta = {
    dataIndex,
    layout: layout33,
    itemModel,
    symbolType: data.getItemVisual(dataIndex, "symbol") || "circle",
    style: data.getItemVisual(dataIndex, "style"),
    symbolClip,
    symbolRepeat,
    symbolRepeatDirection: itemModel.get("symbolRepeatDirection"),
    symbolPatternSize,
    rotation,
    animationModel: isAnimationEnabled2 ? itemModel : null,
    hoverScale: isAnimationEnabled2 && itemModel.get(["emphasis", "scale"]),
    z2: itemModel.getShallow("z", true) || 0
  };
  prepareBarLength(itemModel, symbolRepeat, layout33, opt, symbolMeta);
  prepareSymbolSize(data, dataIndex, layout33, symbolRepeat, symbolClip, symbolMeta.boundingLength, symbolMeta.pxSign, symbolPatternSize, opt, symbolMeta);
  prepareLineWidth(itemModel, symbolMeta.symbolScale, rotation, opt, symbolMeta);
  const symbolSize = symbolMeta.symbolSize;
  let symbolOffset = itemModel.get("symbolOffset");
  if (isArray(symbolOffset)) {
    symbolOffset = [parsePercent3(symbolOffset[0], symbolSize[0]), parsePercent3(symbolOffset[1], symbolSize[1])];
  }
  prepareLayoutInfo(itemModel, symbolSize, layout33, symbolRepeat, symbolClip, symbolOffset, symbolPosition, symbolMeta.valueLineWidth, symbolMeta.boundingLength, symbolMeta.repeatCutLength, opt, symbolMeta);
  return symbolMeta;
}
function prepareBarLength(itemModel, symbolRepeat, layout33, opt, outputSymbolMeta) {
  const valueDim = opt.valueDim;
  const symbolBoundingData = itemModel.get("symbolBoundingData");
  const valueAxis2 = opt.coordSys.getOtherAxis(opt.coordSys.getBaseAxis());
  const zeroPx = valueAxis2.toGlobalCoord(valueAxis2.dataToCoord(0));
  const pxSignIdx = 1 - +(layout33[valueDim.wh] <= 0);
  let boundingLength;
  if (isArray(symbolBoundingData)) {
    const symbolBoundingExtent = [convertToCoordOnAxis(valueAxis2, symbolBoundingData[0]) - zeroPx, convertToCoordOnAxis(valueAxis2, symbolBoundingData[1]) - zeroPx];
    symbolBoundingExtent[1] < symbolBoundingExtent[0] && symbolBoundingExtent.reverse();
    boundingLength = symbolBoundingExtent[pxSignIdx];
  } else if (symbolBoundingData != null) {
    boundingLength = convertToCoordOnAxis(valueAxis2, symbolBoundingData) - zeroPx;
  } else if (symbolRepeat) {
    boundingLength = opt.coordSysExtent[valueDim.index][pxSignIdx] - zeroPx;
  } else {
    boundingLength = layout33[valueDim.wh];
  }
  outputSymbolMeta.boundingLength = boundingLength;
  if (symbolRepeat) {
    outputSymbolMeta.repeatCutLength = layout33[valueDim.wh];
  }
  outputSymbolMeta.pxSign = boundingLength > 0 ? 1 : boundingLength < 0 ? -1 : 0;
}
function convertToCoordOnAxis(axis2, value) {
  return axis2.toGlobalCoord(axis2.dataToCoord(axis2.scale.parse(value)));
}
function prepareSymbolSize(data, dataIndex, layout33, symbolRepeat, symbolClip, boundingLength, pxSign, symbolPatternSize, opt, outputSymbolMeta) {
  const valueDim = opt.valueDim;
  const categoryDim = opt.categoryDim;
  const categorySize = Math.abs(layout33[categoryDim.wh]);
  const symbolSize = data.getItemVisual(dataIndex, "symbolSize");
  let parsedSymbolSize;
  if (isArray(symbolSize)) {
    parsedSymbolSize = symbolSize.slice();
  } else {
    if (symbolSize == null) {
      parsedSymbolSize = ["100%", "100%"];
    } else {
      parsedSymbolSize = [symbolSize, symbolSize];
    }
  }
  parsedSymbolSize[categoryDim.index] = parsePercent3(parsedSymbolSize[categoryDim.index], categorySize);
  parsedSymbolSize[valueDim.index] = parsePercent3(parsedSymbolSize[valueDim.index], symbolRepeat ? categorySize : Math.abs(boundingLength));
  outputSymbolMeta.symbolSize = parsedSymbolSize;
  const symbolScale = outputSymbolMeta.symbolScale = [parsedSymbolSize[0] / symbolPatternSize, parsedSymbolSize[1] / symbolPatternSize];
  symbolScale[valueDim.index] *= (opt.isHorizontal ? -1 : 1) * pxSign;
}
function prepareLineWidth(itemModel, symbolScale, rotation, opt, outputSymbolMeta) {
  let valueLineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY2) || 0;
  if (valueLineWidth) {
    pathForLineWidth.attr({
      scaleX: symbolScale[0],
      scaleY: symbolScale[1],
      rotation
    });
    pathForLineWidth.updateTransform();
    valueLineWidth /= pathForLineWidth.getLineScale();
    valueLineWidth *= symbolScale[opt.valueDim.index];
  }
  outputSymbolMeta.valueLineWidth = valueLineWidth;
}
function prepareLayoutInfo(itemModel, symbolSize, layout33, symbolRepeat, symbolClip, symbolOffset, symbolPosition, valueLineWidth, boundingLength, repeatCutLength, opt, outputSymbolMeta) {
  const categoryDim = opt.categoryDim;
  const valueDim = opt.valueDim;
  const pxSign = outputSymbolMeta.pxSign;
  const unitLength = Math.max(symbolSize[valueDim.index] + valueLineWidth, 0);
  let pathLen = unitLength;
  if (symbolRepeat) {
    const absBoundingLength = Math.abs(boundingLength);
    let symbolMargin = retrieve(itemModel.get("symbolMargin"), "15%") + "";
    let hasEndGap = false;
    if (symbolMargin.lastIndexOf("!") === symbolMargin.length - 1) {
      hasEndGap = true;
      symbolMargin = symbolMargin.slice(0, symbolMargin.length - 1);
    }
    let symbolMarginNumeric = parsePercent3(symbolMargin, symbolSize[valueDim.index]);
    let uLenWithMargin = Math.max(unitLength + symbolMarginNumeric * 2, 0);
    let endFix = hasEndGap ? 0 : symbolMarginNumeric * 2;
    const repeatSpecified = isNumeric(symbolRepeat);
    let repeatTimes = repeatSpecified ? symbolRepeat : toIntTimes((absBoundingLength + endFix) / uLenWithMargin);
    const mDiff = absBoundingLength - repeatTimes * unitLength;
    symbolMarginNumeric = mDiff / 2 / (hasEndGap ? repeatTimes : repeatTimes - 1);
    uLenWithMargin = unitLength + symbolMarginNumeric * 2;
    endFix = hasEndGap ? 0 : symbolMarginNumeric * 2;
    if (!repeatSpecified && symbolRepeat !== "fixed") {
      repeatTimes = repeatCutLength ? toIntTimes((Math.abs(repeatCutLength) + endFix) / uLenWithMargin) : 0;
    }
    pathLen = repeatTimes * uLenWithMargin - endFix;
    outputSymbolMeta.repeatTimes = repeatTimes;
    outputSymbolMeta.symbolMargin = symbolMarginNumeric;
  }
  const sizeFix = pxSign * (pathLen / 2);
  const pathPosition = outputSymbolMeta.pathPosition = [];
  pathPosition[categoryDim.index] = layout33[categoryDim.wh] / 2;
  pathPosition[valueDim.index] = symbolPosition === "start" ? sizeFix : symbolPosition === "end" ? boundingLength - sizeFix : boundingLength / 2;
  if (symbolOffset) {
    pathPosition[0] += symbolOffset[0];
    pathPosition[1] += symbolOffset[1];
  }
  const bundlePosition = outputSymbolMeta.bundlePosition = [];
  bundlePosition[categoryDim.index] = layout33[categoryDim.xy];
  bundlePosition[valueDim.index] = layout33[valueDim.xy];
  const barRectShape = outputSymbolMeta.barRectShape = extend({}, layout33);
  barRectShape[valueDim.wh] = pxSign * Math.max(Math.abs(layout33[valueDim.wh]), Math.abs(pathPosition[valueDim.index] + sizeFix));
  barRectShape[categoryDim.wh] = layout33[categoryDim.wh];
  const clipShape = outputSymbolMeta.clipShape = {};
  clipShape[categoryDim.xy] = -layout33[categoryDim.xy];
  clipShape[categoryDim.wh] = opt.ecSize[categoryDim.wh];
  clipShape[valueDim.xy] = 0;
  clipShape[valueDim.wh] = layout33[valueDim.wh];
}
function createPath(symbolMeta) {
  const symbolPatternSize = symbolMeta.symbolPatternSize;
  const path2 = createSymbol(symbolMeta.symbolType, -symbolPatternSize / 2, -symbolPatternSize / 2, symbolPatternSize, symbolPatternSize);
  path2.attr({
    culling: true
  });
  path2.type !== "image" && path2.setStyle({
    strokeNoScale: true
  });
  return path2;
}
function createOrUpdateRepeatSymbols(bar2, opt, symbolMeta, isUpdate) {
  const bundle = bar2.__pictorialBundle;
  const symbolSize = symbolMeta.symbolSize;
  const valueLineWidth = symbolMeta.valueLineWidth;
  const pathPosition = symbolMeta.pathPosition;
  const valueDim = opt.valueDim;
  const repeatTimes = symbolMeta.repeatTimes || 0;
  let index = 0;
  const unit = symbolSize[opt.valueDim.index] + valueLineWidth + symbolMeta.symbolMargin * 2;
  eachPath(bar2, function(path2) {
    path2.__pictorialAnimationIndex = index;
    path2.__pictorialRepeatTimes = repeatTimes;
    if (index < repeatTimes) {
      updateAttr(path2, null, makeTarget(index), symbolMeta, isUpdate);
    } else {
      updateAttr(path2, null, {
        scaleX: 0,
        scaleY: 0
      }, symbolMeta, isUpdate, function() {
        bundle.remove(path2);
      });
    }
    index++;
  });
  for (; index < repeatTimes; index++) {
    const path2 = createPath(symbolMeta);
    path2.__pictorialAnimationIndex = index;
    path2.__pictorialRepeatTimes = repeatTimes;
    bundle.add(path2);
    const target = makeTarget(index);
    updateAttr(path2, {
      x: target.x,
      y: target.y,
      scaleX: 0,
      scaleY: 0
    }, {
      scaleX: target.scaleX,
      scaleY: target.scaleY,
      rotation: target.rotation
    }, symbolMeta, isUpdate);
  }
  function makeTarget(index2) {
    const position2 = pathPosition.slice();
    const pxSign = symbolMeta.pxSign;
    let i = index2;
    if (symbolMeta.symbolRepeatDirection === "start" ? pxSign > 0 : pxSign < 0) {
      i = repeatTimes - 1 - index2;
    }
    position2[valueDim.index] = unit * (i - repeatTimes / 2 + 0.5) + pathPosition[valueDim.index];
    return {
      x: position2[0],
      y: position2[1],
      scaleX: symbolMeta.symbolScale[0],
      scaleY: symbolMeta.symbolScale[1],
      rotation: symbolMeta.rotation
    };
  }
}
function createOrUpdateSingleSymbol(bar2, opt, symbolMeta, isUpdate) {
  const bundle = bar2.__pictorialBundle;
  let mainPath = bar2.__pictorialMainPath;
  if (!mainPath) {
    mainPath = bar2.__pictorialMainPath = createPath(symbolMeta);
    bundle.add(mainPath);
    updateAttr(mainPath, {
      x: symbolMeta.pathPosition[0],
      y: symbolMeta.pathPosition[1],
      scaleX: 0,
      scaleY: 0,
      rotation: symbolMeta.rotation
    }, {
      scaleX: symbolMeta.symbolScale[0],
      scaleY: symbolMeta.symbolScale[1]
    }, symbolMeta, isUpdate);
  } else {
    updateAttr(mainPath, null, {
      x: symbolMeta.pathPosition[0],
      y: symbolMeta.pathPosition[1],
      scaleX: symbolMeta.symbolScale[0],
      scaleY: symbolMeta.symbolScale[1],
      rotation: symbolMeta.rotation
    }, symbolMeta, isUpdate);
  }
}
function createOrUpdateBarRect(bar2, symbolMeta, isUpdate) {
  const rectShape = extend({}, symbolMeta.barRectShape);
  let barRect = bar2.__pictorialBarRect;
  if (!barRect) {
    barRect = bar2.__pictorialBarRect = new Rect_default({
      z2: 2,
      shape: rectShape,
      silent: true,
      style: {
        stroke: "transparent",
        fill: "transparent",
        lineWidth: 0
      }
    });
    bar2.add(barRect);
  } else {
    updateAttr(barRect, null, {
      shape: rectShape
    }, symbolMeta, isUpdate);
  }
}
function createOrUpdateClip(bar2, opt, symbolMeta, isUpdate) {
  if (symbolMeta.symbolClip) {
    let clipPath = bar2.__pictorialClipPath;
    const clipShape = extend({}, symbolMeta.clipShape);
    const valueDim = opt.valueDim;
    const animationModel = symbolMeta.animationModel;
    const dataIndex = symbolMeta.dataIndex;
    if (clipPath) {
      updateProps(clipPath, {
        shape: clipShape
      }, animationModel, dataIndex);
    } else {
      clipShape[valueDim.wh] = 0;
      clipPath = new Rect_default({
        shape: clipShape
      });
      bar2.__pictorialBundle.setClipPath(clipPath);
      bar2.__pictorialClipPath = clipPath;
      const target = {};
      target[valueDim.wh] = symbolMeta.clipShape[valueDim.wh];
      graphic_exports[isUpdate ? "updateProps" : "initProps"](clipPath, {
        shape: target
      }, animationModel, dataIndex);
    }
  }
}
function getItemModel(data, dataIndex) {
  const itemModel = data.getItemModel(dataIndex);
  itemModel.getAnimationDelayParams = getAnimationDelayParams;
  itemModel.isAnimationEnabled = isAnimationEnabled;
  return itemModel;
}
function getAnimationDelayParams(path2) {
  return {
    index: path2.__pictorialAnimationIndex,
    count: path2.__pictorialRepeatTimes
  };
}
function isAnimationEnabled() {
  return this.parentModel.isAnimationEnabled() && !!this.getShallow("animation");
}
function createBar(data, opt, symbolMeta, isUpdate) {
  const bar2 = new Group_default();
  const bundle = new Group_default();
  bar2.add(bundle);
  bar2.__pictorialBundle = bundle;
  bundle.x = symbolMeta.bundlePosition[0];
  bundle.y = symbolMeta.bundlePosition[1];
  if (symbolMeta.symbolRepeat) {
    createOrUpdateRepeatSymbols(bar2, opt, symbolMeta);
  } else {
    createOrUpdateSingleSymbol(bar2, opt, symbolMeta);
  }
  createOrUpdateBarRect(bar2, symbolMeta, isUpdate);
  createOrUpdateClip(bar2, opt, symbolMeta, isUpdate);
  bar2.__pictorialShapeStr = getShapeStr(data, symbolMeta);
  bar2.__pictorialSymbolMeta = symbolMeta;
  return bar2;
}
function updateBar(bar2, opt, symbolMeta) {
  const animationModel = symbolMeta.animationModel;
  const dataIndex = symbolMeta.dataIndex;
  const bundle = bar2.__pictorialBundle;
  updateProps(bundle, {
    x: symbolMeta.bundlePosition[0],
    y: symbolMeta.bundlePosition[1]
  }, animationModel, dataIndex);
  if (symbolMeta.symbolRepeat) {
    createOrUpdateRepeatSymbols(bar2, opt, symbolMeta, true);
  } else {
    createOrUpdateSingleSymbol(bar2, opt, symbolMeta, true);
  }
  createOrUpdateBarRect(bar2, symbolMeta, true);
  createOrUpdateClip(bar2, opt, symbolMeta, true);
}
function removeBar(data, dataIndex, animationModel, bar2) {
  const labelRect = bar2.__pictorialBarRect;
  labelRect && labelRect.removeTextContent();
  const pathes = [];
  eachPath(bar2, function(path2) {
    pathes.push(path2);
  });
  bar2.__pictorialMainPath && pathes.push(bar2.__pictorialMainPath);
  bar2.__pictorialClipPath && (animationModel = null);
  each(pathes, function(path2) {
    removeElement(path2, {
      scaleX: 0,
      scaleY: 0
    }, animationModel, dataIndex, function() {
      bar2.parent && bar2.parent.remove(bar2);
    });
  });
  data.setItemGraphicEl(dataIndex, null);
}
function getShapeStr(data, symbolMeta) {
  return [data.getItemVisual(symbolMeta.dataIndex, "symbol") || "none", !!symbolMeta.symbolRepeat, !!symbolMeta.symbolClip].join(":");
}
function eachPath(bar2, cb, context) {
  each(bar2.__pictorialBundle.children(), function(el) {
    el !== bar2.__pictorialBarRect && cb.call(context, el);
  });
}
function updateAttr(el, immediateAttrs, animationAttrs, symbolMeta, isUpdate, cb) {
  immediateAttrs && el.attr(immediateAttrs);
  if (symbolMeta.symbolClip && !isUpdate) {
    animationAttrs && el.attr(animationAttrs);
  } else {
    animationAttrs && graphic_exports[isUpdate ? "updateProps" : "initProps"](el, animationAttrs, symbolMeta.animationModel, symbolMeta.dataIndex, cb);
  }
}
function updateCommon(bar2, opt, symbolMeta) {
  const dataIndex = symbolMeta.dataIndex;
  const itemModel = symbolMeta.itemModel;
  const emphasisModel = itemModel.getModel("emphasis");
  const emphasisStyle = emphasisModel.getModel("itemStyle").getItemStyle();
  const blurStyle = itemModel.getModel(["blur", "itemStyle"]).getItemStyle();
  const selectStyle = itemModel.getModel(["select", "itemStyle"]).getItemStyle();
  const cursorStyle = itemModel.getShallow("cursor");
  const focus = emphasisModel.get("focus");
  const blurScope = emphasisModel.get("blurScope");
  eachPath(bar2, function(path2) {
    if (path2 instanceof Image_default) {
      const pathStyle = path2.style;
      path2.useStyle(extend({
        image: pathStyle.image,
        x: pathStyle.x,
        y: pathStyle.y,
        width: pathStyle.width,
        height: pathStyle.height
      }, symbolMeta.style));
    } else {
      path2.useStyle(symbolMeta.style);
    }
    const emphasisState = path2.ensureState("emphasis");
    emphasisState.style = emphasisStyle;
    emphasisState.scaleX = path2.scaleX * 1.1;
    emphasisState.scaleY = path2.scaleY * 1.1;
    path2.ensureState("blur").style = blurStyle;
    path2.ensureState("select").style = selectStyle;
    cursorStyle && (path2.cursor = cursorStyle);
    path2.z2 = symbolMeta.z2;
  });
  const barPositionOutside = opt.valueDim.posDesc[+(symbolMeta.boundingLength > 0)];
  const barRect = bar2.__pictorialBarRect;
  setLabelStyle(barRect, getLabelStatesModels(itemModel), {
    labelFetcher: opt.seriesModel,
    labelDataIndex: dataIndex,
    defaultText: getDefaultLabel(opt.seriesModel.getData(), dataIndex),
    inheritColor: symbolMeta.style.fill,
    defaultOutsidePosition: barPositionOutside
  });
  enableHoverEmphasis(bar2, focus, blurScope);
}
function toIntTimes(times) {
  const roundedTimes = Math.round(times);
  return Math.abs(times - roundedTimes) < 0.0001 ? roundedTimes : Math.ceil(times);
}
Chart_default.registerClass(PictorialBarView);

// src/chart/pictorialBar.ts
registerLayout(curry(layout, "pictorialBar"));

// src/coord/single/SingleAxis.ts
class SingleAxis10 extends Axis_default {
  constructor(dim, scale4, coordExtent, axisType, position2) {
    super(dim, scale4, coordExtent);
    this.type = axisType || "value";
    this.position = position2 || "bottom";
  }
  isHorizontal() {
    const position2 = this.position;
    return position2 === "top" || position2 === "bottom";
  }
  pointToData(point, clamp2) {
    return this.coordinateSystem.pointToData(point)[0];
  }
}
const SingleAxis_default = SingleAxis10;

// src/coord/single/Single.ts
class Single7 {
  constructor(axisModel, ecModel, api) {
    this.type = "single";
    this.dimension = "single";
    this.dimensions = ["single"];
    this.axisPointerEnabled = true;
    this.model = axisModel;
    this._init(axisModel, ecModel, api);
  }
  _init(axisModel, ecModel, api) {
    const dim = this.dimension;
    const axis2 = new SingleAxis_default(dim, createScaleByModel2(axisModel), [0, 0], axisModel.get("type"), axisModel.get("position"));
    const isCategory2 = axis2.type === "category";
    axis2.onBand = isCategory2 && axisModel.get("boundaryGap");
    axis2.inverse = axisModel.get("inverse");
    axis2.orient = axisModel.get("orient");
    axisModel.axis = axis2;
    axis2.model = axisModel;
    axis2.coordinateSystem = this;
    this._axis = axis2;
  }
  update(ecModel, api) {
    ecModel.eachSeries(function(seriesModel) {
      if (seriesModel.coordinateSystem === this) {
        const data = seriesModel.getData();
        each(data.mapDimensionsAll(this.dimension), function(dim) {
          this._axis.scale.unionExtentFromData(data, dim);
        }, this);
        niceScaleExtent(this._axis.scale, this._axis.model);
      }
    }, this);
  }
  resize(axisModel, api) {
    this._rect = getLayoutRect({
      left: axisModel.get("left"),
      top: axisModel.get("top"),
      right: axisModel.get("right"),
      bottom: axisModel.get("bottom"),
      width: axisModel.get("width"),
      height: axisModel.get("height")
    }, {
      width: api.getWidth(),
      height: api.getHeight()
    });
    this._adjustAxis();
  }
  getRect() {
    return this._rect;
  }
  _adjustAxis() {
    const rect = this._rect;
    const axis2 = this._axis;
    const isHorizontal = axis2.isHorizontal();
    const extent3 = isHorizontal ? [0, rect.width] : [0, rect.height];
    const idx = axis2.reverse ? 1 : 0;
    axis2.setExtent(extent3[idx], extent3[1 - idx]);
    this._updateAxisTransform(axis2, isHorizontal ? rect.x : rect.y);
  }
  _updateAxisTransform(axis2, coordBase) {
    const axisExtent = axis2.getExtent();
    const extentSum = axisExtent[0] + axisExtent[1];
    const isHorizontal = axis2.isHorizontal();
    axis2.toGlobalCoord = isHorizontal ? function(coord) {
      return coord + coordBase;
    } : function(coord) {
      return extentSum - coord + coordBase;
    };
    axis2.toLocalCoord = isHorizontal ? function(coord) {
      return coord - coordBase;
    } : function(coord) {
      return extentSum - coord + coordBase;
    };
  }
  getAxis() {
    return this._axis;
  }
  getBaseAxis() {
    return this._axis;
  }
  getAxes() {
    return [this._axis];
  }
  getTooltipAxes() {
    return {
      baseAxes: [this.getAxis()],
      otherAxes: []
    };
  }
  containPoint(point) {
    const rect = this.getRect();
    const axis2 = this.getAxis();
    const orient = axis2.orient;
    if (orient === "horizontal") {
      return axis2.contain(axis2.toLocalCoord(point[0])) && (point[1] >= rect.y && point[1] <= rect.y + rect.height);
    } else {
      return axis2.contain(axis2.toLocalCoord(point[1])) && (point[0] >= rect.y && point[0] <= rect.y + rect.height);
    }
  }
  pointToData(point) {
    const axis2 = this.getAxis();
    return [axis2.coordToData(axis2.toLocalCoord(point[axis2.orient === "horizontal" ? 0 : 1]))];
  }
  dataToPoint(val) {
    const axis2 = this.getAxis();
    const rect = this.getRect();
    const pt = [];
    const idx = axis2.orient === "horizontal" ? 0 : 1;
    if (val instanceof Array) {
      val = val[0];
    }
    pt[idx] = axis2.toGlobalCoord(axis2.dataToCoord(+val));
    pt[1 - idx] = idx === 0 ? rect.y + rect.height / 2 : rect.x + rect.width / 2;
    return pt;
  }
  convertToPixel(ecModel, finder, value) {
    const coordSys = getCoordSys5(finder);
    return coordSys === this ? this.dataToPoint(value) : null;
  }
  convertFromPixel(ecModel, finder, pixel) {
    const coordSys = getCoordSys5(finder);
    return coordSys === this ? this.pointToData(pixel) : null;
  }
}
function getCoordSys5(finder) {
  const seriesModel = finder.seriesModel;
  const singleModel = finder.singleAxisModel;
  return singleModel && singleModel.coordinateSystem || seriesModel && seriesModel.coordinateSystem;
}
const Single_default = Single7;

// src/coord/single/singleCreator.ts
function create4(ecModel, api) {
  const singles = [];
  ecModel.eachComponent("singleAxis", function(axisModel, idx) {
    const single = new Single_default(axisModel, ecModel, api);
    single.name = "single_" + idx;
    single.resize(axisModel, api);
    axisModel.coordinateSystem = single;
    singles.push(single);
  });
  ecModel.eachSeries(function(seriesModel) {
    if (seriesModel.get("coordinateSystem") === "singleAxis") {
      const singleAxisModel = seriesModel.getReferringComponents("singleAxis", SINGLE_REFERRING).models[0];
      seriesModel.coordinateSystem = singleAxisModel && singleAxisModel.coordinateSystem;
    }
  });
  return singles;
}
CoordinateSystem_default.register("single", {
  create: create4,
  dimensions: Single_default.prototype.dimensions
});

// src/coord/single/singleAxisHelper.ts
function layout14(axisModel, opt) {
  opt = opt || {};
  const single = axisModel.coordinateSystem;
  const axis2 = axisModel.axis;
  const layout33 = {};
  const axisPosition = axis2.position;
  const orient = axis2.orient;
  const rect = single.getRect();
  const rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
  const positionMap = {
    horizontal: {
      top: rectBound[2],
      bottom: rectBound[3]
    },
    vertical: {
      left: rectBound[0],
      right: rectBound[1]
    }
  };
  layout33.position = [orient === "vertical" ? positionMap.vertical[axisPosition] : rectBound[0], orient === "horizontal" ? positionMap.horizontal[axisPosition] : rectBound[3]];
  const r = {
    horizontal: 0,
    vertical: 1
  };
  layout33.rotation = Math.PI / 2 * r[orient];
  const directionMap = {
    top: -1,
    bottom: 1,
    right: 1,
    left: -1
  };
  layout33.labelDirection = layout33.tickDirection = layout33.nameDirection = directionMap[axisPosition];
  if (axisModel.get(["axisTick", "inside"])) {
    layout33.tickDirection = -layout33.tickDirection;
  }
  if (retrieve(opt.labelInside, axisModel.get(["axisLabel", "inside"]))) {
    layout33.labelDirection = -layout33.labelDirection;
  }
  let labelRotation = opt.rotate;
  labelRotation == null && (labelRotation = axisModel.get(["axisLabel", "rotate"]));
  layout33.labelRotation = axisPosition === "top" ? -labelRotation : labelRotation;
  layout33.z2 = 1;
  return layout33;
}

// src/component/axis/SingleAxisView.ts
const axisBuilderAttrs3 = ["axisLine", "axisTickLabel", "axisName"];
const selfBuilderAttrs3 = ["splitArea", "splitLine"];
class SingleAxisView extends AxisView_default {
  constructor() {
    super(...arguments);
    this.type = SingleAxisView.type;
    this.axisPointerClass = "SingleAxisPointer";
  }
  render(axisModel, ecModel, api, payload) {
    const group = this.group;
    group.removeAll();
    const oldAxisGroup = this._axisGroup;
    this._axisGroup = new Group_default();
    const layout33 = layout14(axisModel);
    const axisBuilder = new AxisBuilder_default(axisModel, layout33);
    each(axisBuilderAttrs3, axisBuilder.add, axisBuilder);
    group.add(this._axisGroup);
    group.add(axisBuilder.getGroup());
    each(selfBuilderAttrs3, function(name) {
      if (axisModel.get([name, "show"])) {
        axisElementBuilders3[name](this, this.group, this._axisGroup, axisModel);
      }
    }, this);
    groupTransition(oldAxisGroup, this._axisGroup, axisModel);
    super.render(axisModel, ecModel, api, payload);
  }
  remove() {
    rectCoordAxisHandleRemove2(this);
  }
}
SingleAxisView.type = "singleAxis";
const axisElementBuilders3 = {
  splitLine(axisView, group, axisGroup, axisModel) {
    const axis2 = axisModel.axis;
    if (axis2.scale.isBlank()) {
      return;
    }
    const splitLineModel = axisModel.getModel("splitLine");
    const lineStyleModel = splitLineModel.getModel("lineStyle");
    const lineWidth = lineStyleModel.get("width");
    let lineColors = lineStyleModel.get("color");
    lineColors = lineColors instanceof Array ? lineColors : [lineColors];
    const gridRect = axisModel.coordinateSystem.getRect();
    const isHorizontal = axis2.isHorizontal();
    const splitLines = [];
    let lineCount = 0;
    const ticksCoords = axis2.getTicksCoords({
      tickModel: splitLineModel
    });
    const p1 = [];
    const p2 = [];
    for (let i = 0; i < ticksCoords.length; ++i) {
      const tickCoord = axis2.toGlobalCoord(ticksCoords[i].coord);
      if (isHorizontal) {
        p1[0] = tickCoord;
        p1[1] = gridRect.y;
        p2[0] = tickCoord;
        p2[1] = gridRect.y + gridRect.height;
      } else {
        p1[0] = gridRect.x;
        p1[1] = tickCoord;
        p2[0] = gridRect.x + gridRect.width;
        p2[1] = tickCoord;
      }
      const colorIndex = lineCount++ % lineColors.length;
      splitLines[colorIndex] = splitLines[colorIndex] || [];
      splitLines[colorIndex].push(new Line_default({
        subPixelOptimize: true,
        shape: {
          x1: p1[0],
          y1: p1[1],
          x2: p2[0],
          y2: p2[1]
        },
        style: {
          lineWidth
        },
        silent: true
      }));
    }
    for (let i = 0; i < splitLines.length; ++i) {
      group.add(mergePath2(splitLines[i], {
        style: {
          stroke: lineColors[i % lineColors.length],
          lineDash: lineStyleModel.getLineDash(lineWidth),
          lineWidth
        },
        silent: true
      }));
    }
  },
  splitArea(axisView, group, axisGroup, axisModel) {
    rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, axisModel);
  }
};
Component_default2.registerClass(SingleAxisView);

// src/coord/single/AxisModel.ts
class SingleAxisModel4 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = SingleAxisModel4.type;
  }
  getCoordSysModel() {
    return this;
  }
}
SingleAxisModel4.type = "singleAxis";
SingleAxisModel4.layoutMode = "box";
SingleAxisModel4.defaultOption = {
  left: "5%",
  top: "5%",
  right: "5%",
  bottom: "5%",
  type: "value",
  position: "bottom",
  orient: "horizontal",
  axisLine: {
    show: true,
    lineStyle: {
      width: 1,
      type: "solid"
    }
  },
  tooltip: {
    show: true
  },
  axisTick: {
    show: true,
    length: 6,
    lineStyle: {
      width: 1
    }
  },
  axisLabel: {
    show: true,
    interval: "auto"
  },
  splitLine: {
    show: true,
    lineStyle: {
      type: "dashed",
      opacity: 0.2
    }
  }
};
Component_default.registerClass(SingleAxisModel4);
mixin(SingleAxisModel4, AxisModelCommonMixin.prototype);
axisModelCreator_default("single", SingleAxisModel4, SingleAxisModel4.defaultOption);

// src/component/axisPointer/findPointFromSeries.ts
function findPointFromSeries_default(finder, ecModel) {
  let point = [];
  const seriesIndex = finder.seriesIndex;
  let seriesModel;
  if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {
    return {
      point: []
    };
  }
  const data = seriesModel.getData();
  const dataIndex = queryDataIndex(data, finder);
  if (dataIndex == null || dataIndex < 0 || isArray(dataIndex)) {
    return {
      point: []
    };
  }
  const el = data.getItemGraphicEl(dataIndex);
  const coordSys = seriesModel.coordinateSystem;
  if (seriesModel.getTooltipPosition) {
    point = seriesModel.getTooltipPosition(dataIndex) || [];
  } else if (coordSys && coordSys.dataToPoint) {
    point = coordSys.dataToPoint(data.getValues(map2(coordSys.dimensions, function(dim) {
      return data.mapDimension(dim);
    }), dataIndex)) || [];
  } else if (el) {
    const rect = el.getBoundingRect().clone();
    rect.applyTransform(el.transform);
    point = [rect.x + rect.width / 2, rect.y + rect.height / 2];
  }
  return {
    point,
    el
  };
}

// src/component/axisPointer/axisTrigger.ts
const inner6 = makeInner();
function axisTrigger_default(payload, ecModel, api) {
  const currTrigger = payload.currTrigger;
  let point = [payload.x, payload.y];
  const finder = payload;
  const dispatchAction3 = payload.dispatchAction || bind(api.dispatchAction, api);
  const coordSysAxesInfo = ecModel.getComponent("axisPointer").coordSysAxesInfo;
  if (!coordSysAxesInfo) {
    return;
  }
  if (illegalPoint(point)) {
    point = findPointFromSeries_default({
      seriesIndex: finder.seriesIndex,
      dataIndex: finder.dataIndex
    }, ecModel).point;
  }
  const isIllegalPoint = illegalPoint(point);
  const inputAxesInfo = finder.axesInfo;
  const axesInfo = coordSysAxesInfo.axesInfo;
  const shouldHide = currTrigger === "leave" || illegalPoint(point);
  const outputPayload = {};
  const showValueMap = {};
  const dataByCoordSys = {
    list: [],
    map: {}
  };
  const updaters = {
    showPointer: curry(showPointer, showValueMap),
    showTooltip: curry(showTooltip, dataByCoordSys)
  };
  each(coordSysAxesInfo.coordSysMap, function(coordSys, coordSysKey) {
    const coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);
    each(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function(axisInfo, key) {
      const axis2 = axisInfo.axis;
      const inputAxisInfo = findInputAxisInfo(inputAxesInfo, axisInfo);
      if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {
        let val = inputAxisInfo && inputAxisInfo.value;
        if (val == null && !isIllegalPoint) {
          val = axis2.pointToData(point);
        }
        val != null && processOnAxis(axisInfo, val, updaters, false, outputPayload);
      }
    });
  });
  const linkTriggers = {};
  each(axesInfo, function(tarAxisInfo, tarKey) {
    const linkGroup = tarAxisInfo.linkGroup;
    if (linkGroup && !showValueMap[tarKey]) {
      each(linkGroup.axesInfo, function(srcAxisInfo, srcKey) {
        const srcValItem = showValueMap[srcKey];
        if (srcAxisInfo !== tarAxisInfo && srcValItem) {
          let val = srcValItem.value;
          linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, makeMapperParam(srcAxisInfo), makeMapperParam(tarAxisInfo))));
          linkTriggers[tarAxisInfo.key] = val;
        }
      });
    }
  });
  each(linkTriggers, function(val, tarKey) {
    processOnAxis(axesInfo[tarKey], val, updaters, true, outputPayload);
  });
  updateModelActually(showValueMap, axesInfo, outputPayload);
  dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction3);
  dispatchHighDownActually(axesInfo, dispatchAction3, api);
  return outputPayload;
}
function processOnAxis(axisInfo, newValue, updaters, noSnap, outputFinder) {
  const axis2 = axisInfo.axis;
  if (axis2.scale.isBlank() || !axis2.containData(newValue)) {
    return;
  }
  if (!axisInfo.involveSeries) {
    updaters.showPointer(axisInfo, newValue);
    return;
  }
  const payloadInfo = buildPayloadsBySeries(newValue, axisInfo);
  const payloadBatch = payloadInfo.payloadBatch;
  const snapToValue = payloadInfo.snapToValue;
  if (payloadBatch[0] && outputFinder.seriesIndex == null) {
    extend(outputFinder, payloadBatch[0]);
  }
  if (!noSnap && axisInfo.snap) {
    if (axis2.containData(snapToValue) && snapToValue != null) {
      newValue = snapToValue;
    }
  }
  updaters.showPointer(axisInfo, newValue, payloadBatch);
  updaters.showTooltip(axisInfo, payloadInfo, snapToValue);
}
function buildPayloadsBySeries(value, axisInfo) {
  const axis2 = axisInfo.axis;
  const dim = axis2.dim;
  let snapToValue = value;
  const payloadBatch = [];
  let minDist = Number.MAX_VALUE;
  let minDiff = -1;
  each(axisInfo.seriesModels, function(series, idx) {
    const dataDim = series.getData().mapDimensionsAll(dim);
    let seriesNestestValue;
    let dataIndices;
    if (series.getAxisTooltipData) {
      const result = series.getAxisTooltipData(dataDim, value, axis2);
      dataIndices = result.dataIndices;
      seriesNestestValue = result.nestestValue;
    } else {
      dataIndices = series.getData().indicesOfNearest(dataDim[0], value, axis2.type === "category" ? 0.5 : null);
      if (!dataIndices.length) {
        return;
      }
      seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);
    }
    if (seriesNestestValue == null || !isFinite(seriesNestestValue)) {
      return;
    }
    const diff2 = value - seriesNestestValue;
    const dist3 = Math.abs(diff2);
    if (dist3 <= minDist) {
      if (dist3 < minDist || diff2 >= 0 && minDiff < 0) {
        minDist = dist3;
        minDiff = diff2;
        snapToValue = seriesNestestValue;
        payloadBatch.length = 0;
      }
      each(dataIndices, function(dataIndex) {
        payloadBatch.push({
          seriesIndex: series.seriesIndex,
          dataIndexInside: dataIndex,
          dataIndex: series.getData().getRawIndex(dataIndex)
        });
      });
    }
  });
  return {
    payloadBatch,
    snapToValue
  };
}
function showPointer(showValueMap, axisInfo, value, payloadBatch) {
  showValueMap[axisInfo.key] = {
    value,
    payloadBatch
  };
}
function showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {
  const payloadBatch = payloadInfo.payloadBatch;
  const axis2 = axisInfo.axis;
  const axisModel = axis2.model;
  const axisPointerModel = axisInfo.axisPointerModel;
  if (!axisInfo.triggerTooltip || !payloadBatch.length) {
    return;
  }
  const coordSysModel = axisInfo.coordSys.model;
  const coordSysKey = makeKey(coordSysModel);
  let coordSysItem = dataByCoordSys.map[coordSysKey];
  if (!coordSysItem) {
    coordSysItem = dataByCoordSys.map[coordSysKey] = {
      coordSysId: coordSysModel.id,
      coordSysIndex: coordSysModel.componentIndex,
      coordSysType: coordSysModel.type,
      coordSysMainType: coordSysModel.mainType,
      dataByAxis: []
    };
    dataByCoordSys.list.push(coordSysItem);
  }
  coordSysItem.dataByAxis.push({
    axisDim: axis2.dim,
    axisIndex: axisModel.componentIndex,
    axisType: axisModel.type,
    axisId: axisModel.id,
    value,
    valueLabelOpt: {
      precision: axisPointerModel.get(["label", "precision"]),
      formatter: axisPointerModel.get(["label", "formatter"])
    },
    seriesDataIndices: payloadBatch.slice()
  });
}
function updateModelActually(showValueMap, axesInfo, outputPayload) {
  const outputAxesInfo = outputPayload.axesInfo = [];
  each(axesInfo, function(axisInfo, key) {
    const option = axisInfo.axisPointerModel.option;
    const valItem = showValueMap[key];
    if (valItem) {
      !axisInfo.useHandle && (option.status = "show");
      option.value = valItem.value;
      option.seriesDataIndices = (valItem.payloadBatch || []).slice();
    } else {
      !axisInfo.useHandle && (option.status = "hide");
    }
    option.status === "show" && outputAxesInfo.push({
      axisDim: axisInfo.axis.dim,
      axisIndex: axisInfo.axis.model.componentIndex,
      value: option.value
    });
  });
}
function dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction3) {
  if (illegalPoint(point) || !dataByCoordSys.list.length) {
    dispatchAction3({
      type: "hideTip"
    });
    return;
  }
  const sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
  dispatchAction3({
    type: "showTip",
    escapeConnect: true,
    x: point[0],
    y: point[1],
    tooltipOption: payload.tooltipOption,
    position: payload.position,
    dataIndexInside: sampleItem.dataIndexInside,
    dataIndex: sampleItem.dataIndex,
    seriesIndex: sampleItem.seriesIndex,
    dataByCoordSys: dataByCoordSys.list
  });
}
function dispatchHighDownActually(axesInfo, dispatchAction3, api) {
  const zr = api.getZr();
  const highDownKey = "axisPointerLastHighlights";
  const lastHighlights = inner6(zr)[highDownKey] || {};
  const newHighlights = inner6(zr)[highDownKey] = {};
  each(axesInfo, function(axisInfo, key) {
    const option = axisInfo.axisPointerModel.option;
    option.status === "show" && each(option.seriesDataIndices, function(batchItem) {
      const key2 = batchItem.seriesIndex + " | " + batchItem.dataIndex;
      newHighlights[key2] = batchItem;
    });
  });
  const toHighlight = [];
  const toDownplay = [];
  each(lastHighlights, function(batchItem, key) {
    !newHighlights[key] && toDownplay.push(batchItem);
  });
  each(newHighlights, function(batchItem, key) {
    !lastHighlights[key] && toHighlight.push(batchItem);
  });
  toDownplay.length && api.dispatchAction({
    type: "downplay",
    escapeConnect: true,
    notBlur: true,
    batch: toDownplay
  });
  toHighlight.length && api.dispatchAction({
    type: "highlight",
    escapeConnect: true,
    notBlur: true,
    batch: toHighlight
  });
}
function findInputAxisInfo(inputAxesInfo, axisInfo) {
  for (let i = 0; i < (inputAxesInfo || []).length; i++) {
    const inputAxisInfo = inputAxesInfo[i];
    if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) {
      return inputAxisInfo;
    }
  }
}
function makeMapperParam(axisInfo) {
  const axisModel = axisInfo.axis.model;
  const item = {};
  const dim = item.axisDim = axisInfo.axis.dim;
  item.axisIndex = item[dim + "AxisIndex"] = axisModel.componentIndex;
  item.axisName = item[dim + "AxisName"] = axisModel.name;
  item.axisId = item[dim + "AxisId"] = axisModel.id;
  return item;
}
function illegalPoint(point) {
  return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);
}

// src/component/axisPointer/globalListener.ts
const inner7 = makeInner();
const each4 = each;
function register(key, api, handler) {
  if (env_default.node) {
    return;
  }
  const zr = api.getZr();
  inner7(zr).records || (inner7(zr).records = {});
  initGlobalListeners(zr, api);
  const record = inner7(zr).records[key] || (inner7(zr).records[key] = {});
  record.handler = handler;
}
function initGlobalListeners(zr, api) {
  if (inner7(zr).initialized) {
    return;
  }
  inner7(zr).initialized = true;
  useHandler("click", curry(doEnter, "click"));
  useHandler("mousemove", curry(doEnter, "mousemove"));
  useHandler("globalout", onLeave);
  function useHandler(eventType, cb) {
    zr.on(eventType, function(e) {
      const dis = makeDispatchAction(api);
      each4(inner7(zr).records, function(record) {
        record && cb(record, e, dis.dispatchAction);
      });
      dispatchTooltipFinally(dis.pendings, api);
    });
  }
}
function dispatchTooltipFinally(pendings, api) {
  const showLen = pendings.showTip.length;
  const hideLen = pendings.hideTip.length;
  let actuallyPayload;
  if (showLen) {
    actuallyPayload = pendings.showTip[showLen - 1];
  } else if (hideLen) {
    actuallyPayload = pendings.hideTip[hideLen - 1];
  }
  if (actuallyPayload) {
    actuallyPayload.dispatchAction = null;
    api.dispatchAction(actuallyPayload);
  }
}
function onLeave(record, e, dispatchAction3) {
  record.handler("leave", null, dispatchAction3);
}
function doEnter(currTrigger, record, e, dispatchAction3) {
  record.handler(currTrigger, e, dispatchAction3);
}
function makeDispatchAction(api) {
  const pendings = {
    showTip: [],
    hideTip: []
  };
  const dispatchAction3 = function(payload) {
    const pendingList = pendings[payload.type];
    if (pendingList) {
      pendingList.push(payload);
    } else {
      payload.dispatchAction = dispatchAction3;
      api.dispatchAction(payload);
    }
  };
  return {
    dispatchAction: dispatchAction3,
    pendings
  };
}
function unregister(key, api) {
  if (env_default.node) {
    return;
  }
  const zr = api.getZr();
  const record = (inner7(zr).records || {})[key];
  if (record) {
    inner7(zr).records[key] = null;
  }
}

// src/component/axisPointer/AxisPointerView.ts
class AxisPointerView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = AxisPointerView2.type;
  }
  render(globalAxisPointerModel, ecModel, api) {
    const globalTooltipModel = ecModel.getComponent("tooltip");
    const triggerOn = globalAxisPointerModel.get("triggerOn") || (globalTooltipModel && globalTooltipModel.get("triggerOn") || "mousemove|click");
    register("axisPointer", api, function(currTrigger, e, dispatchAction3) {
      if (triggerOn !== "none" && (currTrigger === "leave" || triggerOn.indexOf(currTrigger) >= 0)) {
        dispatchAction3({
          type: "updateAxisPointer",
          currTrigger,
          x: e && e.offsetX,
          y: e && e.offsetY
        });
      }
    });
  }
  remove(ecModel, api) {
    unregister("axisPointer", api);
  }
  dispose(ecModel, api) {
    unregister("axisPointer", api);
  }
}
AxisPointerView2.type = "axisPointer";
Component_default2.registerClass(AxisPointerView2);

// src/component/axisPointer/BaseAxisPointer.ts
const inner5 = makeInner();
const clone4 = clone2;
const bind2 = bind;
class BaseAxisPointer {
  constructor() {
    this._dragging = false;
    this.animationThreshold = 15;
  }
  render(axisModel, axisPointerModel, api, forceRender) {
    const value = axisPointerModel.get("value");
    const status = axisPointerModel.get("status");
    this._axisModel = axisModel;
    this._axisPointerModel = axisPointerModel;
    this._api = api;
    if (!forceRender && this._lastValue === value && this._lastStatus === status) {
      return;
    }
    this._lastValue = value;
    this._lastStatus = status;
    let group = this._group;
    const handle = this._handle;
    if (!status || status === "hide") {
      group && group.hide();
      handle && handle.hide();
      return;
    }
    group && group.show();
    handle && handle.show();
    const elOption = {};
    this.makeElOption(elOption, value, axisModel, axisPointerModel, api);
    const graphicKey = elOption.graphicKey;
    if (graphicKey !== this._lastGraphicKey) {
      this.clear(api);
    }
    this._lastGraphicKey = graphicKey;
    const moveAnimation = this._moveAnimation = this.determineAnimation(axisModel, axisPointerModel);
    if (!group) {
      group = this._group = new Group_default();
      this.createPointerEl(group, elOption, axisModel, axisPointerModel);
      this.createLabelEl(group, elOption, axisModel, axisPointerModel);
      api.getZr().add(group);
    } else {
      const doUpdateProps = curry(updateProps2, axisPointerModel, moveAnimation);
      this.updatePointerEl(group, elOption, doUpdateProps);
      this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);
    }
    updateMandatoryProps(group, axisPointerModel, true);
    this._renderHandle(value);
  }
  remove(api) {
    this.clear(api);
  }
  dispose(api) {
    this.clear(api);
  }
  determineAnimation(axisModel, axisPointerModel) {
    const animation = axisPointerModel.get("animation");
    const axis2 = axisModel.axis;
    const isCategoryAxis = axis2.type === "category";
    const useSnap = axisPointerModel.get("snap");
    if (!useSnap && !isCategoryAxis) {
      return false;
    }
    if (animation === "auto" || animation == null) {
      const animationThreshold = this.animationThreshold;
      if (isCategoryAxis && axis2.getBandWidth() > animationThreshold) {
        return true;
      }
      if (useSnap) {
        const seriesDataCount = getAxisInfo(axisModel).seriesDataCount;
        const axisExtent = axis2.getExtent();
        return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;
      }
      return false;
    }
    return animation === true;
  }
  makeElOption(elOption, value, axisModel, axisPointerModel, api) {
  }
  createPointerEl(group, elOption, axisModel, axisPointerModel) {
    const pointerOption = elOption.pointer;
    if (pointerOption) {
      const pointerEl = inner5(group).pointerEl = new graphic_exports[pointerOption.type](clone4(elOption.pointer));
      group.add(pointerEl);
    }
  }
  createLabelEl(group, elOption, axisModel, axisPointerModel) {
    if (elOption.label) {
      const labelEl = inner5(group).labelEl = new Text_default(clone4(elOption.label));
      group.add(labelEl);
      updateLabelShowHide(labelEl, axisPointerModel);
    }
  }
  updatePointerEl(group, elOption, updateProps3) {
    const pointerEl = inner5(group).pointerEl;
    if (pointerEl && elOption.pointer) {
      pointerEl.setStyle(elOption.pointer.style);
      updateProps3(pointerEl, {
        shape: elOption.pointer.shape
      });
    }
  }
  updateLabelEl(group, elOption, updateProps3, axisPointerModel) {
    const labelEl = inner5(group).labelEl;
    if (labelEl) {
      labelEl.setStyle(elOption.label.style);
      updateProps3(labelEl, {
        x: elOption.label.x,
        y: elOption.label.y
      });
      updateLabelShowHide(labelEl, axisPointerModel);
    }
  }
  _renderHandle(value) {
    if (this._dragging || !this.updateHandleTransform) {
      return;
    }
    const axisPointerModel = this._axisPointerModel;
    const zr = this._api.getZr();
    let handle = this._handle;
    const handleModel = axisPointerModel.getModel("handle");
    const status = axisPointerModel.get("status");
    if (!handleModel.get("show") || !status || status === "hide") {
      handle && zr.remove(handle);
      this._handle = null;
      return;
    }
    let isInit;
    if (!this._handle) {
      isInit = true;
      handle = this._handle = createIcon(handleModel.get("icon"), {
        cursor: "move",
        draggable: true,
        onmousemove(e) {
          stop(e.event);
        },
        onmousedown: bind2(this._onHandleDragMove, this, 0, 0),
        drift: bind2(this._onHandleDragMove, this),
        ondragend: bind2(this._onHandleDragEnd, this)
      });
      zr.add(handle);
    }
    updateMandatoryProps(handle, axisPointerModel, false);
    handle.setStyle(handleModel.getItemStyle(null, ["color", "borderColor", "borderWidth", "opacity", "shadowColor", "shadowBlur", "shadowOffsetX", "shadowOffsetY"]));
    let handleSize = handleModel.get("size");
    if (!isArray(handleSize)) {
      handleSize = [handleSize, handleSize];
    }
    handle.scaleX = handleSize[0] / 2;
    handle.scaleY = handleSize[1] / 2;
    createOrUpdate(this, "_doDispatchAxisPointer", handleModel.get("throttle") || 0, "fixRate");
    this._moveHandleToValue(value, isInit);
  }
  _moveHandleToValue(value, isInit) {
    updateProps2(this._axisPointerModel, !isInit && this._moveAnimation, this._handle, getHandleTransProps(this.getHandleTransform(value, this._axisModel, this._axisPointerModel)));
  }
  _onHandleDragMove(dx, dy) {
    const handle = this._handle;
    if (!handle) {
      return;
    }
    this._dragging = true;
    const trans = this.updateHandleTransform(getHandleTransProps(handle), [dx, dy], this._axisModel, this._axisPointerModel);
    this._payloadInfo = trans;
    handle.stopAnimation();
    handle.attr(getHandleTransProps(trans));
    inner5(handle).lastProp = null;
    this._doDispatchAxisPointer();
  }
  _doDispatchAxisPointer() {
    const handle = this._handle;
    if (!handle) {
      return;
    }
    const payloadInfo = this._payloadInfo;
    const axisModel = this._axisModel;
    this._api.dispatchAction({
      type: "updateAxisPointer",
      x: payloadInfo.cursorPoint[0],
      y: payloadInfo.cursorPoint[1],
      tooltipOption: payloadInfo.tooltipOption,
      axesInfo: [{
        axisDim: axisModel.axis.dim,
        axisIndex: axisModel.componentIndex
      }]
    });
  }
  _onHandleDragEnd() {
    this._dragging = false;
    const handle = this._handle;
    if (!handle) {
      return;
    }
    const value = this._axisPointerModel.get("value");
    this._moveHandleToValue(value);
    this._api.dispatchAction({
      type: "hideTip"
    });
  }
  clear(api) {
    this._lastValue = null;
    this._lastStatus = null;
    const zr = api.getZr();
    const group = this._group;
    const handle = this._handle;
    if (zr && group) {
      this._lastGraphicKey = null;
      group && zr.remove(group);
      handle && zr.remove(handle);
      this._group = null;
      this._handle = null;
      this._payloadInfo = null;
    }
  }
  doClear() {
  }
  buildLabel(xy, wh, xDimIndex) {
    xDimIndex = xDimIndex || 0;
    return {
      x: xy[xDimIndex],
      y: xy[1 - xDimIndex],
      width: wh[xDimIndex],
      height: wh[1 - xDimIndex]
    };
  }
}
function updateProps2(animationModel, moveAnimation, el, props) {
  if (!propsEqual(inner5(el).lastProp, props)) {
    inner5(el).lastProp = props;
    moveAnimation ? updateProps(el, props, animationModel) : (el.stopAnimation(), el.attr(props));
  }
}
function propsEqual(lastProps, newProps) {
  if (isObject(lastProps) && isObject(newProps)) {
    let equals = true;
    each(newProps, function(item, key) {
      equals = equals && propsEqual(lastProps[key], item);
    });
    return !!equals;
  } else {
    return lastProps === newProps;
  }
}
function updateLabelShowHide(labelEl, axisPointerModel) {
  labelEl[axisPointerModel.get(["label", "show"]) ? "show" : "hide"]();
}
function getHandleTransProps(trans) {
  return {
    x: trans.x || 0,
    y: trans.y || 0,
    rotation: trans.rotation || 0
  };
}
function updateMandatoryProps(group, axisPointerModel, silent) {
  const z = axisPointerModel.get("z");
  const zlevel = axisPointerModel.get("zlevel");
  group && group.traverse(function(el) {
    if (el.type !== "group") {
      z != null && (el.z = z);
      zlevel != null && (el.zlevel = zlevel);
      el.silent = silent;
    }
  });
}
const BaseAxisPointer_default = BaseAxisPointer;

// src/component/axisPointer/viewHelper.ts
function buildElStyle(axisPointerModel) {
  const axisPointerType = axisPointerModel.get("type");
  const styleModel = axisPointerModel.getModel(axisPointerType + "Style");
  let style2;
  if (axisPointerType === "line") {
    style2 = styleModel.getLineStyle();
    style2.fill = null;
  } else if (axisPointerType === "shadow") {
    style2 = styleModel.getAreaStyle();
    style2.stroke = null;
  }
  return style2;
}
function buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {
  const value = axisPointerModel.get("value");
  const text11 = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get("seriesDataIndices"), {
    precision: axisPointerModel.get(["label", "precision"]),
    formatter: axisPointerModel.get(["label", "formatter"])
  });
  const labelModel = axisPointerModel.getModel("label");
  const paddings = normalizeCssArray2(labelModel.get("padding") || 0);
  const font = labelModel.getFont();
  const textRect = getBoundingRect(text11, font);
  const position2 = labelPos.position;
  const width = textRect.width + paddings[1] + paddings[3];
  const height = textRect.height + paddings[0] + paddings[2];
  const align = labelPos.align;
  align === "right" && (position2[0] -= width);
  align === "center" && (position2[0] -= width / 2);
  const verticalAlign = labelPos.verticalAlign;
  verticalAlign === "bottom" && (position2[1] -= height);
  verticalAlign === "middle" && (position2[1] -= height / 2);
  confineInContainer(position2, width, height, api);
  let bgColor = labelModel.get("backgroundColor");
  if (!bgColor || bgColor === "auto") {
    bgColor = axisModel.get(["axisLine", "lineStyle", "color"]);
  }
  elOption.label = {
    x: position2[0],
    y: position2[1],
    style: {
      text: text11,
      textFont: font,
      fill: labelModel.getTextColor(),
      padding: paddings,
      backgroundColor: bgColor,
      borderColor: labelModel.get("borderColor") || "transparent",
      borderRadius: labelModel.get("borderRadius"),
      borderWidth: labelModel.get("borderWidth") || 0,
      shadowBlur: labelModel.get("shadowBlur"),
      shadowColor: labelModel.get("shadowColor"),
      shadowOffsetX: labelModel.get("shadowOffsetX"),
      shadowOffsetY: labelModel.get("shadowOffsetY")
    },
    z2: 10
  };
}
function confineInContainer(position2, width, height, api) {
  const viewWidth = api.getWidth();
  const viewHeight = api.getHeight();
  position2[0] = Math.min(position2[0] + width, viewWidth) - width;
  position2[1] = Math.min(position2[1] + height, viewHeight) - height;
  position2[0] = Math.max(position2[0], 0);
  position2[1] = Math.max(position2[1], 0);
}
function getValueLabel(value, axis2, ecModel, seriesDataIndices, opt) {
  value = axis2.scale.parse(value);
  let text11 = axis2.scale.getLabel(value, {
    precision: opt.precision
  });
  const formatter = opt.formatter;
  if (formatter) {
    const params = {
      value: getAxisRawValue(axis2, value),
      axisDimension: axis2.dim,
      axisIndex: axis2.index,
      seriesData: []
    };
    each(seriesDataIndices, function(idxItem) {
      const series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
      const dataIndex = idxItem.dataIndexInside;
      const dataParams = series && series.getDataParams(dataIndex);
      dataParams && params.seriesData.push(dataParams);
    });
    if (isString(formatter)) {
      text11 = formatter.replace("{value}", text11);
    } else if (isFunction(formatter)) {
      text11 = formatter(params);
    }
  }
  return text11;
}
function getTransformedPosition(axis2, value, layoutInfo) {
  const transform = create();
  rotate(transform, transform, layoutInfo.rotation);
  translate(transform, transform, layoutInfo.position);
  return applyTransform2([axis2.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);
}
function buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {
  const textLayout = AxisBuilder_default.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);
  layoutInfo.labelMargin = axisPointerModel.get(["label", "margin"]);
  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {
    position: getTransformedPosition(axisModel.axis, value, layoutInfo),
    align: textLayout.textAlign,
    verticalAlign: textLayout.textVerticalAlign
  });
}
function makeLineShape(p1, p2, xDimIndex) {
  xDimIndex = xDimIndex || 0;
  return {
    x1: p1[xDimIndex],
    y1: p1[1 - xDimIndex],
    x2: p2[xDimIndex],
    y2: p2[1 - xDimIndex]
  };
}
function makeRectShape(xy, wh, xDimIndex) {
  xDimIndex = xDimIndex || 0;
  return {
    x: xy[xDimIndex],
    y: xy[1 - xDimIndex],
    width: wh[xDimIndex],
    height: wh[1 - xDimIndex]
  };
}
function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
  return {
    cx,
    cy,
    r0,
    r,
    startAngle,
    endAngle,
    clockwise: true
  };
}

// src/component/axisPointer/CartesianAxisPointer.ts
class CartesianAxisPointer2 extends BaseAxisPointer_default {
  makeElOption(elOption, value, axisModel, axisPointerModel, api) {
    const axis2 = axisModel.axis;
    const grid2 = axis2.grid;
    const axisPointerType = axisPointerModel.get("type");
    const otherExtent = getCartesian(grid2, axis2).getOtherAxis(axis2).getGlobalExtent();
    const pixelValue = axis2.toGlobalCoord(axis2.dataToCoord(value, true));
    if (axisPointerType && axisPointerType !== "none") {
      const elStyle = buildElStyle(axisPointerModel);
      const pointerOption = pointerShapeBuilder[axisPointerType](axis2, pixelValue, otherExtent);
      pointerOption.style = elStyle;
      elOption.graphicKey = pointerOption.type;
      elOption.pointer = pointerOption;
    }
    const layoutInfo = layout13(grid2.model, axisModel);
    buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
  }
  getHandleTransform(value, axisModel, axisPointerModel) {
    const layoutInfo = layout13(axisModel.axis.grid.model, axisModel, {
      labelInside: false
    });
    layoutInfo.labelMargin = axisPointerModel.get(["handle", "margin"]);
    const pos = getTransformedPosition(axisModel.axis, value, layoutInfo);
    return {
      x: pos[0],
      y: pos[1],
      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
    };
  }
  updateHandleTransform(transform, delta, axisModel, axisPointerModel) {
    const axis2 = axisModel.axis;
    const grid2 = axis2.grid;
    const axisExtent = axis2.getGlobalExtent(true);
    const otherExtent = getCartesian(grid2, axis2).getOtherAxis(axis2).getGlobalExtent();
    const dimIndex = axis2.dim === "x" ? 0 : 1;
    const currPosition = [transform.x, transform.y];
    currPosition[dimIndex] += delta[dimIndex];
    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
    const cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
    const cursorPoint = [cursorOtherValue, cursorOtherValue];
    cursorPoint[dimIndex] = currPosition[dimIndex];
    const tooltipOptions = [{
      verticalAlign: "middle"
    }, {
      align: "center"
    }];
    return {
      x: currPosition[0],
      y: currPosition[1],
      rotation: transform.rotation,
      cursorPoint,
      tooltipOption: tooltipOptions[dimIndex]
    };
  }
}
function getCartesian(grid2, axis2) {
  const opt = {};
  opt[axis2.dim + "AxisIndex"] = axis2.index;
  return grid2.getCartesian(opt);
}
const pointerShapeBuilder = {
  line: function(axis2, pixelValue, otherExtent) {
    const targetShape = makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis2));
    return {
      type: "Line",
      subPixelOptimize: true,
      shape: targetShape
    };
  },
  shadow: function(axis2, pixelValue, otherExtent) {
    const bandWidth = Math.max(1, axis2.getBandWidth());
    const span = otherExtent[1] - otherExtent[0];
    return {
      type: "Rect",
      shape: makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis2))
    };
  }
};
function getAxisDimIndex(axis2) {
  return axis2.dim === "x" ? 0 : 1;
}
AxisView_default.registerAxisPointerClass("CartesianAxisPointer", CartesianAxisPointer2);

// src/component/axisPointer/AxisPointerModel.ts
class AxisPointerModel2 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = AxisPointerModel2.type;
  }
}
AxisPointerModel2.type = "axisPointer";
AxisPointerModel2.defaultOption = {
  show: "auto",
  zlevel: 0,
  z: 50,
  type: "line",
  snap: false,
  triggerTooltip: true,
  value: null,
  status: null,
  link: [],
  animation: null,
  animationDurationUpdate: 200,
  lineStyle: {
    color: "#aaa",
    width: 1,
    type: "solid"
  },
  shadowStyle: {
    color: "rgba(150,150,150,0.3)"
  },
  label: {
    show: true,
    formatter: null,
    precision: "auto",
    margin: 3,
    color: "#fff",
    padding: [5, 7, 5, 7],
    backgroundColor: "auto",
    borderColor: null,
    borderWidth: 0,
    shadowBlur: 3,
    shadowColor: "#aaa"
  },
  handle: {
    show: false,
    icon: "M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z",
    size: 45,
    margin: 50,
    color: "#333",
    shadowBlur: 3,
    shadowColor: "#aaa",
    shadowOffsetX: 0,
    shadowOffsetY: 2,
    throttle: 40
  }
};
const AxisPointerModel_default = AxisPointerModel2;

// src/component/axisPointer.ts
Component_default.registerClass(AxisPointerModel_default);
registerPreprocessor(function(option) {
  if (option) {
    (!option.axisPointer || option.axisPointer.length === 0) && (option.axisPointer = {});
    const link = option.axisPointer.link;
    if (link && !isArray(link)) {
      option.axisPointer.link = [link];
    }
  }
});
registerProcessor(PRIORITY.PROCESSOR.STATISTIC, function(ecModel, api) {
  ecModel.getComponent("axisPointer").coordSysAxesInfo = collect(ecModel, api);
});
registerAction({
  type: "updateAxisPointer",
  event: "updateAxisPointer",
  update: ":updateAxisPointer"
}, axisTrigger_default);

// src/component/axisPointer/SingleAxisPointer.ts
const XY = ["x", "y"];
const WH = ["width", "height"];
class SingleAxisPointer extends BaseAxisPointer_default {
  makeElOption(elOption, value, axisModel, axisPointerModel, api) {
    const axis2 = axisModel.axis;
    const coordSys = axis2.coordinateSystem;
    const otherExtent = getGlobalExtent(coordSys, 1 - getPointDimIndex(axis2));
    const pixelValue = coordSys.dataToPoint(value)[0];
    const axisPointerType = axisPointerModel.get("type");
    if (axisPointerType && axisPointerType !== "none") {
      const elStyle = buildElStyle(axisPointerModel);
      const pointerOption = pointerShapeBuilder3[axisPointerType](axis2, pixelValue, otherExtent);
      pointerOption.style = elStyle;
      elOption.graphicKey = pointerOption.type;
      elOption.pointer = pointerOption;
    }
    const layoutInfo = layout14(axisModel);
    buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);
  }
  getHandleTransform(value, axisModel, axisPointerModel) {
    const layoutInfo = layout14(axisModel, {
      labelInside: false
    });
    layoutInfo.labelMargin = axisPointerModel.get(["handle", "margin"]);
    const position2 = getTransformedPosition(axisModel.axis, value, layoutInfo);
    return {
      x: position2[0],
      y: position2[1],
      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
    };
  }
  updateHandleTransform(transform, delta, axisModel, axisPointerModel) {
    const axis2 = axisModel.axis;
    const coordSys = axis2.coordinateSystem;
    const dimIndex = getPointDimIndex(axis2);
    const axisExtent = getGlobalExtent(coordSys, dimIndex);
    const currPosition = [transform.x, transform.y];
    currPosition[dimIndex] += delta[dimIndex];
    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
    const otherExtent = getGlobalExtent(coordSys, 1 - dimIndex);
    const cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
    const cursorPoint = [cursorOtherValue, cursorOtherValue];
    cursorPoint[dimIndex] = currPosition[dimIndex];
    return {
      x: currPosition[0],
      y: currPosition[1],
      rotation: transform.rotation,
      cursorPoint,
      tooltipOption: {
        verticalAlign: "middle"
      }
    };
  }
}
const pointerShapeBuilder3 = {
  line: function(axis2, pixelValue, otherExtent) {
    const targetShape = makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getPointDimIndex(axis2));
    return {
      type: "Line",
      subPixelOptimize: true,
      shape: targetShape
    };
  },
  shadow: function(axis2, pixelValue, otherExtent) {
    const bandWidth = axis2.getBandWidth();
    const span = otherExtent[1] - otherExtent[0];
    return {
      type: "Rect",
      shape: makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getPointDimIndex(axis2))
    };
  }
};
function getPointDimIndex(axis2) {
  return axis2.isHorizontal() ? 0 : 1;
}
function getGlobalExtent(coordSys, dimIndex) {
  const rect = coordSys.getRect();
  return [rect[XY[dimIndex]], rect[XY[dimIndex]] + rect[WH[dimIndex]]];
}
AxisView_default.registerAxisPointerClass("SingleAxisPointer", SingleAxisPointer);

// src/component/singleAxis.ts
extendComponentView({
  type: "single"
});

// src/chart/themeRiver/ThemeRiverSeries.ts
const DATA_NAME_INDEX = 2;
class ThemeRiverSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = ThemeRiverSeriesModel.type;
    this.useColorPaletteOnData = true;
  }
  init(option) {
    super.init.apply(this, arguments);
    this.legendVisualProvider = new LegendVisualProvider_default(bind(this.getData, this), bind(this.getRawData, this));
  }
  fixData(data) {
    let rawDataLength = data.length;
    const groupResult = groupData(data, function(item) {
      return item[2];
    });
    const layData = [];
    groupResult.buckets.each(function(items, key) {
      layData.push({
        name: key,
        dataList: items
      });
    });
    const layerNum = layData.length;
    let largestLayer = -1;
    let index = -1;
    for (let i = 0; i < layerNum; ++i) {
      const len2 = layData[i].dataList.length;
      if (len2 > largestLayer) {
        largestLayer = len2;
        index = i;
      }
    }
    for (let k = 0; k < layerNum; ++k) {
      if (k === index) {
        continue;
      }
      const name = layData[k].name;
      for (let j = 0; j < largestLayer; ++j) {
        const timeValue = layData[index].dataList[j][0];
        const length2 = layData[k].dataList.length;
        let keyIndex = -1;
        for (let l = 0; l < length2; ++l) {
          const value = layData[k].dataList[l][0];
          if (value === timeValue) {
            keyIndex = l;
            break;
          }
        }
        if (keyIndex === -1) {
          data[rawDataLength] = [timeValue, 0, name];
          rawDataLength++;
        }
      }
    }
    return data;
  }
  getInitialData(option, ecModel) {
    const singleAxisModel = this.getReferringComponents("singleAxis", SINGLE_REFERRING).models[0];
    const axisType = singleAxisModel.get("type");
    const filterData = filter(option.data, function(dataItem) {
      return dataItem[2] !== void 0;
    });
    const data = this.fixData(filterData || []);
    const nameList = [];
    const nameMap = this.nameMap = createHashMap();
    let count2 = 0;
    for (let i = 0; i < data.length; ++i) {
      nameList.push(data[i][DATA_NAME_INDEX]);
      if (!nameMap.get(data[i][DATA_NAME_INDEX])) {
        nameMap.set(data[i][DATA_NAME_INDEX], count2);
        count2++;
      }
    }
    const dimensionsInfo = createDimensions_default(data, {
      coordDimensions: ["single"],
      dimensionsDefine: [{
        name: "time",
        type: getDimensionTypeByAxis(axisType)
      }, {
        name: "value",
        type: "float"
      }, {
        name: "name",
        type: "ordinal"
      }],
      encodeDefine: {
        single: 0,
        value: 1,
        itemName: 2
      }
    });
    const list = new List_default(dimensionsInfo, this);
    list.initData(data);
    return list;
  }
  getLayerSeries() {
    const data = this.getData();
    const lenCount = data.count();
    const indexArr = [];
    for (let i = 0; i < lenCount; ++i) {
      indexArr[i] = i;
    }
    const timeDim = data.mapDimension("single");
    const groupResult = groupData(indexArr, function(index) {
      return data.get("name", index);
    });
    const layerSeries = [];
    groupResult.buckets.each(function(items, key) {
      items.sort(function(index1, index2) {
        return data.get(timeDim, index1) - data.get(timeDim, index2);
      });
      layerSeries.push({
        name: key,
        indices: items
      });
    });
    return layerSeries;
  }
  getAxisTooltipData(dim, value, baseAxis) {
    if (!isArray(dim)) {
      dim = dim ? [dim] : [];
    }
    const data = this.getData();
    const layerSeries = this.getLayerSeries();
    const indices = [];
    const layerNum = layerSeries.length;
    let nestestValue;
    for (let i = 0; i < layerNum; ++i) {
      let minDist = Number.MAX_VALUE;
      let nearestIdx = -1;
      const pointNum = layerSeries[i].indices.length;
      for (let j = 0; j < pointNum; ++j) {
        const theValue = data.get(dim[0], layerSeries[i].indices[j]);
        const dist3 = Math.abs(theValue - value);
        if (dist3 <= minDist) {
          nestestValue = theValue;
          minDist = dist3;
          nearestIdx = layerSeries[i].indices[j];
        }
      }
      indices.push(nearestIdx);
    }
    return {
      dataIndices: indices,
      nestestValue
    };
  }
  formatTooltip(dataIndex) {
    const data = this.getData();
    const htmlName = data.getName(dataIndex);
    let htmlValue = data.get(data.mapDimension("value"), dataIndex);
    if (isNaN(htmlValue) || htmlValue == null) {
      htmlValue = "-";
    }
    return encodeHTML(htmlName + " : " + htmlValue);
  }
}
ThemeRiverSeriesModel.type = "series.themeRiver";
ThemeRiverSeriesModel.dependencies = ["singleAxis"];
ThemeRiverSeriesModel.defaultOption = {
  zlevel: 0,
  z: 2,
  coordinateSystem: "singleAxis",
  boundaryGap: ["10%", "10%"],
  singleAxisIndex: 0,
  animationEasing: "linear",
  label: {
    margin: 4,
    show: true,
    position: "left",
    fontSize: 11
  },
  emphasis: {
    label: {
      show: true
    }
  }
};
Series_default.registerClass(ThemeRiverSeriesModel);

// src/chart/themeRiver/ThemeRiverView.ts
class ThemeRiverView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = ThemeRiverView2.type;
    this._layers = [];
  }
  render(seriesModel, ecModel, api) {
    const data = seriesModel.getData();
    const self2 = this;
    const group = this.group;
    const layersSeries = seriesModel.getLayerSeries();
    const layoutInfo = data.getLayout("layoutInfo");
    const rect = layoutInfo.rect;
    const boundaryGap = layoutInfo.boundaryGap;
    group.x = 0;
    group.y = rect.y + boundaryGap[0];
    function keyGetter(item) {
      return item.name;
    }
    const dataDiffer = new DataDiffer_default(this._layersSeries || [], layersSeries, keyGetter, keyGetter);
    const newLayersGroups = [];
    dataDiffer.add(bind(process, this, "add")).update(bind(process, this, "update")).remove(bind(process, this, "remove")).execute();
    function process(status, idx, oldIdx) {
      const oldLayersGroups = self2._layers;
      if (status === "remove") {
        group.remove(oldLayersGroups[idx]);
        return;
      }
      const points0 = [];
      const points1 = [];
      let style2;
      const indices = layersSeries[idx].indices;
      let j = 0;
      for (; j < indices.length; j++) {
        const layout33 = data.getItemLayout(indices[j]);
        const x = layout33.x;
        const y0 = layout33.y0;
        const y = layout33.y;
        points0.push([x, y0]);
        points1.push([x, y0 + y]);
        style2 = data.getItemVisual(indices[j], "style");
      }
      let polygon;
      const textLayout = data.getItemLayout(indices[0]);
      const labelModel = seriesModel.getModel("label");
      const margin = labelModel.get("margin");
      const emphasisModel = seriesModel.getModel("emphasis");
      if (status === "add") {
        const layerGroup = newLayersGroups[idx] = new Group_default();
        polygon = new ECPolygon({
          shape: {
            points: points0,
            stackedOnPoints: points1,
            smooth: 0.4,
            stackedOnSmooth: 0.4,
            smoothConstraint: false
          },
          z2: 0
        });
        layerGroup.add(polygon);
        group.add(layerGroup);
        if (seriesModel.isAnimationEnabled()) {
          polygon.setClipPath(createGridClipShape3(polygon.getBoundingRect(), seriesModel, function() {
            polygon.removeClipPath();
          }));
        }
      } else {
        const layerGroup = oldLayersGroups[oldIdx];
        polygon = layerGroup.childAt(0);
        group.add(layerGroup);
        newLayersGroups[idx] = layerGroup;
        updateProps(polygon, {
          shape: {
            points: points0,
            stackedOnPoints: points1
          }
        }, seriesModel);
      }
      setLabelStyle(polygon, getLabelStatesModels(seriesModel), {
        labelDataIndex: indices[j - 1],
        defaultText: data.getName(indices[j - 1]),
        inheritColor: style2.fill
      }, {
        normal: {
          verticalAlign: "middle"
        }
      });
      polygon.setTextConfig({
        position: null,
        local: true
      });
      const labelEl = polygon.getTextContent();
      if (labelEl) {
        labelEl.x = textLayout.x - margin;
        labelEl.y = textLayout.y0 + textLayout.y / 2;
      }
      polygon.useStyle(style2);
      data.setItemGraphicEl(idx, polygon);
      setStatesStylesFromModel(polygon, seriesModel);
      enableHoverEmphasis(polygon, emphasisModel.get("focus"), emphasisModel.get("blurScope"));
    }
    this._layersSeries = layersSeries;
    this._layers = newLayersGroups;
  }
}
ThemeRiverView2.type = "themeRiver";
function createGridClipShape3(rect, seriesModel, cb) {
  const rectEl = new Rect_default({
    shape: {
      x: rect.x - 10,
      y: rect.y - 10,
      width: 0,
      height: rect.height + 20
    }
  });
  initProps(rectEl, {
    shape: {
      x: rect.x - 50,
      width: rect.width + 100,
      height: rect.height + 20
    }
  }, seriesModel, cb);
  return rectEl;
}
Chart_default.registerClass(ThemeRiverView2);

// src/chart/themeRiver/themeRiverLayout.ts
function themeRiverLayout_default(ecModel, api) {
  ecModel.eachSeriesByType("themeRiver", function(seriesModel) {
    const data = seriesModel.getData();
    const single = seriesModel.coordinateSystem;
    const layoutInfo = {};
    const rect = single.getRect();
    layoutInfo.rect = rect;
    const boundaryGap = seriesModel.get("boundaryGap");
    const axis2 = single.getAxis();
    layoutInfo.boundaryGap = boundaryGap;
    if (axis2.orient === "horizontal") {
      boundaryGap[0] = parsePercent3(boundaryGap[0], rect.height);
      boundaryGap[1] = parsePercent3(boundaryGap[1], rect.height);
      const height = rect.height - boundaryGap[0] - boundaryGap[1];
      themeRiverLayout2(data, seriesModel, height);
    } else {
      boundaryGap[0] = parsePercent3(boundaryGap[0], rect.width);
      boundaryGap[1] = parsePercent3(boundaryGap[1], rect.width);
      const width = rect.width - boundaryGap[0] - boundaryGap[1];
      themeRiverLayout2(data, seriesModel, width);
    }
    data.setLayout("layoutInfo", layoutInfo);
  });
}
function themeRiverLayout2(data, seriesModel, height) {
  if (!data.count()) {
    return;
  }
  const coordSys = seriesModel.coordinateSystem;
  const layerSeries = seriesModel.getLayerSeries();
  const timeDim = data.mapDimension("single");
  const valueDim = data.mapDimension("value");
  const layerPoints = map2(layerSeries, function(singleLayer) {
    return map2(singleLayer.indices, function(idx) {
      const pt = coordSys.dataToPoint(data.get(timeDim, idx));
      pt[1] = data.get(valueDim, idx);
      return pt;
    });
  });
  const base2 = computeBaseline(layerPoints);
  const baseLine = base2.y0;
  const ky = height / base2.max;
  const n = layerSeries.length;
  const m2 = layerSeries[0].indices.length;
  let baseY0;
  for (let j = 0; j < m2; ++j) {
    baseY0 = baseLine[j] * ky;
    data.setItemLayout(layerSeries[0].indices[j], {
      layerIndex: 0,
      x: layerPoints[0][j][0],
      y0: baseY0,
      y: layerPoints[0][j][1] * ky
    });
    for (let i = 1; i < n; ++i) {
      baseY0 += layerPoints[i - 1][j][1] * ky;
      data.setItemLayout(layerSeries[i].indices[j], {
        layerIndex: i,
        x: layerPoints[i][j][0],
        y0: baseY0,
        y: layerPoints[i][j][1] * ky
      });
    }
  }
}
function computeBaseline(data) {
  const layerNum = data.length;
  const pointNum = data[0].length;
  const sums = [];
  const y0 = [];
  let max4 = 0;
  for (let i = 0; i < pointNum; ++i) {
    let temp = 0;
    for (let j = 0; j < layerNum; ++j) {
      temp += data[j][i][1];
    }
    if (temp > max4) {
      max4 = temp;
    }
    sums.push(temp);
  }
  for (let k = 0; k < pointNum; ++k) {
    y0[k] = (max4 - sums[k]) / 2;
  }
  max4 = 0;
  for (let l = 0; l < pointNum; ++l) {
    const sum2 = sums[l] + y0[l];
    if (sum2 > max4) {
      max4 = sum2;
    }
  }
  return {
    y0,
    max: max4
  };
}

// src/chart/themeRiver.ts
registerLayout(themeRiverLayout_default);
registerProcessor(dataFilter_default("themeRiver"));

// src/chart/sunburst/SunburstSeries.ts
class SunburstSeriesModel2 extends Series_default {
  constructor() {
    super(...arguments);
    this.type = SunburstSeriesModel2.type;
    this.ignoreStyleOnData = true;
  }
  getInitialData(option, ecModel) {
    const root = {
      name: option.name,
      children: option.data
    };
    completeTreeValue(root);
    const levels = option.levels || [];
    const treeOption = {
      levels
    };
    return Tree_default.createTree(root, this, treeOption).data;
  }
  optionUpdated() {
    this.resetViewRoot();
  }
  getDataParams(dataIndex) {
    const params = super.getDataParams.apply(this, arguments);
    const node = this.getData().tree.getNodeByDataIndex(dataIndex);
    params.treePathInfo = wrapTreePathInfo(node, this);
    return params;
  }
  getViewRoot() {
    return this._viewRoot;
  }
  resetViewRoot(viewRoot) {
    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;
    const root = this.getRawData().tree.root;
    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {
      this._viewRoot = root;
    }
  }
}
SunburstSeriesModel2.type = "series.sunburst";
SunburstSeriesModel2.defaultOption = {
  zlevel: 0,
  z: 2,
  center: ["50%", "50%"],
  radius: [0, "75%"],
  clockwise: true,
  startAngle: 90,
  minAngle: 0,
  stillShowZeroSum: true,
  nodeClick: "rootToNode",
  renderLabelForZeroData: false,
  label: {
    rotate: "radial",
    show: true,
    opacity: 1,
    align: "center",
    position: "inside",
    distance: 5,
    silent: true
  },
  itemStyle: {
    borderWidth: 1,
    borderColor: "white",
    borderType: "solid",
    shadowBlur: 0,
    shadowColor: "rgba(0, 0, 0, 0.2)",
    shadowOffsetX: 0,
    shadowOffsetY: 0,
    opacity: 1
  },
  emphasis: {
    focus: "descendant"
  },
  blur: {
    itemStyle: {
      opacity: 0.2
    },
    label: {
      opacity: 0.1
    }
  },
  animationType: "expansion",
  animationDuration: 1000,
  animationDurationUpdate: 500,
  data: [],
  levels: [],
  sort: "desc"
};
function completeTreeValue(dataNode) {
  let sum2 = 0;
  each(dataNode.children, function(child) {
    completeTreeValue(child);
    let childValue = child.value;
    isArray(childValue) && (childValue = childValue[0]);
    sum2 += childValue;
  });
  let thisValue = dataNode.value;
  if (isArray(thisValue)) {
    thisValue = thisValue[0];
  }
  if (thisValue == null || isNaN(thisValue)) {
    thisValue = sum2;
  }
  if (thisValue < 0) {
    thisValue = 0;
  }
  isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;
}
Series_default.registerClass(SunburstSeriesModel2);

// src/chart/sunburst/SunburstPiece.ts
const DEFAULT_SECTOR_Z = 2;
const DEFAULT_TEXT_Z = 4;
class SunburstPiece extends Sector_default {
  constructor(node, seriesModel, ecModel) {
    super();
    this.z2 = DEFAULT_SECTOR_Z;
    this.textConfig = {
      inside: true
    };
    getECData(this).seriesIndex = seriesModel.seriesIndex;
    const text11 = new Text_default({
      z2: DEFAULT_TEXT_Z,
      silent: node.getModel().get(["label", "silent"])
    });
    this.setTextContent(text11);
    this.updateData(true, node, seriesModel, ecModel);
  }
  updateData(firstCreate, node, seriesModel, ecModel) {
    this.node = node;
    node.piece = this;
    seriesModel = seriesModel || this._seriesModel;
    ecModel = ecModel || this._ecModel;
    const sector = this;
    getECData(sector).dataIndex = node.dataIndex;
    const itemModel = node.getModel();
    const emphasisModel = itemModel.getModel("emphasis");
    const layout33 = node.getLayout();
    const sectorShape = extend({}, layout33);
    sectorShape.label = null;
    const normalStyle = node.getVisual("style");
    normalStyle.lineJoin = "bevel";
    each(SPECIAL_STATES, function(stateName) {
      const state = sector.ensureState(stateName);
      state.style = itemModel.getModel([stateName, "itemStyle"]).getItemStyle();
    });
    if (firstCreate) {
      sector.setShape(sectorShape);
      sector.shape.r = layout33.r0;
      updateProps(sector, {
        shape: {
          r: layout33.r
        }
      }, seriesModel, node.dataIndex);
    } else {
      updateProps(sector, {
        shape: sectorShape
      }, seriesModel);
    }
    sector.useStyle(normalStyle);
    this._updateLabel(seriesModel);
    const cursorStyle = itemModel.getShallow("cursor");
    cursorStyle && sector.attr("cursor", cursorStyle);
    this._seriesModel = seriesModel || this._seriesModel;
    this._ecModel = ecModel || this._ecModel;
    const focus = emphasisModel.get("focus");
    const focusDataIndices = focus === "ancestor" ? node.getAncestorsIndices() : focus === "descendant" ? node.getDescendantIndices() : null;
    enableHoverEmphasis(this, focusDataIndices || focus, emphasisModel.get("blurScope"));
  }
  _updateLabel(seriesModel) {
    const itemModel = this.node.getModel();
    const normalLabelModel = itemModel.getModel("label");
    const layout33 = this.node.getLayout();
    const angle = layout33.endAngle - layout33.startAngle;
    const midAngle = (layout33.startAngle + layout33.endAngle) / 2;
    const dx = Math.cos(midAngle);
    const dy = Math.sin(midAngle);
    const sector = this;
    const label = sector.getTextContent();
    const dataIndex = this.node.dataIndex;
    each(DISPLAY_STATES, (stateName) => {
      const labelStateModel = stateName === "normal" ? itemModel.getModel("label") : itemModel.getModel([stateName, "label"]);
      const labelMinAngle = labelStateModel.get("minAngle") / 180 * Math.PI;
      const isNormal = stateName === "normal";
      const state = isNormal ? label : label.ensureState(stateName);
      let text11 = seriesModel.getFormattedLabel(dataIndex, stateName);
      if (isNormal) {
        text11 = text11 || this.node.name;
      }
      state.style = createTextStyle(labelStateModel, {}, null, stateName !== "normal", true);
      if (text11) {
        state.style.text = text11;
      }
      state.ignore = labelMinAngle != null && Math.abs(angle) < labelMinAngle;
      const labelPosition = getLabelAttr(labelStateModel, "position");
      const sectorState = isNormal ? sector : sector.states[stateName];
      const labelColor = sectorState.style.fill;
      sectorState.textConfig = {
        outsideFill: labelStateModel.get("color") === "inherit" ? labelColor : null,
        inside: labelPosition !== "outside"
      };
      let r;
      const labelPadding = getLabelAttr(labelStateModel, "distance") || 0;
      let textAlign = getLabelAttr(labelStateModel, "align");
      if (labelPosition === "outside") {
        r = layout33.r + labelPadding;
        textAlign = midAngle > Math.PI / 2 ? "right" : "left";
      } else {
        if (!textAlign || textAlign === "center") {
          r = (layout33.r + layout33.r0) / 2;
          textAlign = "center";
        } else if (textAlign === "left") {
          r = layout33.r0 + labelPadding;
          if (midAngle > Math.PI / 2) {
            textAlign = "right";
          }
        } else if (textAlign === "right") {
          r = layout33.r - labelPadding;
          if (midAngle > Math.PI / 2) {
            textAlign = "left";
          }
        }
      }
      state.style.align = textAlign;
      state.style.verticalAlign = getLabelAttr(labelStateModel, "verticalAlign") || "middle";
      state.x = r * dx + layout33.cx;
      state.y = r * dy + layout33.cy;
      const rotateType = getLabelAttr(labelStateModel, "rotate");
      let rotate2 = 0;
      if (rotateType === "radial") {
        rotate2 = -midAngle;
        if (rotate2 < -Math.PI / 2) {
          rotate2 += Math.PI;
        }
      } else if (rotateType === "tangential") {
        rotate2 = Math.PI / 2 - midAngle;
        if (rotate2 > Math.PI / 2) {
          rotate2 -= Math.PI;
        } else if (rotate2 < -Math.PI / 2) {
          rotate2 += Math.PI;
        }
      } else if (typeof rotateType === "number") {
        rotate2 = rotateType * Math.PI / 180;
      }
      state.rotation = rotate2;
    });
    function getLabelAttr(model65, name) {
      const stateAttr = model65.get(name);
      if (stateAttr == null) {
        return normalLabelModel.get(name);
      }
      return stateAttr;
    }
    label.dirtyStyle();
  }
}
const SunburstPiece_default = SunburstPiece;

// src/chart/sunburst/sunburstAction.ts
const ROOT_TO_NODE_ACTION = "sunburstRootToNode";
registerAction({
  type: ROOT_TO_NODE_ACTION,
  update: "updateView"
}, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "series",
    subType: "sunburst",
    query: payload
  }, handleRootToNode);
  function handleRootToNode(model65, index) {
    const targetInfo = retrieveTargetInfo(payload, [ROOT_TO_NODE_ACTION], model65);
    if (targetInfo) {
      const originViewRoot = model65.getViewRoot();
      if (originViewRoot) {
        payload.direction = aboveViewRoot(originViewRoot, targetInfo.node) ? "rollUp" : "drillDown";
      }
      model65.resetViewRoot(targetInfo.node);
    }
  }
});
const HIGHLIGHT_ACTION = "sunburstHighlight";
registerAction({
  type: HIGHLIGHT_ACTION,
  update: "none"
}, function(payload, ecModel, api) {
  payload = extend({}, payload);
  ecModel.eachComponent({
    mainType: "series",
    subType: "sunburst",
    query: payload
  }, handleHighlight);
  function handleHighlight(model65) {
    const targetInfo = retrieveTargetInfo(payload, [HIGHLIGHT_ACTION], model65);
    if (targetInfo) {
      payload.dataIndex = targetInfo.node.dataIndex;
    }
  }
  if (__DEV__) {
    deprecateReplaceLog("highlight", "sunburstHighlight");
  }
  api.dispatchAction(extend(payload, {
    type: "highlight"
  }));
});
const UNHIGHLIGHT_ACTION = "sunburstUnhighlight";
registerAction({
  type: UNHIGHLIGHT_ACTION,
  update: "updateView"
}, function(payload, ecModel, api) {
  payload = extend({}, payload);
  if (__DEV__) {
    deprecateReplaceLog("downplay", "sunburstUnhighlight");
  }
  api.dispatchAction(extend(payload, {
    type: "downplay"
  }));
});

// src/chart/sunburst/SunburstView.ts
class SunburstView2 extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = SunburstView2.type;
  }
  render(seriesModel, ecModel, api, payload) {
    const self2 = this;
    this.seriesModel = seriesModel;
    this.api = api;
    this.ecModel = ecModel;
    const data = seriesModel.getData();
    const virtualRoot = data.tree.root;
    const newRoot = seriesModel.getViewRoot();
    const group = this.group;
    const renderLabelForZeroData = seriesModel.get("renderLabelForZeroData");
    const newChildren = [];
    newRoot.eachNode(function(node) {
      newChildren.push(node);
    });
    const oldChildren = this._oldChildren || [];
    dualTravel(newChildren, oldChildren);
    renderRollUp(virtualRoot, newRoot);
    this._initEvents();
    this._oldChildren = newChildren;
    function dualTravel(newChildren2, oldChildren2) {
      if (newChildren2.length === 0 && oldChildren2.length === 0) {
        return;
      }
      new DataDiffer_default(oldChildren2, newChildren2, getKey2, getKey2).add(processNode).update(processNode).remove(curry(processNode, null)).execute();
      function getKey2(node) {
        return node.getId();
      }
      function processNode(newIdx, oldIdx) {
        const newNode = newIdx == null ? null : newChildren2[newIdx];
        const oldNode = oldIdx == null ? null : oldChildren2[oldIdx];
        doRenderNode(newNode, oldNode);
      }
    }
    function doRenderNode(newNode, oldNode) {
      if (!renderLabelForZeroData && newNode && !newNode.getValue()) {
        newNode = null;
      }
      if (newNode !== virtualRoot && oldNode !== virtualRoot) {
        if (oldNode && oldNode.piece) {
          if (newNode) {
            oldNode.piece.updateData(false, newNode, seriesModel, ecModel);
            data.setItemGraphicEl(newNode.dataIndex, oldNode.piece);
          } else {
            removeNode2(oldNode);
          }
        } else if (newNode) {
          const piece = new SunburstPiece_default(newNode, seriesModel, ecModel);
          group.add(piece);
          data.setItemGraphicEl(newNode.dataIndex, piece);
        }
      }
    }
    function removeNode2(node) {
      if (!node) {
        return;
      }
      if (node.piece) {
        group.remove(node.piece);
        node.piece = null;
      }
    }
    function renderRollUp(virtualRoot2, viewRoot) {
      if (viewRoot.depth > 0) {
        if (self2.virtualPiece) {
          self2.virtualPiece.updateData(false, virtualRoot2, seriesModel, ecModel);
        } else {
          self2.virtualPiece = new SunburstPiece_default(virtualRoot2, seriesModel, ecModel);
          group.add(self2.virtualPiece);
        }
        viewRoot.piece.off("click");
        self2.virtualPiece.on("click", function(e) {
          self2._rootToNode(viewRoot.parentNode);
        });
      } else if (self2.virtualPiece) {
        group.remove(self2.virtualPiece);
        self2.virtualPiece = null;
      }
    }
  }
  _initEvents() {
    this.group.off("click");
    this.group.on("click", (e) => {
      let targetFound = false;
      const viewRoot = this.seriesModel.getViewRoot();
      viewRoot.eachNode((node) => {
        if (!targetFound && node.piece && node.piece === e.target) {
          const nodeClick = node.getModel().get("nodeClick");
          if (nodeClick === "rootToNode") {
            this._rootToNode(node);
          } else if (nodeClick === "link") {
            const itemModel = node.getModel();
            const link = itemModel.get("link");
            if (link) {
              const linkTarget = itemModel.get("target", true) || "_blank";
              windowOpen(link, linkTarget);
            }
          }
          targetFound = true;
        }
      });
    });
  }
  _rootToNode(node) {
    if (node !== this.seriesModel.getViewRoot()) {
      this.api.dispatchAction({
        type: ROOT_TO_NODE_ACTION,
        from: this.uid,
        seriesId: this.seriesModel.id,
        targetNode: node
      });
    }
  }
  containPoint(point, seriesModel) {
    const treeRoot = seriesModel.getData();
    const itemLayout = treeRoot.getItemLayout(0);
    if (itemLayout) {
      const dx = point[0] - itemLayout.cx;
      const dy = point[1] - itemLayout.cy;
      const radius = Math.sqrt(dx * dx + dy * dy);
      return radius <= itemLayout.r && radius >= itemLayout.r0;
    }
  }
}
SunburstView2.type = "sunburst";
Chart_default.registerClass(SunburstView2);

// src/chart/sunburst/sunburstLayout.ts
const RADIAN3 = Math.PI / 180;
function sunburstLayout_default(seriesType2, ecModel, api) {
  ecModel.eachSeriesByType(seriesType2, function(seriesModel) {
    let center3 = seriesModel.get("center");
    let radius = seriesModel.get("radius");
    if (!isArray(radius)) {
      radius = [0, radius];
    }
    if (!isArray(center3)) {
      center3 = [center3, center3];
    }
    const width = api.getWidth();
    const height = api.getHeight();
    const size = Math.min(width, height);
    const cx = parsePercent3(center3[0], width);
    const cy = parsePercent3(center3[1], height);
    const r0 = parsePercent3(radius[0], size / 2);
    const r = parsePercent3(radius[1], size / 2);
    const startAngle = -seriesModel.get("startAngle") * RADIAN3;
    const minAngle = seriesModel.get("minAngle") * RADIAN3;
    const virtualRoot = seriesModel.getData().tree.root;
    const treeRoot = seriesModel.getViewRoot();
    const rootDepth = treeRoot.depth;
    const sort4 = seriesModel.get("sort");
    if (sort4 != null) {
      initChildren(treeRoot, sort4);
    }
    let validDataCount = 0;
    each(treeRoot.children, function(child) {
      !isNaN(child.getValue()) && validDataCount++;
    });
    const sum2 = treeRoot.getValue();
    const unitRadian = Math.PI / (sum2 || validDataCount) * 2;
    const renderRollupNode = treeRoot.depth > 0;
    const levels = treeRoot.height - (renderRollupNode ? -1 : 1);
    const rPerLevel = (r - r0) / (levels || 1);
    const clockwise = seriesModel.get("clockwise");
    const stillShowZeroSum = seriesModel.get("stillShowZeroSum");
    const dir3 = clockwise ? 1 : -1;
    const renderNode2 = function(node, startAngle2) {
      if (!node) {
        return;
      }
      let endAngle = startAngle2;
      if (node !== virtualRoot) {
        const value = node.getValue();
        let angle = sum2 === 0 && stillShowZeroSum ? unitRadian : value * unitRadian;
        if (angle < minAngle) {
          angle = minAngle;
        }
        endAngle = startAngle2 + dir3 * angle;
        const depth = node.depth - rootDepth - (renderRollupNode ? -1 : 1);
        let rStart = r0 + rPerLevel * depth;
        let rEnd = r0 + rPerLevel * (depth + 1);
        const itemModel = node.getModel();
        if (itemModel.get("r0") != null) {
          rStart = parsePercent3(itemModel.get("r0"), size / 2);
        }
        if (itemModel.get("r") != null) {
          rEnd = parsePercent3(itemModel.get("r"), size / 2);
        }
        node.setLayout({
          angle,
          startAngle: startAngle2,
          endAngle,
          clockwise,
          cx,
          cy,
          r0: rStart,
          r: rEnd
        });
      }
      if (node.children && node.children.length) {
        let siblingAngle = 0;
        each(node.children, function(node2) {
          siblingAngle += renderNode2(node2, startAngle2 + siblingAngle);
        });
      }
      return endAngle - startAngle2;
    };
    if (renderRollupNode) {
      const rStart = r0;
      const rEnd = r0 + rPerLevel;
      const angle = Math.PI * 2;
      virtualRoot.setLayout({
        angle,
        startAngle,
        endAngle: startAngle + angle,
        clockwise,
        cx,
        cy,
        r0: rStart,
        r: rEnd
      });
    }
    renderNode2(treeRoot, startAngle);
  });
}
function initChildren(node, sortOrder) {
  const children = node.children || [];
  node.children = sort2(children, sortOrder);
  if (children.length) {
    each(node.children, function(child) {
      initChildren(child, sortOrder);
    });
  }
}
function sort2(children, sortOrder) {
  if (typeof sortOrder === "function") {
    return children.sort(sortOrder);
  } else {
    const isAsc = sortOrder === "asc";
    return children.sort(function(a, b) {
      const diff2 = (a.getValue() - b.getValue()) * (isAsc ? 1 : -1);
      return diff2 === 0 ? (a.dataIndex - b.dataIndex) * (isAsc ? -1 : 1) : diff2;
    });
  }
}

// src/chart/sunburst/sunburstVisual.ts
function sunburstVisual_default(ecModel) {
  const paletteScope = {};
  function pickColor(node, seriesModel, treeHeight) {
    let current = node;
    while (current && current.depth > 1) {
      current = current.parentNode;
    }
    let color8 = seriesModel.getColorFromPalette(current.name || current.dataIndex + "", paletteScope);
    if (node.depth > 1 && typeof color8 === "string") {
      color8 = lift(color8, (node.depth - 1) / (treeHeight - 1) * 0.5);
    }
    return color8;
  }
  ecModel.eachSeriesByType("sunburst", function(seriesModel) {
    const data = seriesModel.getData();
    const tree2 = data.tree;
    tree2.eachNode(function(node) {
      const model65 = node.getModel();
      const style2 = model65.getModel("itemStyle").getItemStyle();
      if (!style2.fill) {
        style2.fill = pickColor(node, seriesModel, tree2.root.height);
      }
      const existsStyle = data.ensureUniqueItemVisual(node.dataIndex, "style");
      extend(existsStyle, style2);
    });
  });
}

// src/chart/sunburst.ts
registerLayout(curry(sunburstLayout_default, "sunburst"));
registerProcessor(curry(dataFilter_default, "sunburst"));
registerVisual(sunburstVisual_default);

// src/coord/cartesian/prepareCustom.ts
function dataToCoordSize(dataSize, dataItem) {
  dataItem = dataItem || [0, 0];
  return map2(["x", "y"], function(dim, dimIdx) {
    const axis2 = this.getAxis(dim);
    const val = dataItem[dimIdx];
    const halfSize = dataSize[dimIdx] / 2;
    return axis2.type === "category" ? axis2.getBandWidth() : Math.abs(axis2.dataToCoord(val - halfSize) - axis2.dataToCoord(val + halfSize));
  }, this);
}
function prepareCustom_default(coordSys) {
  const rect = coordSys.master.getRect();
  return {
    coordSys: {
      type: "cartesian2d",
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height
    },
    api: {
      coord: function(data) {
        return coordSys.dataToPoint(data);
      },
      size: bind(dataToCoordSize, coordSys)
    }
  };
}

// src/coord/geo/prepareCustom.ts
function dataToCoordSize2(dataSize, dataItem) {
  dataItem = dataItem || [0, 0];
  return map2([0, 1], function(dimIdx) {
    const val = dataItem[dimIdx];
    const halfSize = dataSize[dimIdx] / 2;
    const p1 = [];
    const p2 = [];
    p1[dimIdx] = val - halfSize;
    p2[dimIdx] = val + halfSize;
    p1[1 - dimIdx] = p2[1 - dimIdx] = dataItem[1 - dimIdx];
    return Math.abs(this.dataToPoint(p1)[dimIdx] - this.dataToPoint(p2)[dimIdx]);
  }, this);
}
function prepareCustom_default2(coordSys) {
  const rect = coordSys.getBoundingRect();
  return {
    coordSys: {
      type: "geo",
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height,
      zoom: coordSys.getZoom()
    },
    api: {
      coord: function(data) {
        return coordSys.dataToPoint(data);
      },
      size: bind(dataToCoordSize2, coordSys)
    }
  };
}

// src/coord/single/prepareCustom.ts
function dataToCoordSize4(dataSize, dataItem) {
  const axis2 = this.getAxis();
  const val = dataItem instanceof Array ? dataItem[0] : dataItem;
  const halfSize = (dataSize instanceof Array ? dataSize[0] : dataSize) / 2;
  return axis2.type === "category" ? axis2.getBandWidth() : Math.abs(axis2.dataToCoord(val - halfSize) - axis2.dataToCoord(val + halfSize));
}
function prepareCustom_default3(coordSys) {
  const rect = coordSys.getRect();
  return {
    coordSys: {
      type: "singleAxis",
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height
    },
    api: {
      coord: function(val) {
        return coordSys.dataToPoint(val);
      },
      size: bind(dataToCoordSize4, coordSys)
    }
  };
}

// src/coord/polar/prepareCustom.ts
function dataToCoordSize3(dataSize, dataItem) {
  dataItem = dataItem || [0, 0];
  return map2(["Radius", "Angle"], function(dim, dimIdx) {
    const getterName = "get" + dim + "Axis";
    const axis2 = this[getterName]();
    const val = dataItem[dimIdx];
    const halfSize = dataSize[dimIdx] / 2;
    let result = axis2.type === "category" ? axis2.getBandWidth() : Math.abs(axis2.dataToCoord(val - halfSize) - axis2.dataToCoord(val + halfSize));
    if (dim === "Angle") {
      result = result * Math.PI / 180;
    }
    return result;
  }, this);
}
function prepareCustom_default4(coordSys) {
  const radiusAxis2 = coordSys.getRadiusAxis();
  const angleAxis2 = coordSys.getAngleAxis();
  const radius = radiusAxis2.getExtent();
  radius[0] > radius[1] && radius.reverse();
  return {
    coordSys: {
      type: "polar",
      cx: coordSys.cx,
      cy: coordSys.cy,
      r: radius[1],
      r0: radius[0]
    },
    api: {
      coord: function(data) {
        const radius2 = radiusAxis2.dataToRadius(data[0]);
        const angle = angleAxis2.dataToAngle(data[1]);
        const coord = coordSys.coordToPoint([radius2, angle]);
        coord.push(radius2, angle * Math.PI / 180);
        return coord;
      },
      size: bind(dataToCoordSize3, coordSys)
    }
  };
}

// src/coord/calendar/prepareCustom.ts
function prepareCustom_default5(coordSys) {
  const rect = coordSys.getRect();
  const rangeInfo = coordSys.getRangeInfo();
  return {
    coordSys: {
      type: "calendar",
      x: rect.x,
      y: rect.y,
      width: rect.width,
      height: rect.height,
      cellWidth: coordSys.getCellWidth(),
      cellHeight: coordSys.getCellHeight(),
      rangeInfo: {
        start: rangeInfo.start,
        end: rangeInfo.end,
        weeks: rangeInfo.weeks,
        dayCount: rangeInfo.allDay
      }
    },
    api: {
      coord: function(data, clamp2) {
        return coordSys.dataToPoint(data, clamp2);
      }
    }
  };
}

// src/util/styleCompat.ts
const deprecatedLogs = {};
function isEC4CompatibleStyle(style2, elType, hasOwnTextContentOption, hasOwnTextConfig) {
  return style2 && (style2.legacy || style2.legacy !== false && !hasOwnTextContentOption && !hasOwnTextConfig && elType !== "tspan" && (elType === "text" || hasOwn(style2, "text")));
}
function convertFromEC4CompatibleStyle(hostStyle, elType, isNormal) {
  const srcStyle = hostStyle;
  let textConfig;
  let textContent;
  let textContentStyle;
  if (elType === "text") {
    textContentStyle = srcStyle;
  } else {
    textContentStyle = {};
    hasOwn(srcStyle, "text") && (textContentStyle.text = srcStyle.text);
    hasOwn(srcStyle, "rich") && (textContentStyle.rich = srcStyle.rich);
    hasOwn(srcStyle, "textFill") && (textContentStyle.fill = srcStyle.textFill);
    hasOwn(srcStyle, "textStroke") && (textContentStyle.stroke = srcStyle.textStroke);
    textContent = {
      type: "text",
      style: textContentStyle,
      silent: true
    };
    textConfig = {};
    const hasOwnPos = hasOwn(srcStyle, "textPosition");
    if (isNormal) {
      textConfig.position = hasOwnPos ? srcStyle.textPosition : "inside";
    } else {
      hasOwnPos && (textConfig.position = srcStyle.textPosition);
    }
    hasOwn(srcStyle, "textPosition") && (textConfig.position = srcStyle.textPosition);
    hasOwn(srcStyle, "textOffset") && (textConfig.offset = srcStyle.textOffset);
    hasOwn(srcStyle, "textRotation") && (textConfig.rotation = srcStyle.textRotation);
    hasOwn(srcStyle, "textDistance") && (textConfig.distance = srcStyle.textDistance);
  }
  convertEC4CompatibleRichItem(textContentStyle, hostStyle);
  each(textContentStyle.rich, function(richItem) {
    convertEC4CompatibleRichItem(richItem, richItem);
  });
  return {
    textConfig,
    textContent
  };
}
function convertEC4CompatibleRichItem(out2, richItem) {
  if (!richItem) {
    return;
  }
  richItem.font = richItem.textFont || richItem.font;
  hasOwn(richItem, "textStrokeWidth") && (out2.lineWidth = richItem.textStrokeWidth);
  hasOwn(richItem, "textAlign") && (out2.align = richItem.textAlign);
  hasOwn(richItem, "textVerticalAlign") && (out2.verticalAlign = richItem.textVerticalAlign);
  hasOwn(richItem, "textLineHeight") && (out2.lineHeight = richItem.textLineHeight);
  hasOwn(richItem, "textWidth") && (out2.width = richItem.textWidth);
  hasOwn(richItem, "textHeight") && (out2.height = richItem.textHeight);
  hasOwn(richItem, "textBackgroundColor") && (out2.backgroundColor = richItem.textBackgroundColor);
  hasOwn(richItem, "textPadding") && (out2.padding = richItem.textPadding);
  hasOwn(richItem, "textBorderColor") && (out2.borderColor = richItem.textBorderColor);
  hasOwn(richItem, "textBorderWidth") && (out2.borderWidth = richItem.textBorderWidth);
  hasOwn(richItem, "textBorderRadius") && (out2.borderRadius = richItem.textBorderRadius);
  hasOwn(richItem, "textBoxShadowColor") && (out2.shadowColor = richItem.textBoxShadowColor);
  hasOwn(richItem, "textBoxShadowBlur") && (out2.shadowBlur = richItem.textBoxShadowBlur);
  hasOwn(richItem, "textBoxShadowOffsetX") && (out2.shadowOffsetX = richItem.textBoxShadowOffsetX);
  hasOwn(richItem, "textBoxShadowOffsetY") && (out2.shadowOffsetY = richItem.textBoxShadowOffsetY);
}
function convertToEC4StyleForCustomSerise(itemStl, txStl, txCfg) {
  const out2 = itemStl;
  out2.textPosition = out2.textPosition || txCfg.position || "inside";
  txCfg.offset != null && (out2.textOffset = txCfg.offset);
  txCfg.rotation != null && (out2.textRotation = txCfg.rotation);
  txCfg.distance != null && (out2.textDistance = txCfg.distance);
  const isInside = out2.textPosition.indexOf("inside") >= 0;
  const hostFill = itemStl.fill || "#000";
  convertToEC4RichItem(out2, txStl);
  const textFillNotSet = out2.textFill == null;
  if (isInside) {
    if (textFillNotSet) {
      out2.textFill = txCfg.insideFill || "#fff";
      !out2.textStroke && txCfg.insideStroke && (out2.textStroke = txCfg.insideStroke);
      !out2.textStroke && (out2.textStroke = hostFill);
      out2.textStrokeWidth == null && (out2.textStrokeWidth = 2);
    }
  } else {
    if (textFillNotSet) {
      out2.textFill = txCfg.outsideFill || hostFill;
    }
    !out2.textStroke && txCfg.outsideStroke && (out2.textStroke = txCfg.outsideStroke);
  }
  out2.text = txStl.text;
  out2.rich = txStl.rich;
  each(txStl.rich, function(richItem) {
    convertToEC4RichItem(richItem, richItem);
  });
  return out2;
}
function convertToEC4RichItem(out2, richItem) {
  if (!richItem) {
    return;
  }
  hasOwn(richItem, "fill") && (out2.textFill = richItem.fill);
  hasOwn(richItem, "stroke") && (out2.textStroke = richItem.fill);
  hasOwn(richItem, "lineWidth") && (out2.textStrokeWidth = richItem.lineWidth);
  hasOwn(richItem, "font") && (out2.textStrokeWidth = richItem.font);
  hasOwn(richItem, "fontStyle") && (out2.fontStyle = richItem.fontStyle);
  hasOwn(richItem, "fontWeight") && (out2.fontWeight = richItem.fontWeight);
  hasOwn(richItem, "fontSize") && (out2.fontSize = richItem.fontSize);
  hasOwn(richItem, "fontFamily") && (out2.fontFamily = richItem.fontFamily);
  hasOwn(richItem, "align") && (out2.textAlign = richItem.align);
  hasOwn(richItem, "verticalAlign") && (out2.textVerticalAlign = richItem.verticalAlign);
  hasOwn(richItem, "lineHeight") && (out2.textLineHeight = richItem.lineHeight);
  hasOwn(richItem, "width") && (out2.textWidth = richItem.width);
  hasOwn(richItem, "height") && (out2.textHeight = richItem.height);
  hasOwn(richItem, "backgroundColor") && (out2.textBackgroundColor = richItem.backgroundColor);
  hasOwn(richItem, "padding") && (out2.textPadding = richItem.padding);
  hasOwn(richItem, "borderColor") && (out2.textBorderColor = richItem.borderColor);
  hasOwn(richItem, "borderWidth") && (out2.textBorderWidth = richItem.borderWidth);
  hasOwn(richItem, "borderRadius") && (out2.textBorderRadius = richItem.borderRadius);
  hasOwn(richItem, "shadowColor") && (out2.textBoxShadowColor = richItem.shadowColor);
  hasOwn(richItem, "shadowBlur") && (out2.textBoxShadowBlur = richItem.shadowBlur);
  hasOwn(richItem, "shadowOffsetX") && (out2.textBoxShadowOffsetX = richItem.shadowOffsetX);
  hasOwn(richItem, "shadowOffsetY") && (out2.textBoxShadowOffsetY = richItem.shadowOffsetY);
  hasOwn(richItem, "textShadowColor") && (out2.textShadowColor = richItem.textShadowColor);
  hasOwn(richItem, "textShadowBlur") && (out2.textShadowBlur = richItem.textShadowBlur);
  hasOwn(richItem, "textShadowOffsetX") && (out2.textShadowOffsetX = richItem.textShadowOffsetX);
  hasOwn(richItem, "textShadowOffsetY") && (out2.textShadowOffsetY = richItem.textShadowOffsetY);
}
function warnDeprecated(deprecated, insteadApproach) {
  if (__DEV__) {
    const key = deprecated + "^_^" + insteadApproach;
    if (!deprecatedLogs[key]) {
      console.warn(`[ECharts] DEPRECATED: "${deprecated}" has been deprecated. ${insteadApproach}`);
      deprecatedLogs[key] = true;
    }
  }
}

// src/chart/custom.ts
const inner = makeInner();
const TRANSFORM_PROPS = {
  x: 1,
  y: 1,
  scaleX: 1,
  scaleY: 1,
  originX: 1,
  originY: 1,
  rotation: 1
};
const transformPropNamesStr = keys(TRANSFORM_PROPS).join(", ");
const STYLE_VISUAL_TYPE = {
  color: "fill",
  borderColor: "stroke"
};
const VISUAL_PROPS = {
  symbol: 1,
  symbolSize: 1,
  symbolKeepAspect: 1,
  legendSymbol: 1,
  visualMeta: 1,
  liftZ: 1
};
const EMPHASIS = "emphasis";
const NORMAL = "normal";
const BLUR = "blur";
const SELECT = "select";
const STATES = [NORMAL, EMPHASIS, BLUR, SELECT];
const PATH_ITEM_STYLE = {
  normal: ["itemStyle"],
  emphasis: [EMPHASIS, "itemStyle"],
  blur: [BLUR, "itemStyle"],
  select: [SELECT, "itemStyle"]
};
const PATH_LABEL = {
  normal: ["label"],
  emphasis: [EMPHASIS, "label"],
  blur: [BLUR, "label"],
  select: [SELECT, "label"]
};
const GROUP_DIFF_PREFIX = "e\0\0";
const attachedTxInfoTmp = {
  normal: {},
  emphasis: {},
  blur: {},
  select: {}
};
const LEGACY_TRANSFORM_PROPS = {
  position: ["x", "y"],
  scale: ["scaleX", "scaleY"],
  origin: ["originX", "originY"]
};
const prepareCustoms = {
  cartesian2d: prepareCustom_default,
  geo: prepareCustom_default2,
  singleAxis: prepareCustom_default3,
  polar: prepareCustom_default4,
  calendar: prepareCustom_default5
};
class CustomSeriesModel extends Series_default {
  constructor() {
    super(...arguments);
    this.type = CustomSeriesModel.type;
  }
  optionUpdated() {
    this.currentZLevel = this.get("zlevel", true);
    this.currentZ = this.get("z", true);
  }
  getInitialData(option, ecModel) {
    return createListFromArray_default(this.getSource(), this);
  }
  getDataParams(dataIndex, dataType, el) {
    const params = super.getDataParams(dataIndex, dataType);
    el && (params.info = inner(el).info);
    return params;
  }
}
CustomSeriesModel.type = "series.custom";
CustomSeriesModel.dependencies = ["grid", "polar", "geo", "singleAxis", "calendar"];
CustomSeriesModel.defaultOption = {
  coordinateSystem: "cartesian2d",
  zlevel: 0,
  z: 2,
  legendHoverLink: true,
  clip: false
};
Component_default.registerClass(CustomSeriesModel);
class CustomSeriesView extends Chart_default {
  constructor() {
    super(...arguments);
    this.type = CustomSeriesView.type;
  }
  render(customSeries, ecModel, api, payload) {
    const oldData = this._data;
    const data = customSeries.getData();
    const group = this.group;
    const renderItem = makeRenderItem(customSeries, data, ecModel, api);
    data.diff(oldData).add(function(newIdx) {
      createOrUpdateItem(null, newIdx, renderItem(newIdx, payload), customSeries, group, data);
    }).update(function(newIdx, oldIdx) {
      createOrUpdateItem(oldData.getItemGraphicEl(oldIdx), newIdx, renderItem(newIdx, payload), customSeries, group, data);
    }).remove(function(oldIdx) {
      doRemoveEl(oldData.getItemGraphicEl(oldIdx), customSeries, group);
    }).execute();
    const clipPath = customSeries.get("clip", true) ? createClipPath(customSeries.coordinateSystem, false, customSeries) : null;
    if (clipPath) {
      group.setClipPath(clipPath);
    } else {
      group.removeClipPath();
    }
    this._data = data;
  }
  incrementalPrepareRender(customSeries, ecModel, api) {
    this.group.removeAll();
    this._data = null;
  }
  incrementalRender(params, customSeries, ecModel, api, payload) {
    const data = customSeries.getData();
    const renderItem = makeRenderItem(customSeries, data, ecModel, api);
    function setIncrementalAndHoverLayer(el) {
      if (!el.isGroup) {
        el.incremental = true;
        el.ensureState("emphasis").hoverLayer = true;
      }
    }
    for (let idx = params.start; idx < params.end; idx++) {
      const el = createOrUpdateItem(null, idx, renderItem(idx, payload), customSeries, this.group, data);
      el.traverse(setIncrementalAndHoverLayer);
    }
  }
  filterForExposedEvent(eventType, query, targetEl, packedEvent) {
    const elementName = query.element;
    if (elementName == null || targetEl.name === elementName) {
      return true;
    }
    while ((targetEl = targetEl.parent) && targetEl !== this.group) {
      if (targetEl.name === elementName) {
        return true;
      }
    }
    return false;
  }
}
CustomSeriesView.type = "custom";
Chart_default.registerClass(CustomSeriesView);
function createEl(elOption) {
  const graphicType = elOption.type;
  let el;
  if (graphicType === "path") {
    const shape = elOption.shape;
    const pathRect = shape.width != null && shape.height != null ? {
      x: shape.x || 0,
      y: shape.y || 0,
      width: shape.width,
      height: shape.height
    } : null;
    const pathData = getPathData(shape);
    el = makePath(pathData, null, pathRect, shape.layout || "center");
    inner(el).customPathData = pathData;
  } else if (graphicType === "image") {
    el = new Image_default({});
    inner(el).customImagePath = elOption.style.image;
  } else if (graphicType === "text") {
    el = new Text_default({});
  } else if (graphicType === "group") {
    el = new Group_default();
  } else if (graphicType === "compoundPath") {
    throw new Error('"compoundPath" is not supported yet.');
  } else {
    const Clz = getShapeClass(graphicType);
    if (__DEV__) {
      assert(Clz, 'graphic type "' + graphicType + '" can not be found.');
    }
    el = new Clz();
  }
  inner(el).customGraphicType = graphicType;
  el.name = elOption.name;
  el.z2EmphasisLift = 1;
  el.z2SelectLift = 1;
  return el;
}
function updateElNormal(el, dataIndex, elOption, styleOpt, attachedTxInfo, seriesModel, isInit, isTextContent) {
  const transFromProps = {};
  const allProps = {};
  const elDisplayable = el.isGroup ? null : el;
  prepareShapeOrExtraUpdate("shape", el, elOption, allProps, transFromProps, isInit);
  prepareShapeOrExtraUpdate("extra", el, elOption, allProps, transFromProps, isInit);
  prepareTransformUpdate(el, elOption, allProps, transFromProps, isInit);
  const txCfgOpt = attachedTxInfo && attachedTxInfo.normal.cfg;
  if (txCfgOpt) {
    el.setTextConfig(txCfgOpt);
  }
  if (el.type === "text" && styleOpt) {
    const textOptionStyle = styleOpt;
    hasOwn(textOptionStyle, "textFill") && (textOptionStyle.fill = textOptionStyle.textFill);
    hasOwn(textOptionStyle, "textStroke") && (textOptionStyle.stroke = textOptionStyle.textStroke);
  }
  prepareStyleUpdate(el, styleOpt, transFromProps, isInit);
  if (elDisplayable) {
    styleOpt && elDisplayable.useStyle(styleOpt);
    const animators = elDisplayable.animators;
    for (let i = 0; i < animators.length; i++) {
      const animator = animators[i];
      if (animator.targetName === "style") {
        animator.changeTarget(elDisplayable.style);
      }
    }
    hasOwn(elOption, "invisible") && (elDisplayable.invisible = elOption.invisible);
  }
  const userDuring = elOption.during;
  inner(el).userDuring = userDuring;
  const cfgDuringCall = userDuring ? bind(duringCall, {
    el,
    userDuring
  }) : null;
  el.attr(allProps);
  const cfg = {
    dataIndex,
    isFrom: true,
    during: cfgDuringCall
  };
  isInit ? initProps(el, transFromProps, seriesModel, cfg) : updateProps(el, transFromProps, seriesModel, cfg);
  hasOwn(elOption, "silent") && (el.silent = elOption.silent);
  hasOwn(elOption, "ignore") && (el.ignore = elOption.ignore);
  if (!isTextContent) {
    hasOwn(elOption, "info") && (inner(el).info = elOption.info);
  }
  styleOpt ? el.dirty() : el.markRedraw();
}
function prepareShapeOrExtraUpdate(mainAttr, el, elOption, allProps, transFromProps, isInit) {
  const attrOpt = elOption[mainAttr];
  if (!attrOpt) {
    return;
  }
  const elPropsInAttr = el[mainAttr];
  let transFromPropsInAttr;
  const enterFrom = attrOpt.enterFrom;
  if (isInit && enterFrom) {
    !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});
    const enterFromKeys = keys(enterFrom);
    for (let i = 0; i < enterFromKeys.length; i++) {
      const key = enterFromKeys[i];
      transFromPropsInAttr[key] = enterFrom[key];
    }
  }
  if (!isInit && elPropsInAttr && attrOpt.transition) {
    !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});
    const transitionKeys = normalizeToArray(attrOpt.transition);
    for (let i = 0; i < transitionKeys.length; i++) {
      const key = transitionKeys[i];
      const elVal = elPropsInAttr[key];
      if (__DEV__) {
        checkTansitionRefer(key, attrOpt[key], elVal);
      }
      transFromPropsInAttr[key] = elVal;
    }
  }
  const allPropsInAttr = allProps[mainAttr] = {};
  const keysInAttr = keys(attrOpt);
  for (let i = 0; i < keysInAttr.length; i++) {
    const key = keysInAttr[i];
    allPropsInAttr[key] = cloneValue(attrOpt[key]);
  }
  const leaveTo = attrOpt.leaveTo;
  if (leaveTo) {
    const leaveToProps = getOrCreateLeaveToPropsFromEl(el);
    const leaveToPropsInAttr = leaveToProps[mainAttr] || (leaveToProps[mainAttr] = {});
    const leaveToKeys = keys(leaveTo);
    for (let i = 0; i < leaveToKeys.length; i++) {
      const key = leaveToKeys[i];
      leaveToPropsInAttr[key] = leaveTo[key];
    }
  }
}
function prepareTransformUpdate(el, elOption, allProps, transFromProps, isInit) {
  const enterFrom = elOption.enterFrom;
  if (isInit && enterFrom) {
    const enterFromKeys = keys(enterFrom);
    for (let i = 0; i < enterFromKeys.length; i++) {
      const key = enterFromKeys[i];
      if (__DEV__) {
        checkTransformPropRefer(key, "el.enterFrom");
      }
      transFromProps[key] = enterFrom[key];
    }
  }
  if (!isInit) {
    if (elOption.transition) {
      const transitionKeys = normalizeToArray(elOption.transition);
      for (let i = 0; i < transitionKeys.length; i++) {
        const key = transitionKeys[i];
        const elVal = el[key];
        if (__DEV__) {
          checkTransformPropRefer(key, "el.transition");
          checkTansitionRefer(key, elOption[key], elVal);
        }
        transFromProps[key] = elVal;
      }
    } else {
      setLagecyProp(elOption, transFromProps, "position", el);
      setTransProp(elOption, transFromProps, "x", el);
      setTransProp(elOption, transFromProps, "y", el);
    }
  }
  setLagecyProp(elOption, allProps, "position");
  setLagecyProp(elOption, allProps, "scale");
  setLagecyProp(elOption, allProps, "origin");
  setTransProp(elOption, allProps, "x");
  setTransProp(elOption, allProps, "y");
  setTransProp(elOption, allProps, "scaleX");
  setTransProp(elOption, allProps, "scaleY");
  setTransProp(elOption, allProps, "originX");
  setTransProp(elOption, allProps, "originY");
  setTransProp(elOption, allProps, "rotation");
  const leaveTo = elOption.leaveTo;
  if (leaveTo) {
    const leaveToProps = getOrCreateLeaveToPropsFromEl(el);
    const leaveToKeys = keys(leaveTo);
    for (let i = 0; i < leaveToKeys.length; i++) {
      const key = leaveToKeys[i];
      if (__DEV__) {
        checkTransformPropRefer(key, "el.leaveTo");
      }
      leaveToProps[key] = leaveTo[key];
    }
  }
}
function prepareStyleUpdate(el, styleOpt, transFromProps, isInit) {
  if (!styleOpt) {
    return;
  }
  const elStyle = el.style;
  let transFromStyleProps;
  const enterFrom = styleOpt.enterFrom;
  if (isInit && enterFrom) {
    const enterFromKeys = keys(enterFrom);
    !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});
    for (let i = 0; i < enterFromKeys.length; i++) {
      const key = enterFromKeys[i];
      transFromStyleProps[key] = enterFrom[key];
    }
  }
  if (!isInit && elStyle && styleOpt.transition) {
    const transitionKeys = normalizeToArray(styleOpt.transition);
    !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});
    for (let i = 0; i < transitionKeys.length; i++) {
      const key = transitionKeys[i];
      const elVal = elStyle[key];
      if (__DEV__) {
        checkTansitionRefer(key, styleOpt[key], elVal);
      }
      transFromStyleProps[key] = elVal;
    }
  }
  const leaveTo = styleOpt.leaveTo;
  if (leaveTo) {
    const leaveToKeys = keys(leaveTo);
    const leaveToProps = getOrCreateLeaveToPropsFromEl(el);
    const leaveToStyleProps = leaveToProps.style || (leaveToProps.style = {});
    for (let i = 0; i < leaveToKeys.length; i++) {
      const key = leaveToKeys[i];
      leaveToStyleProps[key] = leaveTo[key];
    }
  }
}
function checkTansitionRefer(propName, optVal, elVal) {
  const isArrLike = isArrayLike(optVal);
  assert(isArrLike || optVal != null && isFinite(optVal), "Prop `" + propName + "` must refer to a finite number or ArrayLike for transition.");
  assert(!isArrLike || optVal !== elVal, "Prop `" + propName + "` must use different Array object each time for transition.");
}
function checkTransformPropRefer(key, usedIn) {
  assert(hasOwn(TRANSFORM_PROPS, key), "Prop `" + key + "` is not a permitted in `" + usedIn + "`. Only `" + keys(TRANSFORM_PROPS).join("`, `") + "` are permitted.");
}
function getOrCreateLeaveToPropsFromEl(el) {
  const innerEl = inner(el);
  return innerEl.leaveToProps || (innerEl.leaveToProps = {});
}
const tmpDuringScope = {};
const customDuringAPI = {
  setTransform(key, val) {
    if (__DEV__) {
      assert(hasOwn(TRANSFORM_PROPS, key), "Only " + transformPropNamesStr + " available in `setTransform`.");
    }
    tmpDuringScope.el[key] = val;
    return this;
  },
  getTransform(key) {
    if (__DEV__) {
      assert(hasOwn(TRANSFORM_PROPS, key), "Only " + transformPropNamesStr + " available in `getTransform`.");
    }
    return tmpDuringScope.el[key];
  },
  setShape(key, val) {
    if (__DEV__) {
      assertNotReserved(key);
    }
    const shape = tmpDuringScope.el.shape || (tmpDuringScope.el.shape = {});
    shape[key] = val;
    tmpDuringScope.isShapeDirty = true;
    return this;
  },
  getShape(key) {
    if (__DEV__) {
      assertNotReserved(key);
    }
    const shape = tmpDuringScope.el.shape;
    if (shape) {
      return shape[key];
    }
  },
  setStyle(key, val) {
    if (__DEV__) {
      assertNotReserved(key);
    }
    const style2 = tmpDuringScope.el.style;
    if (style2) {
      style2[key] = val;
      tmpDuringScope.isStyleDirty = true;
    }
    return this;
  },
  getStyle(key) {
    if (__DEV__) {
      assertNotReserved(key);
    }
    const style2 = tmpDuringScope.el.style;
    if (style2) {
      return style2[key];
    }
  },
  setExtra(key, val) {
    if (__DEV__) {
      assertNotReserved(key);
    }
    const extra = tmpDuringScope.el.extra || (tmpDuringScope.el.extra = {});
    extra[key] = val;
    return this;
  },
  getExtra(key) {
    if (__DEV__) {
      assertNotReserved(key);
    }
    const extra = tmpDuringScope.el.extra;
    if (extra) {
      return extra[key];
    }
  }
};
function assertNotReserved(key) {
  if (__DEV__) {
    if (key === "transition" || key === "enterFrom" || key === "leaveTo") {
      throw new Error('key must not be "' + key + '"');
    }
  }
}
function duringCall() {
  const scope = this;
  const el = scope.el;
  if (!el) {
    return;
  }
  const newstUserDuring = inner(el).userDuring;
  const scopeUserDuring = scope.userDuring;
  if (newstUserDuring !== scopeUserDuring) {
    scope.el = scope.userDuring = null;
    return;
  }
  tmpDuringScope.el = el;
  tmpDuringScope.isShapeDirty = false;
  tmpDuringScope.isStyleDirty = false;
  scopeUserDuring(customDuringAPI);
  if (tmpDuringScope.isShapeDirty && el.dirtyShape) {
    el.dirtyShape();
  }
  if (tmpDuringScope.isStyleDirty && el.dirtyStyle) {
    el.dirtyStyle();
  }
}
function updateElOnState(state, el, elStateOpt, styleOpt, attachedTxInfo, isRoot, isTextContent) {
  const elDisplayable = el.isGroup ? null : el;
  const txCfgOpt = attachedTxInfo && attachedTxInfo[state].cfg;
  if (elDisplayable) {
    const stateObj = elDisplayable.ensureState(state);
    if (styleOpt === false) {
      const existingEmphasisState = elDisplayable.getState(state);
      if (existingEmphasisState) {
        existingEmphasisState.style = null;
      }
    } else {
      stateObj.style = styleOpt || null;
    }
    if (txCfgOpt) {
      stateObj.textConfig = txCfgOpt;
    }
    setDefaultStateProxy(elDisplayable);
  }
}
function updateZ(el, elOption, seriesModel, attachedTxInfo) {
  if (el.isGroup) {
    return;
  }
  const elDisplayable = el;
  const currentZ = seriesModel.currentZ;
  const currentZLevel = seriesModel.currentZLevel;
  elDisplayable.z = currentZ;
  elDisplayable.zlevel = currentZLevel;
  const optZ2 = elOption.z2;
  optZ2 != null && (elDisplayable.z2 = optZ2 || 0);
  for (let i = 0; i < STATES.length; i++) {
    updateZForEachState(elDisplayable, elOption, STATES[i]);
  }
}
function updateZForEachState(elDisplayable, elOption, state) {
  const isNormal = state === NORMAL;
  const elStateOpt = isNormal ? elOption : retrieveStateOption(elOption, state);
  const optZ2 = elStateOpt ? elStateOpt.z2 : null;
  let stateObj;
  if (optZ2 != null) {
    stateObj = isNormal ? elDisplayable : elDisplayable.ensureState(state);
    stateObj.z2 = optZ2 || 0;
  }
}
function setLagecyProp(elOption, targetProps, legacyName, fromEl) {
  const legacyArr = elOption[legacyName];
  const xyName = LEGACY_TRANSFORM_PROPS[legacyName];
  if (legacyArr) {
    if (fromEl) {
      targetProps[xyName[0]] = fromEl[xyName[0]];
      targetProps[xyName[1]] = fromEl[xyName[1]];
    } else {
      targetProps[xyName[0]] = legacyArr[0];
      targetProps[xyName[1]] = legacyArr[1];
    }
  }
}
function setTransProp(elOption, targetProps, name, fromEl) {
  if (elOption[name] != null) {
    targetProps[name] = fromEl ? fromEl[name] : elOption[name];
  }
}
function makeRenderItem(customSeries, data, ecModel, api) {
  const renderItem = customSeries.get("renderItem");
  const coordSys = customSeries.coordinateSystem;
  let prepareResult2 = {};
  if (coordSys) {
    if (__DEV__) {
      assert(renderItem, "series.render is required.");
      assert(coordSys.prepareCustoms || prepareCustoms[coordSys.type], "This coordSys does not support custom series.");
    }
    prepareResult2 = coordSys.prepareCustoms ? coordSys.prepareCustoms(coordSys) : prepareCustoms[coordSys.type](coordSys);
  }
  const userAPI = defaults({
    getWidth: api.getWidth,
    getHeight: api.getHeight,
    getZr: api.getZr,
    getDevicePixelRatio: api.getDevicePixelRatio,
    value,
    style: style2,
    styleEmphasis,
    visual,
    barLayout,
    currentSeriesIndices,
    font
  }, prepareResult2.api || {});
  const userParams = {
    context: {},
    seriesId: customSeries.id,
    seriesName: customSeries.name,
    seriesIndex: customSeries.seriesIndex,
    coordSys: prepareResult2.coordSys,
    dataInsideLength: data.count(),
    encode: wrapEncodeDef(customSeries.getData())
  };
  let currDataIndexInside;
  let currItemModel;
  let currItemStyleModels = {};
  let currLabelModels = {};
  const seriesItemStyleModels = {};
  const seriesLabelModels = {};
  for (let i = 0; i < STATES.length; i++) {
    const stateName = STATES[i];
    seriesItemStyleModels[stateName] = customSeries.getModel(PATH_ITEM_STYLE[stateName]);
    seriesLabelModels[stateName] = customSeries.getModel(PATH_LABEL[stateName]);
  }
  function getItemModel2(dataIndexInside) {
    return dataIndexInside === currDataIndexInside ? currItemModel || (currItemModel = data.getItemModel(dataIndexInside)) : data.getItemModel(dataIndexInside);
  }
  function getItemStyleModel(dataIndexInside, state) {
    return !data.hasItemOption ? seriesItemStyleModels[state] : dataIndexInside === currDataIndexInside ? currItemStyleModels[state] || (currItemStyleModels[state] = getItemModel2(dataIndexInside).getModel(PATH_ITEM_STYLE[state])) : getItemModel2(dataIndexInside).getModel(PATH_ITEM_STYLE[state]);
  }
  function getLabelModel(dataIndexInside, state) {
    return !data.hasItemOption ? seriesLabelModels[state] : dataIndexInside === currDataIndexInside ? currLabelModels[state] || (currLabelModels[state] = getItemModel2(dataIndexInside).getModel(PATH_LABEL[state])) : getItemModel2(dataIndexInside).getModel(PATH_LABEL[state]);
  }
  return function(dataIndexInside, payload) {
    currDataIndexInside = dataIndexInside;
    currItemModel = null;
    currItemStyleModels = {};
    currLabelModels = {};
    return renderItem && renderItem(defaults({
      dataIndexInside,
      dataIndex: data.getRawIndex(dataIndexInside),
      actionType: payload ? payload.type : null
    }, userParams), userAPI);
  };
  function value(dim, dataIndexInside) {
    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
    return data.get(data.getDimension(dim || 0), dataIndexInside);
  }
  function style2(userProps, dataIndexInside) {
    if (__DEV__) {
      warnDeprecated("api.style", "Please write literal style directly instead.");
    }
    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
    const style3 = data.getItemVisual(dataIndexInside, "style");
    const visualColor = style3 && style3.fill;
    const opacity = style3 && style3.opacity;
    let itemStyle5 = getItemStyleModel(dataIndexInside, NORMAL).getItemStyle();
    visualColor != null && (itemStyle5.fill = visualColor);
    opacity != null && (itemStyle5.opacity = opacity);
    const opt = {
      inheritColor: isString(visualColor) ? visualColor : "#000"
    };
    const labelModel = getLabelModel(dataIndexInside, NORMAL);
    const textStyle2 = createTextStyle(labelModel, null, opt, false, true);
    textStyle2.text = labelModel.getShallow("show") ? retrieve2(customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;
    const textConfig = createTextConfig(labelModel, opt, false);
    preFetchFromExtra(userProps, itemStyle5);
    itemStyle5 = convertToEC4StyleForCustomSerise(itemStyle5, textStyle2, textConfig);
    userProps && applyUserPropsAfter(itemStyle5, userProps);
    itemStyle5.legacy = true;
    return itemStyle5;
  }
  function styleEmphasis(userProps, dataIndexInside) {
    if (__DEV__) {
      warnDeprecated("api.styleEmphasis", "Please write literal style directly instead.");
    }
    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
    let itemStyle5 = getItemStyleModel(dataIndexInside, EMPHASIS).getItemStyle();
    const labelModel = getLabelModel(dataIndexInside, EMPHASIS);
    const textStyle2 = createTextStyle(labelModel, null, null, true, true);
    textStyle2.text = labelModel.getShallow("show") ? retrieve3(customSeries.getFormattedLabel(dataIndexInside, EMPHASIS), customSeries.getFormattedLabel(dataIndexInside, NORMAL), getDefaultLabel(data, dataIndexInside)) : null;
    const textConfig = createTextConfig(labelModel, null, true);
    preFetchFromExtra(userProps, itemStyle5);
    itemStyle5 = convertToEC4StyleForCustomSerise(itemStyle5, textStyle2, textConfig);
    userProps && applyUserPropsAfter(itemStyle5, userProps);
    itemStyle5.legacy = true;
    return itemStyle5;
  }
  function applyUserPropsAfter(itemStyle5, extra) {
    for (const key in extra) {
      if (hasOwn(extra, key)) {
        itemStyle5[key] = extra[key];
      }
    }
  }
  function preFetchFromExtra(extra, itemStyle5) {
    if (extra) {
      extra.textFill && (itemStyle5.textFill = extra.textFill);
      extra.textPosition && (itemStyle5.textPosition = extra.textPosition);
    }
  }
  function visual(visualType, dataIndexInside) {
    dataIndexInside == null && (dataIndexInside = currDataIndexInside);
    if (hasOwn(STYLE_VISUAL_TYPE, visualType)) {
      const style3 = data.getItemVisual(dataIndexInside, "style");
      return style3 ? style3[STYLE_VISUAL_TYPE[visualType]] : null;
    }
    if (hasOwn(VISUAL_PROPS, visualType)) {
      return data.getItemVisual(dataIndexInside, visualType);
    }
  }
  function barLayout(opt) {
    if (coordSys.type === "cartesian2d") {
      const baseAxis = coordSys.getBaseAxis();
      return getLayoutOnAxis(defaults({
        axis: baseAxis
      }, opt));
    }
  }
  function currentSeriesIndices() {
    return ecModel.getCurrentSeriesIndices();
  }
  function font(opt) {
    return getFont(opt, ecModel);
  }
}
function wrapEncodeDef(data) {
  const encodeDef = {};
  each(data.dimensions, function(dimName, dataDimIndex) {
    const dimInfo = data.getDimensionInfo(dimName);
    if (!dimInfo.isExtraCoord) {
      const coordDim = dimInfo.coordDim;
      const dataDims = encodeDef[coordDim] = encodeDef[coordDim] || [];
      dataDims[dimInfo.coordDimIndex] = dataDimIndex;
    }
  });
  return encodeDef;
}
function createOrUpdateItem(el, dataIndex, elOption, seriesModel, group, data) {
  if (!elOption) {
    el && group.remove(el);
    return;
  }
  el = doCreateOrUpdateEl(el, dataIndex, elOption, seriesModel, group, true);
  el && data.setItemGraphicEl(dataIndex, el);
  enableHoverEmphasis(el, elOption.focus, elOption.blurScope);
  return el;
}
function doCreateOrUpdateEl(el, dataIndex, elOption, seriesModel, group, isRoot) {
  if (__DEV__) {
    assert(elOption, "should not have an null/undefined element setting");
  }
  let toBeReplacedIdx = -1;
  if (el && doesElNeedRecreate(el, elOption)) {
    toBeReplacedIdx = group.childrenRef().indexOf(el);
    el = null;
  }
  const isInit = !el;
  if (!el) {
    el = createEl(elOption);
  } else {
    el.clearStates();
  }
  attachedTxInfoTmp.normal.cfg = attachedTxInfoTmp.normal.conOpt = attachedTxInfoTmp.emphasis.cfg = attachedTxInfoTmp.emphasis.conOpt = attachedTxInfoTmp.blur.cfg = attachedTxInfoTmp.blur.conOpt = attachedTxInfoTmp.select.cfg = attachedTxInfoTmp.select.conOpt = null;
  attachedTxInfoTmp.isLegacy = false;
  doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfoTmp);
  doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit);
  updateElNormal(el, dataIndex, elOption, elOption.style, attachedTxInfoTmp, seriesModel, isInit, false);
  for (let i = 0; i < STATES.length; i++) {
    const stateName = STATES[i];
    if (stateName !== NORMAL) {
      const otherStateOpt = retrieveStateOption(elOption, stateName);
      const otherStyleOpt = retrieveStyleOptionOnState(elOption, otherStateOpt, stateName);
      updateElOnState(stateName, el, otherStateOpt, otherStyleOpt, attachedTxInfoTmp, isRoot, false);
    }
  }
  updateZ(el, elOption, seriesModel, attachedTxInfoTmp);
  if (elOption.type === "group") {
    mergeChildren(el, dataIndex, elOption, seriesModel);
  }
  if (toBeReplacedIdx >= 0) {
    group.replaceAt(el, toBeReplacedIdx);
  } else {
    group.add(el);
  }
  return el;
}
function doesElNeedRecreate(el, elOption) {
  const elInner = inner(el);
  const elOptionType = elOption.type;
  const elOptionShape = elOption.shape;
  const elOptionStyle = elOption.style;
  return elOptionType != null && elOptionType !== elInner.customGraphicType || elOptionType === "path" && hasOwnPathData(elOptionShape) && getPathData(elOptionShape) !== elInner.customPathData || elOptionType === "image" && hasOwn(elOptionStyle, "image") && elOptionStyle.image !== elInner.customImagePath;
}
function doCreateOrUpdateClipPath(el, dataIndex, elOption, seriesModel, isInit) {
  const clipPathOpt = elOption.clipPath;
  if (clipPathOpt === false) {
    if (el && el.getClipPath()) {
      el.removeClipPath();
    }
  } else if (clipPathOpt) {
    let clipPath = el.getClipPath();
    if (clipPath && doesElNeedRecreate(clipPath, clipPathOpt)) {
      clipPath = null;
    }
    if (!clipPath) {
      clipPath = createEl(clipPathOpt);
      if (__DEV__) {
        assert(clipPath instanceof Path_default, "Only any type of `path` can be used in `clipPath`, rather than " + clipPath.type + ".");
      }
      el.setClipPath(clipPath);
    }
    updateElNormal(clipPath, dataIndex, clipPathOpt, null, null, seriesModel, isInit, false);
  }
}
function doCreateOrUpdateAttachedTx(el, dataIndex, elOption, seriesModel, isInit, attachedTxInfo) {
  if (el.isGroup) {
    return;
  }
  processTxInfo(elOption, null, attachedTxInfo);
  processTxInfo(elOption, EMPHASIS, attachedTxInfo);
  let txConOptNormal = attachedTxInfo.normal.conOpt;
  const txConOptEmphasis = attachedTxInfo.emphasis.conOpt;
  const txConOptBlur = attachedTxInfo.blur.conOpt;
  const txConOptSelect = attachedTxInfo.select.conOpt;
  if (txConOptNormal != null || txConOptEmphasis != null || txConOptSelect != null || txConOptBlur != null) {
    let textContent = el.getTextContent();
    if (txConOptNormal === false) {
      textContent && el.removeTextContent();
    } else {
      txConOptNormal = attachedTxInfo.normal.conOpt = txConOptNormal || {
        type: "text"
      };
      if (!textContent) {
        textContent = createEl(txConOptNormal);
        el.setTextContent(textContent);
      } else {
        textContent.clearStates();
      }
      const txConStlOptNormal = txConOptNormal && txConOptNormal.style;
      updateElNormal(textContent, dataIndex, txConOptNormal, txConStlOptNormal, null, seriesModel, isInit, true);
      for (let i = 0; i < STATES.length; i++) {
        const stateName = STATES[i];
        if (stateName !== NORMAL) {
          const txConOptOtherState = attachedTxInfo[stateName].conOpt;
          updateElOnState(stateName, textContent, txConOptOtherState, retrieveStyleOptionOnState(txConOptNormal, txConOptOtherState, stateName), null, false, true);
        }
      }
      txConStlOptNormal ? textContent.dirty() : textContent.markRedraw();
    }
  }
}
function processTxInfo(elOption, state, attachedTxInfo) {
  const stateOpt = !state ? elOption : retrieveStateOption(elOption, state);
  const styleOpt = !state ? elOption.style : retrieveStyleOptionOnState(elOption, stateOpt, EMPHASIS);
  const elType = elOption.type;
  let txCfg = stateOpt ? stateOpt.textConfig : null;
  const txConOptNormal = elOption.textContent;
  let txConOpt = !txConOptNormal ? null : !state ? txConOptNormal : retrieveStateOption(txConOptNormal, state);
  if (styleOpt && (attachedTxInfo.isLegacy || isEC4CompatibleStyle(styleOpt, elType, !!txCfg, !!txConOpt))) {
    attachedTxInfo.isLegacy = true;
    const convertResult = convertFromEC4CompatibleStyle(styleOpt, elType, !state);
    if (!txCfg && convertResult.textConfig) {
      txCfg = convertResult.textConfig;
    }
    if (!txConOpt && convertResult.textContent) {
      txConOpt = convertResult.textContent;
    }
  }
  if (!state && txConOpt) {
    const txConOptNormal2 = txConOpt;
    !txConOptNormal2.type && (txConOptNormal2.type = "text");
    if (__DEV__) {
      txConOptNormal2.type !== "text" && assert(txConOptNormal2.type === "text", 'textContent.type must be "text"');
    }
  }
  const info = !state ? attachedTxInfo.normal : attachedTxInfo[state];
  info.cfg = txCfg;
  info.conOpt = txConOpt;
}
function retrieveStateOption(elOption, state) {
  return !state ? elOption : elOption ? elOption[state] : null;
}
function retrieveStyleOptionOnState(stateOptionNormal, stateOption, state) {
  let style2 = stateOption && stateOption.style;
  if (style2 == null && state === EMPHASIS && stateOptionNormal) {
    style2 = stateOptionNormal.styleEmphasis;
  }
  return style2;
}
function mergeChildren(el, dataIndex, elOption, seriesModel) {
  const newChildren = elOption.children;
  const newLen = newChildren ? newChildren.length : 0;
  const mergeChildren2 = elOption.$mergeChildren;
  const byName = mergeChildren2 === "byName" || elOption.diffChildrenByName;
  const notMerge = mergeChildren2 === false;
  if (!newLen && !byName && !notMerge) {
    return;
  }
  if (byName) {
    diffGroupChildren({
      oldChildren: el.children() || [],
      newChildren: newChildren || [],
      dataIndex,
      seriesModel,
      group: el
    });
    return;
  }
  notMerge && el.removeAll();
  let index = 0;
  for (; index < newLen; index++) {
    newChildren[index] && doCreateOrUpdateEl(el.childAt(index), dataIndex, newChildren[index], seriesModel, el, false);
  }
  for (let i = el.childCount() - 1; i >= index; i--) {
    doRemoveEl(el.childAt(i), seriesModel, el);
  }
}
function diffGroupChildren(context) {
  new DataDiffer_default(context.oldChildren, context.newChildren, getKey, getKey, context).add(processAddUpdate).update(processAddUpdate).remove(processRemove).execute();
}
function getKey(item, idx) {
  const name = item && item.name;
  return name != null ? name : GROUP_DIFF_PREFIX + idx;
}
function processAddUpdate(newIndex, oldIndex) {
  const context = this.context;
  const childOption = newIndex != null ? context.newChildren[newIndex] : null;
  const child = oldIndex != null ? context.oldChildren[oldIndex] : null;
  doCreateOrUpdateEl(child, context.dataIndex, childOption, context.seriesModel, context.group, false);
}
function processRemove(oldIndex) {
  const context = this.context;
  const child = context.oldChildren[oldIndex];
  doRemoveEl(child, context.seriesModel, context.group);
}
function doRemoveEl(el, seriesModel, group) {
  if (el) {
    const leaveToProps = inner(el).leaveToProps;
    leaveToProps ? updateProps(el, leaveToProps, seriesModel, {
      cb: function() {
        group.remove(el);
      }
    }) : group.remove(el);
  }
}
function getPathData(shape) {
  return shape && (shape.pathData || shape.d);
}
function hasOwnPathData(shape) {
  return shape && (hasOwn(shape, "pathData") || hasOwn(shape, "d"));
}

// src/component/grid.ts

// src/layout/barPolar.ts
function getSeriesStackId2(seriesModel) {
  return seriesModel.get("stack") || "__ec_stack_" + seriesModel.seriesIndex;
}
function getAxisKey2(polar2, axis2) {
  return axis2.dim + polar2.model.componentIndex;
}
function barLayoutPolar(seriesType2, ecModel, api) {
  const lastStackCoords = {};
  const barWidthAndOffset = calRadialBar(filter(ecModel.getSeriesByType(seriesType2), function(seriesModel) {
    return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === "polar";
  }));
  ecModel.eachSeriesByType(seriesType2, function(seriesModel) {
    if (seriesModel.coordinateSystem.type !== "polar") {
      return;
    }
    const data = seriesModel.getData();
    const polar2 = seriesModel.coordinateSystem;
    const baseAxis = polar2.getBaseAxis();
    const axisKey = getAxisKey2(polar2, baseAxis);
    const stackId = getSeriesStackId2(seriesModel);
    const columnLayoutInfo = barWidthAndOffset[axisKey][stackId];
    const columnOffset = columnLayoutInfo.offset;
    const columnWidth = columnLayoutInfo.width;
    const valueAxis2 = polar2.getOtherAxis(baseAxis);
    const cx = seriesModel.coordinateSystem.cx;
    const cy = seriesModel.coordinateSystem.cy;
    const barMinHeight = seriesModel.get("barMinHeight") || 0;
    const barMinAngle = seriesModel.get("barMinAngle") || 0;
    lastStackCoords[stackId] = lastStackCoords[stackId] || [];
    const valueDim = data.mapDimension(valueAxis2.dim);
    const baseDim = data.mapDimension(baseAxis.dim);
    const stacked = isDimensionStacked(data, valueDim);
    const clampLayout = baseAxis.dim !== "radius" || !seriesModel.get("roundCap", true);
    const valueAxisStart = valueAxis2.getExtent()[0];
    for (let idx = 0, len2 = data.count(); idx < len2; idx++) {
      const value = data.get(valueDim, idx);
      const baseValue = data.get(baseDim, idx);
      const sign = value >= 0 ? "p" : "n";
      let baseCoord = valueAxisStart;
      if (stacked) {
        if (!lastStackCoords[stackId][baseValue]) {
          lastStackCoords[stackId][baseValue] = {
            p: valueAxisStart,
            n: valueAxisStart
          };
        }
        baseCoord = lastStackCoords[stackId][baseValue][sign];
      }
      let r0;
      let r;
      let startAngle;
      let endAngle;
      if (valueAxis2.dim === "radius") {
        let radiusSpan = valueAxis2.dataToCoord(value) - valueAxisStart;
        const angle = baseAxis.dataToCoord(baseValue);
        if (Math.abs(radiusSpan) < barMinHeight) {
          radiusSpan = (radiusSpan < 0 ? -1 : 1) * barMinHeight;
        }
        r0 = baseCoord;
        r = baseCoord + radiusSpan;
        startAngle = angle - columnOffset;
        endAngle = startAngle - columnWidth;
        stacked && (lastStackCoords[stackId][baseValue][sign] = r);
      } else {
        let angleSpan = valueAxis2.dataToCoord(value, clampLayout) - valueAxisStart;
        const radius = baseAxis.dataToCoord(baseValue);
        if (Math.abs(angleSpan) < barMinAngle) {
          angleSpan = (angleSpan < 0 ? -1 : 1) * barMinAngle;
        }
        r0 = radius + columnOffset;
        r = r0 + columnWidth;
        startAngle = baseCoord;
        endAngle = baseCoord + angleSpan;
        stacked && (lastStackCoords[stackId][baseValue][sign] = endAngle);
      }
      data.setItemLayout(idx, {
        cx,
        cy,
        r0,
        r,
        startAngle: -startAngle * Math.PI / 180,
        endAngle: -endAngle * Math.PI / 180
      });
    }
  });
}
function calRadialBar(barSeries) {
  const columnsMap = {};
  each(barSeries, function(seriesModel, idx) {
    const data = seriesModel.getData();
    const polar2 = seriesModel.coordinateSystem;
    const baseAxis = polar2.getBaseAxis();
    const axisKey = getAxisKey2(polar2, baseAxis);
    const axisExtent = baseAxis.getExtent();
    const bandWidth = baseAxis.type === "category" ? baseAxis.getBandWidth() : Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
    const columnsOnAxis = columnsMap[axisKey] || {
      bandWidth,
      remainedWidth: bandWidth,
      autoWidthCount: 0,
      categoryGap: "20%",
      gap: "30%",
      stacks: {}
    };
    const stacks = columnsOnAxis.stacks;
    columnsMap[axisKey] = columnsOnAxis;
    const stackId = getSeriesStackId2(seriesModel);
    if (!stacks[stackId]) {
      columnsOnAxis.autoWidthCount++;
    }
    stacks[stackId] = stacks[stackId] || {
      width: 0,
      maxWidth: 0
    };
    let barWidth = parsePercent3(seriesModel.get("barWidth"), bandWidth);
    const barMaxWidth = parsePercent3(seriesModel.get("barMaxWidth"), bandWidth);
    const barGap = seriesModel.get("barGap");
    const barCategoryGap = seriesModel.get("barCategoryGap");
    if (barWidth && !stacks[stackId].width) {
      barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
      stacks[stackId].width = barWidth;
      columnsOnAxis.remainedWidth -= barWidth;
    }
    barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
    barGap != null && (columnsOnAxis.gap = barGap);
    barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
  });
  const result = {};
  each(columnsMap, function(columnsOnAxis, coordSysName) {
    result[coordSysName] = {};
    const stacks = columnsOnAxis.stacks;
    const bandWidth = columnsOnAxis.bandWidth;
    const categoryGap = parsePercent3(columnsOnAxis.categoryGap, bandWidth);
    const barGapPercent = parsePercent3(columnsOnAxis.gap, 1);
    let remainedWidth = columnsOnAxis.remainedWidth;
    let autoWidthCount = columnsOnAxis.autoWidthCount;
    let autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
    autoWidth = Math.max(autoWidth, 0);
    each(stacks, function(column, stack) {
      let maxWidth = column.maxWidth;
      if (maxWidth && maxWidth < autoWidth) {
        maxWidth = Math.min(maxWidth, remainedWidth);
        if (column.width) {
          maxWidth = Math.min(maxWidth, column.width);
        }
        remainedWidth -= maxWidth;
        column.width = maxWidth;
        autoWidthCount--;
      }
    });
    autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
    autoWidth = Math.max(autoWidth, 0);
    let widthSum = 0;
    let lastColumn;
    each(stacks, function(column, idx) {
      if (!column.width) {
        column.width = autoWidth;
      }
      lastColumn = column;
      widthSum += column.width * (1 + barGapPercent);
    });
    if (lastColumn) {
      widthSum -= lastColumn.width * barGapPercent;
    }
    let offset = -widthSum / 2;
    each(stacks, function(column, stackId) {
      result[coordSysName][stackId] = result[coordSysName][stackId] || {
        offset,
        width: column.width
      };
      offset += column.width * (1 + barGapPercent);
    });
  });
  return result;
}
const barPolar_default = barLayoutPolar;

// src/coord/polar/PolarModel.ts
class PolarModel4 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = PolarModel4.type;
  }
  findAxisModel(axisType) {
    let foundAxisModel;
    const ecModel = this.ecModel;
    ecModel.eachComponent(axisType, function(axisModel) {
      if (axisModel.getCoordSysModel() === this) {
        foundAxisModel = axisModel;
      }
    }, this);
    return foundAxisModel;
  }
}
PolarModel4.type = "polar";
PolarModel4.dependencies = ["radiusAxis", "angleAxis"];
PolarModel4.defaultOption = {
  zlevel: 0,
  z: 0,
  center: ["50%", "50%"],
  radius: "80%"
};
Component_default.registerClass(PolarModel4);

// src/coord/polar/AxisModel.ts
class PolarAxisModel2 extends Component_default {
  getCoordSysModel() {
    return this.getReferringComponents("polar", SINGLE_REFERRING).models[0];
  }
}
PolarAxisModel2.type = "polarAxis";
mixin(PolarAxisModel2, AxisModelCommonMixin);
class AngleAxisModel3 extends PolarAxisModel2 {
  constructor() {
    super(...arguments);
    this.type = AngleAxisModel3.type;
  }
}
AngleAxisModel3.type = "angleAxis";
class RadiusAxisModel2 extends PolarAxisModel2 {
  constructor() {
    super(...arguments);
    this.type = RadiusAxisModel2.type;
  }
}
RadiusAxisModel2.type = "radiusAxis";
const angleAxisExtraOption = {
  startAngle: 90,
  clockwise: true,
  splitNumber: 12,
  axisLabel: {
    rotate: false
  }
};
const radiusAxisExtraOption = {
  splitNumber: 5
};
axisModelCreator_default("angle", AngleAxisModel3, angleAxisExtraOption);
axisModelCreator_default("radius", RadiusAxisModel2, radiusAxisExtraOption);

// src/coord/polar/RadiusAxis.ts
class RadiusAxis10 extends Axis_default {
  constructor(scale4, radiusExtent) {
    super("radius", scale4, radiusExtent);
  }
  pointToData(point, clamp2) {
    return this.polar.pointToData(point, clamp2)[this.dim === "radius" ? 0 : 1];
  }
}
RadiusAxis10.prototype.dataToRadius = Axis_default.prototype.dataToCoord;
RadiusAxis10.prototype.radiusToData = Axis_default.prototype.coordToData;
const RadiusAxis_default = RadiusAxis10;

// src/coord/polar/AngleAxis.ts
const inner17 = makeInner();
class AngleAxis7 extends Axis_default {
  constructor(scale4, angleExtent) {
    super("angle", scale4, angleExtent || [0, 360]);
  }
  pointToData(point, clamp2) {
    return this.polar.pointToData(point, clamp2)[this.dim === "radius" ? 0 : 1];
  }
  calculateCategoryInterval() {
    const axis2 = this;
    const labelModel = axis2.getLabelModel();
    const ordinalScale = axis2.scale;
    const ordinalExtent = ordinalScale.getExtent();
    const tickCount = ordinalScale.count();
    if (ordinalExtent[1] - ordinalExtent[0] < 1) {
      return 0;
    }
    const tickValue = ordinalExtent[0];
    const unitSpan = axis2.dataToCoord(tickValue + 1) - axis2.dataToCoord(tickValue);
    const unitH = Math.abs(unitSpan);
    const rect = getBoundingRect(tickValue == null ? "" : tickValue + "", labelModel.getFont(), "center", "top");
    const maxH = Math.max(rect.height, 7);
    let dh = maxH / unitH;
    isNaN(dh) && (dh = Infinity);
    let interval = Math.max(0, Math.floor(dh));
    const cache = inner17(axis2.model);
    const lastAutoInterval = cache.lastAutoInterval;
    const lastTickCount = cache.lastTickCount;
    if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 && lastAutoInterval > interval) {
      interval = lastAutoInterval;
    } else {
      cache.lastTickCount = tickCount;
      cache.lastAutoInterval = interval;
    }
    return interval;
  }
}
AngleAxis7.prototype.dataToAngle = Axis_default.prototype.dataToCoord;
AngleAxis7.prototype.angleToData = Axis_default.prototype.coordToData;
const AngleAxis_default = AngleAxis7;

// src/coord/polar/Polar.ts
class Polar13 {
  constructor(name) {
    this.dimensions = ["radius", "angle"];
    this.type = "polar";
    this.cx = 0;
    this.cy = 0;
    this._radiusAxis = new RadiusAxis_default();
    this._angleAxis = new AngleAxis_default();
    this.axisPointerEnabled = true;
    this.name = name || "";
    this._radiusAxis.polar = this._angleAxis.polar = this;
  }
  containPoint(point) {
    const coord = this.pointToCoord(point);
    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);
  }
  containData(data) {
    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);
  }
  getAxis(dim) {
    const key = "_" + dim + "Axis";
    return this[key];
  }
  getAxes() {
    return [this._radiusAxis, this._angleAxis];
  }
  getAxesByScale(scaleType) {
    const axes = [];
    const angleAxis2 = this._angleAxis;
    const radiusAxis2 = this._radiusAxis;
    angleAxis2.scale.type === scaleType && axes.push(angleAxis2);
    radiusAxis2.scale.type === scaleType && axes.push(radiusAxis2);
    return axes;
  }
  getAngleAxis() {
    return this._angleAxis;
  }
  getRadiusAxis() {
    return this._radiusAxis;
  }
  getOtherAxis(axis2) {
    const angleAxis2 = this._angleAxis;
    return axis2 === angleAxis2 ? this._radiusAxis : angleAxis2;
  }
  getBaseAxis() {
    return this.getAxesByScale("ordinal")[0] || this.getAxesByScale("time")[0] || this.getAngleAxis();
  }
  getTooltipAxes(dim) {
    const baseAxis = dim != null && dim !== "auto" ? this.getAxis(dim) : this.getBaseAxis();
    return {
      baseAxes: [baseAxis],
      otherAxes: [this.getOtherAxis(baseAxis)]
    };
  }
  dataToPoint(data, clamp2) {
    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp2), this._angleAxis.dataToAngle(data[1], clamp2)]);
  }
  pointToData(point, clamp2) {
    const coord = this.pointToCoord(point);
    return [this._radiusAxis.radiusToData(coord[0], clamp2), this._angleAxis.angleToData(coord[1], clamp2)];
  }
  pointToCoord(point) {
    let dx = point[0] - this.cx;
    let dy = point[1] - this.cy;
    const angleAxis2 = this.getAngleAxis();
    const extent3 = angleAxis2.getExtent();
    let minAngle = Math.min(extent3[0], extent3[1]);
    let maxAngle = Math.max(extent3[0], extent3[1]);
    angleAxis2.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;
    const radius = Math.sqrt(dx * dx + dy * dy);
    dx /= radius;
    dy /= radius;
    let radian2 = Math.atan2(-dy, dx) / Math.PI * 180;
    const dir3 = radian2 < minAngle ? 1 : -1;
    while (radian2 < minAngle || radian2 > maxAngle) {
      radian2 += dir3 * 360;
    }
    return [radius, radian2];
  }
  coordToPoint(coord) {
    const radius = coord[0];
    const radian2 = coord[1] / 180 * Math.PI;
    const x = Math.cos(radian2) * radius + this.cx;
    const y = -Math.sin(radian2) * radius + this.cy;
    return [x, y];
  }
  getArea() {
    const angleAxis2 = this.getAngleAxis();
    const radiusAxis2 = this.getRadiusAxis();
    const radiusExtent = radiusAxis2.getExtent().slice();
    radiusExtent[0] > radiusExtent[1] && radiusExtent.reverse();
    const angleExtent = angleAxis2.getExtent();
    const RADIAN4 = Math.PI / 180;
    return {
      cx: this.cx,
      cy: this.cy,
      r0: radiusExtent[0],
      r: radiusExtent[1],
      startAngle: -angleExtent[0] * RADIAN4,
      endAngle: -angleExtent[1] * RADIAN4,
      clockwise: angleAxis2.inverse,
      contain(x, y) {
        const dx = x - this.cx;
        const dy = y - this.cy;
        const d2 = dx * dx + dy * dy;
        const r = this.r;
        const r0 = this.r0;
        return d2 <= r * r && d2 >= r0 * r0;
      }
    };
  }
  convertToPixel(ecModel, finder, value) {
    const coordSys = getCoordSys4(finder);
    return coordSys === this ? this.dataToPoint(value) : null;
  }
  convertFromPixel(ecModel, finder, pixel) {
    const coordSys = getCoordSys4(finder);
    return coordSys === this ? this.pointToData(pixel) : null;
  }
}
function getCoordSys4(finder) {
  const seriesModel = finder.seriesModel;
  const polarModel = finder.polarModel;
  return polarModel && polarModel.coordinateSystem || seriesModel && seriesModel.coordinateSystem;
}
const Polar_default = Polar13;

// src/coord/polar/polarCreator.ts
function resizePolar(polar2, polarModel, api) {
  const center3 = polarModel.get("center");
  const width = api.getWidth();
  const height = api.getHeight();
  polar2.cx = parsePercent3(center3[0], width);
  polar2.cy = parsePercent3(center3[1], height);
  const radiusAxis2 = polar2.getRadiusAxis();
  const size = Math.min(width, height) / 2;
  let radius = polarModel.get("radius");
  if (radius == null) {
    radius = [0, "100%"];
  } else if (!isArray(radius)) {
    radius = [0, radius];
  }
  const parsedRadius = [parsePercent3(radius[0], size), parsePercent3(radius[1], size)];
  radiusAxis2.inverse ? radiusAxis2.setExtent(parsedRadius[1], parsedRadius[0]) : radiusAxis2.setExtent(parsedRadius[0], parsedRadius[1]);
}
function updatePolarScale(ecModel, api) {
  const polar2 = this;
  const angleAxis2 = polar2.getAngleAxis();
  const radiusAxis2 = polar2.getRadiusAxis();
  angleAxis2.scale.setExtent(Infinity, -Infinity);
  radiusAxis2.scale.setExtent(Infinity, -Infinity);
  ecModel.eachSeries(function(seriesModel) {
    if (seriesModel.coordinateSystem === polar2) {
      const data = seriesModel.getData();
      each(getDataDimensionsOnAxis(data, "radius"), function(dim) {
        radiusAxis2.scale.unionExtentFromData(data, dim);
      });
      each(getDataDimensionsOnAxis(data, "angle"), function(dim) {
        angleAxis2.scale.unionExtentFromData(data, dim);
      });
    }
  });
  niceScaleExtent(angleAxis2.scale, angleAxis2.model);
  niceScaleExtent(radiusAxis2.scale, radiusAxis2.model);
  if (angleAxis2.type === "category" && !angleAxis2.onBand) {
    const extent3 = angleAxis2.getExtent();
    const diff2 = 360 / angleAxis2.scale.count();
    angleAxis2.inverse ? extent3[1] += diff2 : extent3[1] -= diff2;
    angleAxis2.setExtent(extent3[0], extent3[1]);
  }
}
function isAngleAxisModel(axisModel) {
  return axisModel.mainType === "angleAxis";
}
function setAxis(axis2, axisModel) {
  axis2.type = axisModel.get("type");
  axis2.scale = createScaleByModel2(axisModel);
  axis2.onBand = axisModel.get("boundaryGap") && axis2.type === "category";
  axis2.inverse = axisModel.get("inverse");
  if (isAngleAxisModel(axisModel)) {
    axis2.inverse = axis2.inverse !== axisModel.get("clockwise");
    const startAngle = axisModel.get("startAngle");
    axis2.setExtent(startAngle, startAngle + (axis2.inverse ? -360 : 360));
  }
  axisModel.axis = axis2;
  axis2.model = axisModel;
}
const polarCreator4 = {
  dimensions: Polar_default.prototype.dimensions,
  create: function(ecModel, api) {
    const polarList = [];
    ecModel.eachComponent("polar", function(polarModel, idx) {
      const polar2 = new Polar_default(idx + "");
      polar2.update = updatePolarScale;
      const radiusAxis2 = polar2.getRadiusAxis();
      const angleAxis2 = polar2.getAngleAxis();
      const radiusAxisModel = polarModel.findAxisModel("radiusAxis");
      const angleAxisModel = polarModel.findAxisModel("angleAxis");
      setAxis(radiusAxis2, radiusAxisModel);
      setAxis(angleAxis2, angleAxisModel);
      resizePolar(polar2, polarModel, api);
      polarList.push(polar2);
      polarModel.coordinateSystem = polar2;
      polar2.model = polarModel;
    });
    ecModel.eachSeries(function(seriesModel) {
      if (seriesModel.get("coordinateSystem") === "polar") {
        const polarModel = seriesModel.getReferringComponents("polar", SINGLE_REFERRING).models[0];
        if (__DEV__) {
          if (!polarModel) {
            throw new Error('Polar "' + retrieve(seriesModel.get("polarIndex"), seriesModel.get("polarId"), 0) + '" not found');
          }
        }
        seriesModel.coordinateSystem = polarModel.coordinateSystem;
      }
    });
    return polarList;
  }
};
CoordinateSystem_default.register("polar", polarCreator4);

// src/component/axis/AngleAxisView.ts
const elementList = ["axisLine", "axisLabel", "axisTick", "minorTick", "splitLine", "minorSplitLine", "splitArea"];
function getAxisLineShape(polar2, rExtent, angle) {
  rExtent[1] > rExtent[0] && (rExtent = rExtent.slice().reverse());
  const start2 = polar2.coordToPoint([rExtent[0], angle]);
  const end2 = polar2.coordToPoint([rExtent[1], angle]);
  return {
    x1: start2[0],
    y1: start2[1],
    x2: end2[0],
    y2: end2[1]
  };
}
function getRadiusIdx(polar2) {
  const radiusAxis2 = polar2.getRadiusAxis();
  return radiusAxis2.inverse ? 0 : 1;
}
function fixAngleOverlap(list) {
  const firstItem = list[0];
  const lastItem = list[list.length - 1];
  if (firstItem && lastItem && Math.abs(Math.abs(firstItem.coord - lastItem.coord) - 360) < 0.0001) {
    list.pop();
  }
}
class AngleAxisView2 extends AxisView_default {
  constructor() {
    super(...arguments);
    this.type = AngleAxisView2.type;
    this.axisPointerClass = "PolarAxisPointer";
  }
  render(angleAxisModel, ecModel) {
    this.group.removeAll();
    if (!angleAxisModel.get("show")) {
      return;
    }
    const angleAxis2 = angleAxisModel.axis;
    const polar2 = angleAxis2.polar;
    const radiusExtent = polar2.getRadiusAxis().getExtent();
    const ticksAngles = angleAxis2.getTicksCoords();
    const minorTickAngles = angleAxis2.getMinorTicksCoords();
    const labels = map2(angleAxis2.getViewLabels(), function(labelItem) {
      labelItem = clone2(labelItem);
      labelItem.coord = angleAxis2.dataToCoord(labelItem.tickValue);
      return labelItem;
    });
    fixAngleOverlap(labels);
    fixAngleOverlap(ticksAngles);
    each(elementList, function(name) {
      if (angleAxisModel.get([name, "show"]) && (!angleAxis2.scale.isBlank() || name === "axisLine")) {
        angelAxisElementsBuilders[name](this.group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent, labels);
      }
    }, this);
  }
}
AngleAxisView2.type = "angleAxis";
const angelAxisElementsBuilders = {
  axisLine(group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent) {
    const lineStyleModel = angleAxisModel.getModel(["axisLine", "lineStyle"]);
    const rId = getRadiusIdx(polar2);
    const r0Id = rId ? 0 : 1;
    let shape;
    if (radiusExtent[r0Id] === 0) {
      shape = new Circle_default({
        shape: {
          cx: polar2.cx,
          cy: polar2.cy,
          r: radiusExtent[rId]
        },
        style: lineStyleModel.getLineStyle(),
        z2: 1,
        silent: true
      });
    } else {
      shape = new Ring_default({
        shape: {
          cx: polar2.cx,
          cy: polar2.cy,
          r: radiusExtent[rId],
          r0: radiusExtent[r0Id]
        },
        style: lineStyleModel.getLineStyle(),
        z2: 1,
        silent: true
      });
    }
    shape.style.fill = null;
    group.add(shape);
  },
  axisTick(group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent) {
    const tickModel = angleAxisModel.getModel("axisTick");
    const tickLen = (tickModel.get("inside") ? -1 : 1) * tickModel.get("length");
    const radius = radiusExtent[getRadiusIdx(polar2)];
    const lines2 = map2(ticksAngles, function(tickAngleItem) {
      return new Line_default({
        shape: getAxisLineShape(polar2, [radius, radius + tickLen], tickAngleItem.coord)
      });
    });
    group.add(mergePath2(lines2, {
      style: defaults(tickModel.getModel("lineStyle").getLineStyle(), {
        stroke: angleAxisModel.get(["axisLine", "lineStyle", "color"])
      })
    }));
  },
  minorTick(group, angleAxisModel, polar2, tickAngles, minorTickAngles, radiusExtent) {
    if (!minorTickAngles.length) {
      return;
    }
    const tickModel = angleAxisModel.getModel("axisTick");
    const minorTickModel = angleAxisModel.getModel("minorTick");
    const tickLen = (tickModel.get("inside") ? -1 : 1) * minorTickModel.get("length");
    const radius = radiusExtent[getRadiusIdx(polar2)];
    const lines2 = [];
    for (let i = 0; i < minorTickAngles.length; i++) {
      for (let k = 0; k < minorTickAngles[i].length; k++) {
        lines2.push(new Line_default({
          shape: getAxisLineShape(polar2, [radius, radius + tickLen], minorTickAngles[i][k].coord)
        }));
      }
    }
    group.add(mergePath2(lines2, {
      style: defaults(minorTickModel.getModel("lineStyle").getLineStyle(), defaults(tickModel.getLineStyle(), {
        stroke: angleAxisModel.get(["axisLine", "lineStyle", "color"])
      }))
    }));
  },
  axisLabel(group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent, labels) {
    const rawCategoryData = angleAxisModel.getCategories(true);
    const commonLabelModel = angleAxisModel.getModel("axisLabel");
    const labelMargin = commonLabelModel.get("margin");
    const triggerEvent = angleAxisModel.get("triggerEvent");
    each(labels, function(labelItem, idx) {
      let labelModel = commonLabelModel;
      const tickValue = labelItem.tickValue;
      const r = radiusExtent[getRadiusIdx(polar2)];
      const p = polar2.coordToPoint([r + labelMargin, labelItem.coord]);
      const cx = polar2.cx;
      const cy = polar2.cy;
      const labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? "center" : p[0] > cx ? "left" : "right";
      const labelTextVerticalAlign = Math.abs(p[1] - cy) / r < 0.3 ? "middle" : p[1] > cy ? "top" : "bottom";
      if (rawCategoryData && rawCategoryData[tickValue]) {
        const rawCategoryItem = rawCategoryData[tickValue];
        if (isObject(rawCategoryItem) && rawCategoryItem.textStyle) {
          labelModel = new Model_default(rawCategoryItem.textStyle, commonLabelModel, commonLabelModel.ecModel);
        }
      }
      const textEl = new Text_default({
        silent: AxisBuilder_default.isLabelSilent(angleAxisModel),
        style: createTextStyle(labelModel, {
          x: p[0],
          y: p[1],
          fill: labelModel.getTextColor() || angleAxisModel.get(["axisLine", "lineStyle", "color"]),
          text: labelItem.formattedLabel,
          align: labelTextAlign,
          verticalAlign: labelTextVerticalAlign
        })
      });
      group.add(textEl);
      if (triggerEvent) {
        const eventData = AxisBuilder_default.makeAxisEventDataBase(angleAxisModel);
        eventData.targetType = "axisLabel";
        eventData.value = labelItem.rawLabel;
        getECData(textEl).eventData = eventData;
      }
    }, this);
  },
  splitLine(group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent) {
    const splitLineModel = angleAxisModel.getModel("splitLine");
    const lineStyleModel = splitLineModel.getModel("lineStyle");
    let lineColors = lineStyleModel.get("color");
    let lineCount = 0;
    lineColors = lineColors instanceof Array ? lineColors : [lineColors];
    const splitLines = [];
    for (let i = 0; i < ticksAngles.length; i++) {
      const colorIndex = lineCount++ % lineColors.length;
      splitLines[colorIndex] = splitLines[colorIndex] || [];
      splitLines[colorIndex].push(new Line_default({
        shape: getAxisLineShape(polar2, radiusExtent, ticksAngles[i].coord)
      }));
    }
    for (let i = 0; i < splitLines.length; i++) {
      group.add(mergePath2(splitLines[i], {
        style: defaults({
          stroke: lineColors[i % lineColors.length]
        }, lineStyleModel.getLineStyle()),
        silent: true,
        z: angleAxisModel.get("z")
      }));
    }
  },
  minorSplitLine(group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent) {
    if (!minorTickAngles.length) {
      return;
    }
    const minorSplitLineModel = angleAxisModel.getModel("minorSplitLine");
    const lineStyleModel = minorSplitLineModel.getModel("lineStyle");
    const lines2 = [];
    for (let i = 0; i < minorTickAngles.length; i++) {
      for (let k = 0; k < minorTickAngles[i].length; k++) {
        lines2.push(new Line_default({
          shape: getAxisLineShape(polar2, radiusExtent, minorTickAngles[i][k].coord)
        }));
      }
    }
    group.add(mergePath2(lines2, {
      style: lineStyleModel.getLineStyle(),
      silent: true,
      z: angleAxisModel.get("z")
    }));
  },
  splitArea(group, angleAxisModel, polar2, ticksAngles, minorTickAngles, radiusExtent) {
    if (!ticksAngles.length) {
      return;
    }
    const splitAreaModel = angleAxisModel.getModel("splitArea");
    const areaStyleModel = splitAreaModel.getModel("areaStyle");
    let areaColors = areaStyleModel.get("color");
    let lineCount = 0;
    areaColors = areaColors instanceof Array ? areaColors : [areaColors];
    const splitAreas = [];
    const RADIAN4 = Math.PI / 180;
    let prevAngle = -ticksAngles[0].coord * RADIAN4;
    const r0 = Math.min(radiusExtent[0], radiusExtent[1]);
    const r1 = Math.max(radiusExtent[0], radiusExtent[1]);
    const clockwise = angleAxisModel.get("clockwise");
    for (let i = 1, len2 = ticksAngles.length; i <= len2; i++) {
      const coord = i === len2 ? ticksAngles[0].coord : ticksAngles[i].coord;
      const colorIndex = lineCount++ % areaColors.length;
      splitAreas[colorIndex] = splitAreas[colorIndex] || [];
      splitAreas[colorIndex].push(new Sector_default({
        shape: {
          cx: polar2.cx,
          cy: polar2.cy,
          r0,
          r: r1,
          startAngle: prevAngle,
          endAngle: -coord * RADIAN4,
          clockwise
        },
        silent: true
      }));
      prevAngle = -coord * RADIAN4;
    }
    for (let i = 0; i < splitAreas.length; i++) {
      group.add(mergePath2(splitAreas[i], {
        style: defaults({
          fill: areaColors[i % areaColors.length]
        }, areaStyleModel.getAreaStyle()),
        silent: true
      }));
    }
  }
};
Component_default2.registerClass(AngleAxisView2);

// src/component/angleAxis.ts

// src/component/axis/RadiusAxisView.ts
const axisBuilderAttrs2 = ["axisLine", "axisTickLabel", "axisName"];
const selfBuilderAttrs2 = ["splitLine", "splitArea", "minorSplitLine"];
class RadiusAxisView extends AxisView_default {
  constructor() {
    super(...arguments);
    this.type = RadiusAxisView.type;
    this.axisPointerClass = "PolarAxisPointer";
  }
  render(radiusAxisModel, ecModel) {
    this.group.removeAll();
    if (!radiusAxisModel.get("show")) {
      return;
    }
    const oldAxisGroup = this._axisGroup;
    const newAxisGroup = this._axisGroup = new Group_default();
    this.group.add(newAxisGroup);
    const radiusAxis2 = radiusAxisModel.axis;
    const polar2 = radiusAxis2.polar;
    const angleAxis2 = polar2.getAngleAxis();
    const ticksCoords = radiusAxis2.getTicksCoords();
    const minorTicksCoords = radiusAxis2.getMinorTicksCoords();
    const axisAngle = angleAxis2.getExtent()[0];
    const radiusExtent = radiusAxis2.getExtent();
    const layout33 = layoutAxis(polar2, radiusAxisModel, axisAngle);
    const axisBuilder = new AxisBuilder_default(radiusAxisModel, layout33);
    each(axisBuilderAttrs2, axisBuilder.add, axisBuilder);
    newAxisGroup.add(axisBuilder.getGroup());
    groupTransition(oldAxisGroup, newAxisGroup, radiusAxisModel);
    each(selfBuilderAttrs2, function(name) {
      if (radiusAxisModel.get([name, "show"]) && !radiusAxis2.scale.isBlank()) {
        axisElementBuilders2[name](this.group, radiusAxisModel, polar2, axisAngle, radiusExtent, ticksCoords, minorTicksCoords);
      }
    }, this);
  }
}
RadiusAxisView.type = "radiusAxis";
const axisElementBuilders2 = {
  splitLine(group, radiusAxisModel, polar2, axisAngle, radiusExtent, ticksCoords) {
    const splitLineModel = radiusAxisModel.getModel("splitLine");
    const lineStyleModel = splitLineModel.getModel("lineStyle");
    let lineColors = lineStyleModel.get("color");
    let lineCount = 0;
    lineColors = lineColors instanceof Array ? lineColors : [lineColors];
    const splitLines = [];
    for (let i = 0; i < ticksCoords.length; i++) {
      const colorIndex = lineCount++ % lineColors.length;
      splitLines[colorIndex] = splitLines[colorIndex] || [];
      splitLines[colorIndex].push(new Circle_default({
        shape: {
          cx: polar2.cx,
          cy: polar2.cy,
          r: ticksCoords[i].coord
        }
      }));
    }
    for (let i = 0; i < splitLines.length; i++) {
      group.add(mergePath2(splitLines[i], {
        style: defaults({
          stroke: lineColors[i % lineColors.length],
          fill: null
        }, lineStyleModel.getLineStyle()),
        silent: true
      }));
    }
  },
  minorSplitLine(group, radiusAxisModel, polar2, axisAngle, radiusExtent, ticksCoords, minorTicksCoords) {
    if (!minorTicksCoords.length) {
      return;
    }
    const minorSplitLineModel = radiusAxisModel.getModel("minorSplitLine");
    const lineStyleModel = minorSplitLineModel.getModel("lineStyle");
    const lines2 = [];
    for (let i = 0; i < minorTicksCoords.length; i++) {
      for (let k = 0; k < minorTicksCoords[i].length; k++) {
        lines2.push(new Circle_default({
          shape: {
            cx: polar2.cx,
            cy: polar2.cy,
            r: minorTicksCoords[i][k].coord
          }
        }));
      }
    }
    group.add(mergePath2(lines2, {
      style: defaults({
        fill: null
      }, lineStyleModel.getLineStyle()),
      silent: true
    }));
  },
  splitArea(group, radiusAxisModel, polar2, axisAngle, radiusExtent, ticksCoords) {
    if (!ticksCoords.length) {
      return;
    }
    const splitAreaModel = radiusAxisModel.getModel("splitArea");
    const areaStyleModel = splitAreaModel.getModel("areaStyle");
    let areaColors = areaStyleModel.get("color");
    let lineCount = 0;
    areaColors = areaColors instanceof Array ? areaColors : [areaColors];
    const splitAreas = [];
    let prevRadius = ticksCoords[0].coord;
    for (let i = 1; i < ticksCoords.length; i++) {
      const colorIndex = lineCount++ % areaColors.length;
      splitAreas[colorIndex] = splitAreas[colorIndex] || [];
      splitAreas[colorIndex].push(new Sector_default({
        shape: {
          cx: polar2.cx,
          cy: polar2.cy,
          r0: prevRadius,
          r: ticksCoords[i].coord,
          startAngle: 0,
          endAngle: Math.PI * 2
        },
        silent: true
      }));
      prevRadius = ticksCoords[i].coord;
    }
    for (let i = 0; i < splitAreas.length; i++) {
      group.add(mergePath2(splitAreas[i], {
        style: defaults({
          fill: areaColors[i % areaColors.length]
        }, areaStyleModel.getAreaStyle()),
        silent: true
      }));
    }
  }
};
function layoutAxis(polar2, radiusAxisModel, axisAngle) {
  return {
    position: [polar2.cx, polar2.cy],
    rotation: axisAngle / 180 * Math.PI,
    labelDirection: -1,
    tickDirection: -1,
    nameDirection: 1,
    labelRotate: radiusAxisModel.getModel("axisLabel").get("rotate"),
    z2: 1
  };
}
AxisView_default.registerClass(RadiusAxisView);

// src/component/radiusAxis.ts

// src/component/axisPointer/PolarAxisPointer.ts
class PolarAxisPointer extends BaseAxisPointer_default {
  makeElOption(elOption, value, axisModel, axisPointerModel, api) {
    const axis2 = axisModel.axis;
    if (axis2.dim === "angle") {
      this.animationThreshold = Math.PI / 18;
    }
    const polar2 = axis2.polar;
    const otherAxis = polar2.getOtherAxis(axis2);
    const otherExtent = otherAxis.getExtent();
    const coordValue = axis2.dataToCoord(value);
    const axisPointerType = axisPointerModel.get("type");
    if (axisPointerType && axisPointerType !== "none") {
      const elStyle = buildElStyle(axisPointerModel);
      const pointerOption = pointerShapeBuilder2[axisPointerType](axis2, polar2, coordValue, otherExtent);
      pointerOption.style = elStyle;
      elOption.graphicKey = pointerOption.type;
      elOption.pointer = pointerOption;
    }
    const labelMargin = axisPointerModel.get(["label", "margin"]);
    const labelPos = getLabelPosition(value, axisModel, axisPointerModel, polar2, labelMargin);
    buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos);
  }
}
function getLabelPosition(value, axisModel, axisPointerModel, polar2, labelMargin) {
  const axis2 = axisModel.axis;
  const coord = axis2.dataToCoord(value);
  let axisAngle = polar2.getAngleAxis().getExtent()[0];
  axisAngle = axisAngle / 180 * Math.PI;
  const radiusExtent = polar2.getRadiusAxis().getExtent();
  let position2;
  let align;
  let verticalAlign;
  if (axis2.dim === "radius") {
    const transform = create();
    rotate(transform, transform, axisAngle);
    translate(transform, transform, [polar2.cx, polar2.cy]);
    position2 = applyTransform2([coord, -labelMargin], transform);
    const labelRotation = axisModel.getModel("axisLabel").get("rotate") || 0;
    const labelLayout3 = AxisBuilder_default.innerTextLayout(axisAngle, labelRotation * Math.PI / 180, -1);
    align = labelLayout3.textAlign;
    verticalAlign = labelLayout3.textVerticalAlign;
  } else {
    const r = radiusExtent[1];
    position2 = polar2.coordToPoint([r + labelMargin, coord]);
    const cx = polar2.cx;
    const cy = polar2.cy;
    align = Math.abs(position2[0] - cx) / r < 0.3 ? "center" : position2[0] > cx ? "left" : "right";
    verticalAlign = Math.abs(position2[1] - cy) / r < 0.3 ? "middle" : position2[1] > cy ? "top" : "bottom";
  }
  return {
    position: position2,
    align,
    verticalAlign
  };
}
const pointerShapeBuilder2 = {
  line: function(axis2, polar2, coordValue, otherExtent) {
    return axis2.dim === "angle" ? {
      type: "Line",
      shape: makeLineShape(polar2.coordToPoint([otherExtent[0], coordValue]), polar2.coordToPoint([otherExtent[1], coordValue]))
    } : {
      type: "Circle",
      shape: {
        cx: polar2.cx,
        cy: polar2.cy,
        r: coordValue
      }
    };
  },
  shadow: function(axis2, polar2, coordValue, otherExtent) {
    const bandWidth = Math.max(1, axis2.getBandWidth());
    const radian2 = Math.PI / 180;
    return axis2.dim === "angle" ? {
      type: "Sector",
      shape: makeSectorShape(polar2.cx, polar2.cy, otherExtent[0], otherExtent[1], (-coordValue - bandWidth / 2) * radian2, (-coordValue + bandWidth / 2) * radian2)
    } : {
      type: "Sector",
      shape: makeSectorShape(polar2.cx, polar2.cy, coordValue - bandWidth / 2, coordValue + bandWidth / 2, 0, Math.PI * 2)
    };
  }
};
AxisView_default.registerAxisPointerClass("PolarAxisPointer", PolarAxisPointer);

// src/component/polar.ts
registerLayout(curry(barPolar_default, "bar"));
extendComponentView({
  type: "polar"
});

// src/component/geo/GeoView.ts
class GeoView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = GeoView2.type;
  }
  init(ecModel, api) {
    const mapDraw = new MapDraw_default(api);
    this._mapDraw = mapDraw;
    this.group.add(mapDraw.group);
    this._api = api;
  }
  render(geoModel, ecModel, api, payload) {
    const mapDraw = this._mapDraw;
    if (geoModel.get("show")) {
      mapDraw.draw(geoModel, ecModel, api, this, payload);
    } else {
      this._mapDraw.group.removeAll();
    }
    mapDraw.group.on("click", this._handleRegionClick, this);
    mapDraw.group.silent = geoModel.get("silent");
    this._model = geoModel;
    this.updateSelectStatus();
  }
  _handleRegionClick(e) {
    let current = e.target;
    let eventData;
    while ((eventData = getECData(current).eventData) == null) {
      current = current.__hostTarget || current.parent;
    }
    if (eventData) {
      this._api.dispatchAction({
        type: "geoToggleSelect",
        geoId: this._model.id,
        statusChanged: true,
        name: eventData.name
      });
    }
  }
  updateSelectStatus() {
    this._mapDraw.group.traverse((node) => {
      const eventData = getECData(node).eventData;
      if (eventData) {
        this._model.isSelected(eventData.name) ? enterSelect(node) : leaveSelect(node);
        return true;
      }
    });
  }
  dispose() {
    this._mapDraw && this._mapDraw.remove();
  }
}
GeoView2.type = "geo";
Component_default2.registerClass(GeoView2);

// src/coord/geo/GeoModel.ts
class GeoModel14 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = GeoModel14.type;
  }
  init(option, parentModel, ecModel) {
    super.init(option, parentModel, ecModel);
    defaultEmphasis(option, "label", ["show"]);
  }
  optionUpdated() {
    const option = this.option;
    const self2 = this;
    option.regions = geoCreator_default.getFilledRegions(option.regions, option.map, option.nameMap);
    const selectedMap = {};
    this._optionModelMap = reduce(option.regions || [], function(optionModelMap, regionOpt) {
      const regionName = regionOpt.name;
      if (regionName) {
        optionModelMap.set(regionName, new Model_default(regionOpt, self2));
        if (regionOpt.selected) {
          selectedMap[regionName] = true;
        }
      }
      return optionModelMap;
    }, createHashMap());
    if (!option.selectedMap) {
      option.selectedMap = selectedMap;
    }
  }
  getRegionModel(name) {
    return this._optionModelMap.get(name) || new Model_default(null, this, this.ecModel);
  }
  getFormattedLabel(name, status) {
    const regionModel = this.getRegionModel(name);
    const formatter = status === "normal" ? regionModel.get(["label", "formatter"]) : regionModel.get(["emphasis", "label", "formatter"]);
    const params = {
      name
    };
    if (typeof formatter === "function") {
      params.status = status;
      return formatter(params);
    } else if (typeof formatter === "string") {
      return formatter.replace("{a}", name != null ? name : "");
    }
  }
  setZoom(zoom) {
    this.option.zoom = zoom;
  }
  setCenter(center3) {
    this.option.center = center3;
  }
  select(name) {
    const option = this.option;
    const selectedMode = option.selectedMode;
    if (!selectedMode) {
      return;
    }
    if (selectedMode !== "multiple") {
      option.selectedMap = null;
    }
    const selectedMap = option.selectedMap || (option.selectedMap = {});
    selectedMap[name] = true;
  }
  unSelect(name) {
    const selectedMap = this.option.selectedMap;
    if (selectedMap) {
      selectedMap[name] = false;
    }
  }
  toggleSelected(name) {
    this[this.isSelected(name) ? "unSelect" : "select"](name);
  }
  isSelected(name) {
    const selectedMap = this.option.selectedMap;
    return !!(selectedMap && selectedMap[name]);
  }
  _initSelectedMapFromData() {
  }
}
GeoModel14.type = "geo";
GeoModel14.layoutMode = "box";
GeoModel14.defaultOption = {
  zlevel: 0,
  z: 0,
  show: true,
  left: "center",
  top: "center",
  aspectScale: null,
  silent: false,
  map: "",
  boundingCoords: null,
  center: null,
  zoom: 1,
  scaleLimit: null,
  label: {
    show: false,
    color: "#000"
  },
  itemStyle: {
    borderWidth: 0.5,
    borderColor: "#444",
    color: "#eee"
  },
  emphasis: {
    label: {
      show: true,
      color: "rgb(100,0,0)"
    },
    itemStyle: {
      color: "rgba(255,215,0,0.8)"
    }
  },
  select: {
    label: {
      show: true,
      color: "rgb(100,0,0)"
    },
    itemStyle: {
      color: "rgba(255,215,0,0.8)"
    }
  },
  regions: []
};
Component_default.registerClass(GeoModel14);

// src/component/geo.ts
function makeAction(method, actionInfo4) {
  actionInfo4.update = "geo:updateSelectStatus";
  registerAction(actionInfo4, function(payload, ecModel) {
    const selected = {};
    ecModel.eachComponent({
      mainType: "geo",
      query: payload
    }, function(geoModel) {
      geoModel[method](payload.name);
      const geo2 = geoModel.coordinateSystem;
      each(geo2.regions, function(region) {
        selected[region.name] = geoModel.isSelected(region.name) || false;
      });
    });
    return {
      selected,
      name: payload.name
    };
  });
}
makeAction("toggleSelected", {
  type: "geoToggleSelect",
  event: "geoselectchanged"
});
makeAction("select", {
  type: "geoSelect",
  event: "geoselected"
});
makeAction("unSelect", {
  type: "geoUnSelect",
  event: "geounselected"
});

// src/coord/calendar/Calendar.ts
const PROXIMATE_ONE_DAY = 86400000;
class Calendar3 {
  constructor(calendarModel, ecModel, api) {
    this.type = "calendar";
    this.dimensions = Calendar3.dimensions;
    this.getDimensionsInfo = Calendar3.getDimensionsInfo;
    this._model = calendarModel;
  }
  static getDimensionsInfo() {
    return [{
      name: "time",
      type: "time"
    }, "value"];
  }
  getRangeInfo() {
    return this._rangeInfo;
  }
  getModel() {
    return this._model;
  }
  getRect() {
    return this._rect;
  }
  getCellWidth() {
    return this._sw;
  }
  getCellHeight() {
    return this._sh;
  }
  getOrient() {
    return this._orient;
  }
  getFirstDayOfWeek() {
    return this._firstDayOfWeek;
  }
  getDateInfo(date) {
    date = parseDate(date);
    const y = date.getFullYear();
    const m2 = date.getMonth() + 1;
    const mStr = m2 < 10 ? "0" + m2 : "" + m2;
    const d = date.getDate();
    const dStr = d < 10 ? "0" + d : "" + d;
    let day = date.getDay();
    day = Math.abs((day + 7 - this.getFirstDayOfWeek()) % 7);
    return {
      y: y + "",
      m: mStr,
      d: dStr,
      day,
      time: date.getTime(),
      formatedDate: y + "-" + mStr + "-" + dStr,
      date
    };
  }
  getNextNDay(date, n) {
    n = n || 0;
    if (n === 0) {
      return this.getDateInfo(date);
    }
    date = new Date(this.getDateInfo(date).time);
    date.setDate(date.getDate() + n);
    return this.getDateInfo(date);
  }
  update(ecModel, api) {
    this._firstDayOfWeek = +this._model.getModel("dayLabel").get("firstDay");
    this._orient = this._model.get("orient");
    this._lineWidth = this._model.getModel("itemStyle").getItemStyle().lineWidth || 0;
    this._rangeInfo = this._getRangeInfo(this._initRangeOption());
    const weeks = this._rangeInfo.weeks || 1;
    const whNames = ["width", "height"];
    const cellSize = this._model.getCellSize().slice();
    const layoutParams = this._model.getBoxLayoutParams();
    const cellNumbers = this._orient === "horizontal" ? [weeks, 7] : [7, weeks];
    each([0, 1], function(idx) {
      if (cellSizeSpecified(cellSize, idx)) {
        layoutParams[whNames[idx]] = cellSize[idx] * cellNumbers[idx];
      }
    });
    const whGlobal = {
      width: api.getWidth(),
      height: api.getHeight()
    };
    const calendarRect = this._rect = getLayoutRect(layoutParams, whGlobal);
    each([0, 1], function(idx) {
      if (!cellSizeSpecified(cellSize, idx)) {
        cellSize[idx] = calendarRect[whNames[idx]] / cellNumbers[idx];
      }
    });
    function cellSizeSpecified(cellSize2, idx) {
      return cellSize2[idx] != null && cellSize2[idx] !== "auto";
    }
    this._sw = cellSize[0];
    this._sh = cellSize[1];
  }
  dataToPoint(data, clamp2) {
    isArray(data) && (data = data[0]);
    clamp2 == null && (clamp2 = true);
    const dayInfo = this.getDateInfo(data);
    const range = this._rangeInfo;
    const date = dayInfo.formatedDate;
    if (clamp2 && !(dayInfo.time >= range.start.time && dayInfo.time < range.end.time + PROXIMATE_ONE_DAY)) {
      return [NaN, NaN];
    }
    const week = dayInfo.day;
    const nthWeek = this._getRangeInfo([range.start.time, date]).nthWeek;
    if (this._orient === "vertical") {
      return [this._rect.x + week * this._sw + this._sw / 2, this._rect.y + nthWeek * this._sh + this._sh / 2];
    }
    return [this._rect.x + nthWeek * this._sw + this._sw / 2, this._rect.y + week * this._sh + this._sh / 2];
  }
  pointToData(point) {
    const date = this.pointToDate(point);
    return date && date.time;
  }
  dataToRect(data, clamp2) {
    const point = this.dataToPoint(data, clamp2);
    return {
      contentShape: {
        x: point[0] - (this._sw - this._lineWidth) / 2,
        y: point[1] - (this._sh - this._lineWidth) / 2,
        width: this._sw - this._lineWidth,
        height: this._sh - this._lineWidth
      },
      center: point,
      tl: [point[0] - this._sw / 2, point[1] - this._sh / 2],
      tr: [point[0] + this._sw / 2, point[1] - this._sh / 2],
      br: [point[0] + this._sw / 2, point[1] + this._sh / 2],
      bl: [point[0] - this._sw / 2, point[1] + this._sh / 2]
    };
  }
  pointToDate(point) {
    const nthX = Math.floor((point[0] - this._rect.x) / this._sw) + 1;
    const nthY = Math.floor((point[1] - this._rect.y) / this._sh) + 1;
    const range = this._rangeInfo.range;
    if (this._orient === "vertical") {
      return this._getDateByWeeksAndDay(nthY, nthX - 1, range);
    }
    return this._getDateByWeeksAndDay(nthX, nthY - 1, range);
  }
  convertToPixel(ecModel, finder, value) {
    const coordSys = getCoordSys2(finder);
    return coordSys === this ? coordSys.dataToPoint(value) : null;
  }
  convertFromPixel(ecModel, finder, pixel) {
    const coordSys = getCoordSys2(finder);
    return coordSys === this ? coordSys.pointToData(pixel) : null;
  }
  containPoint(point) {
    console.warn("Not implemented.");
    return false;
  }
  _initRangeOption() {
    let range = this._model.get("range");
    let normalizedRange;
    if (isArray(range) && range.length === 1) {
      range = range[0];
    }
    if (!isArray(range)) {
      const rangeStr = range.toString();
      if (/^\d{4}$/.test(rangeStr)) {
        normalizedRange = [rangeStr + "-01-01", rangeStr + "-12-31"];
      }
      if (/^\d{4}[\/|-]\d{1,2}$/.test(rangeStr)) {
        const start2 = this.getDateInfo(rangeStr);
        const firstDay = start2.date;
        firstDay.setMonth(firstDay.getMonth() + 1);
        const end2 = this.getNextNDay(firstDay, -1);
        normalizedRange = [start2.formatedDate, end2.formatedDate];
      }
      if (/^\d{4}[\/|-]\d{1,2}[\/|-]\d{1,2}$/.test(rangeStr)) {
        normalizedRange = [rangeStr, rangeStr];
      }
    } else {
      normalizedRange = range;
    }
    if (!normalizedRange) {
      if (__DEV__) {
        logError("Invalid date range.");
      }
      return range;
    }
    const tmp = this._getRangeInfo(normalizedRange);
    if (tmp.start.time > tmp.end.time) {
      normalizedRange.reverse();
    }
    return normalizedRange;
  }
  _getRangeInfo(range) {
    const parsedRange = [this.getDateInfo(range[0]), this.getDateInfo(range[1])];
    let reversed;
    if (parsedRange[0].time > parsedRange[1].time) {
      reversed = true;
      parsedRange.reverse();
    }
    let allDay = Math.floor(parsedRange[1].time / PROXIMATE_ONE_DAY) - Math.floor(parsedRange[0].time / PROXIMATE_ONE_DAY) + 1;
    const date = new Date(parsedRange[0].time);
    const startDateNum = date.getDate();
    const endDateNum = parsedRange[1].date.getDate();
    date.setDate(startDateNum + allDay - 1);
    let dateNum = date.getDate();
    if (dateNum !== endDateNum) {
      const sign = date.getTime() - parsedRange[1].time > 0 ? 1 : -1;
      while ((dateNum = date.getDate()) !== endDateNum && (date.getTime() - parsedRange[1].time) * sign > 0) {
        allDay -= sign;
        date.setDate(dateNum - sign);
      }
    }
    const weeks = Math.floor((allDay + parsedRange[0].day + 6) / 7);
    const nthWeek = reversed ? -weeks + 1 : weeks - 1;
    reversed && parsedRange.reverse();
    return {
      range: [parsedRange[0].formatedDate, parsedRange[1].formatedDate],
      start: parsedRange[0],
      end: parsedRange[1],
      allDay,
      weeks,
      nthWeek,
      fweek: parsedRange[0].day,
      lweek: parsedRange[1].day
    };
  }
  _getDateByWeeksAndDay(nthWeek, day, range) {
    const rangeInfo = this._getRangeInfo(range);
    if (nthWeek > rangeInfo.weeks || nthWeek === 0 && day < rangeInfo.fweek || nthWeek === rangeInfo.weeks && day > rangeInfo.lweek) {
      return null;
    }
    const nthDay = (nthWeek - 1) * 7 - rangeInfo.fweek + day;
    const date = new Date(rangeInfo.start.time);
    date.setDate(+rangeInfo.start.d + nthDay);
    return this.getDateInfo(date);
  }
  static create(ecModel, api) {
    const calendarList = [];
    ecModel.eachComponent("calendar", function(calendarModel) {
      const calendar2 = new Calendar3(calendarModel, ecModel, api);
      calendarList.push(calendar2);
      calendarModel.coordinateSystem = calendar2;
    });
    ecModel.eachSeries(function(calendarSeries) {
      if (calendarSeries.get("coordinateSystem") === "calendar") {
        calendarSeries.coordinateSystem = calendarList[calendarSeries.get("calendarIndex") || 0];
      }
    });
    return calendarList;
  }
}
Calendar3.dimensions = ["time", "value"];
function getCoordSys2(finder) {
  const calendarModel = finder.calendarModel;
  const seriesModel = finder.seriesModel;
  const coordSys = calendarModel ? calendarModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem : null;
  return coordSys;
}
CoordinateSystem_default.register("calendar", Calendar3);

// src/coord/calendar/CalendarModel.ts
class CalendarModel6 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = CalendarModel6.type;
  }
  init(option, parentModel, ecModel) {
    const inputPositionParams = getLayoutParams(option);
    super.init.apply(this, arguments);
    mergeAndNormalizeLayoutParams2(option, inputPositionParams);
  }
  mergeOption(option) {
    super.mergeOption.apply(this, arguments);
    mergeAndNormalizeLayoutParams2(this.option, option);
  }
  getCellSize() {
    return this.option.cellSize;
  }
}
CalendarModel6.type = "calendar";
CalendarModel6.defaultOption = {
  zlevel: 0,
  z: 2,
  left: 80,
  top: 60,
  cellSize: 20,
  orient: "horizontal",
  splitLine: {
    show: true,
    lineStyle: {
      color: "#000",
      width: 1,
      type: "solid"
    }
  },
  itemStyle: {
    color: "#fff",
    borderWidth: 1,
    borderColor: "#ccc"
  },
  dayLabel: {
    show: true,
    firstDay: 0,
    position: "start",
    margin: "50%",
    nameMap: "en",
    color: "#000"
  },
  monthLabel: {
    show: true,
    position: "start",
    margin: 5,
    align: "center",
    nameMap: "en",
    formatter: null,
    color: "#000"
  },
  yearLabel: {
    show: true,
    position: null,
    margin: 30,
    formatter: null,
    color: "#ccc",
    fontFamily: "sans-serif",
    fontWeight: "bolder",
    fontSize: 20
  }
};
function mergeAndNormalizeLayoutParams2(target, raw) {
  const cellSize = target.cellSize;
  let cellSizeArr;
  if (!isArray(cellSize)) {
    cellSizeArr = target.cellSize = [cellSize, cellSize];
  } else {
    cellSizeArr = cellSize;
  }
  if (cellSizeArr.length === 1) {
    cellSizeArr[1] = cellSizeArr[0];
  }
  const ignoreSize = map2([0, 1], function(hvIdx) {
    if (sizeCalculable(raw, hvIdx)) {
      cellSizeArr[hvIdx] = "auto";
    }
    return cellSizeArr[hvIdx] != null && cellSizeArr[hvIdx] !== "auto";
  });
  mergeLayoutParam(target, raw, {
    type: "box",
    ignoreSize
  });
}
Component_default.registerClass(CalendarModel6);

// src/component/calendar/CalendarView.ts
const MONTH_TEXT = {
  EN: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  CN: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
};
const WEEK_TEXT = {
  EN: ["S", "M", "T", "W", "T", "F", "S"],
  CN: ["日", "一", "二", "三", "四", "五", "六"]
};
class CalendarView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = CalendarView2.type;
  }
  render(calendarModel, ecModel, api) {
    const group = this.group;
    group.removeAll();
    const coordSys = calendarModel.coordinateSystem;
    const rangeData = coordSys.getRangeInfo();
    const orient = coordSys.getOrient();
    this._renderDayRect(calendarModel, rangeData, group);
    this._renderLines(calendarModel, rangeData, orient, group);
    this._renderYearText(calendarModel, rangeData, orient, group);
    this._renderMonthText(calendarModel, orient, group);
    this._renderWeekText(calendarModel, rangeData, orient, group);
  }
  _renderDayRect(calendarModel, rangeData, group) {
    const coordSys = calendarModel.coordinateSystem;
    const itemRectStyleModel = calendarModel.getModel("itemStyle").getItemStyle();
    const sw = coordSys.getCellWidth();
    const sh = coordSys.getCellHeight();
    for (let i = rangeData.start.time; i <= rangeData.end.time; i = coordSys.getNextNDay(i, 1).time) {
      const point = coordSys.dataToRect([i], false).tl;
      const rect = new Rect_default({
        shape: {
          x: point[0],
          y: point[1],
          width: sw,
          height: sh
        },
        cursor: "default",
        style: itemRectStyleModel
      });
      group.add(rect);
    }
  }
  _renderLines(calendarModel, rangeData, orient, group) {
    const self2 = this;
    const coordSys = calendarModel.coordinateSystem;
    const lineStyleModel = calendarModel.getModel(["splitLine", "lineStyle"]).getLineStyle();
    const show = calendarModel.get(["splitLine", "show"]);
    const lineWidth = lineStyleModel.lineWidth;
    this._tlpoints = [];
    this._blpoints = [];
    this._firstDayOfMonth = [];
    this._firstDayPoints = [];
    let firstDay = rangeData.start;
    for (let i = 0; firstDay.time <= rangeData.end.time; i++) {
      addPoints(firstDay.formatedDate);
      if (i === 0) {
        firstDay = coordSys.getDateInfo(rangeData.start.y + "-" + rangeData.start.m);
      }
      const date = firstDay.date;
      date.setMonth(date.getMonth() + 1);
      firstDay = coordSys.getDateInfo(date);
    }
    addPoints(coordSys.getNextNDay(rangeData.end.time, 1).formatedDate);
    function addPoints(date) {
      self2._firstDayOfMonth.push(coordSys.getDateInfo(date));
      self2._firstDayPoints.push(coordSys.dataToRect([date], false).tl);
      const points9 = self2._getLinePointsOfOneWeek(calendarModel, date, orient);
      self2._tlpoints.push(points9[0]);
      self2._blpoints.push(points9[points9.length - 1]);
      show && self2._drawSplitline(points9, lineStyleModel, group);
    }
    show && this._drawSplitline(self2._getEdgesPoints(self2._tlpoints, lineWidth, orient), lineStyleModel, group);
    show && this._drawSplitline(self2._getEdgesPoints(self2._blpoints, lineWidth, orient), lineStyleModel, group);
  }
  _getEdgesPoints(points9, lineWidth, orient) {
    const rs = [points9[0].slice(), points9[points9.length - 1].slice()];
    const idx = orient === "horizontal" ? 0 : 1;
    rs[0][idx] = rs[0][idx] - lineWidth / 2;
    rs[1][idx] = rs[1][idx] + lineWidth / 2;
    return rs;
  }
  _drawSplitline(points9, lineStyle3, group) {
    const poyline = new Polyline_default({
      z2: 20,
      shape: {
        points: points9
      },
      style: lineStyle3
    });
    group.add(poyline);
  }
  _getLinePointsOfOneWeek(calendarModel, date, orient) {
    const coordSys = calendarModel.coordinateSystem;
    const parsedDate = coordSys.getDateInfo(date);
    const points9 = [];
    for (let i = 0; i < 7; i++) {
      const tmpD = coordSys.getNextNDay(parsedDate.time, i);
      const point = coordSys.dataToRect([tmpD.time], false);
      points9[2 * tmpD.day] = point.tl;
      points9[2 * tmpD.day + 1] = point[orient === "horizontal" ? "bl" : "tr"];
    }
    return points9;
  }
  _formatterLabel(formatter, params) {
    if (typeof formatter === "string" && formatter) {
      return formatTplSimple(formatter, params);
    }
    if (typeof formatter === "function") {
      return formatter(params);
    }
    return params.nameMap;
  }
  _yearTextPositionControl(textEl, point, orient, position2, margin) {
    let x = point[0];
    let y = point[1];
    let aligns = ["center", "bottom"];
    if (position2 === "bottom") {
      y += margin;
      aligns = ["center", "top"];
    } else if (position2 === "left") {
      x -= margin;
    } else if (position2 === "right") {
      x += margin;
      aligns = ["center", "top"];
    } else {
      y -= margin;
    }
    let rotate2 = 0;
    if (position2 === "left" || position2 === "right") {
      rotate2 = Math.PI / 2;
    }
    return {
      rotation: rotate2,
      x,
      y,
      style: {
        align: aligns[0],
        verticalAlign: aligns[1]
      }
    };
  }
  _renderYearText(calendarModel, rangeData, orient, group) {
    const yearLabel = calendarModel.getModel("yearLabel");
    if (!yearLabel.get("show")) {
      return;
    }
    const margin = yearLabel.get("margin");
    let pos = yearLabel.get("position");
    if (!pos) {
      pos = orient !== "horizontal" ? "top" : "left";
    }
    const points9 = [this._tlpoints[this._tlpoints.length - 1], this._blpoints[0]];
    const xc = (points9[0][0] + points9[1][0]) / 2;
    const yc = (points9[0][1] + points9[1][1]) / 2;
    const idx = orient === "horizontal" ? 0 : 1;
    const posPoints = {
      top: [xc, points9[idx][1]],
      bottom: [xc, points9[1 - idx][1]],
      left: [points9[1 - idx][0], yc],
      right: [points9[idx][0], yc]
    };
    let name = rangeData.start.y;
    if (+rangeData.end.y > +rangeData.start.y) {
      name = name + "-" + rangeData.end.y;
    }
    const formatter = yearLabel.get("formatter");
    const params = {
      start: rangeData.start.y,
      end: rangeData.end.y,
      nameMap: name
    };
    const content = this._formatterLabel(formatter, params);
    const yearText = new Text_default({
      z2: 30,
      style: createTextStyle(yearLabel, {
        text: content
      })
    });
    yearText.attr(this._yearTextPositionControl(yearText, posPoints[pos], orient, pos, margin));
    group.add(yearText);
  }
  _monthTextPositionControl(point, isCenter, orient, position2, margin) {
    let align = "left";
    let vAlign = "top";
    let x = point[0];
    let y = point[1];
    if (orient === "horizontal") {
      y = y + margin;
      if (isCenter) {
        align = "center";
      }
      if (position2 === "start") {
        vAlign = "bottom";
      }
    } else {
      x = x + margin;
      if (isCenter) {
        vAlign = "middle";
      }
      if (position2 === "start") {
        align = "right";
      }
    }
    return {
      x,
      y,
      align,
      verticalAlign: vAlign
    };
  }
  _renderMonthText(calendarModel, orient, group) {
    const monthLabel = calendarModel.getModel("monthLabel");
    if (!monthLabel.get("show")) {
      return;
    }
    let nameMap = monthLabel.get("nameMap");
    let margin = monthLabel.get("margin");
    const pos = monthLabel.get("position");
    const align = monthLabel.get("align");
    const termPoints = [this._tlpoints, this._blpoints];
    if (isString(nameMap)) {
      nameMap = MONTH_TEXT[nameMap.toUpperCase()] || [];
    }
    const idx = pos === "start" ? 0 : 1;
    const axis2 = orient === "horizontal" ? 0 : 1;
    margin = pos === "start" ? -margin : margin;
    const isCenter = align === "center";
    for (let i = 0; i < termPoints[idx].length - 1; i++) {
      const tmp = termPoints[idx][i].slice();
      const firstDay = this._firstDayOfMonth[i];
      if (isCenter) {
        const firstDayPoints = this._firstDayPoints[i];
        tmp[axis2] = (firstDayPoints[axis2] + termPoints[0][i + 1][axis2]) / 2;
      }
      const formatter = monthLabel.get("formatter");
      const name = nameMap[+firstDay.m - 1];
      const params = {
        yyyy: firstDay.y,
        yy: (firstDay.y + "").slice(2),
        MM: firstDay.m,
        M: +firstDay.m,
        nameMap: name
      };
      const content = this._formatterLabel(formatter, params);
      const monthText = new Text_default({
        z2: 30,
        style: extend(createTextStyle(monthLabel, {
          text: content
        }), this._monthTextPositionControl(tmp, isCenter, orient, pos, margin))
      });
      group.add(monthText);
    }
  }
  _weekTextPositionControl(point, orient, position2, margin, cellSize) {
    let align = "center";
    let vAlign = "middle";
    let x = point[0];
    let y = point[1];
    const isStart = position2 === "start";
    if (orient === "horizontal") {
      x = x + margin + (isStart ? 1 : -1) * cellSize[0] / 2;
      align = isStart ? "right" : "left";
    } else {
      y = y + margin + (isStart ? 1 : -1) * cellSize[1] / 2;
      vAlign = isStart ? "bottom" : "top";
    }
    return {
      x,
      y,
      align,
      verticalAlign: vAlign
    };
  }
  _renderWeekText(calendarModel, rangeData, orient, group) {
    const dayLabel = calendarModel.getModel("dayLabel");
    if (!dayLabel.get("show")) {
      return;
    }
    const coordSys = calendarModel.coordinateSystem;
    const pos = dayLabel.get("position");
    let nameMap = dayLabel.get("nameMap");
    let margin = dayLabel.get("margin");
    const firstDayOfWeek = coordSys.getFirstDayOfWeek();
    if (isString(nameMap)) {
      nameMap = WEEK_TEXT[nameMap.toUpperCase()] || [];
    }
    let start2 = coordSys.getNextNDay(rangeData.end.time, 7 - rangeData.lweek).time;
    const cellSize = [coordSys.getCellWidth(), coordSys.getCellHeight()];
    margin = parsePercent3(margin, cellSize[orient === "horizontal" ? 0 : 1]);
    if (pos === "start") {
      start2 = coordSys.getNextNDay(rangeData.start.time, -(7 + rangeData.fweek)).time;
      margin = -margin;
    }
    for (let i = 0; i < 7; i++) {
      const tmpD = coordSys.getNextNDay(start2, i);
      const point = coordSys.dataToRect([tmpD.time], false).center;
      let day = i;
      day = Math.abs((i + firstDayOfWeek) % 7);
      const weekText = new Text_default({
        z2: 30,
        style: extend(createTextStyle(dayLabel, {
          text: nameMap[day]
        }), this._weekTextPositionControl(point, orient, pos, margin, cellSize))
      });
      group.add(weekText);
    }
  }
}
CalendarView2.type = "calendar";
Component_default2.registerClass(CalendarView2);

// src/component/calendar.ts

// src/component/graphic.ts
const _nonShapeGraphicElements = {
  path: null,
  compoundPath: null,
  group: Group_default,
  image: Image_default,
  text: Text_default
};
registerPreprocessor(function(option) {
  const graphicOption = option.graphic;
  if (isArray(graphicOption)) {
    if (!graphicOption[0] || !graphicOption[0].elements) {
      option.graphic = [{
        elements: graphicOption
      }];
    } else {
      option.graphic = [option.graphic[0]];
    }
  } else if (graphicOption && !graphicOption.elements) {
    option.graphic = [{
      elements: [graphicOption]
    }];
  }
});
const GraphicModel = extendComponentModel({
  type: "graphic",
  defaultOption: {
    elements: [],
    parentId: null
  },
  _elOptionsToUpdate: null,
  mergeOption: function(option) {
    const elements = this.option.elements;
    this.option.elements = null;
    GraphicModel.superApply(this, "mergeOption", arguments);
    this.option.elements = elements;
  },
  optionUpdated: function(newOption, isInit) {
    const thisOption = this.option;
    const newList = (isInit ? thisOption : newOption).elements;
    const existList = thisOption.elements = isInit ? [] : thisOption.elements;
    const flattenedList = [];
    this._flatten(newList, flattenedList);
    const mappingResult = mappingToExists(existList, flattenedList, "normalMerge");
    const elOptionsToUpdate = this._elOptionsToUpdate = [];
    each(mappingResult, function(resultItem, index) {
      const newElOption = resultItem.newOption;
      if (__DEV__) {
        assert(isObject(newElOption) || resultItem.existing, "Empty graphic option definition");
      }
      if (!newElOption) {
        return;
      }
      elOptionsToUpdate.push(newElOption);
      setKeyInfoToNewElOption(resultItem, newElOption);
      mergeNewElOptionToExist(existList, index, newElOption);
      setLayoutInfoToExist(existList[index], newElOption);
    }, this);
    for (let i = existList.length - 1; i >= 0; i--) {
      if (existList[i] == null) {
        existList.splice(i, 1);
      } else {
        delete existList[i].$action;
      }
    }
  },
  _flatten: function(optionList, result, parentOption) {
    each(optionList, function(option) {
      if (!option) {
        return;
      }
      if (parentOption) {
        option.parentOption = parentOption;
      }
      result.push(option);
      const children = option.children;
      if (option.type === "group" && children) {
        this._flatten(children, result, option);
      }
      delete option.children;
    }, this);
  },
  useElOptionsToUpdate: function() {
    const els = this._elOptionsToUpdate;
    this._elOptionsToUpdate = null;
    return els;
  }
});
extendComponentView({
  type: "graphic",
  init: function(ecModel, api) {
    this._elMap = createHashMap();
    this._lastGraphicModel;
  },
  render: function(graphicModel, ecModel, api) {
    if (graphicModel !== this._lastGraphicModel) {
      this._clear();
    }
    this._lastGraphicModel = graphicModel;
    this._updateElements(graphicModel);
    this._relocate(graphicModel, api);
  },
  _updateElements: function(graphicModel) {
    const elOptionsToUpdate = graphicModel.useElOptionsToUpdate();
    if (!elOptionsToUpdate) {
      return;
    }
    const elMap = this._elMap;
    const rootGroup = this.group;
    each(elOptionsToUpdate, function(elOption) {
      const $action = elOption.$action;
      const id = elOption.id;
      const existEl = elMap.get(id);
      const parentId = elOption.parentId;
      const targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;
      const elOptionStyle = elOption.style;
      if (elOption.type === "text" && elOptionStyle) {
        if (elOption.hv && elOption.hv[1]) {
          elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = null;
        }
        !elOptionStyle.hasOwnProperty("textFill") && elOptionStyle.fill && (elOptionStyle.textFill = elOptionStyle.fill);
        !elOptionStyle.hasOwnProperty("textStroke") && elOptionStyle.stroke && (elOptionStyle.textStroke = elOptionStyle.stroke);
      }
      const elOptionCleaned = getCleanedElOption(elOption);
      if (__DEV__) {
        existEl && assert(targetElParent === existEl.parent, "Changing parent is not supported.");
      }
      if (!$action || $action === "merge") {
        existEl ? existEl.attr(elOptionCleaned) : createEl2(id, targetElParent, elOptionCleaned, elMap);
      } else if ($action === "replace") {
        removeEl(existEl, elMap);
        createEl2(id, targetElParent, elOptionCleaned, elMap);
      } else if ($action === "remove") {
        removeEl(existEl, elMap);
      }
      const el = elMap.get(id);
      if (el) {
        el.__ecGraphicWidthOption = elOption.width;
        el.__ecGraphicHeightOption = elOption.height;
        setEventData(el, graphicModel, elOption);
      }
    });
  },
  _relocate: function(graphicModel, api) {
    const elOptions = graphicModel.option.elements;
    const rootGroup = this.group;
    const elMap = this._elMap;
    const apiWidth = api.getWidth();
    const apiHeight = api.getHeight();
    for (let i = 0; i < elOptions.length; i++) {
      const elOption = elOptions[i];
      const el = elMap.get(elOption.id);
      if (!el || !el.isGroup) {
        continue;
      }
      const parentEl = el.parent;
      const isParentRoot = parentEl === rootGroup;
      el.__ecGraphicWidth = parsePercent3(el.__ecGraphicWidthOption, isParentRoot ? apiWidth : parentEl.__ecGraphicWidth) || 0;
      el.__ecGraphicHeight = parsePercent3(el.__ecGraphicHeightOption, isParentRoot ? apiHeight : parentEl.__ecGraphicHeight) || 0;
    }
    for (let i = elOptions.length - 1; i >= 0; i--) {
      const elOption = elOptions[i];
      const el = elMap.get(elOption.id);
      if (!el) {
        continue;
      }
      const parentEl = el.parent;
      const containerInfo = parentEl === rootGroup ? {
        width: apiWidth,
        height: apiHeight
      } : {
        width: parentEl.__ecGraphicWidth,
        height: parentEl.__ecGraphicHeight
      };
      positionElement(el, elOption, containerInfo, null, {
        hv: elOption.hv,
        boundingMode: elOption.bounding
      });
    }
  },
  _clear: function() {
    const elMap = this._elMap;
    elMap.each(function(el) {
      removeEl(el, elMap);
    });
    this._elMap = createHashMap();
  },
  dispose: function() {
    this._clear();
  }
});
function createEl2(id, targetElParent, elOption, elMap) {
  const graphicType = elOption.type;
  if (__DEV__) {
    assert(graphicType, "graphic type MUST be set");
  }
  const Clz = _nonShapeGraphicElements.hasOwnProperty(graphicType) ? _nonShapeGraphicElements[graphicType] : getShapeClass(graphicType);
  if (__DEV__) {
    assert(Clz, "graphic type can not be found");
  }
  const el = new Clz(elOption);
  targetElParent.add(el);
  elMap.set(id, el);
  el.__ecGraphicId = id;
}
function removeEl(existEl, elMap) {
  const existElParent = existEl && existEl.parent;
  if (existElParent) {
    existEl.type === "group" && existEl.traverse(function(el) {
      removeEl(el, elMap);
    });
    elMap.removeKey(existEl.__ecGraphicId);
    existElParent.remove(existEl);
  }
}
function getCleanedElOption(elOption) {
  elOption = extend({}, elOption);
  each(["id", "parentId", "$action", "hv", "bounding"].concat(LOCATION_PARAMS), function(name) {
    delete elOption[name];
  });
  return elOption;
}
function isSetLoc(obj, props) {
  let isSet;
  each(props, function(prop) {
    obj[prop] != null && obj[prop] !== "auto" && (isSet = true);
  });
  return isSet;
}
function setKeyInfoToNewElOption(resultItem, newElOption) {
  const existElOption = resultItem.existing;
  newElOption.id = resultItem.keyInfo.id;
  !newElOption.type && existElOption && (newElOption.type = existElOption.type);
  if (newElOption.parentId == null) {
    const newElParentOption = newElOption.parentOption;
    if (newElParentOption) {
      newElOption.parentId = newElParentOption.id;
    } else if (existElOption) {
      newElOption.parentId = existElOption.parentId;
    }
  }
  newElOption.parentOption = null;
}
function mergeNewElOptionToExist(existList, index, newElOption) {
  const newElOptCopy = extend({}, newElOption);
  const existElOption = existList[index];
  const $action = newElOption.$action || "merge";
  if ($action === "merge") {
    if (existElOption) {
      if (__DEV__) {
        const newType = newElOption.type;
        assert(!newType || existElOption.type === newType, 'Please set $action: "replace" to change `type`');
      }
      merge(existElOption, newElOptCopy, true);
      mergeLayoutParam(existElOption, newElOptCopy, {
        ignoreSize: true
      });
      copyLayoutParams(newElOption, existElOption);
    } else {
      existList[index] = newElOptCopy;
    }
  } else if ($action === "replace") {
    existList[index] = newElOptCopy;
  } else if ($action === "remove") {
    existElOption && (existList[index] = null);
  }
}
function setLayoutInfoToExist(existItem, newElOption) {
  if (!existItem) {
    return;
  }
  existItem.hv = newElOption.hv = [isSetLoc(newElOption, ["left", "right"]), isSetLoc(newElOption, ["top", "bottom"])];
  if (existItem.type === "group") {
    existItem.width == null && (existItem.width = newElOption.width = 0);
    existItem.height == null && (existItem.height = newElOption.height = 0);
  }
}
function setEventData(el, graphicModel, elOption) {
  let eventData = el.eventData;
  if (!el.silent && !el.ignore && !eventData) {
    eventData = el.eventData = {
      componentType: "graphic",
      componentIndex: graphicModel.componentIndex,
      name: el.name
    };
  }
  if (eventData) {
    eventData.info = el.info;
  }
}

// src/component/toolbox/featureManager.ts
class ToolboxFeature {
}
const features = {};
function registerFeature(name, ctor) {
  features[name] = ctor;
}
function getFeature(name) {
  return features[name];
}

// src/component/toolbox/ToolboxModel.ts
class ToolboxModel3 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = ToolboxModel3.type;
  }
  optionUpdated() {
    super.optionUpdated.apply(this, arguments);
    each(this.option.feature, function(featureOpt, featureName) {
      const Feature = getFeature(featureName);
      Feature && merge(featureOpt, Feature.defaultOption);
    });
  }
}
ToolboxModel3.type = "toolbox";
ToolboxModel3.layoutMode = {
  type: "box",
  ignoreSize: true
};
ToolboxModel3.defaultOption = {
  show: true,
  z: 6,
  zlevel: 0,
  orient: "horizontal",
  left: "right",
  top: "top",
  backgroundColor: "transparent",
  borderColor: "#ccc",
  borderRadius: 0,
  borderWidth: 0,
  padding: 5,
  itemSize: 15,
  itemGap: 8,
  showTitle: true,
  iconStyle: {
    borderColor: "#666",
    color: "none"
  },
  emphasis: {
    iconStyle: {
      borderColor: "#3E98C5"
    }
  },
  tooltip: {
    show: false
  }
};
Component_default.registerClass(ToolboxModel3);

// src/component/helper/listComponent.ts
function layout17(group, componentModel, api) {
  const boxLayoutParams = componentModel.getBoxLayoutParams();
  const padding = componentModel.get("padding");
  const viewportSize = {
    width: api.getWidth(),
    height: api.getHeight()
  };
  const rect = getLayoutRect(boxLayoutParams, viewportSize, padding);
  box(componentModel.get("orient"), group, componentModel.get("itemGap"), rect.width, rect.height);
  positionElement(group, boxLayoutParams, viewportSize, padding);
}
function makeBackground(rect, componentModel) {
  const padding = normalizeCssArray2(componentModel.get("padding"));
  const style2 = componentModel.getItemStyle(["color", "opacity"]);
  style2.fill = componentModel.get("backgroundColor");
  rect = new Rect_default({
    shape: {
      x: rect.x - padding[3],
      y: rect.y - padding[0],
      width: rect.width + padding[1] + padding[3],
      height: rect.height + padding[0] + padding[2],
      r: componentModel.get("borderRadius")
    },
    style: style2,
    silent: true,
    z2: -1
  });
  return rect;
}

// src/component/toolbox/ToolboxView.ts
class ToolboxView2 extends Component_default2 {
  render(toolboxModel, ecModel, api, payload) {
    const group = this.group;
    group.removeAll();
    if (!toolboxModel.get("show")) {
      return;
    }
    const itemSize = +toolboxModel.get("itemSize");
    const featureOpts = toolboxModel.get("feature") || {};
    const features2 = this._features || (this._features = {});
    const featureNames = [];
    each(featureOpts, function(opt, name) {
      featureNames.push(name);
    });
    new DataDiffer_default(this._featureNames || [], featureNames).add(processFeature).update(processFeature).remove(curry(processFeature, null)).execute();
    this._featureNames = featureNames;
    function processFeature(newIndex, oldIndex) {
      const featureName = featureNames[newIndex];
      const oldName = featureNames[oldIndex];
      const featureOpt = featureOpts[featureName];
      const featureModel = new Model_default(featureOpt, toolboxModel, toolboxModel.ecModel);
      let feature;
      if (payload && payload.newTitle != null && payload.featureName === featureName) {
        featureOpt.title = payload.newTitle;
      }
      if (featureName && !oldName) {
        if (isUserFeatureName(featureName)) {
          feature = {
            onclick: featureModel.option.onclick,
            featureName
          };
        } else {
          const Feature = getFeature(featureName);
          if (!Feature) {
            return;
          }
          feature = new Feature();
        }
        features2[featureName] = feature;
      } else {
        feature = features2[oldName];
        if (!feature) {
          return;
        }
      }
      feature.uid = getUID("toolbox-feature");
      feature.model = featureModel;
      feature.ecModel = ecModel;
      feature.api = api;
      if (feature instanceof ToolboxFeature) {
        if (!featureName && oldName) {
          feature.dispose && feature.dispose(ecModel, api);
          return;
        }
        if (!featureModel.get("show") || feature.unusable) {
          feature.remove && feature.remove(ecModel, api);
          return;
        }
      }
      createIconPaths(featureModel, feature, featureName);
      featureModel.setIconStatus = function(iconName, status) {
        const option = this.option;
        const iconPaths = this.iconPaths;
        option.iconStatus = option.iconStatus || {};
        option.iconStatus[iconName] = status;
        if (iconPaths[iconName]) {
          (status === "emphasis" ? enterEmphasis : leaveEmphasis)(iconPaths[iconName]);
        }
      };
      if (feature instanceof ToolboxFeature) {
        if (feature.render) {
          feature.render(featureModel, ecModel, api, payload);
        }
      }
    }
    function createIconPaths(featureModel, feature, featureName) {
      const iconStyleModel = featureModel.getModel("iconStyle");
      const iconStyleEmphasisModel = featureModel.getModel(["emphasis", "iconStyle"]);
      const icons = feature instanceof ToolboxFeature && feature.getIcons ? feature.getIcons() : featureModel.get("icon");
      const titles = featureModel.get("title") || {};
      let iconsMap;
      let titlesMap;
      if (typeof icons === "string") {
        iconsMap = {};
        iconsMap[featureName] = icons;
      } else {
        iconsMap = icons;
      }
      if (typeof titles === "string") {
        titlesMap = {};
        titlesMap[featureName] = titles;
      } else {
        titlesMap = titles;
      }
      const iconPaths = featureModel.iconPaths = {};
      each(iconsMap, function(iconStr, iconName) {
        const path2 = createIcon(iconStr, {}, {
          x: -itemSize / 2,
          y: -itemSize / 2,
          width: itemSize,
          height: itemSize
        });
        path2.setStyle(iconStyleModel.getItemStyle());
        const pathEmphasisState = path2.ensureState("emphasis");
        pathEmphasisState.style = iconStyleEmphasisModel.getItemStyle();
        const textContent = new Text_default({
          style: {
            text: titlesMap[iconName],
            align: iconStyleEmphasisModel.get("textAlign"),
            borderRadius: iconStyleEmphasisModel.get("textBorderRadius"),
            padding: iconStyleEmphasisModel.get("textPadding"),
            fill: null
          },
          ignore: true
        });
        path2.setTextContent(textContent);
        const tooltipModel = toolboxModel.getModel("tooltip");
        if (tooltipModel && tooltipModel.get("show")) {
          path2.tooltip = extend({
            content: titlesMap[iconName],
            formatter: tooltipModel.get("formatter", true) || function() {
              return titlesMap[iconName];
            },
            formatterParams: {
              componentType: "toolbox",
              name: iconName,
              title: titlesMap[iconName],
              $vars: ["name", "title"]
            },
            position: tooltipModel.get("position", true) || "bottom"
          }, tooltipModel.option);
        }
        path2.__title = titlesMap[iconName];
        path2.on("mouseover", function() {
          const hoverStyle = iconStyleEmphasisModel.getItemStyle();
          const defaultTextPosition = toolboxModel.get("orient") === "vertical" ? toolboxModel.get("right") == null ? "right" : "left" : toolboxModel.get("bottom") == null ? "bottom" : "top";
          textContent.setStyle({
            fill: iconStyleEmphasisModel.get("textFill") || hoverStyle.fill || hoverStyle.stroke || "#000",
            backgroundColor: iconStyleEmphasisModel.get("textBackgroundColor")
          });
          path2.setTextConfig({
            position: iconStyleEmphasisModel.get("textPosition") || defaultTextPosition
          });
          textContent.ignore = !toolboxModel.get("showTitle");
          enterEmphasis(this);
        }).on("mouseout", function() {
          if (featureModel.get(["iconStatus", iconName]) !== "emphasis") {
            leaveEmphasis(this);
          }
          textContent.hide();
        });
        (featureModel.get(["iconStatus", iconName]) === "emphasis" ? enterEmphasis : leaveEmphasis)(path2);
        group.add(path2);
        path2.on("click", bind(feature.onclick, feature, ecModel, api, iconName));
        iconPaths[iconName] = path2;
      });
    }
    layout17(group, toolboxModel, api);
    group.add(makeBackground(group.getBoundingRect(), toolboxModel));
    group.eachChild(function(icon) {
      const titleText = icon.__title;
      const emphasisState = icon.ensureState("emphasis");
      const emphasisTextConfig = emphasisState.textConfig || (emphasisState.textConfig = {});
      const textContent = icon.getTextContent();
      const emphasisTextState = textContent && textContent.states.emphasis;
      if (emphasisTextState && !isFunction(emphasisTextState) && titleText) {
        const emphasisTextStyle = emphasisTextState.style || (emphasisTextState.style = {});
        const rect = getBoundingRect(titleText, Text_default.makeFont(emphasisTextStyle));
        const offsetX = icon.x + group.x;
        const offsetY = icon.y + group.y + itemSize;
        let needPutOnTop = false;
        if (offsetY + rect.height > api.getHeight()) {
          emphasisTextConfig.position = "top";
          needPutOnTop = true;
        }
        const topOffset = needPutOnTop ? -5 - rect.height : itemSize + 8;
        if (offsetX + rect.width / 2 > api.getWidth()) {
          emphasisTextConfig.position = ["100%", topOffset];
          emphasisTextStyle.align = "right";
        } else if (offsetX - rect.width / 2 < 0) {
          emphasisTextConfig.position = [0, topOffset];
          emphasisTextStyle.align = "left";
        }
      }
    });
  }
  updateView(toolboxModel, ecModel, api, payload) {
    each(this._features, function(feature) {
      feature instanceof ToolboxFeature && feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
    });
  }
  remove(ecModel, api) {
    each(this._features, function(feature) {
      feature instanceof ToolboxFeature && feature.remove && feature.remove(ecModel, api);
    });
    this.group.removeAll();
  }
  dispose(ecModel, api) {
    each(this._features, function(feature) {
      feature instanceof ToolboxFeature && feature.dispose && feature.dispose(ecModel, api);
    });
  }
}
ToolboxView2.type = "toolbox";
Component_default2.registerClass(ToolboxView2);
function isUserFeatureName(featureName) {
  return featureName.indexOf("my") === 0;
}

// src/component/toolbox/feature/SaveAsImage.ts
const saveAsImageLang = lang_default.toolbox.saveAsImage;
class SaveAsImage2 extends ToolboxFeature {
  onclick(ecModel, api) {
    const model65 = this.model;
    const title2 = model65.get("name") || ecModel.get("title.0.text") || "echarts";
    const isSvg = api.getZr().painter.getType() === "svg";
    const type = isSvg ? "svg" : model65.get("type", true) || "png";
    const url = api.getConnectedDataURL({
      type,
      backgroundColor: model65.get("backgroundColor", true) || ecModel.get("backgroundColor") || "#fff",
      connectedBackgroundColor: model65.get("connectedBackgroundColor"),
      excludeComponents: model65.get("excludeComponents"),
      pixelRatio: model65.get("pixelRatio")
    });
    if (typeof MouseEvent === "function" && !env_default.browser.ie && !env_default.browser.edge) {
      const $a = document.createElement("a");
      $a.download = title2 + "." + type;
      $a.target = "_blank";
      $a.href = url;
      const evt = new MouseEvent("click", {
        view: window,
        bubbles: true,
        cancelable: false
      });
      $a.dispatchEvent(evt);
    } else {
      if (window.navigator.msSaveOrOpenBlob) {
        const bstr = atob(url.split(",")[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) {
          u8arr[n] = bstr.charCodeAt(n);
        }
        const blob = new Blob([u8arr]);
        window.navigator.msSaveOrOpenBlob(blob, title2 + "." + type);
      } else {
        const lang9 = model65.get("lang");
        const html = '<body style="margin:0;"><img src="' + url + '" style="max-width:100%;" title="' + (lang9 && lang9[0] || "") + '" /></body>';
        const tab = window.open();
        tab.document.write(html);
      }
    }
  }
}
SaveAsImage2.defaultOption = {
  show: true,
  icon: "M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0",
  title: saveAsImageLang.title,
  type: "png",
  connectedBackgroundColor: "#fff",
  name: "",
  excludeComponents: ["toolbox"],
  pixelRatio: 1,
  lang: saveAsImageLang.lang.slice()
};
SaveAsImage2.prototype.unusable = !env_default.canvasSupported;
registerFeature("saveAsImage", SaveAsImage2);

// src/component/toolbox/feature/MagicType.ts
const magicTypeLang = lang_default.toolbox.magicType;
const INNER_STACK_KEYWORD = "__ec_magicType_stack__";
const radioTypes = [["line", "bar"], ["stack"]];
class MagicType2 extends ToolboxFeature {
  getIcons() {
    const model65 = this.model;
    const availableIcons = model65.get("icon");
    const icons = {};
    each(model65.get("type"), function(type) {
      if (availableIcons[type]) {
        icons[type] = availableIcons[type];
      }
    });
    return icons;
  }
  onclick(ecModel, api, type) {
    const model65 = this.model;
    const seriesIndex = model65.get(["seriesIndex", type]);
    if (!seriesOptGenreator[type]) {
      return;
    }
    const newOption = {
      series: []
    };
    const generateNewSeriesTypes = function(seriesModel) {
      const seriesType2 = seriesModel.subType;
      const seriesId = seriesModel.id;
      const newSeriesOpt = seriesOptGenreator[type](seriesType2, seriesId, seriesModel, model65);
      if (newSeriesOpt) {
        defaults(newSeriesOpt, seriesModel.option);
        newOption.series.push(newSeriesOpt);
      }
      const coordSys = seriesModel.coordinateSystem;
      if (coordSys && coordSys.type === "cartesian2d" && (type === "line" || type === "bar")) {
        const categoryAxis2 = coordSys.getAxesByScale("ordinal")[0];
        if (categoryAxis2) {
          const axisDim = categoryAxis2.dim;
          const axisType = axisDim + "Axis";
          const axisModel = seriesModel.getReferringComponents(axisType, SINGLE_REFERRING).models[0];
          const axisIndex = axisModel.componentIndex;
          newOption[axisType] = newOption[axisType] || [];
          for (let i = 0; i <= axisIndex; i++) {
            newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
          }
          newOption[axisType][axisIndex].boundaryGap = type === "bar";
        }
      }
    };
    each(radioTypes, function(radio) {
      if (indexOf(radio, type) >= 0) {
        each(radio, function(item) {
          model65.setIconStatus(item, "normal");
        });
      }
    });
    model65.setIconStatus(type, "emphasis");
    ecModel.eachComponent({
      mainType: "series",
      query: seriesIndex == null ? null : {
        seriesIndex
      }
    }, generateNewSeriesTypes);
    let newTitle;
    if (type === "stack") {
      const seriesOptions = newOption.series;
      const isStack = seriesOptions && seriesOptions[0] && seriesOptions[0].stack === INNER_STACK_KEYWORD;
      newTitle = isStack ? merge({
        stack: magicTypeLang.title.tiled
      }, magicTypeLang.title) : clone2(magicTypeLang.title);
    }
    api.dispatchAction({
      type: "changeMagicType",
      currentType: type,
      newOption,
      newTitle,
      featureName: "magicType"
    });
  }
}
MagicType2.defaultOption = {
  show: true,
  type: [],
  icon: {
    line: "M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4",
    bar: "M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7",
    stack: "M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z"
  },
  title: clone2(magicTypeLang.title),
  option: {},
  seriesIndex: {}
};
const seriesOptGenreator = {
  line: function(seriesType2, seriesId, seriesModel, model65) {
    if (seriesType2 === "bar") {
      return merge({
        id: seriesId,
        type: "line",
        data: seriesModel.get("data"),
        stack: seriesModel.get("stack"),
        markPoint: seriesModel.get("markPoint"),
        markLine: seriesModel.get("markLine")
      }, model65.get(["option", "line"]) || {}, true);
    }
  },
  bar: function(seriesType2, seriesId, seriesModel, model65) {
    if (seriesType2 === "line") {
      return merge({
        id: seriesId,
        type: "bar",
        data: seriesModel.get("data"),
        stack: seriesModel.get("stack"),
        markPoint: seriesModel.get("markPoint"),
        markLine: seriesModel.get("markLine")
      }, model65.get(["option", "bar"]) || {}, true);
    }
  },
  stack: function(seriesType2, seriesId, seriesModel, model65) {
    const isStack = seriesModel.get("stack") === INNER_STACK_KEYWORD;
    if (seriesType2 === "line" || seriesType2 === "bar") {
      model65.setIconStatus("stack", isStack ? "normal" : "emphasis");
      return merge({
        id: seriesId,
        stack: isStack ? "" : INNER_STACK_KEYWORD
      }, model65.get(["option", "stack"]) || {}, true);
    }
  }
};
registerAction({
  type: "changeMagicType",
  event: "magicTypeChanged",
  update: "prepareAndUpdate"
}, function(payload, ecModel) {
  ecModel.mergeOption(payload.newOption);
});
registerFeature("magicType", MagicType2);

// src/component/toolbox/feature/DataView.ts
const dataViewLang = lang_default.toolbox.dataView;
const BLOCK_SPLITER = new Array(60).join("-");
const ITEM_SPLITER = "	";
function groupSeries(ecModel) {
  const seriesGroupByCategoryAxis = {};
  const otherSeries = [];
  const meta = [];
  ecModel.eachRawSeries(function(seriesModel) {
    const coordSys = seriesModel.coordinateSystem;
    if (coordSys && (coordSys.type === "cartesian2d" || coordSys.type === "polar")) {
      const baseAxis = coordSys.getBaseAxis();
      if (baseAxis.type === "category") {
        const key = baseAxis.dim + "_" + baseAxis.index;
        if (!seriesGroupByCategoryAxis[key]) {
          seriesGroupByCategoryAxis[key] = {
            categoryAxis: baseAxis,
            valueAxis: coordSys.getOtherAxis(baseAxis),
            series: []
          };
          meta.push({
            axisDim: baseAxis.dim,
            axisIndex: baseAxis.index
          });
        }
        seriesGroupByCategoryAxis[key].series.push(seriesModel);
      } else {
        otherSeries.push(seriesModel);
      }
    } else {
      otherSeries.push(seriesModel);
    }
  });
  return {
    seriesGroupByCategoryAxis,
    other: otherSeries,
    meta
  };
}
function assembleSeriesWithCategoryAxis(groups) {
  const tables = [];
  each(groups, function(group, key) {
    const categoryAxis2 = group.categoryAxis;
    const valueAxis2 = group.valueAxis;
    const valueAxisDim = valueAxis2.dim;
    const headers = [" "].concat(map2(group.series, function(series) {
      return series.name;
    }));
    const columns = [categoryAxis2.model.getCategories()];
    each(group.series, function(series) {
      columns.push(series.getRawData().mapArray(valueAxisDim, function(val) {
        return val;
      }));
    });
    const lines2 = [headers.join(ITEM_SPLITER)];
    for (let i = 0; i < columns[0].length; i++) {
      const items = [];
      for (let j = 0; j < columns.length; j++) {
        items.push(columns[j][i]);
      }
      lines2.push(items.join(ITEM_SPLITER));
    }
    tables.push(lines2.join("\n"));
  });
  return tables.join("\n\n" + BLOCK_SPLITER + "\n\n");
}
function assembleOtherSeries(series) {
  return map2(series, function(series2) {
    const data = series2.getRawData();
    const lines2 = [series2.name];
    const vals = [];
    data.each(data.dimensions, function() {
      const argLen = arguments.length;
      const dataIndex = arguments[argLen - 1];
      const name = data.getName(dataIndex);
      for (let i = 0; i < argLen - 1; i++) {
        vals[i] = arguments[i];
      }
      lines2.push((name ? name + ITEM_SPLITER : "") + vals.join(ITEM_SPLITER));
    });
    return lines2.join("\n");
  }).join("\n\n" + BLOCK_SPLITER + "\n\n");
}
function getContentFromModel(ecModel) {
  const result = groupSeries(ecModel);
  return {
    value: filter([assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis), assembleOtherSeries(result.other)], function(str) {
      return !!str.replace(/[\n\t\s]/g, "");
    }).join("\n\n" + BLOCK_SPLITER + "\n\n"),
    meta: result.meta
  };
}
function trim2(str) {
  return str.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function isTSVFormat(block) {
  const firstLine = block.slice(0, block.indexOf("\n"));
  if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
    return true;
  }
}
const itemSplitRegex = new RegExp("[" + ITEM_SPLITER + "]+", "g");
function parseTSVContents(tsv) {
  const tsvLines = tsv.split(/\n+/g);
  const headers = trim2(tsvLines.shift()).split(itemSplitRegex);
  const categories = [];
  const series = map2(headers, function(header) {
    return {
      name: header,
      data: []
    };
  });
  for (let i = 0; i < tsvLines.length; i++) {
    const items = trim2(tsvLines[i]).split(itemSplitRegex);
    categories.push(items.shift());
    for (let j = 0; j < items.length; j++) {
      series[j] && (series[j].data[i] = items[j]);
    }
  }
  return {
    series,
    categories
  };
}
function parseListContents(str) {
  const lines2 = str.split(/\n+/g);
  const seriesName = trim2(lines2.shift());
  const data = [];
  for (let i = 0; i < lines2.length; i++) {
    let items = trim2(lines2[i]).split(itemSplitRegex);
    let name = "";
    let value;
    let hasName = false;
    if (isNaN(items[0])) {
      hasName = true;
      name = items[0];
      items = items.slice(1);
      data[i] = {
        name,
        value: []
      };
      value = data[i].value;
    } else {
      value = data[i] = [];
    }
    for (let j = 0; j < items.length; j++) {
      value.push(+items[j]);
    }
    if (value.length === 1) {
      hasName ? data[i].value = value[0] : data[i] = value[0];
    }
  }
  return {
    name: seriesName,
    data
  };
}
function parseContents(str, blockMetaList) {
  const blocks = str.split(new RegExp("\n*" + BLOCK_SPLITER + "\n*", "g"));
  const newOption = {
    series: []
  };
  each(blocks, function(block, idx) {
    if (isTSVFormat(block)) {
      const result = parseTSVContents(block);
      const blockMeta = blockMetaList[idx];
      const axisKey = blockMeta.axisDim + "Axis";
      if (blockMeta) {
        newOption[axisKey] = newOption[axisKey] || [];
        newOption[axisKey][blockMeta.axisIndex] = {
          data: result.categories
        };
        newOption.series = newOption.series.concat(result.series);
      }
    } else {
      const result = parseListContents(block);
      newOption.series.push(result);
    }
  });
  return newOption;
}
class DataView2 extends ToolboxFeature {
  onclick(ecModel, api) {
    const container = api.getDom();
    const model65 = this.model;
    if (this._dom) {
      container.removeChild(this._dom);
    }
    const root = document.createElement("div");
    root.style.cssText = "position:absolute;left:5px;top:5px;bottom:5px;right:5px;";
    root.style.backgroundColor = model65.get("backgroundColor") || "#fff";
    const header = document.createElement("h4");
    const lang9 = model65.get("lang") || [];
    header.innerHTML = lang9[0] || model65.get("title");
    header.style.cssText = "margin: 10px 20px;";
    header.style.color = model65.get("textColor");
    const viewMain = document.createElement("div");
    const textarea = document.createElement("textarea");
    viewMain.style.cssText = "display:block;width:100%;overflow:auto;";
    const optionToContent = model65.get("optionToContent");
    const contentToOption = model65.get("contentToOption");
    const result = getContentFromModel(ecModel);
    if (typeof optionToContent === "function") {
      const htmlOrDom = optionToContent(api.getOption());
      if (typeof htmlOrDom === "string") {
        viewMain.innerHTML = htmlOrDom;
      } else if (isDom(htmlOrDom)) {
        viewMain.appendChild(htmlOrDom);
      }
    } else {
      viewMain.appendChild(textarea);
      textarea.readOnly = model65.get("readOnly");
      textarea.style.cssText = "width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;";
      textarea.style.color = model65.get("textColor");
      textarea.style.borderColor = model65.get("textareaBorderColor");
      textarea.style.backgroundColor = model65.get("textareaColor");
      textarea.value = result.value;
    }
    const blockMetaList = result.meta;
    const buttonContainer = document.createElement("div");
    buttonContainer.style.cssText = "position:absolute;bottom:0;left:0;right:0;";
    let buttonStyle = "float:right;margin-right:20px;border:none;cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px";
    const closeButton = document.createElement("div");
    const refreshButton = document.createElement("div");
    buttonStyle += ";background-color:" + model65.get("buttonColor");
    buttonStyle += ";color:" + model65.get("buttonTextColor");
    const self2 = this;
    function close() {
      container.removeChild(root);
      self2._dom = null;
    }
    addEventListener(closeButton, "click", close);
    addEventListener(refreshButton, "click", function() {
      let newOption;
      try {
        if (typeof contentToOption === "function") {
          newOption = contentToOption(viewMain, api.getOption());
        } else {
          newOption = parseContents(textarea.value, blockMetaList);
        }
      } catch (e) {
        close();
        throw new Error("Data view format error " + e);
      }
      if (newOption) {
        api.dispatchAction({
          type: "changeDataView",
          newOption
        });
      }
      close();
    });
    closeButton.innerHTML = lang9[1];
    refreshButton.innerHTML = lang9[2];
    refreshButton.style.cssText = buttonStyle;
    closeButton.style.cssText = buttonStyle;
    !model65.get("readOnly") && buttonContainer.appendChild(refreshButton);
    buttonContainer.appendChild(closeButton);
    root.appendChild(header);
    root.appendChild(viewMain);
    root.appendChild(buttonContainer);
    viewMain.style.height = container.clientHeight - 80 + "px";
    container.appendChild(root);
    this._dom = root;
  }
  remove(ecModel, api) {
    this._dom && api.getDom().removeChild(this._dom);
  }
  dispose(ecModel, api) {
    this.remove(ecModel, api);
  }
}
DataView2.defaultOption = {
  show: true,
  readOnly: false,
  optionToContent: null,
  contentToOption: null,
  icon: "M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28",
  title: clone2(dataViewLang.title),
  lang: clone2(dataViewLang.lang),
  backgroundColor: "#fff",
  textColor: "#000",
  textareaColor: "#fff",
  textareaBorderColor: "#333",
  buttonColor: "#c23531",
  buttonTextColor: "#fff"
};
function tryMergeDataOption(newData, originalData) {
  return map2(newData, function(newVal, idx) {
    const original = originalData && originalData[idx];
    if (isObject(original) && !isArray(original)) {
      if (isObject(newVal) && !isArray(newVal)) {
        newVal = newVal.value;
      }
      return defaults({
        value: newVal
      }, original);
    } else {
      return newVal;
    }
  });
}
registerFeature("dataView", DataView2);
registerAction({
  type: "changeDataView",
  event: "dataViewChanged",
  update: "prepareAndUpdate"
}, function(payload, ecModel) {
  const newSeriesOptList = [];
  each(payload.newOption.series, function(seriesOpt) {
    const seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
    if (!seriesModel) {
      newSeriesOptList.push(extend({
        type: "scatter"
      }, seriesOpt));
    } else {
      const originalData = seriesModel.get("data");
      newSeriesOptList.push({
        name: seriesOpt.name,
        data: tryMergeDataOption(seriesOpt.data, originalData)
      });
    }
  });
  ecModel.mergeOption(defaults({
    series: newSeriesOptList
  }, payload.newOption));
});

// src/component/helper/BrushTargetManager.ts
const COORD_CONVERTS = ["dataToPoint", "pointToData"];
const INCLUDE_FINDER_MAIN_TYPES = ["grid", "xAxis", "yAxis", "geo", "graph", "polar", "radiusAxis", "angleAxis", "bmap"];
class BrushTargetManager4 {
  constructor(finder, ecModel, opt) {
    this._targetInfoList = [];
    const foundCpts = parseFinder2(ecModel, finder);
    each(targetInfoBuilders, (builder, type) => {
      if (!opt || !opt.include || indexOf(opt.include, type) >= 0) {
        builder(foundCpts, this._targetInfoList);
      }
    });
  }
  setOutputRanges(areas, ecModel) {
    this.matchOutputRanges(areas, ecModel, function(area, coordRange, coordSys) {
      (area.coordRanges || (area.coordRanges = [])).push(coordRange);
      if (!area.coordRange) {
        area.coordRange = coordRange;
        const result = coordConvert[area.brushType](0, coordSys, coordRange);
        area.__rangeOffset = {
          offset: diffProcessor[area.brushType](result.values, area.range, [1, 1]),
          xyMinMax: result.xyMinMax
        };
      }
    });
    return areas;
  }
  matchOutputRanges(areas, ecModel, cb) {
    each(areas, function(area) {
      const targetInfo = this.findTargetInfo(area, ecModel);
      if (targetInfo && targetInfo !== true) {
        each(targetInfo.coordSyses, function(coordSys) {
          const result = coordConvert[area.brushType](1, coordSys, area.range);
          cb(area, result.values, coordSys, ecModel);
        });
      }
    }, this);
  }
  setInputRanges(areas, ecModel) {
    each(areas, function(area) {
      const targetInfo = this.findTargetInfo(area, ecModel);
      if (__DEV__) {
        assert(!targetInfo || targetInfo === true || area.coordRange, "coordRange must be specified when coord index specified.");
        assert(!targetInfo || targetInfo !== true || area.range, "range must be specified in global brush.");
      }
      area.range = area.range || [];
      if (targetInfo && targetInfo !== true) {
        area.panelId = targetInfo.panelId;
        const result = coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);
        const rangeOffset = area.__rangeOffset;
        area.range = rangeOffset ? diffProcessor[area.brushType](result.values, rangeOffset.offset, getScales(result.xyMinMax, rangeOffset.xyMinMax)) : result.values;
      }
    }, this);
  }
  makePanelOpts(api, getDefaultBrushType) {
    return map2(this._targetInfoList, function(targetInfo) {
      const rect = targetInfo.getPanelRect();
      return {
        panelId: targetInfo.panelId,
        defaultBrushType: getDefaultBrushType ? getDefaultBrushType(targetInfo) : null,
        clipPath: makeRectPanelClipPath(rect),
        isTargetByCursor: makeRectIsTargetByCursor(rect, api, targetInfo.coordSysModel),
        getLinearBrushOtherExtent: makeLinearBrushOtherExtent(rect)
      };
    });
  }
  controlSeries(area, seriesModel, ecModel) {
    const targetInfo = this.findTargetInfo(area, ecModel);
    return targetInfo === true || targetInfo && indexOf(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0;
  }
  findTargetInfo(area, ecModel) {
    const targetInfoList = this._targetInfoList;
    const foundCpts = parseFinder2(ecModel, area);
    for (let i = 0; i < targetInfoList.length; i++) {
      const targetInfo = targetInfoList[i];
      const areaPanelId = area.panelId;
      if (areaPanelId) {
        if (targetInfo.panelId === areaPanelId) {
          return targetInfo;
        }
      } else {
        for (let j = 0; j < targetInfoMatchers.length; j++) {
          if (targetInfoMatchers[j](foundCpts, targetInfo)) {
            return targetInfo;
          }
        }
      }
    }
    return true;
  }
}
function formatMinMax(minMax) {
  minMax[0] > minMax[1] && minMax.reverse();
  return minMax;
}
function parseFinder2(ecModel, finder) {
  return parseFinder(ecModel, finder, {
    includeMainTypes: INCLUDE_FINDER_MAIN_TYPES
  });
}
const targetInfoBuilders = {
  grid: function(foundCpts, targetInfoList) {
    const xAxisModels = foundCpts.xAxisModels;
    const yAxisModels = foundCpts.yAxisModels;
    const gridModels = foundCpts.gridModels;
    const gridModelMap = createHashMap();
    const xAxesHas = {};
    const yAxesHas = {};
    if (!xAxisModels && !yAxisModels && !gridModels) {
      return;
    }
    each(xAxisModels, function(axisModel) {
      const gridModel = axisModel.axis.grid.model;
      gridModelMap.set(gridModel.id, gridModel);
      xAxesHas[gridModel.id] = true;
    });
    each(yAxisModels, function(axisModel) {
      const gridModel = axisModel.axis.grid.model;
      gridModelMap.set(gridModel.id, gridModel);
      yAxesHas[gridModel.id] = true;
    });
    each(gridModels, function(gridModel) {
      gridModelMap.set(gridModel.id, gridModel);
      xAxesHas[gridModel.id] = true;
      yAxesHas[gridModel.id] = true;
    });
    gridModelMap.each(function(gridModel) {
      const grid2 = gridModel.coordinateSystem;
      const cartesians = [];
      each(grid2.getCartesians(), function(cartesian, index) {
        if (indexOf(xAxisModels, cartesian.getAxis("x").model) >= 0 || indexOf(yAxisModels, cartesian.getAxis("y").model) >= 0) {
          cartesians.push(cartesian);
        }
      });
      targetInfoList.push({
        panelId: "grid--" + gridModel.id,
        gridModel,
        coordSysModel: gridModel,
        coordSys: cartesians[0],
        coordSyses: cartesians,
        getPanelRect: panelRectBuilders.grid,
        xAxisDeclared: xAxesHas[gridModel.id],
        yAxisDeclared: yAxesHas[gridModel.id]
      });
    });
  },
  geo: function(foundCpts, targetInfoList) {
    each(foundCpts.geoModels, function(geoModel) {
      const coordSys = geoModel.coordinateSystem;
      targetInfoList.push({
        panelId: "geo--" + geoModel.id,
        geoModel,
        coordSysModel: geoModel,
        coordSys,
        coordSyses: [coordSys],
        getPanelRect: panelRectBuilders.geo
      });
    });
  }
};
const targetInfoMatchers = [function(foundCpts, targetInfo) {
  const xAxisModel = foundCpts.xAxisModel;
  const yAxisModel = foundCpts.yAxisModel;
  let gridModel = foundCpts.gridModel;
  !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);
  !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);
  return gridModel && gridModel === targetInfo.gridModel;
}, function(foundCpts, targetInfo) {
  const geoModel = foundCpts.geoModel;
  return geoModel && geoModel === targetInfo.geoModel;
}];
const panelRectBuilders = {
  grid: function() {
    return this.coordSys.master.getRect().clone();
  },
  geo: function() {
    const coordSys = this.coordSys;
    const rect = coordSys.getBoundingRect().clone();
    rect.applyTransform(getTransform(coordSys));
    return rect;
  }
};
const coordConvert = {
  lineX: curry(axisConvert, 0),
  lineY: curry(axisConvert, 1),
  rect: function(to, coordSys, rangeOrCoordRange) {
    const xminymin = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][0], rangeOrCoordRange[1][0]]);
    const xmaxymax = coordSys[COORD_CONVERTS[to]]([rangeOrCoordRange[0][1], rangeOrCoordRange[1][1]]);
    const values = [formatMinMax([xminymin[0], xmaxymax[0]]), formatMinMax([xminymin[1], xmaxymax[1]])];
    return {
      values,
      xyMinMax: values
    };
  },
  polygon: function(to, coordSys, rangeOrCoordRange) {
    const xyMinMax = [[Infinity, -Infinity], [Infinity, -Infinity]];
    const values = map2(rangeOrCoordRange, function(item) {
      const p = coordSys[COORD_CONVERTS[to]](item);
      xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);
      xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);
      xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);
      xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);
      return p;
    });
    return {
      values,
      xyMinMax
    };
  }
};
function axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {
  if (__DEV__) {
    assert(coordSys.type === "cartesian2d", "lineX/lineY brush is available only in cartesian2d.");
  }
  const axis2 = coordSys.getAxis(["x", "y"][axisNameIndex]);
  const values = formatMinMax(map2([0, 1], function(i) {
    return to ? axis2.coordToData(axis2.toLocalCoord(rangeOrCoordRange[i])) : axis2.toGlobalCoord(axis2.dataToCoord(rangeOrCoordRange[i]));
  }));
  const xyMinMax = [];
  xyMinMax[axisNameIndex] = values;
  xyMinMax[1 - axisNameIndex] = [NaN, NaN];
  return {
    values,
    xyMinMax
  };
}
const diffProcessor = {
  lineX: curry(axisDiffProcessor, 0),
  lineY: curry(axisDiffProcessor, 1),
  rect: function(values, refer, scales) {
    return [[values[0][0] - scales[0] * refer[0][0], values[0][1] - scales[0] * refer[0][1]], [values[1][0] - scales[1] * refer[1][0], values[1][1] - scales[1] * refer[1][1]]];
  },
  polygon: function(values, refer, scales) {
    return map2(values, function(item, idx) {
      return [item[0] - scales[0] * refer[idx][0], item[1] - scales[1] * refer[idx][1]];
    });
  }
};
function axisDiffProcessor(axisNameIndex, values, refer, scales) {
  return [values[0] - scales[axisNameIndex] * refer[0], values[1] - scales[axisNameIndex] * refer[1]];
}
function getScales(xyMinMaxCurr, xyMinMaxOrigin) {
  const sizeCurr = getSize(xyMinMaxCurr);
  const sizeOrigin = getSize(xyMinMaxOrigin);
  const scales = [sizeCurr[0] / sizeOrigin[0], sizeCurr[1] / sizeOrigin[1]];
  isNaN(scales[0]) && (scales[0] = 1);
  isNaN(scales[1]) && (scales[1] = 1);
  return scales;
}
function getSize(xyMinMax) {
  return xyMinMax ? [xyMinMax[0][1] - xyMinMax[0][0], xyMinMax[1][1] - xyMinMax[1][0]] : [NaN, NaN];
}
const BrushTargetManager_default = BrushTargetManager4;

// src/component/dataZoom/history.ts
const each6 = each;
const inner8 = makeInner();
function push(ecModel, newSnapshot) {
  const storedSnapshots = getStoreSnapshots(ecModel);
  each6(newSnapshot, function(batchItem, dataZoomId) {
    let i = storedSnapshots.length - 1;
    for (; i >= 0; i--) {
      const snapshot = storedSnapshots[i];
      if (snapshot[dataZoomId]) {
        break;
      }
    }
    if (i < 0) {
      const dataZoomModel = ecModel.queryComponents({
        mainType: "dataZoom",
        subType: "select",
        id: dataZoomId
      })[0];
      if (dataZoomModel) {
        const percentRange = dataZoomModel.getPercentRange();
        storedSnapshots[0][dataZoomId] = {
          dataZoomId,
          start: percentRange[0],
          end: percentRange[1]
        };
      }
    }
  });
  storedSnapshots.push(newSnapshot);
}
function pop(ecModel) {
  const storedSnapshots = getStoreSnapshots(ecModel);
  const head = storedSnapshots[storedSnapshots.length - 1];
  storedSnapshots.length > 1 && storedSnapshots.pop();
  const snapshot = {};
  each6(head, function(batchItem, dataZoomId) {
    for (let i = storedSnapshots.length - 1; i >= 0; i--) {
      batchItem = storedSnapshots[i][dataZoomId];
      if (batchItem) {
        snapshot[dataZoomId] = batchItem;
        break;
      }
    }
  });
  return snapshot;
}
function clear2(ecModel) {
  inner8(ecModel).snapshots = null;
}
function count(ecModel) {
  return getStoreSnapshots(ecModel).length;
}
function getStoreSnapshots(ecModel) {
  const store = inner8(ecModel);
  if (!store.snapshots) {
    store.snapshots = [{}];
  }
  return store.snapshots;
}

// src/component/dataZoom/typeDefaulter.ts
Component_default.registerSubTypeDefaulter("dataZoom", function() {
  return "slider";
});

// src/component/dataZoom/helper.ts
const DATA_ZOOM_AXIS_DIMENSIONS = ["x", "y", "radius", "angle", "single"];
const SERIES_COORDS = ["cartesian2d", "polar", "singleAxis"];
function isCoordSupported(seriesModel) {
  const coordType = seriesModel.get("coordinateSystem");
  return indexOf(SERIES_COORDS, coordType) >= 0;
}
function getAxisMainType(axisDim) {
  if (__DEV__) {
    assert(axisDim);
  }
  return axisDim + "Axis";
}
function findEffectedDataZooms(ecModel, payload) {
  const axisRecords = createHashMap();
  const effectedModels = [];
  const effectedModelMap = createHashMap();
  ecModel.eachComponent({
    mainType: "dataZoom",
    query: payload
  }, function(dataZoomModel) {
    if (!effectedModelMap.get(dataZoomModel.uid)) {
      addToEffected(dataZoomModel);
    }
  });
  let foundNewLink;
  do {
    foundNewLink = false;
    ecModel.eachComponent("dataZoom", processSingle);
  } while (foundNewLink);
  function processSingle(dataZoomModel) {
    if (!effectedModelMap.get(dataZoomModel.uid) && isLinked(dataZoomModel)) {
      addToEffected(dataZoomModel);
      foundNewLink = true;
    }
  }
  function addToEffected(dataZoom2) {
    effectedModelMap.set(dataZoom2.uid, true);
    effectedModels.push(dataZoom2);
    markAxisControlled(dataZoom2);
  }
  function isLinked(dataZoomModel) {
    let isLink = false;
    dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
      const axisIdxArr = axisRecords.get(axisDim);
      if (axisIdxArr && axisIdxArr[axisIndex]) {
        isLink = true;
      }
    });
    return isLink;
  }
  function markAxisControlled(dataZoomModel) {
    dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
      (axisRecords.get(axisDim) || axisRecords.set(axisDim, []))[axisIndex] = true;
    });
  }
  return effectedModels;
}
function collectReferCoordSysModelInfo(dataZoomModel) {
  const ecModel = dataZoomModel.ecModel;
  const coordSysInfoWrap = {
    infoList: [],
    infoMap: createHashMap()
  };
  dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
    const axisModel = ecModel.getComponent(getAxisMainType(axisDim), axisIndex);
    if (!axisModel) {
      return;
    }
    const coordSysModel = axisModel.getCoordSysModel();
    if (!coordSysModel) {
      return;
    }
    const coordSysUid = coordSysModel.uid;
    let coordSysInfo = coordSysInfoWrap.infoMap.get(coordSysUid);
    if (!coordSysInfo) {
      coordSysInfo = {
        model: coordSysModel,
        axisModels: []
      };
      coordSysInfoWrap.infoList.push(coordSysInfo);
      coordSysInfoWrap.infoMap.set(coordSysUid, coordSysInfo);
    }
    coordSysInfo.axisModels.push(axisModel);
  });
  return coordSysInfoWrap;
}

// src/component/dataZoom/DataZoomModel.ts
class DataZoomAxisInfo {
  constructor() {
    this.indexList = [];
    this.indexMap = [];
  }
  add(axisCmptIdx) {
    this.indexList.push(axisCmptIdx);
    this.indexMap[axisCmptIdx] = true;
  }
}
class DataZoomModel3 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = DataZoomModel3.type;
    this._autoThrottle = true;
    this._noTarget = true;
    this._rangePropMode = ["percent", "percent"];
  }
  init(option, parentModel, ecModel) {
    const inputRawOption = retrieveRawOption(option);
    this.settledOption = inputRawOption;
    this.mergeDefaultAndTheme(option, ecModel);
    this._doInit(inputRawOption);
  }
  mergeOption(newOption) {
    const inputRawOption = retrieveRawOption(newOption);
    merge(this.option, newOption, true);
    merge(this.settledOption, inputRawOption, true);
    this._doInit(inputRawOption);
  }
  _doInit(inputRawOption) {
    const thisOption = this.option;
    if (!env_default.canvasSupported) {
      thisOption.realtime = false;
    }
    this._setDefaultThrottle(inputRawOption);
    this._updateRangeUse(inputRawOption);
    const settledOption = this.settledOption;
    each([["start", "startValue"], ["end", "endValue"]], function(names, index) {
      if (this._rangePropMode[index] === "value") {
        thisOption[names[0]] = settledOption[names[0]] = null;
      }
    }, this);
    this._resetTarget();
  }
  _resetTarget() {
    const optionOrient = this.get("orient", true);
    const targetAxisIndexMap = this._targetAxisInfoMap = createHashMap();
    const hasAxisSpecified = this._fillSpecifiedTargetAxis(targetAxisIndexMap);
    if (hasAxisSpecified) {
      this._orient = optionOrient || this._makeAutoOrientByTargetAxis();
    } else {
      this._orient = optionOrient || "horizontal";
      this._fillAutoTargetAxisByOrient(targetAxisIndexMap, this._orient);
    }
    this._noTarget = true;
    targetAxisIndexMap.each(function(axisInfo) {
      if (axisInfo.indexList.length) {
        this._noTarget = false;
      }
    }, this);
  }
  _fillSpecifiedTargetAxis(targetAxisIndexMap) {
    let hasAxisSpecified = false;
    each(DATA_ZOOM_AXIS_DIMENSIONS, function(axisDim) {
      const refering = this.getReferringComponents(getAxisMainType(axisDim), MULTIPLE_REFERRING);
      if (!refering.specified) {
        return;
      }
      hasAxisSpecified = true;
      const axisInfo = new DataZoomAxisInfo();
      each(refering.models, function(axisModel) {
        axisInfo.add(axisModel.componentIndex);
      });
      targetAxisIndexMap.set(axisDim, axisInfo);
    }, this);
    return hasAxisSpecified;
  }
  _fillAutoTargetAxisByOrient(targetAxisIndexMap, orient) {
    const ecModel = this.ecModel;
    let needAuto = true;
    if (needAuto) {
      const axisDim = orient === "vertical" ? "y" : "x";
      const axisModels = ecModel.findComponents({
        mainType: axisDim + "Axis"
      });
      setParallelAxis(axisModels, axisDim);
    }
    if (needAuto) {
      const axisModels = ecModel.findComponents({
        mainType: "singleAxis",
        filter: (axisModel) => axisModel.get("orient", true) === orient
      });
      setParallelAxis(axisModels, "single");
    }
    function setParallelAxis(axisModels, axisDim) {
      const axisModel = axisModels[0];
      if (!axisModel) {
        return;
      }
      const axisInfo = new DataZoomAxisInfo();
      axisInfo.add(axisModel.componentIndex);
      targetAxisIndexMap.set(axisDim, axisInfo);
      needAuto = false;
      if (axisDim === "x" || axisDim === "y") {
        const gridModel = axisModel.getReferringComponents("grid", SINGLE_REFERRING).models[0];
        gridModel && each(axisModels, function(axModel) {
          if (axisModel.componentIndex !== axModel.componentIndex && gridModel === axModel.getReferringComponents("grid", SINGLE_REFERRING).models[0]) {
            axisInfo.add(axModel.componentIndex);
          }
        });
      }
    }
    if (needAuto) {
      each(DATA_ZOOM_AXIS_DIMENSIONS, function(axisDim) {
        if (needAuto) {
          return;
        }
        const axisModels = ecModel.findComponents({
          mainType: getAxisMainType(axisDim),
          filter: (axisModel) => axisModel.get("type", true) === "category"
        });
        if (axisModels[0]) {
          const axisInfo = new DataZoomAxisInfo();
          axisInfo.add(axisModels[0].componentIndex);
          targetAxisIndexMap.set(axisDim, axisInfo);
        }
      }, this);
    }
  }
  _makeAutoOrientByTargetAxis() {
    let dim;
    this.eachTargetAxis(function(axisDim) {
      !dim && (dim = axisDim);
    }, this);
    return dim === "y" ? "vertical" : "horizontal";
  }
  _setDefaultThrottle(inputRawOption) {
    if (inputRawOption.hasOwnProperty("throttle")) {
      this._autoThrottle = false;
    }
    if (this._autoThrottle) {
      const globalOption = this.ecModel.option;
      this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
    }
  }
  _updateRangeUse(inputRawOption) {
    const rangePropMode = this._rangePropMode;
    const rangeModeInOption = this.get("rangeMode");
    each([["start", "startValue"], ["end", "endValue"]], function(names, index) {
      const percentSpecified = inputRawOption[names[0]] != null;
      const valueSpecified = inputRawOption[names[1]] != null;
      if (percentSpecified && !valueSpecified) {
        rangePropMode[index] = "percent";
      } else if (!percentSpecified && valueSpecified) {
        rangePropMode[index] = "value";
      } else if (rangeModeInOption) {
        rangePropMode[index] = rangeModeInOption[index];
      } else if (percentSpecified) {
        rangePropMode[index] = "percent";
      }
    });
  }
  noTarget() {
    return this._noTarget;
  }
  getFirstTargetAxisModel() {
    let firstAxisModel;
    this.eachTargetAxis(function(axisDim, axisIndex) {
      if (firstAxisModel == null) {
        firstAxisModel = this.ecModel.getComponent(getAxisMainType(axisDim), axisIndex);
      }
    }, this);
    return firstAxisModel;
  }
  eachTargetAxis(callback, context) {
    this._targetAxisInfoMap.each(function(axisInfo, axisDim) {
      each(axisInfo.indexList, function(axisIndex) {
        callback.call(context, axisDim, axisIndex);
      });
    });
  }
  getAxisProxy(axisDim, axisIndex) {
    const axisModel = this.getAxisModel(axisDim, axisIndex);
    if (axisModel) {
      return axisModel.__dzAxisProxy;
    }
  }
  getAxisModel(axisDim, axisIndex) {
    if (__DEV__) {
      assert(axisDim && axisIndex != null);
    }
    const axisInfo = this._targetAxisInfoMap.get(axisDim);
    if (axisInfo && axisInfo.indexMap[axisIndex]) {
      return this.ecModel.getComponent(getAxisMainType(axisDim), axisIndex);
    }
  }
  setRawRange(opt) {
    const thisOption = this.option;
    const settledOption = this.settledOption;
    each([["start", "startValue"], ["end", "endValue"]], function(names) {
      if (opt[names[0]] != null || opt[names[1]] != null) {
        thisOption[names[0]] = settledOption[names[0]] = opt[names[0]];
        thisOption[names[1]] = settledOption[names[1]] = opt[names[1]];
      }
    }, this);
    this._updateRangeUse(opt);
  }
  setCalculatedRange(opt) {
    const option = this.option;
    each(["start", "startValue", "end", "endValue"], function(name) {
      option[name] = opt[name];
    });
  }
  getPercentRange() {
    const axisProxy = this.findRepresentativeAxisProxy();
    if (axisProxy) {
      return axisProxy.getDataPercentWindow();
    }
  }
  getValueRange(axisDim, axisIndex) {
    if (axisDim == null && axisIndex == null) {
      const axisProxy = this.findRepresentativeAxisProxy();
      if (axisProxy) {
        return axisProxy.getDataValueWindow();
      }
    } else {
      return this.getAxisProxy(axisDim, axisIndex).getDataValueWindow();
    }
  }
  findRepresentativeAxisProxy(axisModel) {
    if (axisModel) {
      return axisModel.__dzAxisProxy;
    }
    let firstProxy;
    const axisDimList = this._targetAxisInfoMap.keys();
    for (let i = 0; i < axisDimList.length; i++) {
      const axisDim = axisDimList[i];
      const axisInfo = this._targetAxisInfoMap.get(axisDim);
      for (let j = 0; j < axisInfo.indexList.length; j++) {
        const proxy = this.getAxisProxy(axisDim, axisInfo.indexList[j]);
        if (proxy.hostedBy(this)) {
          return proxy;
        }
        if (!firstProxy) {
          firstProxy = proxy;
        }
      }
    }
    return firstProxy;
  }
  getRangePropMode() {
    return this._rangePropMode.slice();
  }
  getOrient() {
    if (__DEV__) {
      assert(this._orient);
    }
    return this._orient;
  }
}
DataZoomModel3.type = "dataZoom";
DataZoomModel3.dependencies = ["xAxis", "yAxis", "radiusAxis", "angleAxis", "singleAxis", "series", "toolbox"];
DataZoomModel3.defaultOption = {
  zlevel: 0,
  z: 4,
  filterMode: "filter",
  start: 0,
  end: 100
};
function retrieveRawOption(option) {
  const ret = {};
  each(["start", "end", "startValue", "endValue", "throttle"], function(name) {
    option.hasOwnProperty(name) && (ret[name] = option[name]);
  });
  return ret;
}
const DataZoomModel_default = DataZoomModel3;

// src/component/dataZoom/DataZoomView.ts
class DataZoomView extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = DataZoomView.type;
  }
  render(dataZoomModel, ecModel, api, payload) {
    this.dataZoomModel = dataZoomModel;
    this.ecModel = ecModel;
    this.api = api;
  }
}
DataZoomView.type = "dataZoom";
Component_default2.registerClass(DataZoomView);
const DataZoomView_default = DataZoomView;

// src/component/dataZoom/SelectZoomModel.ts
class SelectDataZoomModel extends DataZoomModel_default {
  constructor() {
    super(...arguments);
    this.type = SelectDataZoomModel.type;
  }
}
SelectDataZoomModel.type = "dataZoom.select";
Component_default.registerClass(SelectDataZoomModel);

// src/component/dataZoom/SelectZoomView.ts
class SelectDataZoomView extends DataZoomView_default {
  constructor() {
    super(...arguments);
    this.type = SelectDataZoomView.type;
  }
}
SelectDataZoomView.type = "dataZoom.select";
Component_default2.registerClass(SelectDataZoomView);

// src/component/dataZoom/AxisProxy.ts
const each5 = each;
const asc = asc2;
class AxisProxy {
  constructor(dimName, axisIndex, dataZoomModel, ecModel) {
    this._dimName = dimName;
    this._axisIndex = axisIndex;
    this.ecModel = ecModel;
    this._dataZoomModel = dataZoomModel;
  }
  hostedBy(dataZoomModel) {
    return this._dataZoomModel === dataZoomModel;
  }
  getDataValueWindow() {
    return this._valueWindow.slice();
  }
  getDataPercentWindow() {
    return this._percentWindow.slice();
  }
  getTargetSeriesModels() {
    const seriesModels = [];
    this.ecModel.eachSeries(function(seriesModel) {
      if (isCoordSupported(seriesModel)) {
        const axisMainType = getAxisMainType(this._dimName);
        const axisModel = seriesModel.getReferringComponents(axisMainType, SINGLE_REFERRING).models[0];
        if (axisModel && this._axisIndex === axisModel.componentIndex) {
          seriesModels.push(seriesModel);
        }
      }
    }, this);
    return seriesModels;
  }
  getAxisModel() {
    return this.ecModel.getComponent(this._dimName + "Axis", this._axisIndex);
  }
  getMinMaxSpan() {
    return clone2(this._minMaxSpan);
  }
  calculateDataWindow(opt) {
    const dataExtent = this._dataExtent;
    const axisModel = this.getAxisModel();
    const scale4 = axisModel.axis.scale;
    const rangePropMode = this._dataZoomModel.getRangePropMode();
    const percentExtent = [0, 100];
    const percentWindow = [];
    const valueWindow = [];
    let hasPropModeValue;
    each5(["start", "end"], function(prop, idx) {
      let boundPercent = opt[prop];
      let boundValue = opt[prop + "Value"];
      if (rangePropMode[idx] === "percent") {
        boundPercent == null && (boundPercent = percentExtent[idx]);
        boundValue = scale4.parse(linearMap(boundPercent, percentExtent, dataExtent));
      } else {
        hasPropModeValue = true;
        boundValue = boundValue == null ? dataExtent[idx] : scale4.parse(boundValue);
        boundPercent = linearMap(boundValue, dataExtent, percentExtent);
      }
      valueWindow[idx] = boundValue;
      percentWindow[idx] = boundPercent;
    });
    asc(valueWindow);
    asc(percentWindow);
    const spans = this._minMaxSpan;
    hasPropModeValue ? restrictSet(valueWindow, percentWindow, dataExtent, percentExtent, false) : restrictSet(percentWindow, valueWindow, percentExtent, dataExtent, true);
    function restrictSet(fromWindow, toWindow, fromExtent, toExtent, toValue) {
      const suffix = toValue ? "Span" : "ValueSpan";
      sliderMove_default(0, fromWindow, fromExtent, "all", spans["min" + suffix], spans["max" + suffix]);
      for (let i = 0; i < 2; i++) {
        toWindow[i] = linearMap(fromWindow[i], fromExtent, toExtent, true);
        toValue && (toWindow[i] = scale4.parse(toWindow[i]));
      }
    }
    return {
      valueWindow,
      percentWindow
    };
  }
  reset(dataZoomModel) {
    if (dataZoomModel !== this._dataZoomModel) {
      return;
    }
    const targetSeries = this.getTargetSeriesModels();
    this._dataExtent = calculateDataExtent(this, this._dimName, targetSeries);
    this._updateMinMaxSpan();
    const dataWindow = this.calculateDataWindow(dataZoomModel.settledOption);
    this._valueWindow = dataWindow.valueWindow;
    this._percentWindow = dataWindow.percentWindow;
    this._setAxisModel();
  }
  filterData(dataZoomModel, api) {
    if (dataZoomModel !== this._dataZoomModel) {
      return;
    }
    const axisDim = this._dimName;
    const seriesModels = this.getTargetSeriesModels();
    const filterMode = dataZoomModel.get("filterMode");
    const valueWindow = this._valueWindow;
    if (filterMode === "none") {
      return;
    }
    each5(seriesModels, function(seriesModel) {
      let seriesData = seriesModel.getData();
      const dataDims = seriesData.mapDimensionsAll(axisDim);
      if (!dataDims.length) {
        return;
      }
      if (filterMode === "weakFilter") {
        seriesData.filterSelf(function(dataIndex) {
          let leftOut;
          let rightOut;
          let hasValue;
          for (let i = 0; i < dataDims.length; i++) {
            const value = seriesData.get(dataDims[i], dataIndex);
            const thisHasValue = !isNaN(value);
            const thisLeftOut = value < valueWindow[0];
            const thisRightOut = value > valueWindow[1];
            if (thisHasValue && !thisLeftOut && !thisRightOut) {
              return true;
            }
            thisHasValue && (hasValue = true);
            thisLeftOut && (leftOut = true);
            thisRightOut && (rightOut = true);
          }
          return hasValue && leftOut && rightOut;
        });
      } else {
        each5(dataDims, function(dim) {
          if (filterMode === "empty") {
            seriesModel.setData(seriesData = seriesData.map(dim, function(value) {
              return !isInWindow(value) ? NaN : value;
            }));
          } else {
            const range = {};
            range[dim] = valueWindow;
            seriesData.selectRange(range);
          }
        });
      }
      each5(dataDims, function(dim) {
        seriesData.setApproximateExtent(valueWindow, dim);
      });
    });
    function isInWindow(value) {
      return value >= valueWindow[0] && value <= valueWindow[1];
    }
  }
  _updateMinMaxSpan() {
    const minMaxSpan = this._minMaxSpan = {};
    const dataZoomModel = this._dataZoomModel;
    const dataExtent = this._dataExtent;
    each5(["min", "max"], function(minMax) {
      let percentSpan = dataZoomModel.get(minMax + "Span");
      let valueSpan = dataZoomModel.get(minMax + "ValueSpan");
      valueSpan != null && (valueSpan = this.getAxisModel().axis.scale.parse(valueSpan));
      if (valueSpan != null) {
        percentSpan = linearMap(dataExtent[0] + valueSpan, dataExtent, [0, 100], true);
      } else if (percentSpan != null) {
        valueSpan = linearMap(percentSpan, [0, 100], dataExtent, true) - dataExtent[0];
      }
      minMaxSpan[minMax + "Span"] = percentSpan;
      minMaxSpan[minMax + "ValueSpan"] = valueSpan;
    }, this);
  }
  _setAxisModel() {
    const axisModel = this.getAxisModel();
    const percentWindow = this._percentWindow;
    const valueWindow = this._valueWindow;
    if (!percentWindow) {
      return;
    }
    let precision = getPixelPrecision(valueWindow, [0, 500]);
    precision = Math.min(precision, 20);
    const rawExtentInfo = axisModel.axis.scale.rawExtentInfo;
    if (percentWindow[0] !== 0) {
      rawExtentInfo.setDeterminedMinMax("min", +valueWindow[0].toFixed(precision));
    }
    if (percentWindow[1] !== 100) {
      rawExtentInfo.setDeterminedMinMax("max", +valueWindow[1].toFixed(precision));
    }
    rawExtentInfo.freeze();
  }
}
function calculateDataExtent(axisProxy, axisDim, seriesModels) {
  const dataExtent = [Infinity, -Infinity];
  each5(seriesModels, function(seriesModel) {
    unionAxisExtentFromData(dataExtent, seriesModel.getData(), axisDim);
  });
  const axisModel = axisProxy.getAxisModel();
  const rawExtentResult = ensureScaleRawExtentInfo(axisModel.axis.scale, axisModel, dataExtent).calculate();
  return [rawExtentResult.min, rawExtentResult.max];
}
const AxisProxy_default = AxisProxy;

// src/component/dataZoom/dataZoomProcessor.ts
registerProcessor(PRIORITY.PROCESSOR.FILTER, {
  getTargetSeries: function(ecModel) {
    function eachAxisModel(cb) {
      ecModel.eachComponent("dataZoom", function(dataZoomModel) {
        dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
          const axisModel = ecModel.getComponent(getAxisMainType(axisDim), axisIndex);
          cb(axisDim, axisIndex, axisModel, dataZoomModel);
        });
      });
    }
    eachAxisModel(function(axisDim, axisIndex, axisModel, dataZoomModel) {
      axisModel.__dzAxisProxy = null;
    });
    const proxyList = [];
    eachAxisModel(function(axisDim, axisIndex, axisModel, dataZoomModel) {
      if (!axisModel.__dzAxisProxy) {
        axisModel.__dzAxisProxy = new AxisProxy_default(axisDim, axisIndex, dataZoomModel, ecModel);
        proxyList.push(axisModel.__dzAxisProxy);
      }
    });
    const seriesModelMap = createHashMap();
    each(proxyList, function(axisProxy) {
      each(axisProxy.getTargetSeriesModels(), function(seriesModel) {
        seriesModelMap.set(seriesModel.uid, seriesModel);
      });
    });
    return seriesModelMap;
  },
  overallReset: function(ecModel, api) {
    ecModel.eachComponent("dataZoom", function(dataZoomModel) {
      dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
        dataZoomModel.getAxisProxy(axisDim, axisIndex).reset(dataZoomModel);
      });
      dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
        dataZoomModel.getAxisProxy(axisDim, axisIndex).filterData(dataZoomModel, api);
      });
    });
    ecModel.eachComponent("dataZoom", function(dataZoomModel) {
      const axisProxy = dataZoomModel.findRepresentativeAxisProxy();
      if (axisProxy) {
        const percentRange = axisProxy.getDataPercentWindow();
        const valueRange = axisProxy.getDataValueWindow();
        dataZoomModel.setCalculatedRange({
          start: percentRange[0],
          end: percentRange[1],
          startValue: valueRange[0],
          endValue: valueRange[1]
        });
      }
    });
  }
});

// src/component/dataZoom/dataZoomAction.ts
registerAction("dataZoom", function(payload, ecModel) {
  const effectedModels = findEffectedDataZooms(ecModel, payload);
  each(effectedModels, function(dataZoomModel) {
    dataZoomModel.setRawRange({
      start: payload.start,
      end: payload.end,
      startValue: payload.startValue,
      endValue: payload.endValue
    });
  });
});

// src/component/dataZoomSelect.ts

// src/component/toolbox/feature/DataZoom.ts
const dataZoomLang = lang_default.toolbox.dataZoom;
const each8 = each;
const DATA_ZOOM_ID_BASE = makeInternalComponentId("toolbox-dataZoom_");
class DataZoomFeature extends ToolboxFeature {
  render(featureModel, ecModel, api, payload) {
    if (!this.brushController) {
      this.brushController = new BrushController_default(api.getZr());
      this.brushController.on("brush", bind(this._onBrush, this)).mount();
    }
    updateZoomBtnStatus(featureModel, ecModel, this, payload, api);
    updateBackBtnStatus(featureModel, ecModel);
  }
  onclick(ecModel, api, type) {
    handlers2[type].call(this);
  }
  remove(ecModel, api) {
    this.brushController.unmount();
  }
  dispose(ecModel, api) {
    this.brushController.dispose();
  }
  _onBrush(eventParam) {
    const areas = eventParam.areas;
    if (!eventParam.isEnd || !areas.length) {
      return;
    }
    const snapshot = {};
    const ecModel = this.ecModel;
    this.brushController.updateCovers([]);
    const brushTargetManager = new BrushTargetManager_default(makeAxisFinder(this.model), ecModel, {
      include: ["grid"]
    });
    brushTargetManager.matchOutputRanges(areas, ecModel, function(area, coordRange, coordSys) {
      if (coordSys.type !== "cartesian2d") {
        return;
      }
      const brushType = area.brushType;
      if (brushType === "rect") {
        setBatch("x", coordSys, coordRange[0]);
        setBatch("y", coordSys, coordRange[1]);
      } else {
        setBatch({
          lineX: "x",
          lineY: "y"
        }[brushType], coordSys, coordRange);
      }
    });
    push(ecModel, snapshot);
    this._dispatchZoomAction(snapshot);
    function setBatch(dimName, coordSys, minMax) {
      const axis2 = coordSys.getAxis(dimName);
      const axisModel = axis2.model;
      const dataZoomModel = findDataZoom(dimName, axisModel, ecModel);
      const minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();
      if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) {
        minMax = sliderMove_default(0, minMax.slice(), axis2.scale.getExtent(), 0, minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan);
      }
      dataZoomModel && (snapshot[dataZoomModel.id] = {
        dataZoomId: dataZoomModel.id,
        startValue: minMax[0],
        endValue: minMax[1]
      });
    }
    function findDataZoom(dimName, axisModel, ecModel2) {
      let found;
      ecModel2.eachComponent({
        mainType: "dataZoom",
        subType: "select"
      }, function(dzModel) {
        const has3 = dzModel.getAxisModel(dimName, axisModel.componentIndex);
        has3 && (found = dzModel);
      });
      return found;
    }
  }
  _dispatchZoomAction(snapshot) {
    const batch = [];
    each8(snapshot, function(batchItem, dataZoomId) {
      batch.push(clone2(batchItem));
    });
    batch.length && this.api.dispatchAction({
      type: "dataZoom",
      from: this.uid,
      batch
    });
  }
}
DataZoomFeature.defaultOption = {
  show: true,
  filterMode: "filter",
  icon: {
    zoom: "M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1",
    back: "M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26"
  },
  title: clone2(dataZoomLang.title)
};
const handlers2 = {
  zoom: function() {
    const nextActive = !this.isZoomActive;
    this.api.dispatchAction({
      type: "takeGlobalCursor",
      key: "dataZoomSelect",
      dataZoomSelectActive: nextActive
    });
  },
  back: function() {
    this._dispatchZoomAction(pop(this.ecModel));
  }
};
function makeAxisFinder(dzFeatureModel) {
  const setting = {
    xAxisIndex: dzFeatureModel.get("xAxisIndex", true),
    yAxisIndex: dzFeatureModel.get("yAxisIndex", true),
    xAxisId: dzFeatureModel.get("xAxisId", true),
    yAxisId: dzFeatureModel.get("yAxisId", true)
  };
  if (setting.xAxisIndex == null && setting.yAxisIndex == null && setting.xAxisId == null && setting.yAxisId == null) {
    setting.xAxisIndex = setting.yAxisIndex = "all";
  }
  return setting;
}
function updateBackBtnStatus(featureModel, ecModel) {
  featureModel.setIconStatus("back", count(ecModel) > 1 ? "emphasis" : "normal");
}
function updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {
  let zoomActive = view.isZoomActive;
  if (payload && payload.type === "takeGlobalCursor") {
    zoomActive = payload.key === "dataZoomSelect" ? payload.dataZoomSelectActive : false;
  }
  view.isZoomActive = zoomActive;
  featureModel.setIconStatus("zoom", zoomActive ? "emphasis" : "normal");
  const brushTargetManager = new BrushTargetManager_default(makeAxisFinder(featureModel), ecModel, {
    include: ["grid"]
  });
  const panels = brushTargetManager.makePanelOpts(api, function(targetInfo) {
    return targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared ? "lineX" : !targetInfo.xAxisDeclared && targetInfo.yAxisDeclared ? "lineY" : "rect";
  });
  view.brushController.setPanels(panels).enableBrush(zoomActive && panels.length ? {
    brushType: "auto",
    brushStyle: {
      lineWidth: 0,
      fill: "rgba(0,0,0,0.2)"
    }
  } : false);
}
registerFeature("dataZoom", DataZoomFeature);
registerInternalOptionCreator("dataZoom", function(ecModel) {
  const toolboxModel = ecModel.getComponent("toolbox", 0);
  if (!toolboxModel) {
    return;
  }
  const dzFeatureModel = toolboxModel.getModel(["feature", "dataZoom"]);
  const dzOptions = [];
  const finder = makeAxisFinder(dzFeatureModel);
  const finderResult = parseFinder(ecModel, finder);
  each8(finderResult.xAxisModels, (axisModel) => buildInternalOptions(axisModel, "xAxis", "xAxisIndex"));
  each8(finderResult.yAxisModels, (axisModel) => buildInternalOptions(axisModel, "yAxis", "yAxisIndex"));
  function buildInternalOptions(axisModel, axisMainType, axisIndexPropName) {
    const axisIndex = axisModel.componentIndex;
    const newOpt = {
      type: "select",
      $fromToolbox: true,
      filterMode: dzFeatureModel.get("filterMode", true) || "filter",
      id: DATA_ZOOM_ID_BASE + axisMainType + axisIndex
    };
    newOpt[axisIndexPropName] = axisIndex;
    dzOptions.push(newOpt);
  }
  return dzOptions;
});

// src/component/toolbox/feature/Restore.ts
const restoreLang = lang_default.toolbox.restore;
class RestoreOption extends ToolboxFeature {
  onclick(ecModel, api) {
    clear2(ecModel);
    api.dispatchAction({
      type: "restore",
      from: this.uid
    });
  }
}
RestoreOption.defaultOption = {
  show: true,
  icon: "M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5",
  title: restoreLang.title
};
registerFeature("restore", RestoreOption);
registerAction({
  type: "restore",
  event: "restore",
  update: "prepareAndUpdate"
}, function(payload, ecModel) {
  ecModel.resetOption("recreate");
});

// src/component/toolbox.ts

// src/component/tooltip/TooltipModel.ts
class TooltipModel6 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = TooltipModel6.type;
  }
}
TooltipModel6.type = "tooltip";
TooltipModel6.dependencies = ["axisPointer"];
TooltipModel6.defaultOption = {
  zlevel: 0,
  z: 60,
  show: true,
  showContent: true,
  trigger: "item",
  triggerOn: "mousemove|click",
  alwaysShowContent: false,
  displayMode: "single",
  renderMode: "auto",
  confine: false,
  showDelay: 0,
  hideDelay: 100,
  transitionDuration: 0.4,
  enterable: false,
  backgroundColor: "rgba(50,50,50,0.7)",
  borderColor: "#333",
  borderRadius: 4,
  borderWidth: 0,
  padding: 5,
  extraCssText: "",
  axisPointer: {
    type: "line",
    axis: "auto",
    animation: "auto",
    animationDurationUpdate: 200,
    animationEasingUpdate: "exponentialOut",
    crossStyle: {
      color: "#999",
      width: 1,
      type: "dashed",
      textStyle: {}
    }
  },
  textStyle: {
    color: "#fff",
    fontSize: 14
  }
};
Component_default.registerClass(TooltipModel6);

// src/component/tooltip/TooltipHTMLContent.ts
const each9 = each;
const toCamelCase = toCamelCase2;
const vendors = ["", "-webkit-", "-moz-", "-o-"];
const gCssText = "position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;";
function assembleTransition(duration) {
  const transitionCurve = "cubic-bezier(0.23, 1, 0.32, 1)";
  const transitionText = "left " + duration + "s " + transitionCurve + ",top " + duration + "s " + transitionCurve;
  return map2(vendors, function(vendorPrefix) {
    return vendorPrefix + "transition:" + transitionText;
  }).join(";");
}
function assembleFont(textStyleModel) {
  const cssText = [];
  const fontSize = textStyleModel.get("fontSize");
  const color8 = textStyleModel.getTextColor();
  color8 && cssText.push("color:" + color8);
  cssText.push("font:" + textStyleModel.getFont());
  fontSize && cssText.push("line-height:" + Math.round(fontSize * 3 / 2) + "px");
  each9(["decoration", "align"], function(name) {
    const val = textStyleModel.get(name);
    val && cssText.push("text-" + name + ":" + val);
  });
  return cssText.join(";");
}
function assembleCssText(tooltipModel) {
  const cssText = [];
  const transitionDuration = tooltipModel.get("transitionDuration");
  const backgroundColor = tooltipModel.get("backgroundColor");
  const textStyleModel = tooltipModel.getModel("textStyle");
  const padding = tooltipModel.get("padding");
  transitionDuration && cssText.push(assembleTransition(transitionDuration));
  if (backgroundColor) {
    if (env_default.canvasSupported) {
      cssText.push("background-Color:" + backgroundColor);
    } else {
      cssText.push("background-Color:#" + toHex(backgroundColor));
      cssText.push("filter:alpha(opacity=70)");
    }
  }
  each9(["width", "color", "radius"], function(name) {
    const borderName = "border-" + name;
    const camelCase = toCamelCase(borderName);
    const val = tooltipModel.get(camelCase);
    val != null && cssText.push(borderName + ":" + val + (name === "color" ? "" : "px"));
  });
  cssText.push(assembleFont(textStyleModel));
  if (padding != null) {
    cssText.push("padding:" + normalizeCssArray2(padding).join("px ") + "px");
  }
  return cssText.join(";") + ";";
}
function makeStyleCoord(out2, zr, appendToBody, zrX, zrY) {
  const zrPainter = zr && zr.painter;
  if (appendToBody) {
    const zrViewportRoot = zrPainter && zrPainter.getViewportRoot();
    if (zrViewportRoot) {
      transformLocalCoord(out2, zrViewportRoot, document.body, zrX, zrY);
    }
  } else {
    out2[0] = zrX;
    out2[1] = zrY;
    const viewportRootOffset = zrPainter && zrPainter.getViewportRootOffset();
    if (viewportRootOffset) {
      out2[0] += viewportRootOffset.offsetLeft;
      out2[1] += viewportRootOffset.offsetTop;
    }
  }
}
class TooltipHTMLContent {
  constructor(container, api, opt) {
    this._show = false;
    this._styleCoord = [0, 0];
    this._enterable = true;
    if (env_default.wxa) {
      return null;
    }
    const el = document.createElement("div");
    el.domBelongToZr = true;
    this.el = el;
    const zr = this._zr = api.getZr();
    const appendToBody = this._appendToBody = opt && opt.appendToBody;
    makeStyleCoord(this._styleCoord, zr, appendToBody, api.getWidth() / 2, api.getHeight() / 2);
    if (appendToBody) {
      document.body.appendChild(el);
    } else {
      container.appendChild(el);
    }
    this._container = container;
    const self2 = this;
    el.onmouseenter = function() {
      if (self2._enterable) {
        clearTimeout(self2._hideTimeout);
        self2._show = true;
      }
      self2._inContent = true;
    };
    el.onmousemove = function(e) {
      e = e || window.event;
      if (!self2._enterable) {
        const handler = zr.handler;
        const zrViewportRoot = zr.painter.getViewportRoot();
        normalizeEvent(zrViewportRoot, e, true);
        handler.dispatch("mousemove", e);
      }
    };
    el.onmouseleave = function() {
      if (self2._enterable) {
        if (self2._show) {
          self2.hideLater(self2._hideDelay);
        }
      }
      self2._inContent = false;
    };
  }
  update() {
    const container = this._container;
    const stl = container.currentStyle || document.defaultView.getComputedStyle(container);
    const domStyle = container.style;
    if (domStyle.position !== "absolute" && stl.position !== "absolute") {
      domStyle.position = "relative";
    }
  }
  show(tooltipModel) {
    clearTimeout(this._hideTimeout);
    const el = this.el;
    const styleCoord = this._styleCoord;
    el.style.cssText = gCssText + assembleCssText(tooltipModel) + ";left:" + styleCoord[0] + "px;top:" + styleCoord[1] + "px;" + (tooltipModel.get("extraCssText") || "");
    el.style.display = el.innerHTML ? "block" : "none";
    el.style.pointerEvents = this._enterable ? "auto" : "none";
    this._show = true;
  }
  setContent(content) {
    this.el.innerHTML = content == null ? "" : content;
  }
  setEnterable(enterable) {
    this._enterable = enterable;
  }
  getSize() {
    const el = this.el;
    return [el.clientWidth, el.clientHeight];
  }
  moveTo(zrX, zrY) {
    const styleCoord = this._styleCoord;
    makeStyleCoord(styleCoord, this._zr, this._appendToBody, zrX, zrY);
    const style2 = this.el.style;
    style2.left = styleCoord[0] + "px";
    style2.top = styleCoord[1] + "px";
  }
  hide() {
    this.el.style.display = "none";
    this._show = false;
  }
  hideLater(time) {
    if (this._show && !(this._inContent && this._enterable)) {
      if (time) {
        this._hideDelay = time;
        this._show = false;
        this._hideTimeout = setTimeout(bind(this.hide, this), time);
      } else {
        this.hide();
      }
    }
  }
  isShow() {
    return this._show;
  }
  dispose() {
    this.el.parentNode.removeChild(this.el);
  }
  getOuterSize() {
    let width = this.el.clientWidth;
    let height = this.el.clientHeight;
    if (document.defaultView && document.defaultView.getComputedStyle) {
      const stl = document.defaultView.getComputedStyle(this.el);
      if (stl) {
        width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);
        height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);
      }
    }
    return {
      width,
      height
    };
  }
}
const TooltipHTMLContent_default = TooltipHTMLContent;

// src/component/tooltip/TooltipRichContent.ts
class TooltipRichContent {
  constructor(api) {
    this._show = false;
    this._enterable = true;
    this._zr = api.getZr();
  }
  update() {
  }
  show() {
    if (this._hideTimeout) {
      clearTimeout(this._hideTimeout);
    }
    this.el.show();
    this._show = true;
  }
  setContent(content, markerRich, tooltipModel) {
    if (this.el) {
      this._zr.remove(this.el);
    }
    const markers = {};
    let text11 = content;
    const prefix = "{marker";
    const suffix = "|}";
    let startId = text11.indexOf(prefix);
    while (startId >= 0) {
      const endId = text11.indexOf(suffix);
      const name = text11.substr(startId + prefix.length, endId - startId - prefix.length);
      if (name.indexOf("sub") > -1) {
        markers["marker" + name] = {
          width: 4,
          height: 4,
          borderRadius: 2,
          backgroundColor: markerRich[name]
        };
      } else {
        markers["marker" + name] = {
          width: 10,
          height: 10,
          borderRadius: 5,
          backgroundColor: markerRich[name]
        };
      }
      text11 = text11.substr(endId + 1);
      startId = text11.indexOf("{marker");
    }
    this.el = new Text_default({
      style: {
        rich: markers,
        text: content,
        lineHeight: 20,
        backgroundColor: tooltipModel.get("backgroundColor"),
        borderRadius: tooltipModel.get("borderRadius"),
        fill: tooltipModel.get(["textStyle", "color"]),
        padding: tooltipModel.get("padding")
      },
      z: tooltipModel.get("z")
    });
    this._zr.add(this.el);
    const self2 = this;
    this.el.on("mouseover", function() {
      if (self2._enterable) {
        clearTimeout(self2._hideTimeout);
        self2._show = true;
      }
      self2._inContent = true;
    });
    this.el.on("mouseout", function() {
      if (self2._enterable) {
        if (self2._show) {
          self2.hideLater(self2._hideDelay);
        }
      }
      self2._inContent = false;
    });
  }
  setEnterable(enterable) {
    this._enterable = enterable;
  }
  getSize() {
    const bounding = this.el.getBoundingRect();
    return [bounding.width, bounding.height];
  }
  moveTo(x, y) {
    const el = this.el;
    if (el) {
      el.x = x;
      el.y = y;
      el.markRedraw();
    }
  }
  hide() {
    if (this.el) {
      this.el.hide();
    }
    this._show = false;
  }
  hideLater(time) {
    if (this._show && !(this._inContent && this._enterable)) {
      if (time) {
        this._hideDelay = time;
        this._show = false;
        this._hideTimeout = setTimeout(bind(this.hide, this), time);
      } else {
        this.hide();
      }
    }
  }
  isShow() {
    return this._show;
  }
  getOuterSize() {
    const size = this.getSize();
    return {
      width: size[0],
      height: size[1]
    };
  }
  dispose() {
    this._zr.remove(this.el);
  }
}
const TooltipRichContent_default = TooltipRichContent;

// src/component/tooltip/TooltipView.ts
const bind3 = bind;
const each10 = each;
const parsePercent4 = parsePercent3;
const proxyRect = new Rect_default({
  shape: {
    x: -1,
    y: -1,
    width: 2,
    height: 2
  }
});
class TooltipView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = TooltipView2.type;
  }
  init(ecModel, api) {
    if (env_default.node) {
      return;
    }
    const tooltipModel = ecModel.getComponent("tooltip");
    const renderMode = tooltipModel.get("renderMode");
    this._renderMode = getTooltipRenderMode(renderMode);
    let tooltipContent;
    if (this._renderMode === "html") {
      tooltipContent = new TooltipHTMLContent_default(api.getDom(), api, {
        appendToBody: tooltipModel.get("appendToBody", true)
      });
      this._newLine = "<br/>";
    } else {
      tooltipContent = new TooltipRichContent_default(api);
      this._newLine = "\n";
    }
    this._tooltipContent = tooltipContent;
  }
  render(tooltipModel, ecModel, api) {
    if (env_default.node) {
      return;
    }
    this.group.removeAll();
    this._tooltipModel = tooltipModel;
    this._ecModel = ecModel;
    this._api = api;
    this._lastDataByCoordSys = null;
    this._alwaysShowContent = tooltipModel.get("alwaysShowContent");
    const tooltipContent = this._tooltipContent;
    tooltipContent.update();
    tooltipContent.setEnterable(tooltipModel.get("enterable"));
    this._initGlobalListener();
    this._keepShow();
  }
  _initGlobalListener() {
    const tooltipModel = this._tooltipModel;
    const triggerOn = tooltipModel.get("triggerOn");
    register("itemTooltip", this._api, bind3(function(currTrigger, e, dispatchAction3) {
      if (triggerOn !== "none") {
        if (triggerOn.indexOf(currTrigger) >= 0) {
          this._tryShow(e, dispatchAction3);
        } else if (currTrigger === "leave") {
          this._hide(dispatchAction3);
        }
      }
    }, this));
  }
  _keepShow() {
    const tooltipModel = this._tooltipModel;
    const ecModel = this._ecModel;
    const api = this._api;
    if (this._lastX != null && this._lastY != null && tooltipModel.get("triggerOn") !== "none") {
      const self2 = this;
      clearTimeout(this._refreshUpdateTimeout);
      this._refreshUpdateTimeout = setTimeout(function() {
        !api.isDisposed() && self2.manuallyShowTip(tooltipModel, ecModel, api, {
          x: self2._lastX,
          y: self2._lastY
        });
      });
    }
  }
  manuallyShowTip(tooltipModel, ecModel, api, payload) {
    if (payload.from === this.uid || env_default.node) {
      return;
    }
    const dispatchAction3 = makeDispatchAction2(payload, api);
    this._ticket = "";
    const dataByCoordSys = payload.dataByCoordSys;
    if (payload.tooltip && payload.x != null && payload.y != null) {
      const el = proxyRect;
      el.x = payload.x;
      el.y = payload.y;
      el.update();
      el.tooltip = payload.tooltip;
      this._tryShow({
        offsetX: payload.x,
        offsetY: payload.y,
        target: el
      }, dispatchAction3);
    } else if (dataByCoordSys) {
      this._tryShow({
        offsetX: payload.x,
        offsetY: payload.y,
        position: payload.position,
        dataByCoordSys,
        tooltipOption: payload.tooltipOption
      }, dispatchAction3);
    } else if (payload.seriesIndex != null) {
      if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) {
        return;
      }
      const pointInfo = findPointFromSeries_default(payload, ecModel);
      const cx = pointInfo.point[0];
      const cy = pointInfo.point[1];
      if (cx != null && cy != null) {
        this._tryShow({
          offsetX: cx,
          offsetY: cy,
          position: payload.position,
          target: pointInfo.el
        }, dispatchAction3);
      }
    } else if (payload.x != null && payload.y != null) {
      api.dispatchAction({
        type: "updateAxisPointer",
        x: payload.x,
        y: payload.y
      });
      this._tryShow({
        offsetX: payload.x,
        offsetY: payload.y,
        position: payload.position,
        target: api.getZr().findHover(payload.x, payload.y).target
      }, dispatchAction3);
    }
  }
  manuallyHideTip(tooltipModel, ecModel, api, payload) {
    const tooltipContent = this._tooltipContent;
    if (!this._alwaysShowContent && this._tooltipModel) {
      tooltipContent.hideLater(this._tooltipModel.get("hideDelay"));
    }
    this._lastX = this._lastY = null;
    if (payload.from !== this.uid) {
      this._hide(makeDispatchAction2(payload, api));
    }
  }
  _manuallyAxisShowTip(tooltipModel, ecModel, api, payload) {
    const seriesIndex = payload.seriesIndex;
    const dataIndex = payload.dataIndex;
    const coordSysAxesInfo = ecModel.getComponent("axisPointer").coordSysAxesInfo;
    if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) {
      return;
    }
    const seriesModel = ecModel.getSeriesByIndex(seriesIndex);
    if (!seriesModel) {
      return;
    }
    const data = seriesModel.getData();
    const tooltipCascadedModel = buildTooltipModel([data.getItemModel(dataIndex), seriesModel, (seriesModel.coordinateSystem || {}).model, tooltipModel]);
    if (tooltipCascadedModel.get("trigger") !== "axis") {
      return;
    }
    api.dispatchAction({
      type: "updateAxisPointer",
      seriesIndex,
      dataIndex,
      position: payload.position
    });
    return true;
  }
  _tryShow(e, dispatchAction3) {
    const el = e.target;
    const tooltipModel = this._tooltipModel;
    if (!tooltipModel) {
      return;
    }
    this._lastX = e.offsetX;
    this._lastY = e.offsetY;
    const dataByCoordSys = e.dataByCoordSys;
    if (dataByCoordSys && dataByCoordSys.length) {
      this._showAxisTooltip(dataByCoordSys, e);
    } else if (el && getECData(el).dataIndex != null) {
      this._lastDataByCoordSys = null;
      this._showSeriesItemTooltip(e, el, dispatchAction3);
    } else if (el && el.tooltip) {
      this._lastDataByCoordSys = null;
      this._showComponentItemTooltip(e, el, dispatchAction3);
    } else {
      this._lastDataByCoordSys = null;
      this._hide(dispatchAction3);
    }
  }
  _showOrMove(tooltipModel, cb) {
    const delay = tooltipModel.get("showDelay");
    cb = bind(cb, this);
    clearTimeout(this._showTimout);
    delay > 0 ? this._showTimout = setTimeout(cb, delay) : cb();
  }
  _showAxisTooltip(dataByCoordSys, e) {
    const ecModel = this._ecModel;
    const globalTooltipModel = this._tooltipModel;
    const point = [e.offsetX, e.offsetY];
    const singleDefaultHTML = [];
    const singleParamsList = [];
    const singleTooltipModel = buildTooltipModel([e.tooltipOption, globalTooltipModel]);
    const renderMode = this._renderMode;
    const newLine = this._newLine;
    const markers = {};
    each10(dataByCoordSys, function(itemCoordSys) {
      each10(itemCoordSys.dataByAxis, function(item) {
        const axisModel = ecModel.getComponent(item.axisDim + "Axis", item.axisIndex);
        const axisValue = item.value;
        const seriesDefaultHTML = [];
        if (!axisModel || axisValue == null) {
          return;
        }
        const valueLabel = getValueLabel(axisValue, axisModel.axis, ecModel, item.seriesDataIndices, item.valueLabelOpt);
        each(item.seriesDataIndices, function(idxItem) {
          const series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
          const dataIndex = idxItem.dataIndexInside;
          const dataParams = series && series.getDataParams(dataIndex);
          dataParams.axisDim = item.axisDim;
          dataParams.axisIndex = item.axisIndex;
          dataParams.axisType = item.axisType;
          dataParams.axisId = item.axisId;
          dataParams.axisValue = getAxisRawValue(axisModel.axis, axisValue);
          dataParams.axisValueLabel = valueLabel;
          dataParams.marker = getTooltipMarker({
            color: dataParams.color,
            renderMode
          });
          if (dataParams) {
            singleParamsList.push(dataParams);
            const seriesTooltip = series.formatTooltip(dataIndex, true, null, renderMode);
            let html;
            if (isObject(seriesTooltip)) {
              html = seriesTooltip.html;
              const newMarkers = seriesTooltip.markers;
              merge(markers, newMarkers);
            } else {
              html = seriesTooltip;
            }
            seriesDefaultHTML.push(html);
          }
        });
        const firstLine = valueLabel;
        if (renderMode !== "html") {
          singleDefaultHTML.push(seriesDefaultHTML.join(newLine));
        } else {
          singleDefaultHTML.push((firstLine ? encodeHTML(firstLine) + newLine : "") + seriesDefaultHTML.join(newLine));
        }
      });
    }, this);
    singleDefaultHTML.reverse();
    const singleDefaultHTMLStr = singleDefaultHTML.join(this._newLine + this._newLine);
    const positionExpr = e.position;
    this._showOrMove(singleTooltipModel, function() {
      if (this._updateContentNotChangedOnAxis(dataByCoordSys)) {
        this._updatePosition(singleTooltipModel, positionExpr, point[0], point[1], this._tooltipContent, singleParamsList);
      } else {
        this._showTooltipContent(singleTooltipModel, singleDefaultHTMLStr, singleParamsList, Math.random() + "", point[0], point[1], positionExpr, void 0, markers);
      }
    });
  }
  _showSeriesItemTooltip(e, el, dispatchAction3) {
    const ecModel = this._ecModel;
    const ecData = getECData(el);
    const seriesIndex = ecData.seriesIndex;
    const seriesModel = ecModel.getSeriesByIndex(seriesIndex);
    const dataModel = ecData.dataModel || seriesModel;
    const dataIndex = ecData.dataIndex;
    const dataType = ecData.dataType;
    const data = dataModel.getData(dataType);
    const tooltipModel = buildTooltipModel([data.getItemModel(dataIndex), dataModel, seriesModel && (seriesModel.coordinateSystem || {}).model, this._tooltipModel]);
    const tooltipTrigger = tooltipModel.get("trigger");
    if (tooltipTrigger != null && tooltipTrigger !== "item") {
      return;
    }
    const params = dataModel.getDataParams(dataIndex, dataType);
    params.marker = getTooltipMarker({
      color: params.color,
      renderMode: this._renderMode
    });
    const seriesTooltip = dataModel.formatTooltip(dataIndex, false, dataType, this._renderMode);
    let defaultHtml;
    let markers;
    if (isObject(seriesTooltip)) {
      defaultHtml = seriesTooltip.html;
      markers = seriesTooltip.markers;
    } else {
      defaultHtml = seriesTooltip;
      markers = null;
    }
    const asyncTicket = "item_" + dataModel.name + "_" + dataIndex;
    this._showOrMove(tooltipModel, function() {
      this._showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target, markers);
    });
    dispatchAction3({
      type: "showTip",
      dataIndexInside: dataIndex,
      dataIndex: data.getRawIndex(dataIndex),
      seriesIndex,
      from: this.uid
    });
  }
  _showComponentItemTooltip(e, el, dispatchAction3) {
    let tooltipOpt = el.tooltip;
    if (typeof tooltipOpt === "string") {
      const content = tooltipOpt;
      tooltipOpt = {
        content,
        formatter: content
      };
    }
    const subTooltipModel = new Model_default(tooltipOpt, this._tooltipModel, this._ecModel);
    const defaultHtml = subTooltipModel.get("content");
    const asyncTicket = Math.random() + "";
    this._showOrMove(subTooltipModel, function() {
      this._showTooltipContent(subTooltipModel, defaultHtml, subTooltipModel.get("formatterParams") || {}, asyncTicket, e.offsetX, e.offsetY, e.position, el);
    });
    dispatchAction3({
      type: "showTip",
      from: this.uid
    });
  }
  _showTooltipContent(tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el, markers) {
    this._ticket = "";
    if (!tooltipModel.get("showContent") || !tooltipModel.get("show")) {
      return;
    }
    const tooltipContent = this._tooltipContent;
    const formatter = tooltipModel.get("formatter");
    positionExpr = positionExpr || tooltipModel.get("position");
    let html = defaultHtml;
    if (formatter && typeof formatter === "string") {
      html = formatTpl(formatter, params, true);
    } else if (typeof formatter === "function") {
      const callback = bind3(function(cbTicket, html2) {
        if (cbTicket === this._ticket) {
          tooltipContent.setContent(html2, markers, tooltipModel);
          this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
        }
      }, this);
      this._ticket = asyncTicket;
      html = formatter(params, asyncTicket, callback);
    }
    tooltipContent.setContent(html, markers, tooltipModel);
    tooltipContent.show(tooltipModel);
    this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
  }
  _updatePosition(tooltipModel, positionExpr, x, y, content, params, el) {
    const viewWidth = this._api.getWidth();
    const viewHeight = this._api.getHeight();
    positionExpr = positionExpr || tooltipModel.get("position");
    const contentSize = content.getSize();
    let align = tooltipModel.get("align");
    let vAlign = tooltipModel.get("verticalAlign");
    const rect = el && el.getBoundingRect().clone();
    el && rect.applyTransform(el.transform);
    if (typeof positionExpr === "function") {
      positionExpr = positionExpr([x, y], params, content.el, rect, {
        viewSize: [viewWidth, viewHeight],
        contentSize: contentSize.slice()
      });
    }
    if (isArray(positionExpr)) {
      x = parsePercent4(positionExpr[0], viewWidth);
      y = parsePercent4(positionExpr[1], viewHeight);
    } else if (isObject(positionExpr)) {
      const boxLayoutPosition = positionExpr;
      boxLayoutPosition.width = contentSize[0];
      boxLayoutPosition.height = contentSize[1];
      const layoutRect = getLayoutRect(boxLayoutPosition, {
        width: viewWidth,
        height: viewHeight
      });
      x = layoutRect.x;
      y = layoutRect.y;
      align = null;
      vAlign = null;
    } else if (typeof positionExpr === "string" && el) {
      const pos = calcTooltipPosition(positionExpr, rect, contentSize);
      x = pos[0];
      y = pos[1];
    } else {
      const pos = refixTooltipPosition(x, y, content, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20);
      x = pos[0];
      y = pos[1];
    }
    align && (x -= isCenterAlign(align) ? contentSize[0] / 2 : align === "right" ? contentSize[0] : 0);
    vAlign && (y -= isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === "bottom" ? contentSize[1] : 0);
    if (tooltipModel.get("confine")) {
      const pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);
      x = pos[0];
      y = pos[1];
    }
    content.moveTo(x, y);
  }
  _updateContentNotChangedOnAxis(dataByCoordSys) {
    const lastCoordSys = this._lastDataByCoordSys;
    let contentNotChanged = !!lastCoordSys && lastCoordSys.length === dataByCoordSys.length;
    contentNotChanged && each10(lastCoordSys, function(lastItemCoordSys, indexCoordSys) {
      const lastDataByAxis = lastItemCoordSys.dataByAxis || [];
      const thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};
      const thisDataByAxis = thisItemCoordSys.dataByAxis || [];
      contentNotChanged = contentNotChanged && lastDataByAxis.length === thisDataByAxis.length;
      contentNotChanged && each10(lastDataByAxis, function(lastItem, indexAxis) {
        const thisItem = thisDataByAxis[indexAxis] || {};
        const lastIndices = lastItem.seriesDataIndices || [];
        const newIndices = thisItem.seriesDataIndices || [];
        contentNotChanged = contentNotChanged && lastItem.value === thisItem.value && lastItem.axisType === thisItem.axisType && lastItem.axisId === thisItem.axisId && lastIndices.length === newIndices.length;
        contentNotChanged && each10(lastIndices, function(lastIdxItem, j) {
          const newIdxItem = newIndices[j];
          contentNotChanged = contentNotChanged && lastIdxItem.seriesIndex === newIdxItem.seriesIndex && lastIdxItem.dataIndex === newIdxItem.dataIndex;
        });
      });
    });
    this._lastDataByCoordSys = dataByCoordSys;
    return !!contentNotChanged;
  }
  _hide(dispatchAction3) {
    this._lastDataByCoordSys = null;
    dispatchAction3({
      type: "hideTip",
      from: this.uid
    });
  }
  dispose(ecModel, api) {
    if (env_default.node) {
      return;
    }
    this._tooltipContent.dispose();
    unregister("itemTooltip", api);
  }
}
TooltipView2.type = "tooltip";
function buildTooltipModel(modelCascade) {
  let resultModel = modelCascade.pop();
  while (modelCascade.length) {
    let tooltipOpt = modelCascade.pop();
    if (tooltipOpt) {
      if (tooltipOpt instanceof Model_default) {
        tooltipOpt = tooltipOpt.get("tooltip", true);
      }
      if (typeof tooltipOpt === "string") {
        tooltipOpt = {
          formatter: tooltipOpt
        };
      }
      resultModel = new Model_default(tooltipOpt, resultModel, resultModel.ecModel);
    }
  }
  return resultModel;
}
function makeDispatchAction2(payload, api) {
  return payload.dispatchAction || bind(api.dispatchAction, api);
}
function refixTooltipPosition(x, y, content, viewWidth, viewHeight, gapH, gapV) {
  const size = content.getOuterSize();
  const width = size.width;
  const height = size.height;
  if (gapH != null) {
    if (x + width + gapH > viewWidth) {
      x -= width + gapH;
    } else {
      x += gapH;
    }
  }
  if (gapV != null) {
    if (y + height + gapV > viewHeight) {
      y -= height + gapV;
    } else {
      y += gapV;
    }
  }
  return [x, y];
}
function confineTooltipPosition(x, y, content, viewWidth, viewHeight) {
  const size = content.getOuterSize();
  const width = size.width;
  const height = size.height;
  x = Math.min(x + width, viewWidth) - width;
  y = Math.min(y + height, viewHeight) - height;
  x = Math.max(x, 0);
  y = Math.max(y, 0);
  return [x, y];
}
function calcTooltipPosition(position2, rect, contentSize) {
  const domWidth = contentSize[0];
  const domHeight = contentSize[1];
  const gap = 5;
  let x = 0;
  let y = 0;
  const rectWidth = rect.width;
  const rectHeight = rect.height;
  switch (position2) {
    case "inside":
      x = rect.x + rectWidth / 2 - domWidth / 2;
      y = rect.y + rectHeight / 2 - domHeight / 2;
      break;
    case "top":
      x = rect.x + rectWidth / 2 - domWidth / 2;
      y = rect.y - domHeight - gap;
      break;
    case "bottom":
      x = rect.x + rectWidth / 2 - domWidth / 2;
      y = rect.y + rectHeight + gap;
      break;
    case "left":
      x = rect.x - domWidth - gap;
      y = rect.y + rectHeight / 2 - domHeight / 2;
      break;
    case "right":
      x = rect.x + rectWidth + gap;
      y = rect.y + rectHeight / 2 - domHeight / 2;
  }
  return [x, y];
}
function isCenterAlign(align) {
  return align === "center" || align === "middle";
}
Component_default2.registerClass(TooltipView2);

// src/component/tooltip.ts
registerAction({
  type: "showTip",
  event: "showTip",
  update: "tooltip:manuallyShowTip"
}, function() {
});
registerAction({
  type: "hideTip",
  event: "hideTip",
  update: "tooltip:manuallyHideTip"
}, function() {
});

// src/component/brush/preprocessor.ts
const DEFAULT_TOOLBOX_BTNS = ["rect", "polygon", "keep", "clear"];
function preprocessor_default2(option, isNew) {
  const brushComponents = normalizeToArray(option ? option.brush : []);
  if (!brushComponents.length) {
    return;
  }
  let brushComponentSpecifiedBtns = [];
  each(brushComponents, function(brushOpt) {
    const tbs = brushOpt.hasOwnProperty("toolbox") ? brushOpt.toolbox : [];
    if (tbs instanceof Array) {
      brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);
    }
  });
  let toolbox2 = option && option.toolbox;
  if (isArray(toolbox2)) {
    toolbox2 = toolbox2[0];
  }
  if (!toolbox2) {
    toolbox2 = {
      feature: {}
    };
    option.toolbox = [toolbox2];
  }
  const toolboxFeature = toolbox2.feature || (toolbox2.feature = {});
  const toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});
  const brushTypes = toolboxBrush.type || (toolboxBrush.type = []);
  brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);
  removeDuplicate(brushTypes);
  if (isNew && !brushTypes.length) {
    brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);
  }
}
function removeDuplicate(arr) {
  const map3 = {};
  each(arr, function(val) {
    map3[val] = 1;
  });
  arr.length = 0;
  each(map3, function(flag, val) {
    arr.push(val);
  });
}

// src/visual/visualSolution.ts
const each20 = each;
function hasKeys(obj) {
  if (obj) {
    for (const name in obj) {
      if (obj.hasOwnProperty(name)) {
        return true;
      }
    }
  }
}
function createVisualMappings(option, stateList, supplementVisualOption) {
  const visualMappings = {};
  each20(stateList, function(state) {
    const mappings = visualMappings[state] = createMappings();
    each20(option[state], function(visualData, visualType) {
      if (!VisualMapping_default.isValidType(visualType)) {
        return;
      }
      let mappingOption = {
        type: visualType,
        visual: visualData
      };
      supplementVisualOption && supplementVisualOption(mappingOption, state);
      mappings[visualType] = new VisualMapping_default(mappingOption);
      if (visualType === "opacity") {
        mappingOption = clone2(mappingOption);
        mappingOption.type = "colorAlpha";
        mappings.__hidden.__alphaForOpacity = new VisualMapping_default(mappingOption);
      }
    });
  });
  return visualMappings;
  function createMappings() {
    const Creater = function() {
    };
    Creater.prototype.__hidden = Creater.prototype;
    const obj = new Creater();
    return obj;
  }
}
function replaceVisualOption(thisOption, newOption, keys2) {
  let has3;
  each(keys2, function(key) {
    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
      has3 = true;
    }
  });
  has3 && each(keys2, function(key) {
    if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
      thisOption[key] = clone2(newOption[key]);
    } else {
      delete thisOption[key];
    }
  });
}
function applyVisual(stateList, visualMappings, data, getValueState, scope, dimension) {
  const visualTypesMap = {};
  each(stateList, function(state) {
    const visualTypes = VisualMapping_default.prepareVisualTypes(visualMappings[state]);
    visualTypesMap[state] = visualTypes;
  });
  let dataIndex;
  function getVisual(key) {
    return getItemVisualFromData(data, dataIndex, key);
  }
  function setVisual(key, value) {
    setItemVisualFromData(data, dataIndex, key, value);
  }
  if (dimension == null) {
    data.each(eachItem);
  } else {
    data.each([dimension], eachItem);
  }
  function eachItem(valueOrIndex, index) {
    dataIndex = dimension == null ? valueOrIndex : index;
    const rawDataItem = data.getRawDataItem(dataIndex);
    if (rawDataItem && rawDataItem.visualMap === false) {
      return;
    }
    const valueState = getValueState.call(scope, valueOrIndex);
    const mappings = visualMappings[valueState];
    const visualTypes = visualTypesMap[valueState];
    for (let i = 0, len2 = visualTypes.length; i < len2; i++) {
      const type = visualTypes[i];
      mappings[type] && mappings[type].applyVisual(valueOrIndex, getVisual, setVisual);
    }
  }
}
function incrementalApplyVisual(stateList, visualMappings, getValueState, dim) {
  const visualTypesMap = {};
  each(stateList, function(state) {
    const visualTypes = VisualMapping_default.prepareVisualTypes(visualMappings[state]);
    visualTypesMap[state] = visualTypes;
  });
  return {
    progress: function progress(params, data) {
      let dimName;
      if (dim != null) {
        dimName = data.getDimension(dim);
      }
      function getVisual(key) {
        return getItemVisualFromData(data, dataIndex, key);
      }
      function setVisual(key, value) {
        setItemVisualFromData(data, dataIndex, key, value);
      }
      let dataIndex;
      while ((dataIndex = params.next()) != null) {
        const rawDataItem = data.getRawDataItem(dataIndex);
        if (rawDataItem && rawDataItem.visualMap === false) {
          continue;
        }
        const value = dim != null ? data.get(dimName, dataIndex) : dataIndex;
        const valueState = getValueState(value);
        const mappings = visualMappings[valueState];
        const visualTypes = visualTypesMap[valueState];
        for (let i = 0, len2 = visualTypes.length; i < len2; i++) {
          const type = visualTypes[i];
          mappings[type] && mappings[type].applyVisual(value, getVisual, setVisual);
        }
      }
    }
  };
}

// src/component/brush/selector.ts
function makeBrushCommonSelectorForSeries(area) {
  const brushType = area.brushType;
  const selectors = {
    point(itemLayout) {
      return selector5[brushType].point(itemLayout, selectors, area);
    },
    rect(itemLayout) {
      return selector5[brushType].rect(itemLayout, selectors, area);
    }
  };
  return selectors;
}
const selector5 = {
  lineX: getLineSelectors(0),
  lineY: getLineSelectors(1),
  rect: {
    point: function(itemLayout, selectors, area) {
      return itemLayout && area.boundingRect.contain(itemLayout[0], itemLayout[1]);
    },
    rect: function(itemLayout, selectors, area) {
      return itemLayout && area.boundingRect.intersect(itemLayout);
    }
  },
  polygon: {
    point: function(itemLayout, selectors, area) {
      return itemLayout && area.boundingRect.contain(itemLayout[0], itemLayout[1]) && contain2(area.range, itemLayout[0], itemLayout[1]);
    },
    rect: function(itemLayout, selectors, area) {
      const points9 = area.range;
      if (!itemLayout || points9.length <= 1) {
        return false;
      }
      const x = itemLayout.x;
      const y = itemLayout.y;
      const width = itemLayout.width;
      const height = itemLayout.height;
      const p = points9[0];
      if (contain2(points9, x, y) || contain2(points9, x + width, y) || contain2(points9, x, y + height) || contain2(points9, x + width, y + height) || BoundingRect_default.create(itemLayout).contain(p[0], p[1]) || linePolygonIntersect(x, y, x + width, y, points9) || linePolygonIntersect(x, y, x, y + height, points9) || linePolygonIntersect(x + width, y, x + width, y + height, points9) || linePolygonIntersect(x, y + height, x + width, y + height, points9)) {
        return true;
      }
    }
  }
};
function getLineSelectors(xyIndex) {
  const xy = ["x", "y"];
  const wh = ["width", "height"];
  return {
    point: function(itemLayout, selectors, area) {
      if (itemLayout) {
        const range = area.range;
        const p = itemLayout[xyIndex];
        return inLineRange(p, range);
      }
    },
    rect: function(itemLayout, selectors, area) {
      if (itemLayout) {
        const range = area.range;
        const layoutRange = [itemLayout[xy[xyIndex]], itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]]];
        layoutRange[1] < layoutRange[0] && layoutRange.reverse();
        return inLineRange(layoutRange[0], range) || inLineRange(layoutRange[1], range) || inLineRange(range[0], layoutRange) || inLineRange(range[1], layoutRange);
      }
    }
  };
}
function inLineRange(p, range) {
  return range[0] <= p && p <= range[1];
}

// src/component/brush/visualEncoding.ts
const STATE_LIST = ["inBrush", "outOfBrush"];
const DISPATCH_METHOD = "__ecBrushSelect";
const DISPATCH_FLAG = "__ecInBrushSelectEvent";
const PRIORITY_BRUSH = PRIORITY.VISUAL.BRUSH;
function layoutCovers(ecModel) {
  ecModel.eachComponent({
    mainType: "brush"
  }, function(brushModel) {
    const brushTargetManager = brushModel.brushTargetManager = new BrushTargetManager_default(brushModel.option, ecModel);
    brushTargetManager.setInputRanges(brushModel.areas, ecModel);
  });
}
registerVisual(PRIORITY_BRUSH, function(ecModel, api, payload) {
  const brushSelected = [];
  let throttleType;
  let throttleDelay;
  ecModel.eachComponent({
    mainType: "brush"
  }, function(brushModel) {
    payload && payload.type === "takeGlobalCursor" && brushModel.setBrushOption(payload.key === "brush" ? payload.brushOption : {
      brushType: false
    });
  });
  layoutCovers(ecModel);
  ecModel.eachComponent({
    mainType: "brush"
  }, function(brushModel, brushIndex) {
    const thisBrushSelected = {
      brushId: brushModel.id,
      brushIndex,
      brushName: brushModel.name,
      areas: clone2(brushModel.areas),
      selected: []
    };
    brushSelected.push(thisBrushSelected);
    const brushOption = brushModel.option;
    const brushLink = brushOption.brushLink;
    const linkedSeriesMap = [];
    const selectedDataIndexForLink = [];
    const rangeInfoBySeries = [];
    let hasBrushExists = false;
    if (!brushIndex) {
      throttleType = brushOption.throttleType;
      throttleDelay = brushOption.throttleDelay;
    }
    const areas = map2(brushModel.areas, function(area) {
      const builder = boundingRectBuilders[area.brushType];
      const selectableArea = defaults({
        boundingRect: builder ? builder(area) : void 0
      }, area);
      selectableArea.selectors = makeBrushCommonSelectorForSeries(selectableArea);
      return selectableArea;
    });
    const visualMappings = createVisualMappings(brushModel.option, STATE_LIST, function(mappingOption) {
      mappingOption.mappingMethod = "fixed";
    });
    isArray(brushLink) && each(brushLink, function(seriesIndex) {
      linkedSeriesMap[seriesIndex] = 1;
    });
    function linkOthers(seriesIndex) {
      return brushLink === "all" || !!linkedSeriesMap[seriesIndex];
    }
    function brushed(rangeInfoList) {
      return !!rangeInfoList.length;
    }
    ecModel.eachSeries(function(seriesModel, seriesIndex) {
      const rangeInfoList = rangeInfoBySeries[seriesIndex] = [];
      seriesModel.subType === "parallel" ? stepAParallel(seriesModel, seriesIndex) : stepAOthers(seriesModel, seriesIndex, rangeInfoList);
    });
    function stepAParallel(seriesModel, seriesIndex) {
      const coordSys = seriesModel.coordinateSystem;
      hasBrushExists = hasBrushExists || coordSys.hasAxisBrushed();
      linkOthers(seriesIndex) && coordSys.eachActiveState(seriesModel.getData(), function(activeState, dataIndex) {
        activeState === "active" && (selectedDataIndexForLink[dataIndex] = 1);
      });
    }
    function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {
      if (!seriesModel.brushSelector || brushModelNotControll(brushModel, seriesIndex)) {
        return;
      }
      each(areas, function(area) {
        if (brushModel.brushTargetManager.controlSeries(area, seriesModel, ecModel)) {
          rangeInfoList.push(area);
        }
        hasBrushExists = hasBrushExists || brushed(rangeInfoList);
      });
      if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {
        const data = seriesModel.getData();
        data.each(function(dataIndex) {
          if (checkInRange(seriesModel, rangeInfoList, data, dataIndex)) {
            selectedDataIndexForLink[dataIndex] = 1;
          }
        });
      }
    }
    ecModel.eachSeries(function(seriesModel, seriesIndex) {
      const seriesBrushSelected = {
        seriesId: seriesModel.id,
        seriesIndex,
        seriesName: seriesModel.name,
        dataIndex: []
      };
      thisBrushSelected.selected.push(seriesBrushSelected);
      const rangeInfoList = rangeInfoBySeries[seriesIndex];
      const data = seriesModel.getData();
      const getValueState = linkOthers(seriesIndex) ? function(dataIndex) {
        return selectedDataIndexForLink[dataIndex] ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), "inBrush") : "outOfBrush";
      } : function(dataIndex) {
        return checkInRange(seriesModel, rangeInfoList, data, dataIndex) ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), "inBrush") : "outOfBrush";
      };
      (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList)) && applyVisual(STATE_LIST, visualMappings, data, getValueState);
    });
  });
  dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);
});
function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {
  if (!payload) {
    return;
  }
  const zr = api.getZr();
  if (zr[DISPATCH_FLAG]) {
    return;
  }
  if (!zr[DISPATCH_METHOD]) {
    zr[DISPATCH_METHOD] = doDispatch;
  }
  const fn = createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);
  fn(api, brushSelected);
}
function doDispatch(api, brushSelected) {
  if (!api.isDisposed()) {
    const zr = api.getZr();
    zr[DISPATCH_FLAG] = true;
    api.dispatchAction({
      type: "brushSelect",
      batch: brushSelected
    });
    zr[DISPATCH_FLAG] = false;
  }
}
function checkInRange(seriesModel, rangeInfoList, data, dataIndex) {
  for (let i = 0, len2 = rangeInfoList.length; i < len2; i++) {
    const area = rangeInfoList[i];
    if (seriesModel.brushSelector(dataIndex, data, area.selectors, area)) {
      return true;
    }
  }
}
function brushModelNotControll(brushModel, seriesIndex) {
  const seriesIndices = brushModel.option.seriesIndex;
  return seriesIndices != null && seriesIndices !== "all" && (isArray(seriesIndices) ? indexOf(seriesIndices, seriesIndex) < 0 : seriesIndex !== seriesIndices);
}
const boundingRectBuilders = {
  rect: function(area) {
    return getBoundingRectFromMinMax(area.range);
  },
  polygon: function(area) {
    let minMax;
    const range = area.range;
    for (let i = 0, len2 = range.length; i < len2; i++) {
      minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];
      const rg = range[i];
      rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);
      rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);
      rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);
      rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);
    }
    return minMax && getBoundingRectFromMinMax(minMax);
  }
};
function getBoundingRectFromMinMax(minMax) {
  return new BoundingRect_default(minMax[0][0], minMax[1][0], minMax[0][1] - minMax[0][0], minMax[1][1] - minMax[1][0]);
}

// src/component/brush/BrushModel.ts
const DEFAULT_OUT_OF_BRUSH_COLOR = "#ddd";
class BrushModel2 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = BrushModel2.type;
    this.areas = [];
    this.brushOption = {};
  }
  optionUpdated(newOption, isInit) {
    const thisOption = this.option;
    !isInit && replaceVisualOption(thisOption, newOption, ["inBrush", "outOfBrush"]);
    const inBrush = thisOption.inBrush = thisOption.inBrush || {};
    thisOption.outOfBrush = thisOption.outOfBrush || {
      color: DEFAULT_OUT_OF_BRUSH_COLOR
    };
    if (!inBrush.hasOwnProperty("liftZ")) {
      inBrush.liftZ = 5;
    }
  }
  setAreas(areas) {
    if (__DEV__) {
      assert(isArray(areas));
      each(areas, function(area) {
        assert(area.brushType, "Illegal areas");
      });
    }
    if (!areas) {
      return;
    }
    this.areas = map2(areas, function(area) {
      return generateBrushOption(this.option, area);
    }, this);
  }
  setBrushOption(brushOption) {
    this.brushOption = generateBrushOption(this.option, brushOption);
    this.brushType = this.brushOption.brushType;
  }
}
BrushModel2.type = "brush";
BrushModel2.dependencies = ["geo", "grid", "xAxis", "yAxis", "parallel", "series"];
BrushModel2.defaultOption = {
  seriesIndex: "all",
  brushType: "rect",
  brushMode: "single",
  transformable: true,
  brushStyle: {
    borderWidth: 1,
    color: "rgba(120,140,180,0.3)",
    borderColor: "rgba(120,140,180,0.8)"
  },
  throttleType: "fixRate",
  throttleDelay: 0,
  removeOnClick: true,
  z: 10000
};
Component_default.registerClass(BrushModel2);
function generateBrushOption(option, brushOption) {
  return merge({
    brushType: option.brushType,
    brushMode: option.brushMode,
    transformable: option.transformable,
    brushStyle: new Model_default(option.brushStyle).getItemStyle(),
    removeOnClick: option.removeOnClick,
    z: option.z
  }, brushOption, true);
}

// src/component/brush/BrushView.ts
class BrushView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = BrushView2.type;
  }
  init(ecModel, api) {
    this.ecModel = ecModel;
    this.api = api;
    this.model;
    (this._brushController = new BrushController_default(api.getZr())).on("brush", bind(this._onBrush, this)).mount();
  }
  render(brushModel, ecModel, api, payload) {
    this.model = brushModel;
    this._updateController(brushModel, ecModel, api, payload);
  }
  updateTransform(brushModel, ecModel, api, payload) {
    layoutCovers(ecModel);
    this._updateController(brushModel, ecModel, api, payload);
  }
  updateVisual(brushModel, ecModel, api, payload) {
    this.updateTransform(brushModel, ecModel, api, payload);
  }
  updateView(brushModel, ecModel, api, payload) {
    this._updateController(brushModel, ecModel, api, payload);
  }
  _updateController(brushModel, ecModel, api, payload) {
    (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());
  }
  dispose() {
    this._brushController.dispose();
  }
  _onBrush(eventParam) {
    const modelId = this.model.id;
    const areas = this.model.brushTargetManager.setOutputRanges(eventParam.areas, this.ecModel);
    (!eventParam.isEnd || eventParam.removeOnClick) && this.api.dispatchAction({
      type: "brush",
      brushId: modelId,
      areas: clone2(areas),
      $from: modelId
    });
    eventParam.isEnd && this.api.dispatchAction({
      type: "brushEnd",
      brushId: modelId,
      areas: clone2(areas),
      $from: modelId
    });
  }
}
BrushView2.type = "brush";
Component_default2.registerClass(BrushView2);

// src/component/brush/brushAction.ts
registerAction({
  type: "brush",
  event: "brush",
  update: "updateVisual"
}, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "brush",
    query: payload
  }, function(brushModel) {
    brushModel.setAreas(payload.areas);
  });
});
registerAction({
  type: "brushSelect",
  event: "brushSelected",
  update: "none"
}, function() {
});
registerAction({
  type: "brushEnd",
  event: "brushEnd",
  update: "none"
}, function() {
});

// src/component/toolbox/feature/Brush.ts
const brushLang = lang_default.toolbox.brush;
const ICON_TYPES = ["rect", "polygon", "lineX", "lineY", "keep", "clear"];
class BrushFeature extends ToolboxFeature {
  render(featureModel, ecModel, api) {
    let brushType;
    let brushMode;
    let isBrushed;
    ecModel.eachComponent({
      mainType: "brush"
    }, function(brushModel) {
      brushType = brushModel.brushType;
      brushMode = brushModel.brushOption.brushMode || "single";
      isBrushed = isBrushed || !!brushModel.areas.length;
    });
    this._brushType = brushType;
    this._brushMode = brushMode;
    each(featureModel.get("type", true), function(type) {
      featureModel.setIconStatus(type, (type === "keep" ? brushMode === "multiple" : type === "clear" ? isBrushed : type === brushType) ? "emphasis" : "normal");
    });
  }
  updateView(featureModel, ecModel, api) {
    this.render(featureModel, ecModel, api);
  }
  getIcons() {
    const model65 = this.model;
    const availableIcons = model65.get("icon", true);
    const icons = {};
    each(model65.get("type", true), function(type) {
      if (availableIcons[type]) {
        icons[type] = availableIcons[type];
      }
    });
    return icons;
  }
  onclick(ecModel, api, type) {
    const brushType = this._brushType;
    const brushMode = this._brushMode;
    if (type === "clear") {
      api.dispatchAction({
        type: "axisAreaSelect",
        intervals: []
      });
      api.dispatchAction({
        type: "brush",
        command: "clear",
        areas: []
      });
    } else {
      api.dispatchAction({
        type: "takeGlobalCursor",
        key: "brush",
        brushOption: {
          brushType: type === "keep" ? brushType : brushType === type ? false : type,
          brushMode: type === "keep" ? brushMode === "multiple" ? "single" : "multiple" : brushMode
        }
      });
    }
  }
}
BrushFeature.defaultOption = {
  show: true,
  type: ICON_TYPES.slice(),
  icon: {
    rect: "M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13",
    polygon: "M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2",
    lineX: "M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4",
    lineY: "M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4",
    keep: "M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z",
    clear: "M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2"
  },
  title: clone2(brushLang.title)
};
registerFeature("brush", BrushFeature);

// src/component/brush.ts
registerPreprocessor(preprocessor_default2);

// src/component/title.ts
class TitleModel extends Component_default {
  constructor() {
    super(...arguments);
    this.type = TitleModel.type;
    this.layoutMode = {
      type: "box",
      ignoreSize: true
    };
  }
}
TitleModel.type = "title";
TitleModel.defaultOption = {
  zlevel: 0,
  z: 6,
  show: true,
  text: "",
  target: "blank",
  subtext: "",
  subtarget: "blank",
  left: 0,
  top: 0,
  backgroundColor: "rgba(0,0,0,0)",
  borderColor: "#ccc",
  borderWidth: 0,
  padding: 5,
  itemGap: 10,
  textStyle: {
    fontSize: 18,
    fontWeight: "bolder",
    color: "#333"
  },
  subtextStyle: {
    color: "#aaa"
  }
};
Component_default.registerClass(TitleModel);
class TitleView extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = TitleView.type;
  }
  render(titleModel, ecModel, api) {
    this.group.removeAll();
    if (!titleModel.get("show")) {
      return;
    }
    const group = this.group;
    const textStyleModel = titleModel.getModel("textStyle");
    const subtextStyleModel = titleModel.getModel("subtextStyle");
    let textAlign = titleModel.get("textAlign");
    let textVerticalAlign = retrieve2(titleModel.get("textBaseline"), titleModel.get("textVerticalAlign"));
    const textEl = new Text_default({
      style: createTextStyle(textStyleModel, {
        text: titleModel.get("text"),
        fill: textStyleModel.getTextColor()
      }, {
        disableBox: true
      }),
      z2: 10
    });
    const textRect = textEl.getBoundingRect();
    const subText = titleModel.get("subtext");
    const subTextEl = new Text_default({
      style: createTextStyle(subtextStyleModel, {
        text: subText,
        fill: subtextStyleModel.getTextColor(),
        y: textRect.height + titleModel.get("itemGap"),
        verticalAlign: "top"
      }, {
        disableBox: true
      }),
      z2: 10
    });
    const link = titleModel.get("link");
    const sublink = titleModel.get("sublink");
    const triggerEvent = titleModel.get("triggerEvent", true);
    textEl.silent = !link && !triggerEvent;
    subTextEl.silent = !sublink && !triggerEvent;
    if (link) {
      textEl.on("click", function() {
        windowOpen(link, "_" + titleModel.get("target"));
      });
    }
    if (sublink) {
      subTextEl.on("click", function() {
        windowOpen(link, "_" + titleModel.get("subtarget"));
      });
    }
    getECData(textEl).eventData = getECData(subTextEl).eventData = triggerEvent ? {
      componentType: "title",
      componentIndex: titleModel.componentIndex
    } : null;
    group.add(textEl);
    subText && group.add(subTextEl);
    let groupRect = group.getBoundingRect();
    const layoutOption = titleModel.getBoxLayoutParams();
    layoutOption.width = groupRect.width;
    layoutOption.height = groupRect.height;
    const layoutRect = getLayoutRect(layoutOption, {
      width: api.getWidth(),
      height: api.getHeight()
    }, titleModel.get("padding"));
    if (!textAlign) {
      textAlign = titleModel.get("left") || titleModel.get("right");
      if (textAlign === "middle") {
        textAlign = "center";
      }
      if (textAlign === "right") {
        layoutRect.x += layoutRect.width;
      } else if (textAlign === "center") {
        layoutRect.x += layoutRect.width / 2;
      }
    }
    if (!textVerticalAlign) {
      textVerticalAlign = titleModel.get("top") || titleModel.get("bottom");
      if (textVerticalAlign === "center") {
        textVerticalAlign = "middle";
      }
      if (textVerticalAlign === "bottom") {
        layoutRect.y += layoutRect.height;
      } else if (textVerticalAlign === "middle") {
        layoutRect.y += layoutRect.height / 2;
      }
      textVerticalAlign = textVerticalAlign || "top";
    }
    group.x = layoutRect.x;
    group.y = layoutRect.y;
    group.markRedraw();
    const alignStyle = {
      align: textAlign,
      verticalAlign: textVerticalAlign
    };
    textEl.setStyle(alignStyle);
    subTextEl.setStyle(alignStyle);
    groupRect = group.getBoundingRect();
    const padding = layoutRect.margin;
    const style2 = titleModel.getItemStyle(["color", "opacity"]);
    style2.fill = titleModel.get("backgroundColor");
    const rect = new Rect_default({
      shape: {
        x: groupRect.x - padding[3],
        y: groupRect.y - padding[0],
        width: groupRect.width + padding[1] + padding[3],
        height: groupRect.height + padding[0] + padding[2],
        r: titleModel.get("borderRadius")
      },
      style: style2,
      subPixelOptimize: true,
      silent: true
    });
    group.add(rect);
  }
}
TitleView.type = "title";
Component_default2.registerClass(TitleView);

// src/component/timeline/preprocessor.ts
function preprocessor_default3(option) {
  let timelineOpt = option && option.timeline;
  if (!isArray(timelineOpt)) {
    timelineOpt = timelineOpt ? [timelineOpt] : [];
  }
  each(timelineOpt, function(opt) {
    if (!opt) {
      return;
    }
    compatibleEC2(opt);
  });
}
function compatibleEC2(opt) {
  const type = opt.type;
  const ec2Types = {
    number: "value",
    time: "time"
  };
  if (ec2Types[type]) {
    opt.axisType = ec2Types[type];
    delete opt.type;
  }
  transferItem(opt);
  if (has(opt, "controlPosition")) {
    const controlStyle = opt.controlStyle || (opt.controlStyle = {});
    if (!has(controlStyle, "position")) {
      controlStyle.position = opt.controlPosition;
    }
    if (controlStyle.position === "none" && !has(controlStyle, "show")) {
      controlStyle.show = false;
      delete controlStyle.position;
    }
    delete opt.controlPosition;
  }
  each(opt.data || [], function(dataItem) {
    if (isObject(dataItem) && !isArray(dataItem)) {
      if (!has(dataItem, "value") && has(dataItem, "name")) {
        dataItem.value = dataItem.name;
      }
      transferItem(dataItem);
    }
  });
}
function transferItem(opt) {
  const itemStyle5 = opt.itemStyle || (opt.itemStyle = {});
  const itemStyleEmphasis = itemStyle5.emphasis || (itemStyle5.emphasis = {});
  const label = opt.label || (opt.label || {});
  const labelNormal = label.normal || (label.normal = {});
  const excludeLabelAttr = {
    normal: 1,
    emphasis: 1
  };
  each(label, function(value, name) {
    if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
      labelNormal[name] = value;
    }
  });
  if (itemStyleEmphasis.label && !has(label, "emphasis")) {
    label.emphasis = itemStyleEmphasis.label;
    delete itemStyleEmphasis.label;
  }
}
function has(obj, attr2) {
  return obj.hasOwnProperty(attr2);
}

// src/component/timeline/typeDefaulter.ts
Component_default.registerSubTypeDefaulter("timeline", function() {
  return "slider";
});

// src/component/timeline/timelineAction.ts
registerAction({
  type: "timelineChange",
  event: "timelineChanged",
  update: "prepareAndUpdate"
}, function(payload, ecModel) {
  const timelineModel = ecModel.getComponent("timeline");
  if (timelineModel && payload.currentIndex != null) {
    timelineModel.setCurrentIndex(payload.currentIndex);
    if (!timelineModel.get("loop", true) && timelineModel.isIndexMax()) {
      timelineModel.setPlayState(false);
    }
  }
  ecModel.resetOption("timeline", {
    replaceMerge: timelineModel.get("replaceMerge", true)
  });
  return defaults({
    currentIndex: timelineModel.option.currentIndex
  }, payload);
});
registerAction({
  type: "timelinePlayChange",
  event: "timelinePlayChanged",
  update: "update"
}, function(payload, ecModel) {
  const timelineModel = ecModel.getComponent("timeline");
  if (timelineModel && payload.playState != null) {
    timelineModel.setPlayState(payload.playState);
  }
});

// src/component/timeline/TimelineModel.ts
class TimelineModel6 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = TimelineModel6.type;
    this.layoutMode = "box";
  }
  init(option, parentModel, ecModel) {
    this.mergeDefaultAndTheme(option, ecModel);
    this._initData();
  }
  mergeOption(option) {
    super.mergeOption.apply(this, arguments);
    this._initData();
  }
  setCurrentIndex(currentIndex) {
    if (currentIndex == null) {
      currentIndex = this.option.currentIndex;
    }
    const count2 = this._data.count();
    if (this.option.loop) {
      currentIndex = (currentIndex % count2 + count2) % count2;
    } else {
      currentIndex >= count2 && (currentIndex = count2 - 1);
      currentIndex < 0 && (currentIndex = 0);
    }
    this.option.currentIndex = currentIndex;
  }
  getCurrentIndex() {
    return this.option.currentIndex;
  }
  isIndexMax() {
    return this.getCurrentIndex() >= this._data.count() - 1;
  }
  setPlayState(state) {
    this.option.autoPlay = !!state;
  }
  getPlayState() {
    return !!this.option.autoPlay;
  }
  _initData() {
    const thisOption = this.option;
    const dataArr = thisOption.data || [];
    const axisType = thisOption.axisType;
    const names = this._names = [];
    let processedDataArr;
    if (axisType === "category") {
      processedDataArr = [];
      each(dataArr, function(item, index) {
        let value = getDataItemValue(item);
        let newItem;
        if (isObject(item)) {
          newItem = clone2(item);
          newItem.value = index;
        } else {
          newItem = index;
        }
        processedDataArr.push(newItem);
        if (!isString(value) && (value == null || isNaN(value))) {
          value = "";
        }
        names.push(value + "");
      });
    } else {
      processedDataArr = dataArr;
    }
    const dimType = {
      category: "ordinal",
      time: "time",
      value: "number"
    }[axisType] || "number";
    const data = this._data = new List_default([{
      name: "value",
      type: dimType
    }], this);
    data.initData(processedDataArr, names);
  }
  getData() {
    return this._data;
  }
  getCategories() {
    if (this.get("axisType") === "category") {
      return this._names.slice();
    }
  }
}
TimelineModel6.type = "timeline";
TimelineModel6.defaultOption = {
  zlevel: 0,
  z: 4,
  show: true,
  axisType: "time",
  realtime: true,
  left: "20%",
  top: null,
  right: "20%",
  bottom: 0,
  width: null,
  height: 40,
  padding: 5,
  controlPosition: "left",
  autoPlay: false,
  rewind: false,
  loop: true,
  playInterval: 2000,
  currentIndex: 0,
  itemStyle: {},
  label: {
    color: "#000"
  },
  data: []
};
Component_default.registerClass(TimelineModel6);
const TimelineModel_default = TimelineModel6;

// src/component/timeline/SliderTimelineModel.ts
class SliderTimelineModel2 extends TimelineModel_default {
  constructor() {
    super(...arguments);
    this.type = SliderTimelineModel2.type;
  }
}
SliderTimelineModel2.type = "timeline.slider";
SliderTimelineModel2.defaultOption = inheritDefaultOption(TimelineModel_default.defaultOption, {
  backgroundColor: "rgba(0,0,0,0)",
  borderColor: "#ccc",
  borderWidth: 0,
  orient: "horizontal",
  inverse: false,
  tooltip: {
    trigger: "item"
  },
  symbol: "circle",
  symbolSize: 12,
  lineStyle: {
    show: true,
    width: 2,
    color: "#DAE1F5"
  },
  label: {
    position: "auto",
    show: true,
    interval: "auto",
    rotate: 0,
    color: "#A4B1D7"
  },
  itemStyle: {
    color: "#A4B1D7",
    borderWidth: 1
  },
  checkpointStyle: {
    symbol: "circle",
    symbolSize: 15,
    color: "#316bf3",
    borderColor: "#fff",
    borderWidth: 2,
    shadowBlur: 2,
    shadowOffsetX: 1,
    shadowOffsetY: 1,
    shadowColor: "rgba(0, 0, 0, 0.3)",
    animation: true,
    animationDuration: 300,
    animationEasing: "quinticInOut"
  },
  controlStyle: {
    show: true,
    showPlayBtn: true,
    showPrevBtn: true,
    showNextBtn: true,
    itemSize: 24,
    itemGap: 12,
    position: "left",
    playIcon: "path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z",
    stopIcon: "path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z",
    nextIcon: "M2,18.5A1.52,1.52,0,0,1,.92,18a1.49,1.49,0,0,1,0-2.12L7.81,9.36,1,3.11A1.5,1.5,0,1,1,3,.89l8,7.34a1.48,1.48,0,0,1,.49,1.09,1.51,1.51,0,0,1-.46,1.1L3,18.08A1.5,1.5,0,0,1,2,18.5Z",
    prevIcon: "M10,.5A1.52,1.52,0,0,1,11.08,1a1.49,1.49,0,0,1,0,2.12L4.19,9.64,11,15.89a1.5,1.5,0,1,1-2,2.22L1,10.77A1.48,1.48,0,0,1,.5,9.68,1.51,1.51,0,0,1,1,8.58L9,.92A1.5,1.5,0,0,1,10,.5Z",
    prevBtnSize: 18,
    nextBtnSize: 18,
    color: "#A4B1D7",
    borderColor: "#A4B1D7",
    borderWidth: 1
  },
  emphasis: {
    label: {
      show: true,
      color: "#6f778d"
    },
    itemStyle: {
      color: "#316BF3"
    },
    controlStyle: {
      color: "#316BF3",
      borderColor: "#316BF3",
      borderWidth: 2
    }
  },
  progress: {
    lineStyle: {
      color: "#316BF3"
    },
    itemStyle: {
      color: "#316BF3"
    },
    label: {
      color: "#6f778d"
    }
  },
  data: []
});
mixin(SliderTimelineModel2, dataFormat_default.prototype);
Component_default.registerClass(SliderTimelineModel2);

// src/component/timeline/TimelineView.ts
class TimelineView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = TimelineView2.type;
  }
}
TimelineView2.type = "timeline";
const TimelineView_default = TimelineView2;

// src/component/timeline/TimelineAxis.ts
class TimelineAxis2 extends Axis_default {
  constructor(dim, scale4, coordExtent, axisType) {
    super(dim, scale4, coordExtent);
    this.type = axisType || "value";
  }
  getLabelModel() {
    return this.model.getModel("label");
  }
  isHorizontal() {
    return this.model.get("orient") === "horizontal";
  }
}
const TimelineAxis_default = TimelineAxis2;

// src/component/timeline/SliderTimelineView.ts
const PI9 = Math.PI;
const labelDataIndexStore = makeInner();
class SliderTimelineView2 extends TimelineView_default {
  constructor() {
    super(...arguments);
    this.type = SliderTimelineView2.type;
  }
  init(ecModel, api) {
    this.api = api;
  }
  render(timelineModel, ecModel, api) {
    this.model = timelineModel;
    this.api = api;
    this.ecModel = ecModel;
    this.group.removeAll();
    if (timelineModel.get("show", true)) {
      const layoutInfo = this._layout(timelineModel, api);
      const mainGroup = this._createGroup("_mainGroup");
      const labelGroup = this._createGroup("_labelGroup");
      const axis2 = this._axis = this._createAxis(layoutInfo, timelineModel);
      timelineModel.formatTooltip = function(dataIndex) {
        return encodeHTML(axis2.scale.getLabel(dataIndex));
      };
      each(["AxisLine", "AxisTick", "Control", "CurrentPointer"], function(name) {
        this["_render" + name](layoutInfo, mainGroup, axis2, timelineModel);
      }, this);
      this._renderAxisLabel(layoutInfo, labelGroup, axis2, timelineModel);
      this._position(layoutInfo, timelineModel);
    }
    this._doPlayStop();
    this._updateTicksStatus();
  }
  remove() {
    this._clearTimer();
    this.group.removeAll();
  }
  dispose() {
    this._clearTimer();
  }
  _layout(timelineModel, api) {
    const labelPosOpt = timelineModel.get(["label", "position"]);
    const orient = timelineModel.get("orient");
    const viewRect2 = getViewRect6(timelineModel, api);
    let parsedLabelPos;
    if (labelPosOpt == null || labelPosOpt === "auto") {
      parsedLabelPos = orient === "horizontal" ? viewRect2.y + viewRect2.height / 2 < api.getHeight() / 2 ? "-" : "+" : viewRect2.x + viewRect2.width / 2 < api.getWidth() / 2 ? "+" : "-";
    } else if (isString(labelPosOpt)) {
      parsedLabelPos = {
        horizontal: {
          top: "-",
          bottom: "+"
        },
        vertical: {
          left: "-",
          right: "+"
        }
      }[orient][labelPosOpt];
    } else {
      parsedLabelPos = labelPosOpt;
    }
    const labelAlignMap = {
      horizontal: "center",
      vertical: parsedLabelPos >= 0 || parsedLabelPos === "+" ? "left" : "right"
    };
    const labelBaselineMap = {
      horizontal: parsedLabelPos >= 0 || parsedLabelPos === "+" ? "top" : "bottom",
      vertical: "middle"
    };
    const rotationMap = {
      horizontal: 0,
      vertical: PI9 / 2
    };
    const mainLength = orient === "vertical" ? viewRect2.height : viewRect2.width;
    const controlModel = timelineModel.getModel("controlStyle");
    const showControl = controlModel.get("show", true);
    const controlSize = showControl ? controlModel.get("itemSize") : 0;
    const controlGap = showControl ? controlModel.get("itemGap") : 0;
    const sizePlusGap = controlSize + controlGap;
    let labelRotation = timelineModel.get(["label", "rotate"]) || 0;
    labelRotation = labelRotation * PI9 / 180;
    let playPosition;
    let prevBtnPosition;
    let nextBtnPosition;
    const controlPosition = controlModel.get("position", true);
    const showPlayBtn = showControl && controlModel.get("showPlayBtn", true);
    const showPrevBtn = showControl && controlModel.get("showPrevBtn", true);
    const showNextBtn = showControl && controlModel.get("showNextBtn", true);
    let xLeft = 0;
    let xRight = mainLength;
    if (controlPosition === "left" || controlPosition === "bottom") {
      showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
      showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
      showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
    } else {
      showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
      showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
      showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
    }
    const axisExtent = [xLeft, xRight];
    if (timelineModel.get("inverse")) {
      axisExtent.reverse();
    }
    return {
      viewRect: viewRect2,
      mainLength,
      orient,
      rotation: rotationMap[orient],
      labelRotation,
      labelPosOpt: parsedLabelPos,
      labelAlign: timelineModel.get(["label", "align"]) || labelAlignMap[orient],
      labelBaseline: timelineModel.get(["label", "verticalAlign"]) || timelineModel.get(["label", "baseline"]) || labelBaselineMap[orient],
      playPosition,
      prevBtnPosition,
      nextBtnPosition,
      axisExtent,
      controlSize,
      controlGap
    };
  }
  _position(layoutInfo, timelineModel) {
    const mainGroup = this._mainGroup;
    const labelGroup = this._labelGroup;
    let viewRect2 = layoutInfo.viewRect;
    if (layoutInfo.orient === "vertical") {
      const m2 = create();
      const rotateOriginX = viewRect2.x;
      const rotateOriginY = viewRect2.y + viewRect2.height;
      translate(m2, m2, [-rotateOriginX, -rotateOriginY]);
      rotate(m2, m2, -PI9 / 2);
      translate(m2, m2, [rotateOriginX, rotateOriginY]);
      viewRect2 = viewRect2.clone();
      viewRect2.applyTransform(m2);
    }
    const viewBound = getBound(viewRect2);
    const mainBound = getBound(mainGroup.getBoundingRect());
    const labelBound = getBound(labelGroup.getBoundingRect());
    const mainPosition = [mainGroup.x, mainGroup.y];
    const labelsPosition = [labelGroup.x, labelGroup.y];
    labelsPosition[0] = mainPosition[0] = viewBound[0][0];
    const labelPosOpt = layoutInfo.labelPosOpt;
    if (labelPosOpt == null || isString(labelPosOpt)) {
      const mainBoundIdx = labelPosOpt === "+" ? 0 : 1;
      toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
      toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
    } else {
      const mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
      toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
      labelsPosition[1] = mainPosition[1] + labelPosOpt;
    }
    mainGroup.setPosition(mainPosition);
    labelGroup.setPosition(labelsPosition);
    mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;
    setOrigin(mainGroup);
    setOrigin(labelGroup);
    function setOrigin(targetGroup) {
      targetGroup.originX = viewBound[0][0] - targetGroup.x;
      targetGroup.originY = viewBound[1][0] - targetGroup.y;
    }
    function getBound(rect) {
      return [[rect.x, rect.x + rect.width], [rect.y, rect.y + rect.height]];
    }
    function toBound(fromPos, from, to, dimIdx, boundIdx) {
      fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
    }
  }
  _createAxis(layoutInfo, timelineModel) {
    const data = timelineModel.getData();
    const axisType = timelineModel.get("axisType");
    const scale4 = createScaleByModel(timelineModel, axisType);
    scale4.getTicks = function() {
      return data.mapArray(["value"], function(value) {
        return value;
      });
    };
    const dataExtent = data.getDataExtent("value");
    scale4.setExtent(dataExtent[0], dataExtent[1]);
    scale4.niceTicks();
    const axis2 = new TimelineAxis_default("value", scale4, layoutInfo.axisExtent, axisType);
    axis2.model = timelineModel;
    return axis2;
  }
  _createGroup(key) {
    const newGroup = this[key] = new Group_default();
    this.group.add(newGroup);
    return newGroup;
  }
  _renderAxisLine(layoutInfo, group, axis2, timelineModel) {
    const axisExtent = axis2.getExtent();
    if (!timelineModel.get(["lineStyle", "show"])) {
      return;
    }
    const line3 = new Line_default({
      shape: {
        x1: axisExtent[0],
        y1: 0,
        x2: axisExtent[1],
        y2: 0
      },
      style: extend({
        lineCap: "round"
      }, timelineModel.getModel("lineStyle").getLineStyle()),
      silent: true,
      z2: 1
    });
    group.add(line3);
    const progressLine = this._progressLine = new Line_default({
      shape: {
        x1: axisExtent[0],
        x2: this._currentPointer ? this._currentPointer.x : axisExtent[0],
        y1: 0,
        y2: 0
      },
      style: defaults({
        lineCap: "round",
        lineWidth: line3.style.lineWidth
      }, timelineModel.getModel(["progress", "lineStyle"]).getLineStyle()),
      silent: true,
      z2: 1
    });
    group.add(progressLine);
  }
  _renderAxisTick(layoutInfo, group, axis2, timelineModel) {
    const data = timelineModel.getData();
    const ticks = axis2.scale.getTicks();
    this._tickSymbols = [];
    each(ticks, (value) => {
      const tickCoord = axis2.dataToCoord(value);
      const itemModel = data.getItemModel(value);
      const itemStyleModel = itemModel.getModel("itemStyle");
      const hoverStyleModel = itemModel.getModel(["emphasis", "itemStyle"]);
      const progressStyleModel = itemModel.getModel(["progress", "itemStyle"]);
      const symbolOpt = {
        position: [tickCoord, 0],
        onclick: bind(this._changeTimeline, this, value)
      };
      const el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
      el.ensureState("emphasis").style = hoverStyleModel.getItemStyle();
      el.ensureState("progress").style = progressStyleModel.getItemStyle();
      enableHoverEmphasis(el);
      const ecData = getECData(el);
      if (itemModel.get("tooltip")) {
        ecData.dataIndex = value;
        ecData.dataModel = timelineModel;
      } else {
        ecData.dataIndex = ecData.dataModel = null;
      }
      this._tickSymbols.push(el);
    });
  }
  _renderAxisLabel(layoutInfo, group, axis2, timelineModel) {
    const labelModel = axis2.getLabelModel();
    if (!labelModel.get("show")) {
      return;
    }
    const data = timelineModel.getData();
    const labels = axis2.getViewLabels();
    this._tickLabels = [];
    each(labels, (labelItem) => {
      const dataIndex = labelItem.tickValue;
      const itemModel = data.getItemModel(dataIndex);
      const normalLabelModel = itemModel.getModel("label");
      const hoverLabelModel = itemModel.getModel(["emphasis", "label"]);
      const progressLabelModel = itemModel.getModel(["progress", "label"]);
      const tickCoord = axis2.dataToCoord(labelItem.tickValue);
      const textEl = new Text_default({
        x: tickCoord,
        y: 0,
        rotation: layoutInfo.labelRotation - layoutInfo.rotation,
        onclick: bind(this._changeTimeline, this, dataIndex),
        silent: false,
        style: createTextStyle(normalLabelModel, {
          text: labelItem.formattedLabel,
          align: layoutInfo.labelAlign,
          verticalAlign: layoutInfo.labelBaseline
        })
      });
      textEl.ensureState("emphasis").style = createTextStyle(hoverLabelModel);
      textEl.ensureState("progress").style = createTextStyle(progressLabelModel);
      group.add(textEl);
      enableHoverEmphasis(textEl);
      labelDataIndexStore(textEl).dataIndex = dataIndex;
      this._tickLabels.push(textEl);
    });
  }
  _renderControl(layoutInfo, group, axis2, timelineModel) {
    const controlSize = layoutInfo.controlSize;
    const rotation = layoutInfo.rotation;
    const itemStyle5 = timelineModel.getModel("controlStyle").getItemStyle();
    const hoverStyle = timelineModel.getModel(["emphasis", "controlStyle"]).getItemStyle();
    const playState = timelineModel.getPlayState();
    const inverse = timelineModel.get("inverse", true);
    makeBtn(layoutInfo.nextBtnPosition, "next", bind(this._changeTimeline, this, inverse ? "-" : "+"));
    makeBtn(layoutInfo.prevBtnPosition, "prev", bind(this._changeTimeline, this, inverse ? "+" : "-"));
    makeBtn(layoutInfo.playPosition, playState ? "stop" : "play", bind(this._handlePlayClick, this, !playState), true);
    function makeBtn(position2, iconName, onclick, willRotate) {
      if (!position2) {
        return;
      }
      const iconSize = parsePercent(retrieve2(timelineModel.get(["controlStyle", iconName + "BtnSize"]), controlSize), controlSize);
      const rect = [0, -iconSize / 2, iconSize, iconSize];
      const opt = {
        position: position2,
        origin: [controlSize / 2, 0],
        rotation: willRotate ? -rotation : 0,
        rectHover: true,
        style: itemStyle5,
        onclick
      };
      const btn = makeControlIcon(timelineModel, iconName + "Icon", rect, opt);
      btn.ensureState("emphasis").style = hoverStyle;
      group.add(btn);
      enableHoverEmphasis(btn);
    }
  }
  _renderCurrentPointer(layoutInfo, group, axis2, timelineModel) {
    const data = timelineModel.getData();
    const currentIndex = timelineModel.getCurrentIndex();
    const pointerModel = data.getItemModel(currentIndex).getModel("checkpointStyle");
    const me = this;
    const callback = {
      onCreate(pointer) {
        pointer.draggable = true;
        pointer.drift = bind(me._handlePointerDrag, me);
        pointer.ondragend = bind(me._handlePointerDragend, me);
        pointerMoveTo(pointer, me._progressLine, currentIndex, axis2, timelineModel, true);
      },
      onUpdate(pointer) {
        pointerMoveTo(pointer, me._progressLine, currentIndex, axis2, timelineModel);
      }
    };
    this._currentPointer = giveSymbol(pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback);
  }
  _handlePlayClick(nextState) {
    this._clearTimer();
    this.api.dispatchAction({
      type: "timelinePlayChange",
      playState: nextState,
      from: this.uid
    });
  }
  _handlePointerDrag(dx, dy, e) {
    this._clearTimer();
    this._pointerChangeTimeline([e.offsetX, e.offsetY]);
  }
  _handlePointerDragend(e) {
    this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
  }
  _pointerChangeTimeline(mousePos, trigger3) {
    let toCoord = this._toAxisCoord(mousePos)[0];
    const axis2 = this._axis;
    const axisExtent = asc2(axis2.getExtent().slice());
    toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
    toCoord < axisExtent[0] && (toCoord = axisExtent[0]);
    this._currentPointer.x = toCoord;
    this._currentPointer.markRedraw();
    this._progressLine.shape.x2 = toCoord;
    this._progressLine.dirty();
    const targetDataIndex = this._findNearestTick(toCoord);
    const timelineModel = this.model;
    if (trigger3 || targetDataIndex !== timelineModel.getCurrentIndex() && timelineModel.get("realtime")) {
      this._changeTimeline(targetDataIndex);
    }
  }
  _doPlayStop() {
    this._clearTimer();
    if (this.model.getPlayState()) {
      this._timer = setTimeout(() => {
        const timelineModel = this.model;
        this._changeTimeline(timelineModel.getCurrentIndex() + (timelineModel.get("rewind", true) ? -1 : 1));
      }, this.model.get("playInterval"));
    }
  }
  _toAxisCoord(vertex) {
    const trans = this._mainGroup.getLocalTransform();
    return applyTransform2(vertex, trans, true);
  }
  _findNearestTick(axisCoord) {
    const data = this.model.getData();
    let dist3 = Infinity;
    let targetDataIndex;
    const axis2 = this._axis;
    data.each(["value"], function(value, dataIndex) {
      const coord = axis2.dataToCoord(value);
      const d = Math.abs(coord - axisCoord);
      if (d < dist3) {
        dist3 = d;
        targetDataIndex = dataIndex;
      }
    });
    return targetDataIndex;
  }
  _clearTimer() {
    if (this._timer) {
      clearTimeout(this._timer);
      this._timer = null;
    }
  }
  _changeTimeline(nextIndex) {
    const currentIndex = this.model.getCurrentIndex();
    if (nextIndex === "+") {
      nextIndex = currentIndex + 1;
    } else if (nextIndex === "-") {
      nextIndex = currentIndex - 1;
    }
    this.api.dispatchAction({
      type: "timelineChange",
      currentIndex: nextIndex,
      from: this.uid
    });
  }
  _updateTicksStatus() {
    const currentIndex = this.model.getCurrentIndex();
    const tickSymbols = this._tickSymbols;
    const tickLabels = this._tickLabels;
    if (!(tickSymbols || tickLabels)) {
      return;
    }
    for (let i = 0; i < tickSymbols.length; i++) {
      tickSymbols && tickSymbols[i] && tickSymbols[i].toggleState("progress", i < currentIndex);
    }
    for (let i = 0; i < tickLabels.length; i++) {
      tickLabels && tickLabels[i] && tickLabels[i].toggleState("progress", labelDataIndexStore(tickLabels[i]).dataIndex <= currentIndex);
    }
  }
}
SliderTimelineView2.type = "timeline.slider";
function createScaleByModel(model65, axisType) {
  axisType = axisType || model65.get("type");
  if (axisType) {
    switch (axisType) {
      case "category":
        return new Ordinal_default({
          ordinalMeta: model65.getCategories(),
          extent: [Infinity, -Infinity]
        });
      case "time":
        return new Time_default({
          useUTC: model65.ecModel.get("useUTC")
        });
      default:
        return new Interval_default();
    }
  }
}
function getViewRect6(model65, api) {
  return getLayoutRect(model65.getBoxLayoutParams(), {
    width: api.getWidth(),
    height: api.getHeight()
  }, model65.get("padding"));
}
function makeControlIcon(timelineModel, objPath, rect, opts) {
  const icon = makePath(timelineModel.get(["controlStyle", objPath]).replace(/^path:\/\//, ""), clone2(opts || {}), new BoundingRect_default(rect[0], rect[1], rect[2], rect[3]), "center");
  return icon;
}
function giveSymbol(hostModel, itemStyleModel, group, opt, symbol14, callback) {
  const color8 = itemStyleModel.get("color");
  if (!symbol14) {
    const symbolType = hostModel.get("symbol");
    symbol14 = createSymbol(symbolType, -1, -1, 2, 2, color8);
    symbol14.setStyle("strokeNoScale", true);
    group.add(symbol14);
    callback && callback.onCreate(symbol14);
  } else {
    symbol14.setColor(color8);
    group.add(symbol14);
    callback && callback.onUpdate(symbol14);
  }
  const itemStyle5 = itemStyleModel.getItemStyle(["color"]);
  symbol14.setStyle(itemStyle5);
  opt = merge({
    rectHover: true,
    z2: 100
  }, opt, true);
  let symbolSize = hostModel.get("symbolSize");
  symbolSize = symbolSize instanceof Array ? symbolSize.slice() : [+symbolSize, +symbolSize];
  opt.scaleX = symbolSize[0] / 2;
  opt.scaleY = symbolSize[1] / 2;
  const symbolOffset = hostModel.get("symbolOffset");
  if (symbolOffset) {
    opt.x = opt.x || 0;
    opt.y = opt.y || 0;
    opt.x += parsePercent3(symbolOffset[0], symbolSize[0]);
    opt.y += parsePercent3(symbolOffset[1], symbolSize[1]);
  }
  const symbolRotate = hostModel.get("symbolRotate");
  opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
  symbol14.attr(opt);
  symbol14.updateTransform();
  return symbol14;
}
function pointerMoveTo(pointer, progressLine, dataIndex, axis2, timelineModel, noAnimation) {
  if (pointer.dragging) {
    return;
  }
  const pointerModel = timelineModel.getModel("checkpointStyle");
  const toCoord = axis2.dataToCoord(timelineModel.getData().get("value", dataIndex));
  if (noAnimation || !pointerModel.get("animation", true)) {
    pointer.attr({
      x: toCoord,
      y: 0
    });
    progressLine && progressLine.attr({
      shape: {
        x2: toCoord
      }
    });
  } else {
    const animationCfg = {
      duration: pointerModel.get("animationDuration", true),
      easing: pointerModel.get("animationEasing", true)
    };
    pointer.stopAnimation(null, true);
    pointer.animateTo({
      x: toCoord,
      y: 0
    }, animationCfg);
    progressLine && progressLine.animateTo({
      shape: {
        x2: toCoord
      }
    }, animationCfg);
  }
}
Component_default2.registerClass(SliderTimelineView2);

// src/component/timeline.ts
registerPreprocessor(preprocessor_default3);

// src/component/marker/MarkerModel.ts
const addCommas2 = addCommas;
const encodeHTML2 = encodeHTML;
function fillLabel(opt) {
  defaultEmphasis(opt, "label", ["show"]);
}
const inner12 = makeInner();
class MarkerModel7 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = MarkerModel7.type;
    this.createdBySelf = false;
  }
  init(option, parentModel, ecModel) {
    if (__DEV__) {
      if (this.type === "marker") {
        throw new Error("Marker component is abstract component. Use markLine, markPoint, markArea instead.");
      }
    }
    this.mergeDefaultAndTheme(option, ecModel);
    this._mergeOption(option, ecModel, false, true);
  }
  isAnimationEnabled() {
    if (env_default.node) {
      return false;
    }
    const hostSeries = this.__hostSeries;
    return this.getShallow("animation") && hostSeries && hostSeries.isAnimationEnabled();
  }
  mergeOption(newOpt, ecModel) {
    this._mergeOption(newOpt, ecModel, false, false);
  }
  _mergeOption(newOpt, ecModel, createdBySelf, isInit) {
    const componentType = this.mainType;
    if (!createdBySelf) {
      ecModel.eachSeries(function(seriesModel) {
        const markerOpt = seriesModel.get(this.mainType, true);
        let markerModel = inner12(seriesModel)[componentType];
        if (!markerOpt || !markerOpt.data) {
          inner12(seriesModel)[componentType] = null;
          return;
        }
        if (!markerModel) {
          if (isInit) {
            fillLabel(markerOpt);
          }
          each(markerOpt.data, function(item) {
            if (item instanceof Array) {
              fillLabel(item[0]);
              fillLabel(item[1]);
            } else {
              fillLabel(item);
            }
          });
          markerModel = this.createMarkerModelFromSeries(markerOpt, this, ecModel);
          extend(markerModel, {
            mainType: this.mainType,
            seriesIndex: seriesModel.seriesIndex,
            name: seriesModel.name,
            createdBySelf: true
          });
          markerModel.__hostSeries = seriesModel;
        } else {
          markerModel._mergeOption(markerOpt, ecModel, true);
        }
        inner12(seriesModel)[componentType] = markerModel;
      }, this);
    }
  }
  formatTooltip(dataIndex) {
    const data = this.getData();
    const value = this.getRawValue(dataIndex);
    const formattedValue = isArray(value) ? map2(value, addCommas2).join(", ") : addCommas2(value);
    const name = data.getName(dataIndex);
    let html = encodeHTML2(this.name);
    if (value != null || name) {
      html += "<br />";
    }
    if (name) {
      html += encodeHTML2(name);
      if (value != null) {
        html += " : ";
      }
    }
    if (value != null) {
      html += encodeHTML2(formattedValue);
    }
    return html;
  }
  getData() {
    return this._data;
  }
  setData(data) {
    this._data = data;
  }
  static getMarkerModelFromSeries(seriesModel, componentType) {
    return inner12(seriesModel)[componentType];
  }
}
MarkerModel7.type = "marker";
MarkerModel7.dependencies = ["series", "grid", "polar", "geo"];
mixin(MarkerModel7, dataFormat_default.prototype);
const MarkerModel_default = MarkerModel7;

// src/component/marker/MarkPointModel.ts
class MarkPointModel2 extends MarkerModel_default {
  constructor() {
    super(...arguments);
    this.type = MarkPointModel2.type;
  }
  createMarkerModelFromSeries(markerOpt, masterMarkerModel, ecModel) {
    return new MarkPointModel2(markerOpt, masterMarkerModel, ecModel);
  }
}
MarkPointModel2.type = "markPoint";
MarkPointModel2.defaultOption = {
  zlevel: 0,
  z: 5,
  symbol: "pin",
  symbolSize: 50,
  tooltip: {
    trigger: "item"
  },
  label: {
    show: true,
    position: "inside"
  },
  itemStyle: {
    borderWidth: 2
  },
  emphasis: {
    label: {
      show: true
    }
  }
};
Component_default.registerClass(MarkPointModel2);

// src/component/marker/markerHelper.ts
function hasXOrY(item) {
  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));
}
function hasXAndY(item) {
  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));
}
function markerTypeCalculatorWithExtent(markerType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {
  const coordArr = [];
  const stacked = isDimensionStacked(data, targetDataDim);
  const calcDataDim = stacked ? data.getCalculationInfo("stackResultDimension") : targetDataDim;
  const value = numCalculate(data, calcDataDim, markerType);
  const dataIndex = data.indicesOfNearest(calcDataDim, value)[0];
  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);
  coordArr[targetCoordIndex] = data.get(calcDataDim, dataIndex);
  const coordArrValue = data.get(targetDataDim, dataIndex);
  let precision = getPrecision(data.get(targetDataDim, dataIndex));
  precision = Math.min(precision, 20);
  if (precision >= 0) {
    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);
  }
  return [coordArr, coordArrValue];
}
const markerTypeCalculator = {
  min: curry(markerTypeCalculatorWithExtent, "min"),
  max: curry(markerTypeCalculatorWithExtent, "max"),
  average: curry(markerTypeCalculatorWithExtent, "average"),
  median: curry(markerTypeCalculatorWithExtent, "median")
};
function dataTransform(seriesModel, item) {
  const data = seriesModel.getData();
  const coordSys = seriesModel.coordinateSystem;
  if (item && !hasXAndY(item) && !isArray(item.coord) && coordSys) {
    const dims = coordSys.dimensions;
    const axisInfo = getAxisInfo2(item, data, coordSys, seriesModel);
    item = clone2(item);
    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {
      const otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
      const targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);
      const coordInfo = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);
      item.coord = coordInfo[0];
      item.value = coordInfo[1];
    } else {
      const coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis];
      for (let i = 0; i < 2; i++) {
        if (markerTypeCalculator[coord[i]]) {
          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);
        }
      }
      item.coord = coord;
    }
  }
  return item;
}
function getAxisInfo2(item, data, coordSys, seriesModel) {
  const ret = {};
  if (item.valueIndex != null || item.valueDim != null) {
    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;
    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));
    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);
  } else {
    ret.baseAxis = seriesModel.getBaseAxis();
    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);
    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);
  }
  return ret;
}
function dataDimToCoordDim(seriesModel, dataDim) {
  const data = seriesModel.getData();
  const dimensions = data.dimensions;
  dataDim = data.getDimension(dataDim);
  for (let i = 0; i < dimensions.length; i++) {
    const dimItem = data.getDimensionInfo(dimensions[i]);
    if (dimItem.name === dataDim) {
      return dimItem.coordDim;
    }
  }
}
function dataFilter6(coordSys, item) {
  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;
}
function dimValueGetter(item, dimName, dataIndex, dimIndex) {
  if (dimIndex < 2) {
    return item.coord && item.coord[dimIndex];
  }
  return item.value;
}
function numCalculate(data, valueDataDim, type) {
  if (type === "average") {
    let sum2 = 0;
    let count2 = 0;
    data.each(valueDataDim, function(val, idx) {
      if (!isNaN(val)) {
        sum2 += val;
        count2++;
      }
    });
    return sum2 / count2;
  } else if (type === "median") {
    return data.getMedian(valueDataDim);
  } else {
    return data.getDataExtent(valueDataDim)[type === "max" ? 1 : 0];
  }
}

// src/component/marker/MarkerView.ts
const inner13 = makeInner();
class MarkerView4 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = MarkerView4.type;
  }
  init() {
    this.markerGroupMap = createHashMap();
  }
  render(markerModel, ecModel, api) {
    const markerGroupMap = this.markerGroupMap;
    markerGroupMap.each(function(item) {
      inner13(item).keep = false;
    });
    ecModel.eachSeries((seriesModel) => {
      const markerModel2 = MarkerModel_default.getMarkerModelFromSeries(seriesModel, this.type);
      markerModel2 && this.renderSeries(seriesModel, markerModel2, ecModel, api);
    });
    markerGroupMap.each((item) => {
      !inner13(item).keep && this.group.remove(item.group);
    });
  }
  markKeep(drawGroup) {
    inner13(drawGroup).keep = true;
  }
  blurSeries(seriesModelList) {
    each(seriesModelList, (seriesModel) => {
      const markerModel = MarkerModel_default.getMarkerModelFromSeries(seriesModel, this.type);
      if (markerModel) {
        const data = markerModel.getData();
        data.eachItemGraphicEl(function(el) {
          if (el) {
            enterBlur(el);
          }
        });
      }
    });
  }
}
MarkerView4.type = "marker";
const MarkerView_default = MarkerView4;

// src/component/marker/MarkPointView.ts
function updateMarkerLayout(mpData, seriesModel, api) {
  const coordSys = seriesModel.coordinateSystem;
  mpData.each(function(idx) {
    const itemModel = mpData.getItemModel(idx);
    let point;
    const xPx = parsePercent3(itemModel.get("x"), api.getWidth());
    const yPx = parsePercent3(itemModel.get("y"), api.getHeight());
    if (!isNaN(xPx) && !isNaN(yPx)) {
      point = [xPx, yPx];
    } else if (seriesModel.getMarkerPosition) {
      point = seriesModel.getMarkerPosition(mpData.getValues(mpData.dimensions, idx));
    } else if (coordSys) {
      const x = mpData.get(coordSys.dimensions[0], idx);
      const y = mpData.get(coordSys.dimensions[1], idx);
      point = coordSys.dataToPoint([x, y]);
    }
    if (!isNaN(xPx)) {
      point[0] = xPx;
    }
    if (!isNaN(yPx)) {
      point[1] = yPx;
    }
    mpData.setItemLayout(idx, point);
  });
}
class MarkPointView2 extends MarkerView_default {
  constructor() {
    super(...arguments);
    this.type = MarkPointView2.type;
  }
  updateTransform(markPointModel, ecModel, api) {
    ecModel.eachSeries(function(seriesModel) {
      const mpModel = MarkerModel_default.getMarkerModelFromSeries(seriesModel, "markPoint");
      if (mpModel) {
        updateMarkerLayout(mpModel.getData(), seriesModel, api);
        this.markerGroupMap.get(seriesModel.id).updateLayout();
      }
    }, this);
  }
  renderSeries(seriesModel, mpModel, ecModel, api) {
    const coordSys = seriesModel.coordinateSystem;
    const seriesId = seriesModel.id;
    const seriesData = seriesModel.getData();
    const symbolDrawMap = this.markerGroupMap;
    const symbolDraw = symbolDrawMap.get(seriesId) || symbolDrawMap.set(seriesId, new SymbolDraw_default());
    const mpData = createList3(coordSys, seriesModel, mpModel);
    mpModel.setData(mpData);
    updateMarkerLayout(mpModel.getData(), seriesModel, api);
    mpData.each(function(idx) {
      const itemModel = mpData.getItemModel(idx);
      let symbol14 = itemModel.getShallow("symbol");
      let symbolSize = itemModel.getShallow("symbolSize");
      if (isFunction(symbol14) || isFunction(symbolSize)) {
        const rawIdx = mpModel.getRawValue(idx);
        const dataParams = mpModel.getDataParams(idx);
        if (isFunction(symbol14)) {
          symbol14 = symbol14(rawIdx, dataParams);
        }
        if (isFunction(symbolSize)) {
          symbolSize = symbolSize(rawIdx, dataParams);
        }
      }
      const style2 = itemModel.getModel("itemStyle").getItemStyle();
      const color8 = getVisualFromData(seriesData, "color");
      if (!style2.fill) {
        style2.fill = color8;
      }
      mpData.setItemVisual(idx, {
        symbol: symbol14,
        symbolSize,
        style: style2
      });
    });
    symbolDraw.updateData(mpData);
    this.group.add(symbolDraw.group);
    mpData.eachItemGraphicEl(function(el) {
      el.traverse(function(child) {
        getECData(child).dataModel = mpModel;
      });
    });
    this.markKeep(symbolDraw);
    symbolDraw.group.silent = mpModel.get("silent") || seriesModel.get("silent");
  }
}
MarkPointView2.type = "markPoint";
function createList3(coordSys, seriesModel, mpModel) {
  let coordDimsInfos;
  if (coordSys) {
    coordDimsInfos = map2(coordSys && coordSys.dimensions, function(coordDim) {
      const info = seriesModel.getData().getDimensionInfo(seriesModel.getData().mapDimension(coordDim)) || {};
      return defaults({
        name: coordDim
      }, info);
    });
  } else {
    coordDimsInfos = [{
      name: "value",
      type: "float"
    }];
  }
  const mpData = new List_default(coordDimsInfos, mpModel);
  let dataOpt = map2(mpModel.get("data"), curry(dataTransform, seriesModel));
  if (coordSys) {
    dataOpt = filter(dataOpt, curry(dataFilter6, coordSys));
  }
  mpData.initData(dataOpt, null, coordSys ? dimValueGetter : function(item) {
    return item.value;
  });
  return mpData;
}
Component_default2.registerClass(MarkPointView2);

// src/component/markPoint.ts
registerPreprocessor(function(opt) {
  opt.markPoint = opt.markPoint || {};
});

// src/component/marker/MarkLineModel.ts
class MarkLineModel2 extends MarkerModel_default {
  constructor() {
    super(...arguments);
    this.type = MarkLineModel2.type;
  }
  createMarkerModelFromSeries(markerOpt, masterMarkerModel, ecModel) {
    return new MarkLineModel2(markerOpt, masterMarkerModel, ecModel);
  }
}
MarkLineModel2.type = "markLine";
MarkLineModel2.defaultOption = {
  zlevel: 0,
  z: 5,
  symbol: ["circle", "arrow"],
  symbolSize: [8, 16],
  precision: 2,
  tooltip: {
    trigger: "item"
  },
  label: {
    show: true,
    position: "end",
    distance: 5
  },
  lineStyle: {
    type: "dashed"
  },
  emphasis: {
    label: {
      show: true
    },
    lineStyle: {
      width: 3
    }
  },
  animationEasing: "linear"
};
Component_default.registerClass(MarkLineModel2);

// src/component/marker/MarkLineView.ts
const inner11 = makeInner();
const markLineTransform = function(seriesModel, coordSys, mlModel, item) {
  const data = seriesModel.getData();
  let itemArray;
  if (!isArray(item)) {
    const mlType = item.type;
    if (mlType === "min" || mlType === "max" || mlType === "average" || mlType === "median" || (item.xAxis != null || item.yAxis != null)) {
      let valueAxis2;
      let value;
      if (item.yAxis != null || item.xAxis != null) {
        valueAxis2 = coordSys.getAxis(item.yAxis != null ? "y" : "x");
        value = retrieve(item.yAxis, item.xAxis);
      } else {
        const axisInfo = getAxisInfo2(item, data, coordSys, seriesModel);
        valueAxis2 = axisInfo.valueAxis;
        const valueDataDim = getStackedDimension(data, axisInfo.valueDataDim);
        value = numCalculate(data, valueDataDim, mlType);
      }
      const valueIndex = valueAxis2.dim === "x" ? 0 : 1;
      const baseIndex = 1 - valueIndex;
      const mlFrom = clone2(item);
      const mlTo = {
        coord: []
      };
      mlFrom.type = null;
      mlFrom.coord = [];
      mlFrom.coord[baseIndex] = -Infinity;
      mlTo.coord[baseIndex] = Infinity;
      const precision = mlModel.get("precision");
      if (precision >= 0 && typeof value === "number") {
        value = +value.toFixed(Math.min(precision, 20));
      }
      mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;
      itemArray = [mlFrom, mlTo, {
        type: mlType,
        valueIndex: item.valueIndex,
        value
      }];
    } else {
      if (__DEV__) {
        logError("Invalid markLine data.");
      }
      itemArray = [];
    }
  } else {
    itemArray = item;
  }
  const normalizedItem = [dataTransform(seriesModel, itemArray[0]), dataTransform(seriesModel, itemArray[1]), extend({}, itemArray[2])];
  normalizedItem[2].type = normalizedItem[2].type || null;
  merge(normalizedItem[2], normalizedItem[0]);
  merge(normalizedItem[2], normalizedItem[1]);
  return normalizedItem;
};
function isInifinity2(val) {
  return !isNaN(val) && !isFinite(val);
}
function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
  const otherDimIndex = 1 - dimIndex;
  const dimName = coordSys.dimensions[dimIndex];
  return isInifinity2(fromCoord[otherDimIndex]) && isInifinity2(toCoord[otherDimIndex]) && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);
}
function markLineFilter(coordSys, item) {
  if (coordSys.type === "cartesian2d") {
    const fromCoord = item[0].coord;
    const toCoord = item[1].coord;
    if (fromCoord && toCoord && (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
      return true;
    }
  }
  return dataFilter6(coordSys, item[0]) && dataFilter6(coordSys, item[1]);
}
function updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api) {
  const coordSys = seriesModel.coordinateSystem;
  const itemModel = data.getItemModel(idx);
  let point;
  const xPx = parsePercent3(itemModel.get("x"), api.getWidth());
  const yPx = parsePercent3(itemModel.get("y"), api.getHeight());
  if (!isNaN(xPx) && !isNaN(yPx)) {
    point = [xPx, yPx];
  } else {
    if (seriesModel.getMarkerPosition) {
      point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));
    } else {
      const dims = coordSys.dimensions;
      const x = data.get(dims[0], idx);
      const y = data.get(dims[1], idx);
      point = coordSys.dataToPoint([x, y]);
    }
    if (isCoordinateSystemType(coordSys, "cartesian2d")) {
      const xAxis = coordSys.getAxis("x");
      const yAxis = coordSys.getAxis("y");
      const dims = coordSys.dimensions;
      if (isInifinity2(data.get(dims[0], idx))) {
        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);
      } else if (isInifinity2(data.get(dims[1], idx))) {
        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);
      }
    }
    if (!isNaN(xPx)) {
      point[0] = xPx;
    }
    if (!isNaN(yPx)) {
      point[1] = yPx;
    }
  }
  data.setItemLayout(idx, point);
}
class MarkLineView2 extends MarkerView_default {
  constructor() {
    super(...arguments);
    this.type = MarkLineView2.type;
  }
  updateTransform(markLineModel, ecModel, api) {
    ecModel.eachSeries(function(seriesModel) {
      const mlModel = MarkerModel_default.getMarkerModelFromSeries(seriesModel, "markLine");
      if (mlModel) {
        const mlData = mlModel.getData();
        const fromData = inner11(mlModel).from;
        const toData = inner11(mlModel).to;
        fromData.each(function(idx) {
          updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);
          updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);
        });
        mlData.each(function(idx) {
          mlData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);
        });
        this.markerGroupMap.get(seriesModel.id).updateLayout();
      }
    }, this);
  }
  renderSeries(seriesModel, mlModel, ecModel, api) {
    const coordSys = seriesModel.coordinateSystem;
    const seriesId = seriesModel.id;
    const seriesData = seriesModel.getData();
    const lineDrawMap = this.markerGroupMap;
    const lineDraw = lineDrawMap.get(seriesId) || lineDrawMap.set(seriesId, new LineDraw_default());
    this.group.add(lineDraw.group);
    const mlData = createList2(coordSys, seriesModel, mlModel);
    const fromData = mlData.from;
    const toData = mlData.to;
    const lineData = mlData.line;
    inner11(mlModel).from = fromData;
    inner11(mlModel).to = toData;
    mlModel.setData(lineData);
    let symbolType = mlModel.get("symbol");
    let symbolSize = mlModel.get("symbolSize");
    if (!isArray(symbolType)) {
      symbolType = [symbolType, symbolType];
    }
    if (!isArray(symbolSize)) {
      symbolSize = [symbolSize, symbolSize];
    }
    mlData.from.each(function(idx) {
      updateDataVisualAndLayout(fromData, idx, true);
      updateDataVisualAndLayout(toData, idx, false);
    });
    lineData.each(function(idx) {
      const lineStyle3 = lineData.getItemModel(idx).getModel("lineStyle").getLineStyle();
      lineData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);
      if (lineStyle3.stroke == null) {
        lineStyle3.stroke = fromData.getItemVisual(idx, "style").fill;
      }
      lineData.setItemVisual(idx, {
        fromSymbolSize: fromData.getItemVisual(idx, "symbolSize"),
        fromSymbol: fromData.getItemVisual(idx, "symbol"),
        toSymbolSize: toData.getItemVisual(idx, "symbolSize"),
        toSymbol: toData.getItemVisual(idx, "symbol"),
        style: lineStyle3
      });
    });
    lineDraw.updateData(lineData);
    mlData.line.eachItemGraphicEl(function(el, idx) {
      el.traverse(function(child) {
        getECData(child).dataModel = mlModel;
      });
    });
    function updateDataVisualAndLayout(data, idx, isFrom) {
      const itemModel = data.getItemModel(idx);
      updateSingleMarkerEndLayout(data, idx, isFrom, seriesModel, api);
      const style2 = itemModel.getModel("itemStyle").getItemStyle();
      if (style2.fill == null) {
        style2.fill = getVisualFromData(seriesData, "color");
      }
      data.setItemVisual(idx, {
        symbolSize: itemModel.get("symbolSize") || symbolSize[isFrom ? 0 : 1],
        symbol: itemModel.get("symbol", true) || symbolType[isFrom ? 0 : 1],
        style: style2
      });
    }
    this.markKeep(lineDraw);
    lineDraw.group.silent = mlModel.get("silent") || seriesModel.get("silent");
  }
}
MarkLineView2.type = "markLine";
function createList2(coordSys, seriesModel, mlModel) {
  let coordDimsInfos;
  if (coordSys) {
    coordDimsInfos = map2(coordSys && coordSys.dimensions, function(coordDim) {
      const info = seriesModel.getData().getDimensionInfo(seriesModel.getData().mapDimension(coordDim)) || {};
      return defaults({
        name: coordDim
      }, info);
    });
  } else {
    coordDimsInfos = [{
      name: "value",
      type: "float"
    }];
  }
  const fromData = new List_default(coordDimsInfos, mlModel);
  const toData = new List_default(coordDimsInfos, mlModel);
  const lineData = new List_default([], mlModel);
  let optData = map2(mlModel.get("data"), curry(markLineTransform, seriesModel, coordSys, mlModel));
  if (coordSys) {
    optData = filter(optData, curry(markLineFilter, coordSys));
  }
  const dimValueGetter2 = coordSys ? dimValueGetter : function(item) {
    return item.value;
  };
  fromData.initData(map2(optData, function(item) {
    return item[0];
  }), null, dimValueGetter2);
  toData.initData(map2(optData, function(item) {
    return item[1];
  }), null, dimValueGetter2);
  lineData.initData(map2(optData, function(item) {
    return item[2];
  }));
  lineData.hasItemOption = true;
  return {
    from: fromData,
    to: toData,
    line: lineData
  };
}
Component_default2.registerClass(MarkLineView2);

// src/component/markLine.ts
registerPreprocessor(function(opt) {
  opt.markLine = opt.markLine || {};
});

// src/component/marker/MarkAreaModel.ts
class MarkAreaModel2 extends MarkerModel_default {
  constructor() {
    super(...arguments);
    this.type = MarkAreaModel2.type;
  }
  createMarkerModelFromSeries(markerOpt, masterMarkerModel, ecModel) {
    return new MarkAreaModel2(markerOpt, masterMarkerModel, ecModel);
  }
}
MarkAreaModel2.type = "markArea";
MarkAreaModel2.defaultOption = {
  zlevel: 0,
  z: 1,
  tooltip: {
    trigger: "item"
  },
  animation: false,
  label: {
    show: true,
    position: "top"
  },
  itemStyle: {
    borderWidth: 0
  },
  emphasis: {
    label: {
      show: true,
      position: "top"
    }
  }
};
Component_default.registerClass(MarkAreaModel2);

// src/component/marker/MarkAreaView.ts
const inner10 = makeInner();
const markAreaTransform = function(seriesModel, coordSys, maModel, item) {
  const lt2 = dataTransform(seriesModel, item[0]);
  const rb2 = dataTransform(seriesModel, item[1]);
  const ltCoord = lt2.coord;
  const rbCoord = rb2.coord;
  ltCoord[0] = retrieve(ltCoord[0], -Infinity);
  ltCoord[1] = retrieve(ltCoord[1], -Infinity);
  rbCoord[0] = retrieve(rbCoord[0], Infinity);
  rbCoord[1] = retrieve(rbCoord[1], Infinity);
  const result = mergeAll([{}, lt2, rb2]);
  result.coord = [lt2.coord, rb2.coord];
  result.x0 = lt2.x;
  result.y0 = lt2.y;
  result.x1 = rb2.x;
  result.y1 = rb2.y;
  return result;
};
function isInifinity(val) {
  return !isNaN(val) && !isFinite(val);
}
function ifMarkAreaHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
  const otherDimIndex = 1 - dimIndex;
  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);
}
function markAreaFilter(coordSys, item) {
  const fromCoord = item.coord[0];
  const toCoord = item.coord[1];
  if (isCoordinateSystemType(coordSys, "cartesian2d")) {
    if (fromCoord && toCoord && (ifMarkAreaHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkAreaHasOnlyDim(0, fromCoord, toCoord, coordSys))) {
      return true;
    }
  }
  return dataFilter6(coordSys, {
    coord: fromCoord,
    x: item.x0,
    y: item.y0
  }) || dataFilter6(coordSys, {
    coord: toCoord,
    x: item.x1,
    y: item.y1
  });
}
function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {
  const coordSys = seriesModel.coordinateSystem;
  const itemModel = data.getItemModel(idx);
  let point;
  const xPx = parsePercent3(itemModel.get(dims[0]), api.getWidth());
  const yPx = parsePercent3(itemModel.get(dims[1]), api.getHeight());
  if (!isNaN(xPx) && !isNaN(yPx)) {
    point = [xPx, yPx];
  } else {
    if (seriesModel.getMarkerPosition) {
      point = seriesModel.getMarkerPosition(data.getValues(dims, idx));
    } else {
      const x = data.get(dims[0], idx);
      const y = data.get(dims[1], idx);
      const pt = [x, y];
      coordSys.clampData && coordSys.clampData(pt, pt);
      point = coordSys.dataToPoint(pt, true);
    }
    if (isCoordinateSystemType(coordSys, "cartesian2d")) {
      const xAxis = coordSys.getAxis("x");
      const yAxis = coordSys.getAxis("y");
      const x = data.get(dims[0], idx);
      const y = data.get(dims[1], idx);
      if (isInifinity(x)) {
        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === "x0" ? 0 : 1]);
      } else if (isInifinity(y)) {
        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === "y0" ? 0 : 1]);
      }
    }
    if (!isNaN(xPx)) {
      point[0] = xPx;
    }
    if (!isNaN(yPx)) {
      point[1] = yPx;
    }
  }
  return point;
}
const dimPermutations = [["x0", "y0"], ["x1", "y0"], ["x1", "y1"], ["x0", "y1"]];
class MarkAreaView2 extends MarkerView_default {
  constructor() {
    super(...arguments);
    this.type = MarkAreaView2.type;
  }
  updateTransform(markAreaModel, ecModel, api) {
    ecModel.eachSeries(function(seriesModel) {
      const maModel = MarkerModel_default.getMarkerModelFromSeries(seriesModel, "markArea");
      if (maModel) {
        const areaData = maModel.getData();
        areaData.each(function(idx) {
          const points9 = map2(dimPermutations, function(dim) {
            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
          });
          areaData.setItemLayout(idx, points9);
          const el = areaData.getItemGraphicEl(idx);
          el.setShape("points", points9);
        });
      }
    }, this);
  }
  renderSeries(seriesModel, maModel, ecModel, api) {
    const coordSys = seriesModel.coordinateSystem;
    const seriesId = seriesModel.id;
    const seriesData = seriesModel.getData();
    const areaGroupMap = this.markerGroupMap;
    const polygonGroup = areaGroupMap.get(seriesId) || areaGroupMap.set(seriesId, {
      group: new Group_default()
    });
    this.group.add(polygonGroup.group);
    this.markKeep(polygonGroup);
    const areaData = createList(coordSys, seriesModel, maModel);
    maModel.setData(areaData);
    areaData.each(function(idx) {
      areaData.setItemLayout(idx, map2(dimPermutations, function(dim) {
        return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
      }));
      const style2 = areaData.getItemModel(idx).getModel("itemStyle").getItemStyle();
      const color8 = getVisualFromData(seriesData, "color");
      if (!style2.fill) {
        style2.fill = color8;
        if (typeof style2.fill === "string") {
          style2.fill = modifyAlpha(style2.fill, 0.4);
        }
      }
      if (!style2.stroke) {
        style2.stroke = color8;
      }
      areaData.setItemVisual(idx, "style", style2);
    });
    areaData.diff(inner10(polygonGroup).data).add(function(idx) {
      const polygon = new Polygon_default({
        shape: {
          points: areaData.getItemLayout(idx)
        }
      });
      areaData.setItemGraphicEl(idx, polygon);
      polygonGroup.group.add(polygon);
    }).update(function(newIdx, oldIdx) {
      const polygon = inner10(polygonGroup).data.getItemGraphicEl(oldIdx);
      updateProps(polygon, {
        shape: {
          points: areaData.getItemLayout(newIdx)
        }
      }, maModel, newIdx);
      polygonGroup.group.add(polygon);
      areaData.setItemGraphicEl(newIdx, polygon);
    }).remove(function(idx) {
      const polygon = inner10(polygonGroup).data.getItemGraphicEl(idx);
      polygonGroup.group.remove(polygon);
    }).execute();
    areaData.eachItemGraphicEl(function(polygon, idx) {
      const itemModel = areaData.getItemModel(idx);
      const style2 = areaData.getItemVisual(idx, "style");
      polygon.useStyle(areaData.getItemVisual(idx, "style"));
      setLabelStyle(polygon, getLabelStatesModels(itemModel), {
        labelFetcher: maModel,
        labelDataIndex: idx,
        defaultText: areaData.getName(idx) || "",
        inheritColor: typeof style2.fill === "string" ? modifyAlpha(style2.fill, 1) : "#000"
      });
      setStatesStylesFromModel(polygon, itemModel);
      enableHoverEmphasis(polygon);
      getECData(polygon).dataModel = maModel;
    });
    inner10(polygonGroup).data = areaData;
    polygonGroup.group.silent = maModel.get("silent") || seriesModel.get("silent");
  }
}
MarkAreaView2.type = "markArea";
function createList(coordSys, seriesModel, maModel) {
  let coordDimsInfos;
  let areaData;
  const dims = ["x0", "y0", "x1", "y1"];
  if (coordSys) {
    coordDimsInfos = map2(coordSys && coordSys.dimensions, function(coordDim) {
      const data = seriesModel.getData();
      const info = data.getDimensionInfo(data.mapDimension(coordDim)) || {};
      return defaults({
        name: coordDim
      }, info);
    });
    areaData = new List_default(map2(dims, function(dim, idx) {
      return {
        name: dim,
        type: coordDimsInfos[idx % 2].type
      };
    }), maModel);
  } else {
    coordDimsInfos = [{
      name: "value",
      type: "float"
    }];
    areaData = new List_default(coordDimsInfos, maModel);
  }
  let optData = map2(maModel.get("data"), curry(markAreaTransform, seriesModel, coordSys, maModel));
  if (coordSys) {
    optData = filter(optData, curry(markAreaFilter, coordSys));
  }
  const dimValueGetter2 = coordSys ? function(item, dimName, dataIndex, dimIndex) {
    return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];
  } : function(item) {
    return item.value;
  };
  areaData.initData(optData, null, dimValueGetter2);
  areaData.hasItemOption = true;
  return areaData;
}
Component_default2.registerClass(MarkAreaView2);

// src/component/markArea.ts
registerPreprocessor(function(opt) {
  opt.markArea = opt.markArea || {};
});

// src/component/legend/LegendModel.ts
const langSelector = lang_default.legend.selector;
const defaultSelectorOption = {
  all: {
    type: "all",
    title: clone2(langSelector.all)
  },
  inverse: {
    type: "inverse",
    title: clone2(langSelector.inverse)
  }
};
class LegendModel2 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = LegendModel2.type;
    this.layoutMode = {
      type: "box",
      ignoreSize: true
    };
  }
  init(option, parentModel, ecModel) {
    this.mergeDefaultAndTheme(option, ecModel);
    option.selected = option.selected || {};
    this._updateSelector(option);
  }
  mergeOption(option, ecModel) {
    super.mergeOption(option, ecModel);
    this._updateSelector(option);
  }
  _updateSelector(option) {
    let selector7 = option.selector;
    if (selector7 === true) {
      selector7 = option.selector = ["all", "inverse"];
    }
    if (isArray(selector7)) {
      each(selector7, function(item, index) {
        isString(item) && (item = {
          type: item
        });
        selector7[index] = merge(item, defaultSelectorOption[item.type]);
      });
    }
  }
  optionUpdated() {
    this._updateData(this.ecModel);
    const legendData = this._data;
    if (legendData[0] && this.get("selectedMode") === "single") {
      let hasSelected = false;
      for (let i = 0; i < legendData.length; i++) {
        const name = legendData[i].get("name");
        if (this.isSelected(name)) {
          this.select(name);
          hasSelected = true;
          break;
        }
      }
      !hasSelected && this.select(legendData[0].get("name"));
    }
  }
  _updateData(ecModel) {
    let potentialData = [];
    let availableNames = [];
    ecModel.eachRawSeries(function(seriesModel) {
      const seriesName = seriesModel.name;
      availableNames.push(seriesName);
      let isPotential;
      if (seriesModel.legendVisualProvider) {
        const provider = seriesModel.legendVisualProvider;
        const names = provider.getAllNames();
        if (!ecModel.isSeriesFiltered(seriesModel)) {
          availableNames = availableNames.concat(names);
        }
        if (names.length) {
          potentialData = potentialData.concat(names);
        } else {
          isPotential = true;
        }
      } else {
        isPotential = true;
      }
      if (isPotential && isNameSpecified(seriesModel)) {
        potentialData.push(seriesModel.name);
      }
    });
    this._availableNames = availableNames;
    const rawData = this.get("data") || potentialData;
    const legendData = map2(rawData, function(dataItem) {
      if (typeof dataItem === "string" || typeof dataItem === "number") {
        dataItem = {
          name: dataItem
        };
      }
      return new Model_default(dataItem, this, this.ecModel);
    }, this);
    this._data = legendData;
  }
  getData() {
    return this._data;
  }
  select(name) {
    const selected = this.option.selected;
    const selectedMode = this.get("selectedMode");
    if (selectedMode === "single") {
      const data = this._data;
      each(data, function(dataItem) {
        selected[dataItem.get("name")] = false;
      });
    }
    selected[name] = true;
  }
  unSelect(name) {
    if (this.get("selectedMode") !== "single") {
      this.option.selected[name] = false;
    }
  }
  toggleSelected(name) {
    const selected = this.option.selected;
    if (!selected.hasOwnProperty(name)) {
      selected[name] = true;
    }
    this[selected[name] ? "unSelect" : "select"](name);
  }
  allSelect() {
    const data = this._data;
    const selected = this.option.selected;
    each(data, function(dataItem) {
      selected[dataItem.get("name", true)] = true;
    });
  }
  inverseSelect() {
    const data = this._data;
    const selected = this.option.selected;
    each(data, function(dataItem) {
      const name = dataItem.get("name", true);
      if (!selected.hasOwnProperty(name)) {
        selected[name] = true;
      }
      selected[name] = !selected[name];
    });
  }
  isSelected(name) {
    const selected = this.option.selected;
    return !(selected.hasOwnProperty(name) && !selected[name]) && indexOf(this._availableNames, name) >= 0;
  }
  getOrient() {
    return this.get("orient") === "vertical" ? {
      index: 1,
      name: "vertical"
    } : {
      index: 0,
      name: "horizontal"
    };
  }
}
LegendModel2.type = "legend.plain";
LegendModel2.dependencies = ["series"];
LegendModel2.defaultOption = {
  zlevel: 0,
  z: 4,
  show: true,
  orient: "horizontal",
  left: "center",
  top: 0,
  align: "auto",
  backgroundColor: "rgba(0,0,0,0)",
  borderColor: "#ccc",
  borderRadius: 0,
  borderWidth: 0,
  padding: 5,
  itemGap: 10,
  itemWidth: 25,
  itemHeight: 14,
  inactiveColor: "#ccc",
  inactiveBorderColor: "#ccc",
  itemStyle: {
    borderWidth: 0
  },
  textStyle: {
    color: "#333"
  },
  selectedMode: true,
  selector: false,
  selectorLabel: {
    show: true,
    borderRadius: 10,
    padding: [3, 5, 3, 5],
    fontSize: 12,
    fontFamily: " sans-serif",
    color: "#666",
    borderWidth: 1,
    borderColor: "#666"
  },
  emphasis: {
    selectorLabel: {
      show: true,
      color: "#eee",
      backgroundColor: "#666"
    }
  },
  selectorPosition: "auto",
  selectorItemGap: 7,
  selectorButtonGap: 10,
  tooltip: {
    show: false
  }
};
Component_default.registerClass(LegendModel2);
const LegendModel_default = LegendModel2;

// src/component/legend/legendAction.ts
function legendSelectActionHandler(methodName, payload, ecModel) {
  const selectedMap = {};
  const isToggleSelect = methodName === "toggleSelected";
  let isSelected;
  ecModel.eachComponent("legend", function(legendModel) {
    if (isToggleSelect && isSelected != null) {
      legendModel[isSelected ? "select" : "unSelect"](payload.name);
    } else if (methodName === "allSelect" || methodName === "inverseSelect") {
      legendModel[methodName]();
    } else {
      legendModel[methodName](payload.name);
      isSelected = legendModel.isSelected(payload.name);
    }
    const legendData = legendModel.getData();
    each(legendData, function(model65) {
      const name = model65.get("name");
      if (name === "\n" || name === "") {
        return;
      }
      const isItemSelected = legendModel.isSelected(name);
      if (selectedMap.hasOwnProperty(name)) {
        selectedMap[name] = selectedMap[name] && isItemSelected;
      } else {
        selectedMap[name] = isItemSelected;
      }
    });
  });
  return methodName === "allSelect" || methodName === "inverseSelect" ? {
    selected: selectedMap
  } : {
    name: payload.name,
    selected: selectedMap
  };
}
registerAction("legendToggleSelect", "legendselectchanged", curry(legendSelectActionHandler, "toggleSelected"));
registerAction("legendAllSelect", "legendselectall", curry(legendSelectActionHandler, "allSelect"));
registerAction("legendInverseSelect", "legendinverseselect", curry(legendSelectActionHandler, "inverseSelect"));
registerAction("legendSelect", "legendselected", curry(legendSelectActionHandler, "select"));
registerAction("legendUnSelect", "legendunselected", curry(legendSelectActionHandler, "unSelect"));

// src/component/legend/LegendView.ts
const curry2 = curry;
const each7 = each;
const Group13 = Group_default;
class LegendView2 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = LegendView2.type;
    this.newlineDisabled = false;
  }
  init() {
    this.group.add(this._contentGroup = new Group13());
    this.group.add(this._selectorGroup = new Group13());
    this._isFirstRender = true;
  }
  getContentGroup() {
    return this._contentGroup;
  }
  getSelectorGroup() {
    return this._selectorGroup;
  }
  render(legendModel, ecModel, api) {
    const isFirstRender = this._isFirstRender;
    this._isFirstRender = false;
    this.resetInner();
    if (!legendModel.get("show", true)) {
      return;
    }
    let itemAlign = legendModel.get("align");
    const orient = legendModel.get("orient");
    if (!itemAlign || itemAlign === "auto") {
      itemAlign = legendModel.get("left") === "right" && orient === "vertical" ? "right" : "left";
    }
    const selector7 = legendModel.get("selector", true);
    let selectorPosition = legendModel.get("selectorPosition", true);
    if (selector7 && (!selectorPosition || selectorPosition === "auto")) {
      selectorPosition = orient === "horizontal" ? "end" : "start";
    }
    this.renderInner(itemAlign, legendModel, ecModel, api, selector7, orient, selectorPosition);
    const positionInfo = legendModel.getBoxLayoutParams();
    const viewportSize = {
      width: api.getWidth(),
      height: api.getHeight()
    };
    const padding = legendModel.get("padding");
    const maxSize = getLayoutRect(positionInfo, viewportSize, padding);
    const mainRect = this.layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector7, selectorPosition);
    const layoutRect = getLayoutRect(defaults({
      width: mainRect.width,
      height: mainRect.height
    }, positionInfo), viewportSize, padding);
    this.group.x = layoutRect.x - mainRect.x;
    this.group.y = layoutRect.y - mainRect.y;
    this.group.markRedraw();
    this.group.add(this._backgroundEl = makeBackground(mainRect, legendModel));
  }
  resetInner() {
    this.getContentGroup().removeAll();
    this._backgroundEl && this.group.remove(this._backgroundEl);
    this.getSelectorGroup().removeAll();
  }
  renderInner(itemAlign, legendModel, ecModel, api, selector7, orient, selectorPosition) {
    const contentGroup = this.getContentGroup();
    const legendDrawnMap = createHashMap();
    const selectMode = legendModel.get("selectedMode");
    const excludeSeriesId = [];
    ecModel.eachRawSeries(function(seriesModel) {
      !seriesModel.get("legendHoverLink") && excludeSeriesId.push(seriesModel.id);
    });
    each7(legendModel.getData(), function(itemModel, dataIndex) {
      const name = itemModel.get("name");
      if (!this.newlineDisabled && (name === "" || name === "\n")) {
        const g = new Group13();
        g.newline = true;
        contentGroup.add(g);
        return;
      }
      const seriesModel = ecModel.getSeriesByName(name)[0];
      if (legendDrawnMap.get(name)) {
        return;
      }
      if (seriesModel) {
        const data = seriesModel.getData();
        const style2 = data.getVisual("style");
        const color8 = style2[data.getVisual("drawType")] || style2.fill;
        const borderColor = style2.stroke;
        const legendSymbolType = data.getVisual("legendSymbol") || "roundRect";
        const symbolType = data.getVisual("symbol");
        const itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color8, borderColor, selectMode);
        itemGroup.on("click", curry2(dispatchSelectAction, name, null, api, excludeSeriesId)).on("mouseover", curry2(dispatchHighlightAction, seriesModel.name, null, api, excludeSeriesId)).on("mouseout", curry2(dispatchDownplayAction, seriesModel.name, null, api, excludeSeriesId));
        legendDrawnMap.set(name, true);
      } else {
        ecModel.eachRawSeries(function(seriesModel2) {
          if (legendDrawnMap.get(name)) {
            return;
          }
          if (seriesModel2.legendVisualProvider) {
            const provider = seriesModel2.legendVisualProvider;
            if (!provider.containName(name)) {
              return;
            }
            const idx = provider.indexOfName(name);
            const style2 = provider.getItemVisual(idx, "style");
            const borderColor = style2.stroke;
            let color8 = style2.fill;
            const colorArr = parse(style2.fill);
            if (colorArr && colorArr[3] === 0) {
              colorArr[3] = 0.2;
              color8 = stringify(colorArr, "rgba");
            }
            const legendSymbolType = "roundRect";
            const itemGroup = this._createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, null, itemAlign, color8, borderColor, selectMode);
            itemGroup.on("click", curry2(dispatchSelectAction, null, name, api, excludeSeriesId)).on("mouseover", curry2(dispatchHighlightAction, null, name, api, excludeSeriesId)).on("mouseout", curry2(dispatchDownplayAction, null, name, api, excludeSeriesId));
            legendDrawnMap.set(name, true);
          }
        }, this);
      }
      if (__DEV__) {
        if (!legendDrawnMap.get(name)) {
          console.warn(name + " series not exists. Legend data should be same with series name or data name.");
        }
      }
    }, this);
    if (selector7) {
      this._createSelector(selector7, legendModel, api, orient, selectorPosition);
    }
  }
  _createSelector(selector7, legendModel, api, orient, selectorPosition) {
    const selectorGroup = this.getSelectorGroup();
    each7(selector7, function createSelectorButton(selectorItem) {
      const type = selectorItem.type;
      const labelText = new Text_default({
        style: {
          x: 0,
          y: 0,
          align: "center",
          verticalAlign: "middle"
        },
        onclick() {
          api.dispatchAction({
            type: type === "all" ? "legendAllSelect" : "legendInverseSelect"
          });
        }
      });
      selectorGroup.add(labelText);
      const labelModel = legendModel.getModel("selectorLabel");
      const emphasisLabelModel = legendModel.getModel(["emphasis", "selectorLabel"]);
      setLabelStyle(labelText, {
        normal: labelModel,
        emphasis: emphasisLabelModel
      }, {
        defaultText: selectorItem.title
      });
      enableHoverEmphasis(labelText);
    });
  }
  _createItem(name, dataIndex, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color8, borderColor, selectMode) {
    const itemWidth = legendModel.get("itemWidth");
    const itemHeight = legendModel.get("itemHeight");
    const inactiveColor = legendModel.get("inactiveColor");
    const inactiveBorderColor = legendModel.get("inactiveBorderColor");
    const symbolKeepAspect = legendModel.get("symbolKeepAspect");
    const legendModelItemStyle = legendModel.getModel("itemStyle");
    const isSelected = legendModel.isSelected(name);
    const itemGroup = new Group13();
    const textStyleModel = itemModel.getModel("textStyle");
    const itemIcon = itemModel.get("icon");
    const tooltipModel = itemModel.getModel("tooltip");
    const legendGlobalTooltipModel = tooltipModel.parentModel;
    legendSymbolType = itemIcon || legendSymbolType;
    const legendSymbol = createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color8 : inactiveColor, symbolKeepAspect == null ? true : symbolKeepAspect);
    itemGroup.add(setSymbolStyle(legendSymbol, legendSymbolType, legendModelItemStyle, borderColor, inactiveBorderColor, isSelected));
    if (!itemIcon && symbolType && (symbolType !== legendSymbolType || symbolType === "none")) {
      const size = itemHeight * 0.8;
      if (symbolType === "none") {
        symbolType = "circle";
      }
      const legendSymbolCenter = createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color8 : inactiveColor, symbolKeepAspect == null ? true : symbolKeepAspect);
      itemGroup.add(setSymbolStyle(legendSymbolCenter, symbolType, legendModelItemStyle, borderColor, inactiveBorderColor, isSelected));
    }
    const textX = itemAlign === "left" ? itemWidth + 5 : -5;
    const textAlign = itemAlign;
    const formatter = legendModel.get("formatter");
    let content = name;
    if (typeof formatter === "string" && formatter) {
      content = formatter.replace("{name}", name != null ? name : "");
    } else if (typeof formatter === "function") {
      content = formatter(name);
    }
    itemGroup.add(new Text_default({
      style: createTextStyle(textStyleModel, {
        text: content,
        x: textX,
        y: itemHeight / 2,
        fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
        align: textAlign,
        verticalAlign: "middle"
      })
    }));
    const hitRect = new Rect_default({
      shape: itemGroup.getBoundingRect(),
      invisible: true
    });
    if (tooltipModel.get("show")) {
      const formatterParams = {
        componentType: "legend",
        legendIndex: legendModel.componentIndex,
        name,
        $vars: ["name"]
      };
      hitRect.tooltip = extend({
        content: name,
        formatter: legendGlobalTooltipModel.get("formatter", true) || function(params) {
          return params.name;
        },
        formatterParams
      }, tooltipModel.option);
    }
    itemGroup.add(hitRect);
    itemGroup.eachChild(function(child) {
      child.silent = true;
    });
    hitRect.silent = !selectMode;
    this.getContentGroup().add(itemGroup);
    enableHoverEmphasis(itemGroup);
    itemGroup.__legendDataIndex = dataIndex;
    return itemGroup;
  }
  layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector7, selectorPosition) {
    const contentGroup = this.getContentGroup();
    const selectorGroup = this.getSelectorGroup();
    box(legendModel.get("orient"), contentGroup, legendModel.get("itemGap"), maxSize.width, maxSize.height);
    const contentRect = contentGroup.getBoundingRect();
    const contentPos = [-contentRect.x, -contentRect.y];
    selectorGroup.markRedraw();
    contentGroup.markRedraw();
    if (selector7) {
      box("horizontal", selectorGroup, legendModel.get("selectorItemGap", true));
      const selectorRect = selectorGroup.getBoundingRect();
      const selectorPos = [-selectorRect.x, -selectorRect.y];
      const selectorButtonGap = legendModel.get("selectorButtonGap", true);
      const orientIdx = legendModel.getOrient().index;
      const wh = orientIdx === 0 ? "width" : "height";
      const hw = orientIdx === 0 ? "height" : "width";
      const yx = orientIdx === 0 ? "y" : "x";
      if (selectorPosition === "end") {
        selectorPos[orientIdx] += contentRect[wh] + selectorButtonGap;
      } else {
        contentPos[orientIdx] += selectorRect[wh] + selectorButtonGap;
      }
      selectorPos[1 - orientIdx] += contentRect[hw] / 2 - selectorRect[hw] / 2;
      selectorGroup.x = selectorPos[0];
      selectorGroup.y = selectorPos[1];
      contentGroup.x = contentPos[0];
      contentGroup.y = contentPos[1];
      const mainRect = {
        x: 0,
        y: 0
      };
      mainRect[wh] = contentRect[wh] + selectorButtonGap + selectorRect[wh];
      mainRect[hw] = Math.max(contentRect[hw], selectorRect[hw]);
      mainRect[yx] = Math.min(0, selectorRect[yx] + selectorPos[1 - orientIdx]);
      return mainRect;
    } else {
      contentGroup.x = contentPos[0];
      contentGroup.y = contentPos[1];
      return this.group.getBoundingRect();
    }
  }
  remove() {
    this.getContentGroup().removeAll();
    this._isFirstRender = true;
  }
}
LegendView2.type = "legend.plain";
function setSymbolStyle(symbol14, symbolType, legendModelItemStyle, borderColor, inactiveBorderColor, isSelected) {
  let itemStyle5;
  if (symbolType !== "line" && symbolType.indexOf("empty") < 0) {
    itemStyle5 = legendModelItemStyle.getItemStyle();
    symbol14.style.stroke = borderColor;
    if (!isSelected) {
      itemStyle5.stroke = inactiveBorderColor;
    }
  } else {
    itemStyle5 = legendModelItemStyle.getItemStyle(["borderWidth", "borderColor"]);
  }
  symbol14.setStyle(itemStyle5);
  return symbol14;
}
function dispatchSelectAction(seriesName, dataName, api, excludeSeriesId) {
  dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId);
  api.dispatchAction({
    type: "legendToggleSelect",
    name: seriesName != null ? seriesName : dataName
  });
  dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId);
}
function isUseHoverLayer(api) {
  const list = api.getZr().storage.getDisplayList();
  let emphasisState;
  let i = 0;
  const len2 = list.length;
  while (!(emphasisState = list[i].states.emphasis) && i < len2) {
    i++;
  }
  return emphasisState && emphasisState.hoverLayer;
}
function dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId) {
  if (!isUseHoverLayer(api)) {
    api.dispatchAction({
      type: "highlight",
      seriesName,
      name: dataName,
      excludeSeriesId
    });
  }
}
function dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId) {
  if (!isUseHoverLayer(api)) {
    api.dispatchAction({
      type: "downplay",
      seriesName,
      name: dataName,
      excludeSeriesId
    });
  }
}
Component_default2.registerClass(LegendView2);
const LegendView_default = LegendView2;

// src/component/legend/legendFilter.ts
function legendFilter_default(ecModel) {
  const legendModels = ecModel.findComponents({
    mainType: "legend"
  });
  if (legendModels && legendModels.length) {
    ecModel.filterSeries(function(series) {
      for (let i = 0; i < legendModels.length; i++) {
        if (!legendModels[i].isSelected(series.name)) {
          return false;
        }
      }
      return true;
    });
  }
}

// src/component/legend.ts
registerProcessor(PRIORITY.PROCESSOR.SERIES_FILTER, legendFilter_default);
Component_default.registerSubTypeDefaulter("legend", function() {
  return "plain";
});

// src/component/legend/ScrollableLegendModel.ts
class ScrollableLegendModel extends LegendModel_default {
  constructor() {
    super(...arguments);
    this.type = ScrollableLegendModel.type;
  }
  setScrollDataIndex(scrollDataIndex) {
    this.option.scrollDataIndex = scrollDataIndex;
  }
  init(option, parentModel, ecModel) {
    const inputPositionParams = getLayoutParams(option);
    super.init(option, parentModel, ecModel);
    mergeAndNormalizeLayoutParams(this, option, inputPositionParams);
  }
  mergeOption(option, ecModel) {
    super.mergeOption(option, ecModel);
    mergeAndNormalizeLayoutParams(this, this.option, option);
  }
}
ScrollableLegendModel.type = "legend.scroll";
ScrollableLegendModel.defaultOption = inheritDefaultOption(LegendModel_default.defaultOption, {
  scrollDataIndex: 0,
  pageButtonItemGap: 5,
  pageButtonGap: null,
  pageButtonPosition: "end",
  pageFormatter: "{current}/{total}",
  pageIcons: {
    horizontal: ["M0,0L12,-10L12,10z", "M0,0L-12,-10L-12,10z"],
    vertical: ["M0,0L20,0L10,-20z", "M0,0L20,0L10,20z"]
  },
  pageIconColor: "#2f4554",
  pageIconInactiveColor: "#aaa",
  pageIconSize: 15,
  pageTextStyle: {
    color: "#333"
  },
  animationDurationUpdate: 800
});
function mergeAndNormalizeLayoutParams(legendModel, target, raw) {
  const orient = legendModel.getOrient();
  const ignoreSize = [1, 1];
  ignoreSize[orient.index] = 0;
  mergeLayoutParam(target, raw, {
    type: "box",
    ignoreSize: !!ignoreSize
  });
}
Component_default.registerClass(ScrollableLegendModel);

// src/component/legend/ScrollableLegendView.ts
const Group14 = Group_default;
const WH2 = ["width", "height"];
const XY2 = ["x", "y"];
class ScrollableLegendView extends LegendView_default {
  constructor() {
    super(...arguments);
    this.type = ScrollableLegendView.type;
    this.newlineDisabled = true;
    this._currentIndex = 0;
  }
  init() {
    super.init();
    this.group.add(this._containerGroup = new Group14());
    this._containerGroup.add(this.getContentGroup());
    this.group.add(this._controllerGroup = new Group14());
  }
  resetInner() {
    super.resetInner();
    this._controllerGroup.removeAll();
    this._containerGroup.removeClipPath();
    this._containerGroup.__rectSize = null;
  }
  renderInner(itemAlign, legendModel, ecModel, api, selector7, orient, selectorPosition) {
    const self2 = this;
    super.renderInner(itemAlign, legendModel, ecModel, api, selector7, orient, selectorPosition);
    const controllerGroup = this._controllerGroup;
    const pageIconSize = legendModel.get("pageIconSize", true);
    const pageIconSizeArr = isArray(pageIconSize) ? pageIconSize : [pageIconSize, pageIconSize];
    createPageButton("pagePrev", 0);
    const pageTextStyleModel = legendModel.getModel("pageTextStyle");
    controllerGroup.add(new Text_default({
      name: "pageText",
      style: {
        text: "xx/xx",
        fill: pageTextStyleModel.getTextColor(),
        font: pageTextStyleModel.getFont(),
        verticalAlign: "middle",
        align: "center"
      },
      silent: true
    }));
    createPageButton("pageNext", 1);
    function createPageButton(name, iconIdx) {
      const pageDataIndexName = name + "DataIndex";
      const icon = createIcon(legendModel.get("pageIcons", true)[legendModel.getOrient().name][iconIdx], {
        onclick: bind(self2._pageGo, self2, pageDataIndexName, legendModel, api)
      }, {
        x: -pageIconSizeArr[0] / 2,
        y: -pageIconSizeArr[1] / 2,
        width: pageIconSizeArr[0],
        height: pageIconSizeArr[1]
      });
      icon.name = name;
      controllerGroup.add(icon);
    }
  }
  layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector7, selectorPosition) {
    const selectorGroup = this.getSelectorGroup();
    const orientIdx = legendModel.getOrient().index;
    const wh = WH2[orientIdx];
    const xy = XY2[orientIdx];
    const hw = WH2[1 - orientIdx];
    const yx = XY2[1 - orientIdx];
    selector7 && box("horizontal", selectorGroup, legendModel.get("selectorItemGap", true));
    const selectorButtonGap = legendModel.get("selectorButtonGap", true);
    const selectorRect = selectorGroup.getBoundingRect();
    const selectorPos = [-selectorRect.x, -selectorRect.y];
    const processMaxSize = clone2(maxSize);
    selector7 && (processMaxSize[wh] = maxSize[wh] - selectorRect[wh] - selectorButtonGap);
    const mainRect = this._layoutContentAndController(legendModel, isFirstRender, processMaxSize, orientIdx, wh, hw, yx);
    if (selector7) {
      if (selectorPosition === "end") {
        selectorPos[orientIdx] += mainRect[wh] + selectorButtonGap;
      } else {
        const offset = selectorRect[wh] + selectorButtonGap;
        selectorPos[orientIdx] -= offset;
        mainRect[xy] -= offset;
      }
      mainRect[wh] += selectorRect[wh] + selectorButtonGap;
      selectorPos[1 - orientIdx] += mainRect[yx] + mainRect[hw] / 2 - selectorRect[hw] / 2;
      mainRect[hw] = Math.max(mainRect[hw], selectorRect[hw]);
      mainRect[yx] = Math.min(mainRect[yx], selectorRect[yx] + selectorPos[1 - orientIdx]);
      selectorGroup.x = selectorPos[0];
      selectorGroup.y = selectorPos[1];
      selectorGroup.markRedraw();
    }
    return mainRect;
  }
  _layoutContentAndController(legendModel, isFirstRender, maxSize, orientIdx, wh, hw, yx) {
    const contentGroup = this.getContentGroup();
    const containerGroup = this._containerGroup;
    const controllerGroup = this._controllerGroup;
    box(legendModel.get("orient"), contentGroup, legendModel.get("itemGap"), !orientIdx ? null : maxSize.width, orientIdx ? null : maxSize.height);
    box("horizontal", controllerGroup, legendModel.get("pageButtonItemGap", true));
    const contentRect = contentGroup.getBoundingRect();
    const controllerRect = controllerGroup.getBoundingRect();
    const showController = this._showController = contentRect[wh] > maxSize[wh];
    const contentPos = [-contentRect.x, -contentRect.y];
    if (!isFirstRender) {
      contentPos[orientIdx] = contentGroup[yx];
    }
    const containerPos = [0, 0];
    const controllerPos = [-controllerRect.x, -controllerRect.y];
    const pageButtonGap = retrieve2(legendModel.get("pageButtonGap", true), legendModel.get("itemGap", true));
    if (showController) {
      const pageButtonPosition = legendModel.get("pageButtonPosition", true);
      if (pageButtonPosition === "end") {
        controllerPos[orientIdx] += maxSize[wh] - controllerRect[wh];
      } else {
        containerPos[orientIdx] += controllerRect[wh] + pageButtonGap;
      }
    }
    controllerPos[1 - orientIdx] += contentRect[hw] / 2 - controllerRect[hw] / 2;
    contentGroup.setPosition(contentPos);
    containerGroup.setPosition(containerPos);
    controllerGroup.setPosition(controllerPos);
    const mainRect = {
      x: 0,
      y: 0
    };
    mainRect[wh] = showController ? maxSize[wh] : contentRect[wh];
    mainRect[hw] = Math.max(contentRect[hw], controllerRect[hw]);
    mainRect[yx] = Math.min(0, controllerRect[yx] + controllerPos[1 - orientIdx]);
    containerGroup.__rectSize = maxSize[wh];
    if (showController) {
      const clipShape = {
        x: 0,
        y: 0
      };
      clipShape[wh] = Math.max(maxSize[wh] - controllerRect[wh] - pageButtonGap, 0);
      clipShape[hw] = mainRect[hw];
      containerGroup.setClipPath(new Rect_default({
        shape: clipShape
      }));
      containerGroup.__rectSize = clipShape[wh];
    } else {
      controllerGroup.eachChild(function(child) {
        child.attr({
          invisible: true,
          silent: true
        });
      });
    }
    const pageInfo = this._getPageInfo(legendModel);
    pageInfo.pageIndex != null && updateProps(contentGroup, {
      x: pageInfo.contentPosition[0],
      y: pageInfo.contentPosition[1]
    }, showController ? legendModel : null);
    this._updatePageInfoView(legendModel, pageInfo);
    return mainRect;
  }
  _pageGo(to, legendModel, api) {
    const scrollDataIndex = this._getPageInfo(legendModel)[to];
    scrollDataIndex != null && api.dispatchAction({
      type: "legendScroll",
      scrollDataIndex,
      legendId: legendModel.id
    });
  }
  _updatePageInfoView(legendModel, pageInfo) {
    const controllerGroup = this._controllerGroup;
    each(["pagePrev", "pageNext"], function(name) {
      const key = name + "DataIndex";
      const canJump = pageInfo[key] != null;
      const icon = controllerGroup.childOfName(name);
      if (icon) {
        icon.setStyle("fill", canJump ? legendModel.get("pageIconColor", true) : legendModel.get("pageIconInactiveColor", true));
        icon.cursor = canJump ? "pointer" : "default";
      }
    });
    const pageText = controllerGroup.childOfName("pageText");
    const pageFormatter = legendModel.get("pageFormatter");
    const pageIndex = pageInfo.pageIndex;
    const current = pageIndex != null ? pageIndex + 1 : 0;
    const total = pageInfo.pageCount;
    pageText && pageFormatter && pageText.setStyle("text", isString(pageFormatter) ? pageFormatter.replace("{current}", current == null ? "" : current + "").replace("{total}", total == null ? "" : total + "") : pageFormatter({
      current,
      total
    }));
  }
  _getPageInfo(legendModel) {
    const scrollDataIndex = legendModel.get("scrollDataIndex", true);
    const contentGroup = this.getContentGroup();
    const containerRectSize = this._containerGroup.__rectSize;
    const orientIdx = legendModel.getOrient().index;
    const wh = WH2[orientIdx];
    const xy = XY2[orientIdx];
    const targetItemIndex = this._findTargetItemIndex(scrollDataIndex);
    const children = contentGroup.children();
    const targetItem = children[targetItemIndex];
    const itemCount = children.length;
    const pCount = !itemCount ? 0 : 1;
    const result = {
      contentPosition: [contentGroup.x, contentGroup.y],
      pageCount: pCount,
      pageIndex: pCount - 1,
      pagePrevDataIndex: null,
      pageNextDataIndex: null
    };
    if (!targetItem) {
      return result;
    }
    const targetItemInfo = getItemInfo(targetItem);
    result.contentPosition[orientIdx] = -targetItemInfo.s;
    for (let i = targetItemIndex + 1, winStartItemInfo = targetItemInfo, winEndItemInfo = targetItemInfo, currItemInfo = null; i <= itemCount; ++i) {
      currItemInfo = getItemInfo(children[i]);
      if (!currItemInfo && winEndItemInfo.e > winStartItemInfo.s + containerRectSize || currItemInfo && !intersect(currItemInfo, winStartItemInfo.s)) {
        if (winEndItemInfo.i > winStartItemInfo.i) {
          winStartItemInfo = winEndItemInfo;
        } else {
          winStartItemInfo = currItemInfo;
        }
        if (winStartItemInfo) {
          if (result.pageNextDataIndex == null) {
            result.pageNextDataIndex = winStartItemInfo.i;
          }
          ++result.pageCount;
        }
      }
      winEndItemInfo = currItemInfo;
    }
    for (let i = targetItemIndex - 1, winStartItemInfo = targetItemInfo, winEndItemInfo = targetItemInfo, currItemInfo = null; i >= -1; --i) {
      currItemInfo = getItemInfo(children[i]);
      if ((!currItemInfo || !intersect(winEndItemInfo, currItemInfo.s)) && winStartItemInfo.i < winEndItemInfo.i) {
        winEndItemInfo = winStartItemInfo;
        if (result.pagePrevDataIndex == null) {
          result.pagePrevDataIndex = winStartItemInfo.i;
        }
        ++result.pageCount;
        ++result.pageIndex;
      }
      winStartItemInfo = currItemInfo;
    }
    return result;
    function getItemInfo(el) {
      if (el) {
        const itemRect = el.getBoundingRect();
        const start2 = itemRect[xy] + el[xy];
        return {
          s: start2,
          e: start2 + itemRect[wh],
          i: el.__legendDataIndex
        };
      }
    }
    function intersect(itemInfo, winStart) {
      return itemInfo.e >= winStart && itemInfo.s <= winStart + containerRectSize;
    }
  }
  _findTargetItemIndex(targetDataIndex) {
    if (!this._showController) {
      return 0;
    }
    let index;
    const contentGroup = this.getContentGroup();
    let defaultIndex;
    contentGroup.eachChild(function(child, idx) {
      const legendDataIdx = child.__legendDataIndex;
      if (defaultIndex == null && legendDataIdx != null) {
        defaultIndex = idx;
      }
      if (legendDataIdx === targetDataIndex) {
        index = idx;
      }
    });
    return index != null ? index : defaultIndex;
  }
}
ScrollableLegendView.type = "legend.scroll";
Component_default2.registerClass(ScrollableLegendView);

// src/component/legend/scrollableLegendAction.ts
registerAction("legendScroll", "legendscroll", function(payload, ecModel) {
  const scrollDataIndex = payload.scrollDataIndex;
  scrollDataIndex != null && ecModel.eachComponent({
    mainType: "legend",
    subType: "scroll",
    query: payload
  }, function(legendModel) {
    legendModel.setScrollDataIndex(scrollDataIndex);
  });
});

// src/component/legendScroll.ts

// src/component/dataZoom/SliderZoomModel.ts
class SliderZoomModel extends DataZoomModel_default {
  constructor() {
    super(...arguments);
    this.type = SliderZoomModel.type;
  }
}
SliderZoomModel.type = "dataZoom.slider";
SliderZoomModel.layoutMode = "box";
SliderZoomModel.defaultOption = inheritDefaultOption(DataZoomModel_default.defaultOption, {
  show: true,
  right: "ph",
  top: "ph",
  width: "ph",
  height: "ph",
  left: null,
  bottom: null,
  borderColor: "#d2dbee",
  borderRadius: 3,
  backgroundColor: "rgba(47,69,84,0)",
  dataBackground: {
    lineStyle: {
      color: "#d2dbee",
      width: 0.5
    },
    areaStyle: {
      color: "#d2dbee",
      opacity: 0.2
    }
  },
  selectedDataBackground: {
    lineStyle: {
      color: "#8fb0f7",
      width: 0.5
    },
    areaStyle: {
      color: "#8fb0f7",
      opacity: 0.2
    }
  },
  fillerColor: "rgba(135,175,274,0.2)",
  handleIcon: "path://M-9.35,34.56V42m0-40V9.5m-2,0h4a2,2,0,0,1,2,2v21a2,2,0,0,1-2,2h-4a2,2,0,0,1-2-2v-21A2,2,0,0,1-11.35,9.5Z",
  handleSize: "100%",
  handleStyle: {
    color: "#fff",
    borderColor: "#ACB8D1"
  },
  moveHandleSize: 7,
  moveHandleIcon: "path://M15 15.984q0.797 0 1.406 0.609t0.609 1.406-0.609 1.406-1.406 0.609-1.406-0.609-0.609-1.406 0.609-1.406 1.406-0.609zM15 9.984q0.797 0 1.406 0.609t0.609 1.406-0.609 1.406-1.406 0.609-1.406-0.609-0.609-1.406 0.609-1.406 1.406-0.609zM15 8.016q-0.797 0-1.406-0.609t-0.609-1.406 0.609-1.406 1.406-0.609 1.406 0.609 0.609 1.406-0.609 1.406-1.406 0.609zM9 3.984q0.797 0 1.406 0.609t0.609 1.406-0.609 1.406-1.406 0.609-1.406-0.609-0.609-1.406 0.609-1.406 1.406-0.609zM9 9.984q0.797 0 1.406 0.609t0.609 1.406-0.609 1.406-1.406 0.609-1.406-0.609-0.609-1.406 0.609-1.406 1.406-0.609zM11.016 18q0 0.797-0.609 1.406t-1.406 0.609-1.406-0.609-0.609-1.406 0.609-1.406 1.406-0.609 1.406 0.609 0.609 1.406z",
  moveHandleStyle: {
    color: "#D2DBEE"
  },
  showDetail: true,
  showDataShadow: "auto",
  realtime: true,
  zoomLock: false,
  textStyle: {
    color: "#333"
  },
  brushSelect: true,
  brushStyle: {
    color: "rgba(135,175,274,0.15)"
  },
  emphasis: {
    handleStyle: {
      borderColor: "#8FB0F7"
    },
    moveHandleStyle: {
      color: "#8FB0F7"
    }
  }
});
Component_default.registerClass(SliderZoomModel);

// src/component/dataZoom/SliderZoomView.ts
const Rect6 = Rect_default;
const DEFAULT_LOCATION_EDGE_GAP = 7;
const DEFAULT_FRAME_BORDER_WIDTH = 1;
const DEFAULT_FILLER_SIZE = 30;
const DEFAULT_MOVE_HANDLE_SIZE = 7;
const HORIZONTAL = "horizontal";
const VERTICAL = "vertical";
const LABEL_GAP = 5;
const SHOW_DATA_SHADOW_SERIES_TYPE = ["line", "bar", "candlestick", "scatter"];
const REALTIME_ANIMATION_CONFIG = {
  easing: "cubicOut",
  duration: 100
};
class SliderZoomView extends DataZoomView_default {
  constructor() {
    super(...arguments);
    this.type = SliderZoomView.type;
    this._displayables = {};
  }
  init(ecModel, api) {
    this.api = api;
    this._onBrush = bind(this._onBrush, this);
    this._onBrushEnd = bind(this._onBrushEnd, this);
  }
  render(dataZoomModel, ecModel, api, payload) {
    super.render.apply(this, arguments);
    createOrUpdate(this, "_dispatchZoomAction", dataZoomModel.get("throttle"), "fixRate");
    this._orient = dataZoomModel.getOrient();
    if (dataZoomModel.get("show") === false) {
      this.group.removeAll();
      return;
    }
    if (dataZoomModel.noTarget()) {
      this._clear();
      this.group.removeAll();
      return;
    }
    if (!payload || payload.type !== "dataZoom" || payload.from !== this.uid) {
      this._buildView();
    }
    this._updateView();
  }
  dispose() {
    this._clear();
    super.dispose.apply(this, arguments);
  }
  _clear() {
    clear(this, "_dispatchZoomAction");
    const zr = this.api.getZr();
    zr.off("mousemove", this._onBrush);
    zr.off("mouseup", this._onBrushEnd);
  }
  _buildView() {
    const thisGroup = this.group;
    thisGroup.removeAll();
    this._brushing = false;
    this._resetLocation();
    this._resetInterval();
    const barGroup = this._displayables.sliderGroup = new Group_default();
    this._renderBackground();
    this._renderHandle();
    this._renderDataShadow();
    thisGroup.add(barGroup);
    this._positionGroup();
  }
  _resetLocation() {
    const dataZoomModel = this.dataZoomModel;
    const api = this.api;
    const showMoveHandle = dataZoomModel.get("brushSelect");
    const moveHandleSize = showMoveHandle ? DEFAULT_MOVE_HANDLE_SIZE : 0;
    const coordRect = this._findCoordRect();
    const ecSize = {
      width: api.getWidth(),
      height: api.getHeight()
    };
    const positionInfo = this._orient === HORIZONTAL ? {
      right: ecSize.width - coordRect.x - coordRect.width,
      top: ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP - moveHandleSize,
      width: coordRect.width,
      height: DEFAULT_FILLER_SIZE
    } : {
      right: DEFAULT_LOCATION_EDGE_GAP,
      top: coordRect.y,
      width: DEFAULT_FILLER_SIZE,
      height: coordRect.height
    };
    const layoutParams = getLayoutParams(dataZoomModel.option);
    each(["right", "top", "width", "height"], function(name) {
      if (layoutParams[name] === "ph") {
        layoutParams[name] = positionInfo[name];
      }
    });
    const layoutRect = getLayoutRect(layoutParams, ecSize);
    this._location = {
      x: layoutRect.x,
      y: layoutRect.y
    };
    this._size = [layoutRect.width, layoutRect.height];
    this._orient === VERTICAL && this._size.reverse();
  }
  _positionGroup() {
    const thisGroup = this.group;
    const location = this._location;
    const orient = this._orient;
    const targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
    const inverse = targetAxisModel && targetAxisModel.get("inverse");
    const sliderGroup = this._displayables.sliderGroup;
    const otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;
    sliderGroup.attr(orient === HORIZONTAL && !inverse ? {
      scaleY: otherAxisInverse ? 1 : -1,
      scaleX: 1
    } : orient === HORIZONTAL && inverse ? {
      scaleY: otherAxisInverse ? 1 : -1,
      scaleX: -1
    } : orient === VERTICAL && !inverse ? {
      scaleY: otherAxisInverse ? -1 : 1,
      scaleX: 1,
      rotation: Math.PI / 2
    } : {
      scaleY: otherAxisInverse ? -1 : 1,
      scaleX: -1,
      rotation: Math.PI / 2
    });
    const rect = thisGroup.getBoundingRect([sliderGroup]);
    thisGroup.x = location.x - rect.x;
    thisGroup.y = location.y - rect.y;
    thisGroup.markRedraw();
  }
  _getViewExtent() {
    return [0, this._size[0]];
  }
  _renderBackground() {
    const dataZoomModel = this.dataZoomModel;
    const size = this._size;
    const barGroup = this._displayables.sliderGroup;
    const brushSelect = dataZoomModel.get("brushSelect");
    barGroup.add(new Rect6({
      silent: true,
      shape: {
        x: 0,
        y: 0,
        width: size[0],
        height: size[1]
      },
      style: {
        fill: dataZoomModel.get("backgroundColor")
      },
      z2: -40
    }));
    const clickPanel = new Rect6({
      shape: {
        x: 0,
        y: 0,
        width: size[0],
        height: size[1]
      },
      style: {
        fill: "transparent"
      },
      z2: 0,
      onclick: bind(this._onClickPanel, this)
    });
    const zr = this.api.getZr();
    if (brushSelect) {
      clickPanel.on("mousedown", this._onBrushStart, this);
      clickPanel.cursor = "crosshair";
      zr.on("mousemove", this._onBrush);
      zr.on("mouseup", this._onBrushEnd);
    } else {
      zr.off("mousemove", this._onBrush);
      zr.off("mouseup", this._onBrushEnd);
    }
    barGroup.add(clickPanel);
  }
  _renderDataShadow() {
    const info = this._dataShadowInfo = this._prepareDataShadowInfo();
    this._displayables.dataShadowSegs = [];
    if (!info) {
      return;
    }
    const size = this._size;
    const seriesModel = info.series;
    const data = seriesModel.getRawData();
    const otherDim = seriesModel.getShadowDim ? seriesModel.getShadowDim() : info.otherDim;
    if (otherDim == null) {
      return;
    }
    let otherDataExtent = data.getDataExtent(otherDim);
    const otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
    otherDataExtent = [otherDataExtent[0] - otherOffset, otherDataExtent[1] + otherOffset];
    const otherShadowExtent = [0, size[1]];
    const thisShadowExtent = [0, size[0]];
    const areaPoints = [[size[0], 0], [0, 0]];
    const linePoints = [];
    const step2 = thisShadowExtent[1] / (data.count() - 1);
    let thisCoord = 0;
    const stride = Math.round(data.count() / size[0]);
    let lastIsEmpty;
    data.each([otherDim], function(value, index) {
      if (stride > 0 && index % stride) {
        thisCoord += step2;
        return;
      }
      const isEmpty = value == null || isNaN(value) || value === "";
      const otherCoord = isEmpty ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);
      if (isEmpty && !lastIsEmpty && index) {
        areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
        linePoints.push([linePoints[linePoints.length - 1][0], 0]);
      } else if (!isEmpty && lastIsEmpty) {
        areaPoints.push([thisCoord, 0]);
        linePoints.push([thisCoord, 0]);
      }
      areaPoints.push([thisCoord, otherCoord]);
      linePoints.push([thisCoord, otherCoord]);
      thisCoord += step2;
      lastIsEmpty = isEmpty;
    });
    const dataZoomModel = this.dataZoomModel;
    function createDataShadowGroup(isSelectedArea) {
      const model65 = dataZoomModel.getModel(isSelectedArea ? "selectedDataBackground" : "dataBackground");
      const group = new Group_default();
      const polygon = new Polygon_default({
        shape: {
          points: areaPoints
        },
        segmentIgnoreThreshold: 1,
        style: model65.getModel("areaStyle").getAreaStyle(),
        silent: true,
        z2: -20
      });
      const polyline = new Polyline_default({
        shape: {
          points: linePoints
        },
        segmentIgnoreThreshold: 1,
        style: model65.getModel("lineStyle").getLineStyle(),
        silent: true,
        z2: -19
      });
      group.add(polygon);
      group.add(polyline);
      return group;
    }
    for (let i = 0; i < 3; i++) {
      const group = createDataShadowGroup(i === 1);
      this._displayables.sliderGroup.add(group);
      this._displayables.dataShadowSegs.push(group);
    }
  }
  _prepareDataShadowInfo() {
    const dataZoomModel = this.dataZoomModel;
    const showDataShadow = dataZoomModel.get("showDataShadow");
    if (showDataShadow === false) {
      return;
    }
    let result;
    const ecModel = this.ecModel;
    dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
      const seriesModels = dataZoomModel.getAxisProxy(axisDim, axisIndex).getTargetSeriesModels();
      each(seriesModels, function(seriesModel) {
        if (result) {
          return;
        }
        if (showDataShadow !== true && indexOf(SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get("type")) < 0) {
          return;
        }
        const thisAxis = ecModel.getComponent(getAxisMainType(axisDim), axisIndex).axis;
        let otherDim = getOtherDim(axisDim);
        let otherAxisInverse;
        const coordSys = seriesModel.coordinateSystem;
        if (otherDim != null && coordSys.getOtherAxis) {
          otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
        }
        otherDim = seriesModel.getData().mapDimension(otherDim);
        result = {
          thisAxis,
          series: seriesModel,
          thisDim: axisDim,
          otherDim,
          otherAxisInverse
        };
      }, this);
    }, this);
    return result;
  }
  _renderHandle() {
    const thisGroup = this.group;
    const displayables = this._displayables;
    const handles = displayables.handles = [null, null];
    const handleLabels = displayables.handleLabels = [null, null];
    const sliderGroup = this._displayables.sliderGroup;
    const size = this._size;
    const dataZoomModel = this.dataZoomModel;
    const api = this.api;
    const borderRadius = dataZoomModel.get("borderRadius") || 0;
    const brushSelect = dataZoomModel.get("brushSelect");
    const filler = displayables.filler = new Rect6({
      silent: brushSelect,
      style: {
        fill: dataZoomModel.get("fillerColor")
      },
      textConfig: {
        position: "inside"
      }
    });
    sliderGroup.add(filler);
    sliderGroup.add(new Rect6({
      silent: true,
      subPixelOptimize: true,
      shape: {
        x: 0,
        y: 0,
        width: size[0],
        height: size[1],
        r: borderRadius
      },
      style: {
        stroke: dataZoomModel.get("dataBackgroundColor") || dataZoomModel.get("borderColor"),
        lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
        fill: "rgba(0,0,0,0)"
      }
    }));
    each([0, 1], function(handleIndex) {
      let iconStr = dataZoomModel.get("handleIcon");
      if (!symbolBuildProxies[iconStr] && iconStr.indexOf("path://") < 0) {
        iconStr = "path://" + iconStr;
        if (__DEV__) {
          deprecateLog("handleIcon now needs 'path://' prefix when using a path string");
        }
      }
      const path2 = createSymbol(iconStr, -1, 0, 2, 2, null, true);
      path2.attr({
        cursor: getCursor(this._orient),
        draggable: true,
        drift: bind(this._onDragMove, this, handleIndex),
        ondragend: bind(this._onDragEnd, this),
        onmouseover: bind(this._showDataInfo, this, true),
        onmouseout: bind(this._showDataInfo, this, false),
        z2: 5
      });
      const bRect = path2.getBoundingRect();
      const handleSize = dataZoomModel.get("handleSize");
      this._handleHeight = parsePercent3(handleSize, this._size[1]);
      this._handleWidth = bRect.width / bRect.height * this._handleHeight;
      path2.setStyle(dataZoomModel.getModel("handleStyle").getItemStyle());
      path2.style.strokeNoScale = true;
      path2.rectHover = true;
      path2.ensureState("emphasis").style = dataZoomModel.getModel(["emphasis", "handleStyle"]).getItemStyle();
      enableHoverEmphasis(path2);
      const handleColor = dataZoomModel.get("handleColor");
      if (handleColor != null) {
        path2.style.fill = handleColor;
      }
      sliderGroup.add(handles[handleIndex] = path2);
      const textStyleModel = dataZoomModel.getModel("textStyle");
      thisGroup.add(handleLabels[handleIndex] = new Text_default({
        silent: true,
        invisible: true,
        style: {
          x: 0,
          y: 0,
          text: "",
          verticalAlign: "middle",
          align: "center",
          fill: textStyleModel.getTextColor(),
          font: textStyleModel.getFont()
        },
        z2: 10
      }));
    }, this);
    let actualMoveZone = filler;
    if (brushSelect) {
      const moveHandleHeight = parsePercent3(dataZoomModel.get("moveHandleSize"), size[1]);
      const moveHandle = displayables.moveHandle = new Rect_default({
        style: dataZoomModel.getModel("moveHandleStyle").getItemStyle(),
        silent: true,
        shape: {
          r: [0, 0, 2, 2],
          y: size[1],
          height: moveHandleHeight
        }
      });
      const iconSize = moveHandleHeight * 0.8;
      const moveHandleIcon = displayables.moveHandleIcon = createSymbol(dataZoomModel.get("moveHandleIcon"), -iconSize / 2, -iconSize / 2, iconSize, iconSize, "#fff", true);
      moveHandleIcon.silent = true;
      moveHandleIcon.y = size[1] + moveHandleHeight / 2;
      moveHandle.ensureState("emphasis").style = dataZoomModel.getModel(["emphasis", "moveHandleStyle"]).getItemStyle();
      const moveZoneExpandSize = Math.min(size[1] / 2, Math.max(moveHandleHeight, 10));
      actualMoveZone = displayables.moveZone = new Rect_default({
        invisible: true,
        shape: {
          y: size[1] - moveZoneExpandSize,
          height: moveHandleHeight + moveZoneExpandSize
        }
      });
      actualMoveZone.on("mouseover", () => {
        api.enterEmphasis(moveHandle);
      }).on("mouseout", () => {
        api.leaveEmphasis(moveHandle);
      });
      sliderGroup.add(moveHandle);
      sliderGroup.add(moveHandleIcon);
      sliderGroup.add(actualMoveZone);
    }
    actualMoveZone.attr({
      draggable: true,
      cursor: getCursor(this._orient),
      drift: bind(this._onDragMove, this, "all"),
      ondragstart: bind(this._showDataInfo, this, true),
      ondragend: bind(this._onDragEnd, this),
      onmouseover: bind(this._showDataInfo, this, true),
      onmouseout: bind(this._showDataInfo, this, false)
    });
  }
  _resetInterval() {
    const range = this._range = this.dataZoomModel.getPercentRange();
    const viewExtent = this._getViewExtent();
    this._handleEnds = [linearMap(range[0], [0, 100], viewExtent, true), linearMap(range[1], [0, 100], viewExtent, true)];
  }
  _updateInterval(handleIndex, delta) {
    const dataZoomModel = this.dataZoomModel;
    const handleEnds = this._handleEnds;
    const viewExtend = this._getViewExtent();
    const minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
    const percentExtent = [0, 100];
    sliderMove_default(delta, handleEnds, viewExtend, dataZoomModel.get("zoomLock") ? "all" : handleIndex, minMaxSpan.minSpan != null ? linearMap(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null, minMaxSpan.maxSpan != null ? linearMap(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null);
    const lastRange = this._range;
    const range = this._range = asc2([linearMap(handleEnds[0], viewExtend, percentExtent, true), linearMap(handleEnds[1], viewExtend, percentExtent, true)]);
    return !lastRange || lastRange[0] !== range[0] || lastRange[1] !== range[1];
  }
  _updateView(nonRealtime) {
    const displaybles = this._displayables;
    const handleEnds = this._handleEnds;
    const handleInterval = asc2(handleEnds.slice());
    const size = this._size;
    each([0, 1], function(handleIndex) {
      const handle = displaybles.handles[handleIndex];
      const handleHeight = this._handleHeight;
      handle.attr({
        scaleX: handleHeight / 2,
        scaleY: handleHeight / 2,
        x: handleEnds[handleIndex],
        y: size[1] / 2 - handleHeight / 2
      });
    }, this);
    displaybles.filler.setShape({
      x: handleInterval[0],
      y: 0,
      width: handleInterval[1] - handleInterval[0],
      height: size[1]
    });
    const viewExtent = {
      x: handleInterval[0],
      width: handleInterval[1] - handleInterval[0]
    };
    if (displaybles.moveHandle) {
      displaybles.moveHandle.setShape(viewExtent);
      displaybles.moveZone.setShape(viewExtent);
      displaybles.moveHandleIcon && displaybles.moveHandleIcon.attr("x", viewExtent.x + viewExtent.width / 2);
    }
    const dataShadowSegs = displaybles.dataShadowSegs;
    const segIntervals = [0, handleInterval[0], handleInterval[1], size[0]];
    for (let i = 0; i < dataShadowSegs.length; i++) {
      const segGroup = dataShadowSegs[i];
      let clipPath = segGroup.getClipPath();
      if (!clipPath) {
        clipPath = new Rect_default();
        segGroup.setClipPath(clipPath);
      }
      clipPath.setShape({
        x: segIntervals[i],
        y: 0,
        width: segIntervals[i + 1] - segIntervals[i],
        height: size[1]
      });
    }
    this._updateDataInfo(nonRealtime);
  }
  _updateDataInfo(nonRealtime) {
    const dataZoomModel = this.dataZoomModel;
    const displaybles = this._displayables;
    const handleLabels = displaybles.handleLabels;
    const orient = this._orient;
    let labelTexts = ["", ""];
    if (dataZoomModel.get("showDetail")) {
      const axisProxy = dataZoomModel.findRepresentativeAxisProxy();
      if (axisProxy) {
        const axis2 = axisProxy.getAxisModel().axis;
        const range = this._range;
        const dataInterval = nonRealtime ? axisProxy.calculateDataWindow({
          start: range[0],
          end: range[1]
        }).valueWindow : axisProxy.getDataValueWindow();
        labelTexts = [this._formatLabel(dataInterval[0], axis2), this._formatLabel(dataInterval[1], axis2)];
      }
    }
    const orderedHandleEnds = asc2(this._handleEnds.slice());
    setLabel.call(this, 0);
    setLabel.call(this, 1);
    function setLabel(handleIndex) {
      const barTransform = getTransform(displaybles.handles[handleIndex].parent, this.group);
      const direction = transformDirection(handleIndex === 0 ? "right" : "left", barTransform);
      const offset = this._handleWidth / 2 + LABEL_GAP;
      const textPoint = applyTransform2([orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset), this._size[1] / 2], barTransform);
      handleLabels[handleIndex].setStyle({
        x: textPoint[0],
        y: textPoint[1],
        verticalAlign: orient === HORIZONTAL ? "middle" : direction,
        align: orient === HORIZONTAL ? direction : "center",
        text: labelTexts[handleIndex]
      });
    }
  }
  _formatLabel(value, axis2) {
    const dataZoomModel = this.dataZoomModel;
    const labelFormatter = dataZoomModel.get("labelFormatter");
    let labelPrecision = dataZoomModel.get("labelPrecision");
    if (labelPrecision == null || labelPrecision === "auto") {
      labelPrecision = axis2.getPixelPrecision();
    }
    const valueStr = value == null || isNaN(value) ? "" : axis2.type === "category" || axis2.type === "time" ? axis2.scale.getLabel(Math.round(value)) : value.toFixed(Math.min(labelPrecision, 20));
    return isFunction(labelFormatter) ? labelFormatter(value, valueStr) : isString(labelFormatter) ? labelFormatter.replace("{value}", valueStr) : valueStr;
  }
  _showDataInfo(showOrHide) {
    showOrHide = this._dragging || showOrHide;
    const displayables = this._displayables;
    const handleLabels = displayables.handleLabels;
    handleLabels[0].attr("invisible", !showOrHide);
    handleLabels[1].attr("invisible", !showOrHide);
    displayables.moveHandle && this.api[showOrHide ? "enterEmphasis" : "leaveEmphasis"](displayables.moveHandle, 1);
  }
  _onDragMove(handleIndex, dx, dy, event3) {
    this._dragging = true;
    stop(event3.event);
    const barTransform = this._displayables.sliderGroup.getLocalTransform();
    const vertex = applyTransform2([dx, dy], barTransform, true);
    const changed = this._updateInterval(handleIndex, vertex[0]);
    const realtime = this.dataZoomModel.get("realtime");
    this._updateView(!realtime);
    changed && realtime && this._dispatchZoomAction(true);
  }
  _onDragEnd() {
    this._dragging = false;
    this._showDataInfo(false);
    const realtime = this.dataZoomModel.get("realtime");
    !realtime && this._dispatchZoomAction(false);
  }
  _onClickPanel(e) {
    const size = this._size;
    const localPoint = this._displayables.sliderGroup.transformCoordToLocal(e.offsetX, e.offsetY);
    if (localPoint[0] < 0 || localPoint[0] > size[0] || localPoint[1] < 0 || localPoint[1] > size[1]) {
      return;
    }
    const handleEnds = this._handleEnds;
    const center3 = (handleEnds[0] + handleEnds[1]) / 2;
    const changed = this._updateInterval("all", localPoint[0] - center3);
    this._updateView();
    changed && this._dispatchZoomAction(false);
  }
  _onBrushStart(e) {
    const x = e.offsetX;
    const y = e.offsetY;
    this._brushStart = new Point4(x, y);
    this._brushing = true;
    this._brushStartTime = +new Date();
  }
  _onBrushEnd(e) {
    if (!this._brushing) {
      return;
    }
    const brushRect = this._displayables.brushRect;
    this._brushing = false;
    if (!brushRect) {
      return;
    }
    brushRect.attr("ignore", true);
    const brushShape = brushRect.shape;
    const brushEndTime = +new Date();
    if (brushEndTime - this._brushStartTime < 200 && Math.abs(brushShape.width) < 5) {
      return;
    }
    const viewExtend = this._getViewExtent();
    const percentExtent = [0, 100];
    this._range = asc2([linearMap(brushShape.x, viewExtend, percentExtent, true), linearMap(brushShape.x + brushShape.width, viewExtend, percentExtent, true)]);
    this._handleEnds = [brushShape.x, brushShape.x + brushShape.width];
    this._updateView();
    this._dispatchZoomAction(false);
  }
  _onBrush(e) {
    if (this._brushing) {
      stop(e.event);
      this._updateBrushRect(e.offsetX, e.offsetY);
    }
  }
  _updateBrushRect(mouseX, mouseY) {
    const displayables = this._displayables;
    const dataZoomModel = this.dataZoomModel;
    let brushRect = displayables.brushRect;
    if (!brushRect) {
      brushRect = displayables.brushRect = new Rect6({
        silent: true,
        style: dataZoomModel.getModel("brushStyle").getItemStyle()
      });
      displayables.sliderGroup.add(brushRect);
    }
    brushRect.ignore = false;
    const brushStart = this._brushStart;
    const sliderGroup = this._displayables.sliderGroup;
    const endPoint = sliderGroup.transformCoordToLocal(mouseX, mouseY);
    const startPoint = sliderGroup.transformCoordToLocal(brushStart.x, brushStart.y);
    const size = this._size;
    brushRect.setShape({
      x: startPoint[0],
      y: 0,
      width: endPoint[0] - startPoint[0],
      height: size[1]
    });
  }
  _dispatchZoomAction(realtime) {
    const range = this._range;
    this.api.dispatchAction({
      type: "dataZoom",
      from: this.uid,
      dataZoomId: this.dataZoomModel.id,
      animation: realtime ? REALTIME_ANIMATION_CONFIG : null,
      start: range[0],
      end: range[1]
    });
  }
  _findCoordRect() {
    let rect;
    const coordSysInfoList = collectReferCoordSysModelInfo(this.dataZoomModel).infoList;
    if (!rect && coordSysInfoList.length) {
      const coordSys = coordSysInfoList[0].model.coordinateSystem;
      rect = coordSys.getRect && coordSys.getRect();
    }
    if (!rect) {
      const width = this.api.getWidth();
      const height = this.api.getHeight();
      rect = {
        x: width * 0.2,
        y: height * 0.2,
        width: width * 0.6,
        height: height * 0.6
      };
    }
    return rect;
  }
}
SliderZoomView.type = "dataZoom.slider";
function getOtherDim(thisDim) {
  const map3 = {
    x: "y",
    y: "x",
    radius: "angle",
    angle: "radius"
  };
  return map3[thisDim];
}
function getCursor(orient) {
  return orient === "vertical" ? "ns-resize" : "ew-resize";
}
Component_default2.registerClass(SliderZoomView);

// src/component/dataZoomSlider.ts

// src/component/dataZoom/InsideZoomModel.ts
class InsideZoomModel extends DataZoomModel_default {
  constructor() {
    super(...arguments);
    this.type = InsideZoomModel.type;
  }
}
InsideZoomModel.type = "dataZoom.inside";
InsideZoomModel.defaultOption = inheritDefaultOption(DataZoomModel_default.defaultOption, {
  disabled: false,
  zoomLock: false,
  zoomOnMouseWheel: true,
  moveOnMouseMove: true,
  moveOnMouseWheel: false,
  preventDefaultMouseMove: true
});
Component_default.registerClass(InsideZoomModel);

// src/component/dataZoom/roams.ts
const inner9 = makeInner();
registerProcessor(PRIORITY.PROCESSOR.FILTER, function(ecModel, api) {
  const apiInner = inner9(api);
  const coordSysRecordMap = apiInner.coordSysRecordMap || (apiInner.coordSysRecordMap = createHashMap());
  coordSysRecordMap.each(function(coordSysRecord) {
    coordSysRecord.dataZoomInfoMap = null;
  });
  ecModel.eachComponent({
    mainType: "dataZoom",
    subType: "inside"
  }, function(dataZoomModel) {
    const dzReferCoordSysWrap = collectReferCoordSysModelInfo(dataZoomModel);
    each(dzReferCoordSysWrap.infoList, function(dzCoordSysInfo) {
      const coordSysUid = dzCoordSysInfo.model.uid;
      const coordSysRecord = coordSysRecordMap.get(coordSysUid) || coordSysRecordMap.set(coordSysUid, createCoordSysRecord(api, dzCoordSysInfo.model));
      const dataZoomInfoMap = coordSysRecord.dataZoomInfoMap || (coordSysRecord.dataZoomInfoMap = createHashMap());
      dataZoomInfoMap.set(dataZoomModel.uid, {
        dzReferCoordSysInfo: dzCoordSysInfo,
        model: dataZoomModel,
        getRange: null
      });
    });
  });
  coordSysRecordMap.each(function(coordSysRecord) {
    const controller = coordSysRecord.controller;
    let firstDzInfo;
    const dataZoomInfoMap = coordSysRecord.dataZoomInfoMap;
    if (dataZoomInfoMap) {
      const firstDzKey = dataZoomInfoMap.keys()[0];
      if (firstDzKey != null) {
        firstDzInfo = dataZoomInfoMap.get(firstDzKey);
      }
    }
    if (!firstDzInfo) {
      disposeCoordSysRecord(coordSysRecordMap, coordSysRecord);
      return;
    }
    const controllerParams = mergeControllerParams(dataZoomInfoMap);
    controller.enable(controllerParams.controlType, controllerParams.opt);
    controller.setPointerChecker(coordSysRecord.containsPoint);
    createOrUpdate(coordSysRecord, "dispatchAction", firstDzInfo.model.get("throttle", true), "fixRate");
  });
});
function setViewInfoToCoordSysRecord(api, dataZoomModel, getRange) {
  inner9(api).coordSysRecordMap.each(function(coordSysRecord) {
    const dzInfo = coordSysRecord.dataZoomInfoMap.get(dataZoomModel.uid);
    if (dzInfo) {
      dzInfo.getRange = getRange;
    }
  });
}
function disposeCoordSysRecordIfNeeded(api, dataZoomModel) {
  const coordSysRecordMap = inner9(api).coordSysRecordMap;
  const coordSysKeyArr = coordSysRecordMap.keys();
  for (let i = 0; i < coordSysKeyArr.length; i++) {
    const coordSysKey = coordSysKeyArr[i];
    const coordSysRecord = coordSysRecordMap.get(coordSysKey);
    const dataZoomInfoMap = coordSysRecord.dataZoomInfoMap;
    if (dataZoomInfoMap) {
      const dzUid = dataZoomModel.uid;
      const dzInfo = dataZoomInfoMap.get(dzUid);
      if (dzInfo) {
        dataZoomInfoMap.removeKey(dzUid);
        if (!dataZoomInfoMap.keys().length) {
          disposeCoordSysRecord(coordSysRecordMap, coordSysRecord);
        }
      }
    }
  }
}
function disposeCoordSysRecord(coordSysRecordMap, coordSysRecord) {
  if (coordSysRecord) {
    coordSysRecordMap.removeKey(coordSysRecord.model.uid);
    const controller = coordSysRecord.controller;
    controller && controller.dispose();
  }
}
function createCoordSysRecord(api, coordSysModel) {
  const coordSysRecord = {
    model: coordSysModel,
    containsPoint: curry(containsPoint, coordSysModel),
    dispatchAction: curry(dispatchAction2, api),
    dataZoomInfoMap: null,
    controller: null
  };
  const controller = coordSysRecord.controller = new RoamController_default(api.getZr());
  each(["pan", "zoom", "scrollMove"], function(eventName) {
    controller.on(eventName, function(event3) {
      const batch = [];
      coordSysRecord.dataZoomInfoMap.each(function(dzInfo) {
        if (!event3.isAvailableBehavior(dzInfo.model.option)) {
          return;
        }
        const method = (dzInfo.getRange || {})[eventName];
        const range = method && method(dzInfo.dzReferCoordSysInfo, coordSysRecord.model.mainType, coordSysRecord.controller, event3);
        !dzInfo.model.get("disabled", true) && range && batch.push({
          dataZoomId: dzInfo.model.id,
          start: range[0],
          end: range[1]
        });
      });
      batch.length && coordSysRecord.dispatchAction(batch);
    });
  });
  return coordSysRecord;
}
function dispatchAction2(api, batch) {
  api.dispatchAction({
    type: "dataZoom",
    animation: {
      easing: "cubicOut",
      duration: 100
    },
    batch
  });
}
function containsPoint(coordSysModel, e, x, y) {
  return coordSysModel.coordinateSystem.containPoint([x, y]);
}
function mergeControllerParams(dataZoomInfoMap) {
  let controlType;
  const prefix = "type_";
  const typePriority = {
    type_true: 2,
    type_move: 1,
    type_false: 0,
    type_undefined: -1
  };
  let preventDefaultMouseMove = true;
  dataZoomInfoMap.each(function(dataZoomInfo) {
    const dataZoomModel = dataZoomInfo.model;
    const oneType = dataZoomModel.get("disabled", true) ? false : dataZoomModel.get("zoomLock", true) ? "move" : true;
    if (typePriority[prefix + oneType] > typePriority[prefix + controlType]) {
      controlType = oneType;
    }
    preventDefaultMouseMove = preventDefaultMouseMove && dataZoomModel.get("preventDefaultMouseMove", true);
  });
  return {
    controlType,
    opt: {
      zoomOnMouseWheel: true,
      moveOnMouseMove: true,
      moveOnMouseWheel: true,
      preventDefaultMouseMove: !!preventDefaultMouseMove
    }
  };
}

// src/component/dataZoom/InsideZoomView.ts
class InsideZoomView extends DataZoomView_default {
  constructor() {
    super(...arguments);
    this.type = "dataZoom.inside";
  }
  render(dataZoomModel, ecModel, api) {
    super.render.apply(this, arguments);
    if (dataZoomModel.noTarget()) {
      this._clear();
      return;
    }
    this.range = dataZoomModel.getPercentRange();
    setViewInfoToCoordSysRecord(api, dataZoomModel, {
      pan: bind(getRangeHandlers.pan, this),
      zoom: bind(getRangeHandlers.zoom, this),
      scrollMove: bind(getRangeHandlers.scrollMove, this)
    });
  }
  dispose() {
    this._clear();
    super.dispose.apply(this, arguments);
  }
  _clear() {
    disposeCoordSysRecordIfNeeded(this.api, this.dataZoomModel);
    this.range = null;
  }
}
InsideZoomView.type = "dataZoom.inside";
const getRangeHandlers = {
  zoom(coordSysInfo, coordSysMainType, controller, e) {
    const lastRange = this.range;
    const range = lastRange.slice();
    const axisModel = coordSysInfo.axisModels[0];
    if (!axisModel) {
      return;
    }
    const directionInfo = getDirectionInfo[coordSysMainType](null, [e.originX, e.originY], axisModel, controller, coordSysInfo);
    const percentPoint = (directionInfo.signal > 0 ? directionInfo.pixelStart + directionInfo.pixelLength - directionInfo.pixel : directionInfo.pixel - directionInfo.pixelStart) / directionInfo.pixelLength * (range[1] - range[0]) + range[0];
    const scale4 = Math.max(1 / e.scale, 0);
    range[0] = (range[0] - percentPoint) * scale4 + percentPoint;
    range[1] = (range[1] - percentPoint) * scale4 + percentPoint;
    const minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
    sliderMove_default(0, range, [0, 100], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);
    this.range = range;
    if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) {
      return range;
    }
  },
  pan: makeMover(function(range, axisModel, coordSysInfo, coordSysMainType, controller, e) {
    const directionInfo = getDirectionInfo[coordSysMainType]([e.oldX, e.oldY], [e.newX, e.newY], axisModel, controller, coordSysInfo);
    return directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;
  }),
  scrollMove: makeMover(function(range, axisModel, coordSysInfo, coordSysMainType, controller, e) {
    const directionInfo = getDirectionInfo[coordSysMainType]([0, 0], [e.scrollDelta, e.scrollDelta], axisModel, controller, coordSysInfo);
    return directionInfo.signal * (range[1] - range[0]) * e.scrollDelta;
  })
};
function makeMover(getPercentDelta) {
  return function(coordSysInfo, coordSysMainType, controller, e) {
    const lastRange = this.range;
    const range = lastRange.slice();
    const axisModel = coordSysInfo.axisModels[0];
    if (!axisModel) {
      return;
    }
    const percentDelta = getPercentDelta(range, axisModel, coordSysInfo, coordSysMainType, controller, e);
    sliderMove_default(percentDelta, range, [0, 100], "all");
    this.range = range;
    if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) {
      return range;
    }
  };
}
const getDirectionInfo = {
  grid(oldPoint, newPoint, axisModel, controller, coordSysInfo) {
    const axis2 = axisModel.axis;
    const ret = {};
    const rect = coordSysInfo.model.coordinateSystem.getRect();
    oldPoint = oldPoint || [0, 0];
    if (axis2.dim === "x") {
      ret.pixel = newPoint[0] - oldPoint[0];
      ret.pixelLength = rect.width;
      ret.pixelStart = rect.x;
      ret.signal = axis2.inverse ? 1 : -1;
    } else {
      ret.pixel = newPoint[1] - oldPoint[1];
      ret.pixelLength = rect.height;
      ret.pixelStart = rect.y;
      ret.signal = axis2.inverse ? -1 : 1;
    }
    return ret;
  },
  polar(oldPoint, newPoint, axisModel, controller, coordSysInfo) {
    const axis2 = axisModel.axis;
    const ret = {};
    const polar2 = coordSysInfo.model.coordinateSystem;
    const radiusExtent = polar2.getRadiusAxis().getExtent();
    const angleExtent = polar2.getAngleAxis().getExtent();
    oldPoint = oldPoint ? polar2.pointToCoord(oldPoint) : [0, 0];
    newPoint = polar2.pointToCoord(newPoint);
    if (axisModel.mainType === "radiusAxis") {
      ret.pixel = newPoint[0] - oldPoint[0];
      ret.pixelLength = radiusExtent[1] - radiusExtent[0];
      ret.pixelStart = radiusExtent[0];
      ret.signal = axis2.inverse ? 1 : -1;
    } else {
      ret.pixel = newPoint[1] - oldPoint[1];
      ret.pixelLength = angleExtent[1] - angleExtent[0];
      ret.pixelStart = angleExtent[0];
      ret.signal = axis2.inverse ? -1 : 1;
    }
    return ret;
  },
  singleAxis(oldPoint, newPoint, axisModel, controller, coordSysInfo) {
    const axis2 = axisModel.axis;
    const rect = coordSysInfo.model.coordinateSystem.getRect();
    const ret = {};
    oldPoint = oldPoint || [0, 0];
    if (axis2.orient === "horizontal") {
      ret.pixel = newPoint[0] - oldPoint[0];
      ret.pixelLength = rect.width;
      ret.pixelStart = rect.x;
      ret.signal = axis2.inverse ? 1 : -1;
    } else {
      ret.pixel = newPoint[1] - oldPoint[1];
      ret.pixelLength = rect.height;
      ret.pixelStart = rect.y;
      ret.signal = axis2.inverse ? -1 : 1;
    }
    return ret;
  }
};
Component_default2.registerClass(InsideZoomView);

// src/component/dataZoomInside.ts

// src/component/dataZoom.ts

// src/component/visualMap/preprocessor.ts
const each13 = each;
function preprocessor_default4(option) {
  let visualMap2 = option && option.visualMap;
  if (!isArray(visualMap2)) {
    visualMap2 = visualMap2 ? [visualMap2] : [];
  }
  each13(visualMap2, function(opt) {
    if (!opt) {
      return;
    }
    if (has2(opt, "splitList") && !has2(opt, "pieces")) {
      opt.pieces = opt.splitList;
      delete opt.splitList;
    }
    const pieces = opt.pieces;
    if (pieces && isArray(pieces)) {
      each13(pieces, function(piece) {
        if (isObject(piece)) {
          if (has2(piece, "start") && !has2(piece, "min")) {
            piece.min = piece.start;
          }
          if (has2(piece, "end") && !has2(piece, "max")) {
            piece.max = piece.end;
          }
        }
      });
    }
  });
}
function has2(obj, name) {
  return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
}

// src/component/visualMap/typeDefaulter.ts
Component_default.registerSubTypeDefaulter("visualMap", function(option) {
  return !option.categories && (!(option.pieces ? option.pieces.length > 0 : option.splitNumber > 0) || option.calculable) ? "continuous" : "piecewise";
});

// src/component/visualMap/visualEncoding.ts
const VISUAL_PRIORITY = PRIORITY.VISUAL.COMPONENT;
registerVisual(VISUAL_PRIORITY, {
  createOnAllSeries: true,
  reset: function(seriesModel, ecModel) {
    const resetDefines = [];
    ecModel.eachComponent("visualMap", function(visualMapModel) {
      const pipelineContext = seriesModel.pipelineContext;
      if (!visualMapModel.isTargetSeries(seriesModel) || pipelineContext && pipelineContext.large) {
        return;
      }
      resetDefines.push(incrementalApplyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, bind(visualMapModel.getValueState, visualMapModel), visualMapModel.getDataDimension(seriesModel.getData())));
    });
    return resetDefines;
  }
});
registerVisual(VISUAL_PRIORITY, {
  createOnAllSeries: true,
  reset: function(seriesModel, ecModel) {
    const data = seriesModel.getData();
    const visualMetaList = [];
    ecModel.eachComponent("visualMap", function(visualMapModel) {
      if (visualMapModel.isTargetSeries(seriesModel)) {
        const visualMeta = visualMapModel.getVisualMeta(bind(getColorVisual, null, seriesModel, visualMapModel)) || {
          stops: [],
          outerColors: []
        };
        const concreteDim = visualMapModel.getDataDimension(data);
        const dimInfo = data.getDimensionInfo(concreteDim);
        if (dimInfo != null) {
          visualMeta.dimension = dimInfo.index;
          visualMetaList.push(visualMeta);
        }
      }
    });
    seriesModel.getData().setVisual("visualMeta", visualMetaList);
  }
});
function getColorVisual(seriesModel, visualMapModel, value, valueState) {
  const mappings = visualMapModel.targetVisuals[valueState];
  const visualTypes = VisualMapping_default.prepareVisualTypes(mappings);
  const resultVisual = {
    color: getVisualFromData(seriesModel.getData(), "color")
  };
  for (let i = 0, len2 = visualTypes.length; i < len2; i++) {
    const type = visualTypes[i];
    const mapping = mappings[type === "opacity" ? "__alphaForOpacity" : type];
    mapping && mapping.applyVisual(value, getVisual, setVisual);
  }
  return resultVisual.color;
  function getVisual(key) {
    return resultVisual[key];
  }
  function setVisual(key, value2) {
    resultVisual[key] = value2;
  }
}

// src/visual/visualDefault.ts
const visualDefault3 = {
  get: function(visualType, key, isCategory2) {
    const value = clone2((defaultOption3[visualType] || {})[key]);
    return isCategory2 ? isArray(value) ? value[value.length - 1] : value : value;
  }
};
const defaultOption3 = {
  color: {
    active: ["#006edd", "#e0ffff"],
    inactive: ["rgba(0,0,0,0)"]
  },
  colorHue: {
    active: [0, 360],
    inactive: [0, 0]
  },
  colorSaturation: {
    active: [0.3, 1],
    inactive: [0, 0]
  },
  colorLightness: {
    active: [0.9, 0.5],
    inactive: [0, 0]
  },
  colorAlpha: {
    active: [0.3, 1],
    inactive: [0, 0]
  },
  opacity: {
    active: [0.3, 1],
    inactive: [0, 0]
  },
  symbol: {
    active: ["circle", "roundRect", "diamond"],
    inactive: ["none"]
  },
  symbolSize: {
    active: [10, 50],
    inactive: [0, 0]
  }
};
const visualDefault_default = visualDefault3;

// src/component/visualMap/VisualMapModel.ts
const mapVisual2 = VisualMapping_default.mapVisual;
const eachVisual = VisualMapping_default.eachVisual;
const isArray2 = isArray;
const each12 = each;
const asc3 = asc2;
const linearMap3 = linearMap;
class VisualMapModel5 extends Component_default {
  constructor() {
    super(...arguments);
    this.type = VisualMapModel5.type;
    this.stateList = ["inRange", "outOfRange"];
    this.replacableOptionKeys = ["inRange", "outOfRange", "target", "controller", "color"];
    this.layoutMode = {
      type: "box",
      ignoreSize: true
    };
    this.dataBound = [-Infinity, Infinity];
    this.targetVisuals = {};
    this.controllerVisuals = {};
  }
  init(option, parentModel, ecModel) {
    this.mergeDefaultAndTheme(option, ecModel);
  }
  optionUpdated(newOption, isInit) {
    const thisOption = this.option;
    if (!env_default.canvasSupported) {
      thisOption.realtime = false;
    }
    !isInit && replaceVisualOption(thisOption, newOption, this.replacableOptionKeys);
    this.textStyleModel = this.getModel("textStyle");
    this.resetItemSize();
    this.completeVisualOption();
  }
  resetVisual(supplementVisualOption) {
    const stateList = this.stateList;
    supplementVisualOption = bind(supplementVisualOption, this);
    this.controllerVisuals = createVisualMappings(this.option.controller, stateList, supplementVisualOption);
    this.targetVisuals = createVisualMappings(this.option.target, stateList, supplementVisualOption);
  }
  getTargetSeriesIndices() {
    const optionSeriesIndex = this.option.seriesIndex;
    let seriesIndices = [];
    if (optionSeriesIndex == null || optionSeriesIndex === "all") {
      this.ecModel.eachSeries(function(seriesModel, index) {
        seriesIndices.push(index);
      });
    } else {
      seriesIndices = normalizeToArray(optionSeriesIndex);
    }
    return seriesIndices;
  }
  eachTargetSeries(callback, context) {
    each(this.getTargetSeriesIndices(), function(seriesIndex) {
      const seriesModel = this.ecModel.getSeriesByIndex(seriesIndex);
      if (seriesModel) {
        callback.call(context, seriesModel);
      }
    }, this);
  }
  isTargetSeries(seriesModel) {
    let is = false;
    this.eachTargetSeries(function(model65) {
      model65 === seriesModel && (is = true);
    });
    return is;
  }
  formatValueText(value, isCategory2, edgeSymbols) {
    const option = this.option;
    const precision = option.precision;
    const dataBound = this.dataBound;
    const formatter = option.formatter;
    let isMinMax;
    edgeSymbols = edgeSymbols || ["<", ">"];
    if (isArray(value)) {
      value = value.slice();
      isMinMax = true;
    }
    const textValue = isCategory2 ? value : isMinMax ? [toFixed(value[0]), toFixed(value[1])] : toFixed(value);
    if (isString(formatter)) {
      return formatter.replace("{value}", isMinMax ? textValue[0] : textValue).replace("{value2}", isMinMax ? textValue[1] : textValue);
    } else if (isFunction(formatter)) {
      return isMinMax ? formatter(value[0], value[1]) : formatter(value);
    }
    if (isMinMax) {
      if (value[0] === dataBound[0]) {
        return edgeSymbols[0] + " " + textValue[1];
      } else if (value[1] === dataBound[1]) {
        return edgeSymbols[1] + " " + textValue[0];
      } else {
        return textValue[0] + " - " + textValue[1];
      }
    } else {
      return textValue;
    }
    function toFixed(val) {
      return val === dataBound[0] ? "min" : val === dataBound[1] ? "max" : (+val).toFixed(Math.min(precision, 20));
    }
  }
  resetExtent() {
    const thisOption = this.option;
    const extent3 = asc3([thisOption.min, thisOption.max]);
    this._dataExtent = extent3;
  }
  getDataDimension(list) {
    const optDim = this.option.dimension;
    const listDimensions = list.dimensions;
    if (optDim == null && !listDimensions.length) {
      return;
    }
    if (optDim != null) {
      return list.getDimension(optDim);
    }
    const dimNames = list.dimensions;
    for (let i = dimNames.length - 1; i >= 0; i--) {
      const dimName = dimNames[i];
      const dimInfo = list.getDimensionInfo(dimName);
      if (!dimInfo.isCalculationCoord) {
        return dimName;
      }
    }
  }
  getExtent() {
    return this._dataExtent.slice();
  }
  completeVisualOption() {
    const ecModel = this.ecModel;
    const thisOption = this.option;
    const base2 = {
      inRange: thisOption.inRange,
      outOfRange: thisOption.outOfRange
    };
    const target = thisOption.target || (thisOption.target = {});
    const controller = thisOption.controller || (thisOption.controller = {});
    merge(target, base2);
    merge(controller, base2);
    const isCategory2 = this.isCategory();
    completeSingle.call(this, target);
    completeSingle.call(this, controller);
    completeInactive.call(this, target, "inRange", "outOfRange");
    completeController.call(this, controller);
    function completeSingle(base3) {
      if (isArray2(thisOption.color) && !base3.inRange) {
        base3.inRange = {
          color: thisOption.color.slice().reverse()
        };
      }
      base3.inRange = base3.inRange || {
        color: ecModel.get("gradientColor")
      };
    }
    function completeInactive(base3, stateExist, stateAbsent) {
      const optExist = base3[stateExist];
      let optAbsent = base3[stateAbsent];
      if (optExist && !optAbsent) {
        optAbsent = base3[stateAbsent] = {};
        each12(optExist, function(visualData, visualType) {
          if (!VisualMapping_default.isValidType(visualType)) {
            return;
          }
          const defa = visualDefault_default.get(visualType, "inactive", isCategory2);
          if (defa != null) {
            optAbsent[visualType] = defa;
            if (visualType === "color" && !optAbsent.hasOwnProperty("opacity") && !optAbsent.hasOwnProperty("colorAlpha")) {
              optAbsent.opacity = [0, 0];
            }
          }
        });
      }
    }
    function completeController(controller2) {
      const symbolExists = (controller2.inRange || {}).symbol || (controller2.outOfRange || {}).symbol;
      const symbolSizeExists = (controller2.inRange || {}).symbolSize || (controller2.outOfRange || {}).symbolSize;
      const inactiveColor = this.get("inactiveColor");
      each12(this.stateList, function(state) {
        const itemSize = this.itemSize;
        let visuals = controller2[state];
        if (!visuals) {
          visuals = controller2[state] = {
            color: isCategory2 ? inactiveColor : [inactiveColor]
          };
        }
        if (visuals.symbol == null) {
          visuals.symbol = symbolExists && clone2(symbolExists) || (isCategory2 ? "roundRect" : ["roundRect"]);
        }
        if (visuals.symbolSize == null) {
          visuals.symbolSize = symbolSizeExists && clone2(symbolSizeExists) || (isCategory2 ? itemSize[0] : [itemSize[0], itemSize[0]]);
        }
        visuals.symbol = mapVisual2(visuals.symbol, function(symbol14) {
          return symbol14 === "none" || symbol14 === "square" ? "roundRect" : symbol14;
        });
        const symbolSize = visuals.symbolSize;
        if (symbolSize != null) {
          let max4 = -Infinity;
          eachVisual(symbolSize, function(value) {
            value > max4 && (max4 = value);
          });
          visuals.symbolSize = mapVisual2(symbolSize, function(value) {
            return linearMap3(value, [0, max4], [0, itemSize[0]], true);
          });
        }
      }, this);
    }
  }
  resetItemSize() {
    this.itemSize = [parseFloat(this.get("itemWidth")), parseFloat(this.get("itemHeight"))];
  }
  isCategory() {
    return !!this.option.categories;
  }
  setSelected(selected) {
  }
  getSelected() {
    return null;
  }
  getValueState(value) {
    return null;
  }
  getVisualMeta(getColorVisual2) {
    return null;
  }
}
VisualMapModel5.type = "visualMap";
VisualMapModel5.dependencies = ["series"];
VisualMapModel5.defaultOption = {
  show: true,
  zlevel: 0,
  z: 4,
  seriesIndex: "all",
  min: 0,
  max: 200,
  left: 0,
  right: null,
  top: null,
  bottom: 0,
  itemWidth: null,
  itemHeight: null,
  inverse: false,
  orient: "vertical",
  backgroundColor: "rgba(0,0,0,0)",
  borderColor: "#ccc",
  contentColor: "#5793f3",
  inactiveColor: "#aaa",
  borderWidth: 0,
  padding: 5,
  textGap: 10,
  precision: 0,
  textStyle: {
    color: "#333"
  }
};
const VisualMapModel_default = VisualMapModel5;

// src/component/visualMap/ContinuousModel.ts
const DEFAULT_BAR_BOUND = [20, 140];
class ContinuousModel extends VisualMapModel_default {
  constructor() {
    super(...arguments);
    this.type = ContinuousModel.type;
  }
  optionUpdated(newOption, isInit) {
    super.optionUpdated.apply(this, arguments);
    this.resetExtent();
    this.resetVisual(function(mappingOption) {
      mappingOption.mappingMethod = "linear";
      mappingOption.dataExtent = this.getExtent();
    });
    this._resetRange();
  }
  resetItemSize() {
    super.resetItemSize.apply(this, arguments);
    const itemSize = this.itemSize;
    (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
    (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
  }
  _resetRange() {
    const dataExtent = this.getExtent();
    const range = this.option.range;
    if (!range || range.auto) {
      dataExtent.auto = 1;
      this.option.range = dataExtent;
    } else if (isArray(range)) {
      if (range[0] > range[1]) {
        range.reverse();
      }
      range[0] = Math.max(range[0], dataExtent[0]);
      range[1] = Math.min(range[1], dataExtent[1]);
    }
  }
  completeVisualOption() {
    super.completeVisualOption.apply(this, arguments);
    each(this.stateList, function(state) {
      const symbolSize = this.option.controller[state].symbolSize;
      if (symbolSize && symbolSize[0] !== symbolSize[1]) {
        symbolSize[0] = symbolSize[1] / 3;
      }
    }, this);
  }
  setSelected(selected) {
    this.option.range = selected.slice();
    this._resetRange();
  }
  getSelected() {
    const dataExtent = this.getExtent();
    const dataInterval = asc2((this.get("range") || []).slice());
    dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
    dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
    dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
    dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);
    return dataInterval;
  }
  getValueState(value) {
    const range = this.option.range;
    const dataExtent = this.getExtent();
    return (range[0] <= dataExtent[0] || range[0] <= value) && (range[1] >= dataExtent[1] || value <= range[1]) ? "inRange" : "outOfRange";
  }
  findTargetDataIndices(range) {
    const result = [];
    this.eachTargetSeries(function(seriesModel) {
      const dataIndices = [];
      const data = seriesModel.getData();
      data.each(this.getDataDimension(data), function(value, dataIndex) {
        range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);
      }, this);
      result.push({
        seriesId: seriesModel.id,
        dataIndex: dataIndices
      });
    }, this);
    return result;
  }
  getVisualMeta(getColorVisual2) {
    const oVals = getColorStopValues(this, "outOfRange", this.getExtent());
    const iVals = getColorStopValues(this, "inRange", this.option.range.slice());
    const stops = [];
    function setStop(value, valueState) {
      stops.push({
        value,
        color: getColorVisual2(value, valueState)
      });
    }
    let iIdx = 0;
    let oIdx = 0;
    const iLen = iVals.length;
    const oLen = oVals.length;
    for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {
      if (oVals[oIdx] < iVals[iIdx]) {
        setStop(oVals[oIdx], "outOfRange");
      }
    }
    for (let first = 1; iIdx < iLen; iIdx++, first = 0) {
      first && stops.length && setStop(iVals[iIdx], "outOfRange");
      setStop(iVals[iIdx], "inRange");
    }
    for (let first = 1; oIdx < oLen; oIdx++) {
      if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {
        if (first) {
          stops.length && setStop(stops[stops.length - 1].value, "outOfRange");
          first = 0;
        }
        setStop(oVals[oIdx], "outOfRange");
      }
    }
    const stopsLen = stops.length;
    return {
      stops,
      outerColors: [stopsLen ? stops[0].color : "transparent", stopsLen ? stops[stopsLen - 1].color : "transparent"]
    };
  }
}
ContinuousModel.type = "visualMap.continuous";
ContinuousModel.defaultOption = inheritDefaultOption(VisualMapModel_default.defaultOption, {
  align: "auto",
  calculable: false,
  hoverLink: true,
  realtime: true,
  handleIcon: "path://M-11.39,9.77h0a3.5,3.5,0,0,1-3.5,3.5h-22a3.5,3.5,0,0,1-3.5-3.5h0a3.5,3.5,0,0,1,3.5-3.5h22A3.5,3.5,0,0,1-11.39,9.77Z",
  handleSize: "120%",
  handleStyle: {
    borderColor: "#fff",
    borderWidth: 1
  },
  indicatorIcon: "circle",
  indicatorSize: "50%",
  indicatorStyle: {
    borderColor: "#fff",
    borderWidth: 2,
    shadowBlur: 2,
    shadowOffsetX: 1,
    shadowOffsetY: 1,
    shadowColor: "rgba(0,0,0,0.2)"
  }
});
function getColorStopValues(visualMapModel, valueState, dataExtent) {
  if (dataExtent[0] === dataExtent[1]) {
    return dataExtent.slice();
  }
  const count2 = 200;
  const step2 = (dataExtent[1] - dataExtent[0]) / count2;
  let value = dataExtent[0];
  const stopValues = [];
  for (let i = 0; i <= count2 && value < dataExtent[1]; i++) {
    stopValues.push(value);
    value += step2;
  }
  stopValues.push(dataExtent[1]);
  return stopValues;
}
Component_default.registerClass(ContinuousModel);

// src/component/visualMap/VisualMapView.ts
class VisualMapView3 extends Component_default2 {
  constructor() {
    super(...arguments);
    this.type = VisualMapView3.type;
    this.autoPositionValues = {
      left: 1,
      right: 1,
      top: 1,
      bottom: 1
    };
  }
  init(ecModel, api) {
    this.ecModel = ecModel;
    this.api = api;
  }
  render(visualMapModel, ecModel, api, payload) {
    this.visualMapModel = visualMapModel;
    if (visualMapModel.get("show") === false) {
      this.group.removeAll();
      return;
    }
    this.doRender(visualMapModel, ecModel, api, payload);
  }
  renderBackground(group) {
    const visualMapModel = this.visualMapModel;
    const padding = normalizeCssArray2(visualMapModel.get("padding") || 0);
    const rect = group.getBoundingRect();
    group.add(new Rect_default({
      z2: -1,
      silent: true,
      shape: {
        x: rect.x - padding[3],
        y: rect.y - padding[0],
        width: rect.width + padding[3] + padding[1],
        height: rect.height + padding[0] + padding[2]
      },
      style: {
        fill: visualMapModel.get("backgroundColor"),
        stroke: visualMapModel.get("borderColor"),
        lineWidth: visualMapModel.get("borderWidth")
      }
    }));
  }
  getControllerVisual(targetValue, visualCluster, opts) {
    opts = opts || {};
    const forceState = opts.forceState;
    const visualMapModel = this.visualMapModel;
    const visualObj = {};
    if (visualCluster === "symbol") {
      visualObj.symbol = visualMapModel.get("itemSymbol");
    }
    if (visualCluster === "color") {
      const defaultColor = visualMapModel.get("contentColor");
      visualObj.color = defaultColor;
    }
    function getter(key) {
      return visualObj[key];
    }
    function setter(key, value) {
      visualObj[key] = value;
    }
    const mappings = visualMapModel.controllerVisuals[forceState || visualMapModel.getValueState(targetValue)];
    const visualTypes = VisualMapping_default.prepareVisualTypes(mappings);
    each(visualTypes, function(type) {
      let visualMapping = mappings[type];
      if (opts.convertOpacityToAlpha && type === "opacity") {
        type = "colorAlpha";
        visualMapping = mappings.__alphaForOpacity;
      }
      if (VisualMapping_default.dependsOn(type, visualCluster)) {
        visualMapping && visualMapping.applyVisual(targetValue, getter, setter);
      }
    });
    return visualObj[visualCluster];
  }
  positionGroup(group) {
    const model65 = this.visualMapModel;
    const api = this.api;
    positionElement(group, model65.getBoxLayoutParams(), {
      width: api.getWidth(),
      height: api.getHeight()
    });
  }
  doRender(visualMapModel, ecModel, api, payload) {
  }
}
VisualMapView3.type = "visualMap";
Component_default2.registerClass(VisualMapView3);
const VisualMapView_default = VisualMapView3;

// src/component/visualMap/helper.ts
const paramsSet = [["left", "right", "width"], ["top", "bottom", "height"]];
function getItemAlign(visualMapModel, api, itemSize) {
  const modelOption = visualMapModel.option;
  const itemAlign = modelOption.align;
  if (itemAlign != null && itemAlign !== "auto") {
    return itemAlign;
  }
  const ecSize = {
    width: api.getWidth(),
    height: api.getHeight()
  };
  const realIndex = modelOption.orient === "horizontal" ? 1 : 0;
  const reals = paramsSet[realIndex];
  const fakeValue = [0, null, 10];
  const layoutInput = {};
  for (let i = 0; i < 3; i++) {
    layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
    layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
  }
  const rParam = [["x", "width", 3], ["y", "height", 0]][realIndex];
  const rect = getLayoutRect(layoutInput, ecSize, modelOption.padding);
  return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];
}
function makeHighDownBatch(batch, visualMapModel) {
  each(batch || [], function(batchItem) {
    if (batchItem.dataIndex != null) {
      batchItem.dataIndexInside = batchItem.dataIndex;
      batchItem.dataIndex = null;
    }
    batchItem.highlightKey = "visualMap" + (visualMapModel ? visualMapModel.componentIndex : "");
  });
  return batch;
}

// src/component/visualMap/ContinuousView.ts
const linearMap2 = linearMap;
const each11 = each;
const mathMin7 = Math.min;
const mathMax7 = Math.max;
const getECData2 = getECData;
const HOVER_LINK_SIZE = 12;
const HOVER_LINK_OUT = 6;
class ContinuousView extends VisualMapView_default {
  constructor() {
    super(...arguments);
    this.type = ContinuousView.type;
    this._shapes = {};
    this._dataInterval = [];
    this._handleEnds = [];
    this._hoverLinkDataIndices = [];
  }
  doRender(visualMapModel, ecModel, api, payload) {
    this._api = api;
    if (!payload || payload.type !== "selectDataRange" || payload.from !== this.uid) {
      this._buildView();
    }
  }
  _buildView() {
    this.group.removeAll();
    const visualMapModel = this.visualMapModel;
    const thisGroup = this.group;
    this._orient = visualMapModel.get("orient");
    this._useHandle = visualMapModel.get("calculable");
    this._resetInterval();
    this._renderBar(thisGroup);
    const dataRangeText = visualMapModel.get("text");
    this._renderEndsText(thisGroup, dataRangeText, 0);
    this._renderEndsText(thisGroup, dataRangeText, 1);
    this._updateView(true);
    this.renderBackground(thisGroup);
    this._updateView();
    this._enableHoverLinkToSeries();
    this._enableHoverLinkFromSeries();
    this.positionGroup(thisGroup);
  }
  _renderEndsText(group, dataRangeText, endsIndex) {
    if (!dataRangeText) {
      return;
    }
    let text11 = dataRangeText[1 - endsIndex];
    text11 = text11 != null ? text11 + "" : "";
    const visualMapModel = this.visualMapModel;
    const textGap = visualMapModel.get("textGap");
    const itemSize = visualMapModel.itemSize;
    const barGroup = this._shapes.mainGroup;
    const position2 = this._applyTransform([itemSize[0] / 2, endsIndex === 0 ? -textGap : itemSize[1] + textGap], barGroup);
    const align = this._applyTransform(endsIndex === 0 ? "bottom" : "top", barGroup);
    const orient = this._orient;
    const textStyleModel = this.visualMapModel.textStyleModel;
    this.group.add(new Text_default({
      style: {
        x: position2[0],
        y: position2[1],
        verticalAlign: orient === "horizontal" ? "middle" : align,
        align: orient === "horizontal" ? align : "center",
        text: text11,
        font: textStyleModel.getFont(),
        fill: textStyleModel.getTextColor()
      }
    }));
  }
  _renderBar(targetGroup) {
    const visualMapModel = this.visualMapModel;
    const shapes = this._shapes;
    const itemSize = visualMapModel.itemSize;
    const orient = this._orient;
    const useHandle = this._useHandle;
    const itemAlign = getItemAlign(visualMapModel, this.api, itemSize);
    const mainGroup = shapes.mainGroup = this._createBarGroup(itemAlign);
    const gradientBarGroup = new Group_default();
    mainGroup.add(gradientBarGroup);
    gradientBarGroup.add(shapes.outOfRange = createPolygon());
    gradientBarGroup.add(shapes.inRange = createPolygon(null, useHandle ? getCursor2(this._orient) : null, bind(this._dragHandle, this, "all", false), bind(this._dragHandle, this, "all", true)));
    gradientBarGroup.setClipPath(new Rect_default({
      shape: {
        x: 0,
        y: 0,
        width: itemSize[0],
        height: itemSize[1],
        r: 3
      }
    }));
    const textRect = visualMapModel.textStyleModel.getTextRect("国");
    const textSize = mathMax7(textRect.width, textRect.height);
    if (useHandle) {
      shapes.handleThumbs = [];
      shapes.handleLabels = [];
      shapes.handleLabelPoints = [];
      this._createHandle(visualMapModel, mainGroup, 0, itemSize, textSize, orient);
      this._createHandle(visualMapModel, mainGroup, 1, itemSize, textSize, orient);
    }
    this._createIndicator(visualMapModel, mainGroup, itemSize, textSize, orient);
    targetGroup.add(mainGroup);
  }
  _createHandle(visualMapModel, mainGroup, handleIndex, itemSize, textSize, orient) {
    const onDrift = bind(this._dragHandle, this, handleIndex, false);
    const onDragEnd = bind(this._dragHandle, this, handleIndex, true);
    const handleSize = parsePercent(visualMapModel.get("handleSize"), itemSize[0]);
    const handleThumb = createSymbol(visualMapModel.get("handleIcon"), -handleSize / 2, -handleSize / 2, handleSize, handleSize, null, true);
    const cursor = getCursor2(this._orient);
    handleThumb.attr({
      cursor,
      draggable: true,
      drift: onDrift,
      ondragend: onDragEnd,
      onmousemove(e) {
        stop(e.event);
      }
    });
    handleThumb.x = itemSize[0] / 2;
    handleThumb.useStyle(visualMapModel.getModel("handleStyle").getItemStyle());
    handleThumb.setStyle({
      strokeNoScale: true,
      strokeFirst: true
    });
    handleThumb.style.lineWidth *= 2;
    handleThumb.ensureState("emphasis").style = visualMapModel.getModel(["emphasis", "handleStyle"]).getItemStyle();
    setAsHighDownDispatcher(handleThumb, true);
    mainGroup.add(handleThumb);
    const textStyleModel = this.visualMapModel.textStyleModel;
    const handleLabel = new Text_default({
      cursor,
      draggable: true,
      drift: onDrift,
      onmousemove(e) {
        stop(e.event);
      },
      ondragend: onDragEnd,
      style: {
        x: 0,
        y: 0,
        text: "",
        font: textStyleModel.getFont(),
        fill: textStyleModel.getTextColor()
      }
    });
    handleLabel.ensureState("blur").style = {
      opacity: 0.1
    };
    handleLabel.stateTransition = {
      duration: 200
    };
    this.group.add(handleLabel);
    const handleLabelPoint = [handleSize, 0];
    const shapes = this._shapes;
    shapes.handleThumbs[handleIndex] = handleThumb;
    shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
    shapes.handleLabels[handleIndex] = handleLabel;
  }
  _createIndicator(visualMapModel, mainGroup, itemSize, textSize, orient) {
    const scale4 = parsePercent(visualMapModel.get("indicatorSize"), itemSize[0]);
    const indicator = createSymbol(visualMapModel.get("indicatorIcon"), -scale4 / 2, -scale4 / 2, scale4, scale4, null, true);
    indicator.attr({
      cursor: "move",
      invisible: true,
      silent: true,
      x: itemSize[0] / 2
    });
    const indicatorStyle = visualMapModel.getModel("indicatorStyle").getItemStyle();
    if (indicator instanceof Image_default) {
      const pathStyle = indicator.style;
      indicator.useStyle(extend({
        image: pathStyle.image,
        x: pathStyle.x,
        y: pathStyle.y,
        width: pathStyle.width,
        height: pathStyle.height
      }, indicatorStyle));
    } else {
      indicator.useStyle(indicatorStyle);
    }
    mainGroup.add(indicator);
    const textStyleModel = this.visualMapModel.textStyleModel;
    const indicatorLabel = new Text_default({
      silent: true,
      invisible: true,
      style: {
        x: 0,
        y: 0,
        text: "",
        font: textStyleModel.getFont(),
        fill: textStyleModel.getTextColor()
      }
    });
    this.group.add(indicatorLabel);
    const indicatorLabelPoint = [(orient === "horizontal" ? textSize / 2 : HOVER_LINK_OUT) + itemSize[0] / 2, 0];
    const shapes = this._shapes;
    shapes.indicator = indicator;
    shapes.indicatorLabel = indicatorLabel;
    shapes.indicatorLabelPoint = indicatorLabelPoint;
    this._firstShowIndicator = true;
  }
  _dragHandle(handleIndex, isEnd, dx, dy) {
    if (!this._useHandle) {
      return;
    }
    this._dragging = !isEnd;
    if (!isEnd) {
      const vertex = this._applyTransform([dx, dy], this._shapes.mainGroup, true);
      this._updateInterval(handleIndex, vertex[1]);
      this._hideIndicator();
      this._updateView();
    }
    if (isEnd === !this.visualMapModel.get("realtime")) {
      this.api.dispatchAction({
        type: "selectDataRange",
        from: this.uid,
        visualMapId: this.visualMapModel.id,
        selected: this._dataInterval.slice()
      });
    }
    if (isEnd) {
      !this._hovering && this._clearHoverLinkToSeries();
    } else if (useHoverLinkOnHandle(this.visualMapModel)) {
      this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);
    }
  }
  _resetInterval() {
    const visualMapModel = this.visualMapModel;
    const dataInterval = this._dataInterval = visualMapModel.getSelected();
    const dataExtent = visualMapModel.getExtent();
    const sizeExtent = [0, visualMapModel.itemSize[1]];
    this._handleEnds = [linearMap2(dataInterval[0], dataExtent, sizeExtent, true), linearMap2(dataInterval[1], dataExtent, sizeExtent, true)];
  }
  _updateInterval(handleIndex, delta) {
    delta = delta || 0;
    const visualMapModel = this.visualMapModel;
    const handleEnds = this._handleEnds;
    const sizeExtent = [0, visualMapModel.itemSize[1]];
    sliderMove_default(delta, handleEnds, sizeExtent, handleIndex, 0);
    const dataExtent = visualMapModel.getExtent();
    this._dataInterval = [linearMap2(handleEnds[0], sizeExtent, dataExtent, true), linearMap2(handleEnds[1], sizeExtent, dataExtent, true)];
  }
  _updateView(forSketch) {
    const visualMapModel = this.visualMapModel;
    const dataExtent = visualMapModel.getExtent();
    const shapes = this._shapes;
    const outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
    const inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;
    const visualInRange = this._createBarVisual(this._dataInterval, dataExtent, inRangeHandleEnds, "inRange");
    const visualOutOfRange = this._createBarVisual(dataExtent, dataExtent, outOfRangeHandleEnds, "outOfRange");
    shapes.inRange.setStyle({
      fill: visualInRange.barColor
    }).setShape("points", visualInRange.barPoints);
    shapes.outOfRange.setStyle({
      fill: visualOutOfRange.barColor
    }).setShape("points", visualOutOfRange.barPoints);
    this._updateHandle(inRangeHandleEnds, visualInRange);
  }
  _createBarVisual(dataInterval, dataExtent, handleEnds, forceState) {
    const opts = {
      forceState,
      convertOpacityToAlpha: true
    };
    const colorStops = this._makeColorGradient(dataInterval, opts);
    const symbolSizes = [this.getControllerVisual(dataInterval[0], "symbolSize", opts), this.getControllerVisual(dataInterval[1], "symbolSize", opts)];
    const barPoints = this._createBarPoints(handleEnds, symbolSizes);
    return {
      barColor: new LinearGradient4(0, 0, 0, 1, colorStops),
      barPoints,
      handlesColor: [colorStops[0].color, colorStops[colorStops.length - 1].color]
    };
  }
  _makeColorGradient(dataInterval, opts) {
    const sampleNumber = 100;
    const colorStops = [];
    const step2 = (dataInterval[1] - dataInterval[0]) / sampleNumber;
    colorStops.push({
      color: this.getControllerVisual(dataInterval[0], "color", opts),
      offset: 0
    });
    for (let i = 1; i < sampleNumber; i++) {
      const currValue = dataInterval[0] + step2 * i;
      if (currValue > dataInterval[1]) {
        break;
      }
      colorStops.push({
        color: this.getControllerVisual(currValue, "color", opts),
        offset: i / sampleNumber
      });
    }
    colorStops.push({
      color: this.getControllerVisual(dataInterval[1], "color", opts),
      offset: 1
    });
    return colorStops;
  }
  _createBarPoints(handleEnds, symbolSizes) {
    const itemSize = this.visualMapModel.itemSize;
    return [[itemSize[0] - symbolSizes[0], handleEnds[0]], [itemSize[0], handleEnds[0]], [itemSize[0], handleEnds[1]], [itemSize[0] - symbolSizes[1], handleEnds[1]]];
  }
  _createBarGroup(itemAlign) {
    const orient = this._orient;
    const inverse = this.visualMapModel.get("inverse");
    return new Group_default(orient === "horizontal" && !inverse ? {
      scaleX: itemAlign === "bottom" ? 1 : -1,
      rotation: Math.PI / 2
    } : orient === "horizontal" && inverse ? {
      scaleX: itemAlign === "bottom" ? -1 : 1,
      rotation: -Math.PI / 2
    } : orient === "vertical" && !inverse ? {
      scaleX: itemAlign === "left" ? 1 : -1,
      scaleY: -1
    } : {
      scaleX: itemAlign === "left" ? 1 : -1
    });
  }
  _updateHandle(handleEnds, visualInRange) {
    if (!this._useHandle) {
      return;
    }
    const shapes = this._shapes;
    const visualMapModel = this.visualMapModel;
    const handleThumbs = shapes.handleThumbs;
    const handleLabels = shapes.handleLabels;
    const itemSize = visualMapModel.itemSize;
    const dataExtent = visualMapModel.getExtent();
    each11([0, 1], function(handleIndex) {
      const handleThumb = handleThumbs[handleIndex];
      handleThumb.setStyle("fill", visualInRange.handlesColor[handleIndex]);
      handleThumb.y = handleEnds[handleIndex];
      const val = linearMap2(handleEnds[handleIndex], [0, itemSize[1]], dataExtent, true);
      const symbolSize = this.getControllerVisual(val, "symbolSize");
      handleThumb.scaleX = handleThumb.scaleY = symbolSize / itemSize[0];
      handleThumb.x = itemSize[0] - symbolSize / 2;
      const textPoint = applyTransform2(shapes.handleLabelPoints[handleIndex], getTransform(handleThumb, this.group));
      handleLabels[handleIndex].setStyle({
        x: textPoint[0],
        y: textPoint[1],
        text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),
        verticalAlign: "middle",
        align: this._orient === "vertical" ? this._applyTransform("left", shapes.mainGroup) : "center"
      });
    }, this);
  }
  _showIndicator(cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {
    const visualMapModel = this.visualMapModel;
    const dataExtent = visualMapModel.getExtent();
    const itemSize = visualMapModel.itemSize;
    const sizeExtent = [0, itemSize[1]];
    const shapes = this._shapes;
    const indicator = shapes.indicator;
    if (!indicator) {
      return;
    }
    indicator.attr("invisible", false);
    const opts = {
      convertOpacityToAlpha: true
    };
    const color8 = this.getControllerVisual(cursorValue, "color", opts);
    const symbolSize = this.getControllerVisual(cursorValue, "symbolSize");
    const y = linearMap2(cursorValue, dataExtent, sizeExtent, true);
    const x = itemSize[0] - symbolSize / 2;
    const oldIndicatorPos = {
      x: indicator.x,
      y: indicator.y
    };
    indicator.y = y;
    indicator.x = x;
    const textPoint = applyTransform2(shapes.indicatorLabelPoint, getTransform(indicator, this.group));
    const indicatorLabel = shapes.indicatorLabel;
    indicatorLabel.attr("invisible", false);
    const align = this._applyTransform("left", shapes.mainGroup);
    const orient = this._orient;
    const isHorizontal = orient === "horizontal";
    indicatorLabel.setStyle({
      text: (rangeSymbol ? rangeSymbol : "") + visualMapModel.formatValueText(textValue),
      verticalAlign: isHorizontal ? align : "middle",
      align: isHorizontal ? "center" : align
    });
    const indicatorNewProps = {
      x,
      y,
      style: {
        fill: color8
      }
    };
    const labelNewProps = {
      style: {
        x: textPoint[0],
        y: textPoint[1]
      }
    };
    if (visualMapModel.ecModel.isAnimationEnabled() && !this._firstShowIndicator) {
      const animationCfg = {
        duration: 100,
        easing: "cubicInOut",
        additive: true
      };
      indicator.x = oldIndicatorPos.x;
      indicator.y = oldIndicatorPos.y;
      indicator.animateTo(indicatorNewProps, animationCfg);
      indicatorLabel.animateTo(labelNewProps, animationCfg);
    } else {
      indicator.attr(indicatorNewProps);
      indicatorLabel.attr(labelNewProps);
    }
    this._firstShowIndicator = false;
    const handleLabels = this._shapes.handleLabels;
    if (handleLabels) {
      for (let i = 0; i < handleLabels.length; i++) {
        this._api.enterBlur(handleLabels[i]);
      }
    }
  }
  _enableHoverLinkToSeries() {
    const self2 = this;
    this._shapes.mainGroup.on("mousemove", function(e) {
      self2._hovering = true;
      if (!self2._dragging) {
        const itemSize = self2.visualMapModel.itemSize;
        const pos = self2._applyTransform([e.offsetX, e.offsetY], self2._shapes.mainGroup, true, true);
        pos[1] = mathMin7(mathMax7(0, pos[1]), itemSize[1]);
        self2._doHoverLinkToSeries(pos[1], 0 <= pos[0] && pos[0] <= itemSize[0]);
      }
    }).on("mouseout", function() {
      self2._hovering = false;
      !self2._dragging && self2._clearHoverLinkToSeries();
    });
  }
  _enableHoverLinkFromSeries() {
    const zr = this.api.getZr();
    if (this.visualMapModel.option.hoverLink) {
      zr.on("mouseover", this._hoverLinkFromSeriesMouseOver, this);
      zr.on("mouseout", this._hideIndicator, this);
    } else {
      this._clearHoverLinkFromSeries();
    }
  }
  _doHoverLinkToSeries(cursorPos, hoverOnBar) {
    const visualMapModel = this.visualMapModel;
    const itemSize = visualMapModel.itemSize;
    if (!visualMapModel.option.hoverLink) {
      return;
    }
    const sizeExtent = [0, itemSize[1]];
    const dataExtent = visualMapModel.getExtent();
    cursorPos = mathMin7(mathMax7(sizeExtent[0], cursorPos), sizeExtent[1]);
    const halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);
    const hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];
    const cursorValue = linearMap2(cursorPos, sizeExtent, dataExtent, true);
    const valueRange = [linearMap2(hoverRange[0], sizeExtent, dataExtent, true), linearMap2(hoverRange[1], sizeExtent, dataExtent, true)];
    hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);
    hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);
    if (hoverOnBar) {
      if (valueRange[0] === -Infinity) {
        this._showIndicator(cursorValue, valueRange[1], "< ", halfHoverLinkSize);
      } else if (valueRange[1] === Infinity) {
        this._showIndicator(cursorValue, valueRange[0], "> ", halfHoverLinkSize);
      } else {
        this._showIndicator(cursorValue, cursorValue, "≈ ", halfHoverLinkSize);
      }
    }
    const oldBatch = this._hoverLinkDataIndices;
    let newBatch = [];
    if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {
      newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);
    }
    const resultBatches = compressBatches(oldBatch, newBatch);
    this._dispatchHighDown("downplay", makeHighDownBatch(resultBatches[0], visualMapModel));
    this._dispatchHighDown("highlight", makeHighDownBatch(resultBatches[1], visualMapModel));
  }
  _hoverLinkFromSeriesMouseOver(e) {
    const el = e.target;
    const visualMapModel = this.visualMapModel;
    if (!el || getECData2(el).dataIndex == null) {
      return;
    }
    const ecData = getECData2(el);
    const dataModel = this.ecModel.getSeriesByIndex(ecData.seriesIndex);
    if (!visualMapModel.isTargetSeries(dataModel)) {
      return;
    }
    const data = dataModel.getData(ecData.dataType);
    const value = data.get(visualMapModel.getDataDimension(data), ecData.dataIndex);
    if (!isNaN(value)) {
      this._showIndicator(value, value);
    }
  }
  _hideIndicator() {
    const shapes = this._shapes;
    shapes.indicator && shapes.indicator.attr("invisible", true);
    shapes.indicatorLabel && shapes.indicatorLabel.attr("invisible", true);
    const handleLabels = this._shapes.handleLabels;
    if (handleLabels) {
      for (let i = 0; i < handleLabels.length; i++) {
        this._api.leaveBlur(handleLabels[i]);
      }
    }
  }
  _clearHoverLinkToSeries() {
    this._hideIndicator();
    const indices = this._hoverLinkDataIndices;
    this._dispatchHighDown("downplay", makeHighDownBatch(indices, this.visualMapModel));
    indices.length = 0;
  }
  _clearHoverLinkFromSeries() {
    this._hideIndicator();
    const zr = this.api.getZr();
    zr.off("mouseover", this._hoverLinkFromSeriesMouseOver);
    zr.off("mouseout", this._hideIndicator);
  }
  _applyTransform(vertex, element, inverse, global2) {
    const transform = getTransform(element, global2 ? null : this.group);
    return isArray(vertex) ? applyTransform2(vertex, transform, inverse) : transformDirection(vertex, transform, inverse);
  }
  _dispatchHighDown(type, batch) {
    batch && batch.length && this.api.dispatchAction({
      type,
      batch
    });
  }
  dispose() {
    this._clearHoverLinkFromSeries();
    this._clearHoverLinkToSeries();
  }
  remove() {
    this._clearHoverLinkFromSeries();
    this._clearHoverLinkToSeries();
  }
}
ContinuousView.type = "visualMap.continuous";
function createPolygon(points9, cursor, onDrift, onDragEnd) {
  return new Polygon_default({
    shape: {
      points: points9
    },
    draggable: !!onDrift,
    cursor,
    drift: onDrift,
    onmousemove(e) {
      stop(e.event);
    },
    ondragend: onDragEnd
  });
}
function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {
  let halfHoverLinkSize = HOVER_LINK_SIZE / 2;
  const hoverLinkDataSize = visualMapModel.get("hoverLinkDataSize");
  if (hoverLinkDataSize) {
    halfHoverLinkSize = linearMap2(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;
  }
  return halfHoverLinkSize;
}
function useHoverLinkOnHandle(visualMapModel) {
  const hoverLinkOnHandle = visualMapModel.get("hoverLinkOnHandle");
  return !!(hoverLinkOnHandle == null ? visualMapModel.get("realtime") : hoverLinkOnHandle);
}
function getCursor2(orient) {
  return orient === "vertical" ? "ns-resize" : "ew-resize";
}
Component_default2.registerClass(ContinuousView);

// src/component/visualMap/visualMapAction.ts
const actionInfo3 = {
  type: "selectDataRange",
  event: "dataRangeSelected",
  update: "update"
};
registerAction(actionInfo3, function(payload, ecModel) {
  ecModel.eachComponent({
    mainType: "visualMap",
    query: payload
  }, function(model65) {
    model65.setSelected(payload.selected);
  });
});

// src/component/visualMapContinuous.ts
registerPreprocessor(preprocessor_default4);

// src/component/visualMap/PiecewiseModel.ts
class PiecewiseModel extends VisualMapModel_default {
  constructor() {
    super(...arguments);
    this.type = PiecewiseModel.type;
    this._pieceList = [];
  }
  optionUpdated(newOption, isInit) {
    super.optionUpdated.apply(this, arguments);
    this.resetExtent();
    const mode = this._mode = this._determineMode();
    this._pieceList = [];
    resetMethods[this._mode].call(this, this._pieceList);
    this._resetSelected(newOption, isInit);
    const categories = this.option.categories;
    this.resetVisual(function(mappingOption, state) {
      if (mode === "categories") {
        mappingOption.mappingMethod = "category";
        mappingOption.categories = clone2(categories);
      } else {
        mappingOption.dataExtent = this.getExtent();
        mappingOption.mappingMethod = "piecewise";
        mappingOption.pieceList = map2(this._pieceList, function(piece) {
          piece = clone2(piece);
          if (state !== "inRange") {
            piece.visual = null;
          }
          return piece;
        });
      }
    });
  }
  completeVisualOption() {
    const option = this.option;
    const visualTypesInPieces = {};
    const visualTypes = VisualMapping_default.listVisualTypes();
    const isCategory2 = this.isCategory();
    each(option.pieces, function(piece) {
      each(visualTypes, function(visualType) {
        if (piece.hasOwnProperty(visualType)) {
          visualTypesInPieces[visualType] = 1;
        }
      });
    });
    each(visualTypesInPieces, function(v4, visualType) {
      let exists = false;
      each(this.stateList, function(state) {
        exists = exists || has3(option, state, visualType) || has3(option.target, state, visualType);
      }, this);
      !exists && each(this.stateList, function(state) {
        (option[state] || (option[state] = {}))[visualType] = visualDefault_default.get(visualType, state === "inRange" ? "active" : "inactive", isCategory2);
      });
    }, this);
    function has3(obj, state, visualType) {
      return obj && obj[state] && obj[state].hasOwnProperty(visualType);
    }
    super.completeVisualOption.apply(this, arguments);
  }
  _resetSelected(newOption, isInit) {
    const thisOption = this.option;
    const pieceList = this._pieceList;
    const selected = (isInit ? thisOption : newOption).selected || {};
    thisOption.selected = selected;
    each(pieceList, function(piece, index) {
      const key = this.getSelectedMapKey(piece);
      if (!selected.hasOwnProperty(key)) {
        selected[key] = true;
      }
    }, this);
    if (thisOption.selectedMode === "single") {
      let hasSel = false;
      each(pieceList, function(piece, index) {
        const key = this.getSelectedMapKey(piece);
        if (selected[key]) {
          hasSel ? selected[key] = false : hasSel = true;
        }
      }, this);
    }
  }
  getSelectedMapKey(piece) {
    return this._mode === "categories" ? piece.value + "" : piece.index + "";
  }
  getPieceList() {
    return this._pieceList;
  }
  _determineMode() {
    const option = this.option;
    return option.pieces && option.pieces.length > 0 ? "pieces" : this.option.categories ? "categories" : "splitNumber";
  }
  setSelected(selected) {
    this.option.selected = clone2(selected);
  }
  getValueState(value) {
    const index = VisualMapping_default.findPieceIndex(value, this._pieceList);
    return index != null ? this.option.selected[this.getSelectedMapKey(this._pieceList[index])] ? "inRange" : "outOfRange" : "outOfRange";
  }
  findTargetDataIndices(pieceIndex) {
    const result = [];
    const pieceList = this._pieceList;
    this.eachTargetSeries(function(seriesModel) {
      const dataIndices = [];
      const data = seriesModel.getData();
      data.each(this.getDataDimension(data), function(value, dataIndex) {
        const pIdx = VisualMapping_default.findPieceIndex(value, pieceList);
        pIdx === pieceIndex && dataIndices.push(dataIndex);
      }, this);
      result.push({
        seriesId: seriesModel.id,
        dataIndex: dataIndices
      });
    }, this);
    return result;
  }
  getRepresentValue(piece) {
    let representValue;
    if (this.isCategory()) {
      representValue = piece.value;
    } else {
      if (piece.value != null) {
        representValue = piece.value;
      } else {
        const pieceInterval = piece.interval || [];
        representValue = pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity ? 0 : (pieceInterval[0] + pieceInterval[1]) / 2;
      }
    }
    return representValue;
  }
  getVisualMeta(getColorVisual2) {
    if (this.isCategory()) {
      return;
    }
    const stops = [];
    const outerColors = ["", ""];
    const visualMapModel = this;
    function setStop(interval, valueState) {
      const representValue = visualMapModel.getRepresentValue({
        interval
      });
      if (!valueState) {
        valueState = visualMapModel.getValueState(representValue);
      }
      const color8 = getColorVisual2(representValue, valueState);
      if (interval[0] === -Infinity) {
        outerColors[0] = color8;
      } else if (interval[1] === Infinity) {
        outerColors[1] = color8;
      } else {
        stops.push({
          value: interval[0],
          color: color8
        }, {
          value: interval[1],
          color: color8
        });
      }
    }
    const pieceList = this._pieceList.slice();
    if (!pieceList.length) {
      pieceList.push({
        interval: [-Infinity, Infinity]
      });
    } else {
      let edge = pieceList[0].interval[0];
      edge !== -Infinity && pieceList.unshift({
        interval: [-Infinity, edge]
      });
      edge = pieceList[pieceList.length - 1].interval[1];
      edge !== Infinity && pieceList.push({
        interval: [edge, Infinity]
      });
    }
    let curr = -Infinity;
    each(pieceList, function(piece) {
      const interval = piece.interval;
      if (interval) {
        interval[0] > curr && setStop([curr, interval[0]], "outOfRange");
        setStop(interval.slice());
        curr = interval[1];
      }
    }, this);
    return {
      stops,
      outerColors
    };
  }
}
PiecewiseModel.type = "visualMap.piecewise";
PiecewiseModel.defaultOption = inheritDefaultOption(VisualMapModel_default.defaultOption, {
  selected: null,
  minOpen: false,
  maxOpen: false,
  align: "auto",
  itemWidth: 20,
  itemHeight: 14,
  itemSymbol: "roundRect",
  pieces: null,
  categories: null,
  splitNumber: 5,
  selectedMode: "multiple",
  itemGap: 10,
  hoverLink: true
});
const resetMethods = {
  splitNumber(outPieceList) {
    const thisOption = this.option;
    let precision = Math.min(thisOption.precision, 20);
    const dataExtent = this.getExtent();
    let splitNumber = thisOption.splitNumber;
    splitNumber = Math.max(parseInt(splitNumber, 10), 1);
    thisOption.splitNumber = splitNumber;
    let splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;
    while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
      precision++;
    }
    thisOption.precision = precision;
    splitStep = +splitStep.toFixed(precision);
    if (thisOption.minOpen) {
      outPieceList.push({
        interval: [-Infinity, dataExtent[0]],
        close: [0, 0]
      });
    }
    for (let index = 0, curr = dataExtent[0]; index < splitNumber; curr += splitStep, index++) {
      const max4 = index === splitNumber - 1 ? dataExtent[1] : curr + splitStep;
      outPieceList.push({
        interval: [curr, max4],
        close: [1, 1]
      });
    }
    if (thisOption.maxOpen) {
      outPieceList.push({
        interval: [dataExtent[1], Infinity],
        close: [0, 0]
      });
    }
    reformIntervals(outPieceList);
    each(outPieceList, function(piece, index) {
      piece.index = index;
      piece.text = this.formatValueText(piece.interval);
    }, this);
  },
  categories(outPieceList) {
    const thisOption = this.option;
    each(thisOption.categories, function(cate) {
      outPieceList.push({
        text: this.formatValueText(cate, true),
        value: cate
      });
    }, this);
    normalizeReverse(thisOption, outPieceList);
  },
  pieces(outPieceList) {
    const thisOption = this.option;
    each(thisOption.pieces, function(pieceListItem, index) {
      if (!isObject(pieceListItem)) {
        pieceListItem = {
          value: pieceListItem
        };
      }
      const item = {
        text: "",
        index
      };
      if (pieceListItem.label != null) {
        item.text = pieceListItem.label;
      }
      if (pieceListItem.hasOwnProperty("value")) {
        const value = item.value = pieceListItem.value;
        item.interval = [value, value];
        item.close = [1, 1];
      } else {
        const interval = item.interval = [];
        const close = item.close = [0, 0];
        const closeList = [1, 0, 1];
        const infinityList = [-Infinity, Infinity];
        const useMinMax = [];
        for (let lg = 0; lg < 2; lg++) {
          const names = [["gte", "gt", "min"], ["lte", "lt", "max"]][lg];
          for (let i = 0; i < 3 && interval[lg] == null; i++) {
            interval[lg] = pieceListItem[names[i]];
            close[lg] = closeList[i];
            useMinMax[lg] = i === 2;
          }
          interval[lg] == null && (interval[lg] = infinityList[lg]);
        }
        useMinMax[0] && interval[1] === Infinity && (close[0] = 0);
        useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);
        if (__DEV__) {
          if (interval[0] > interval[1]) {
            console.warn("Piece " + index + "is illegal: " + interval + " lower bound should not greater then uppper bound.");
          }
        }
        if (interval[0] === interval[1] && close[0] && close[1]) {
          item.value = interval[0];
        }
      }
      item.visual = VisualMapping_default.retrieveVisuals(pieceListItem);
      outPieceList.push(item);
    }, this);
    normalizeReverse(thisOption, outPieceList);
    reformIntervals(outPieceList);
    each(outPieceList, function(piece) {
      const close = piece.close;
      const edgeSymbols = [["<", "≤"][close[1]], [">", "≥"][close[0]]];
      piece.text = piece.text || this.formatValueText(piece.value != null ? piece.value : piece.interval, false, edgeSymbols);
    }, this);
  }
};
function normalizeReverse(thisOption, pieceList) {
  const inverse = thisOption.inverse;
  if (thisOption.orient === "vertical" ? !inverse : inverse) {
    pieceList.reverse();
  }
}
Component_default.registerClass(PiecewiseModel);

// src/component/visualMap/PiecewiseView.ts
class PiecewiseVisualMapView extends VisualMapView_default {
  constructor() {
    super(...arguments);
    this.type = PiecewiseVisualMapView.type;
  }
  doRender() {
    const thisGroup = this.group;
    thisGroup.removeAll();
    const visualMapModel = this.visualMapModel;
    const textGap = visualMapModel.get("textGap");
    const textStyleModel = visualMapModel.textStyleModel;
    const textFont = textStyleModel.getFont();
    const textFill = textStyleModel.getTextColor();
    const itemAlign = this._getItemAlign();
    const itemSize = visualMapModel.itemSize;
    const viewData = this._getViewData();
    const endsText = viewData.endsText;
    const showLabel = retrieve(visualMapModel.get("showLabel", true), !endsText);
    endsText && this._renderEndsText(thisGroup, endsText[0], itemSize, showLabel, itemAlign);
    each(viewData.viewPieceList, function(item) {
      const piece = item.piece;
      const itemGroup = new Group_default();
      itemGroup.onclick = bind(this._onItemClick, this, piece);
      this._enableHoverLink(itemGroup, item.indexInModelPieceList);
      const representValue = visualMapModel.getRepresentValue(piece);
      this._createItemSymbol(itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]);
      if (showLabel) {
        const visualState = this.visualMapModel.getValueState(representValue);
        itemGroup.add(new Text_default({
          style: {
            x: itemAlign === "right" ? -textGap : itemSize[0] + textGap,
            y: itemSize[1] / 2,
            text: piece.text,
            verticalAlign: "middle",
            align: itemAlign,
            font: textFont,
            fill: textFill,
            opacity: visualState === "outOfRange" ? 0.5 : 1
          }
        }));
      }
      thisGroup.add(itemGroup);
    }, this);
    endsText && this._renderEndsText(thisGroup, endsText[1], itemSize, showLabel, itemAlign);
    box(visualMapModel.get("orient"), thisGroup, visualMapModel.get("itemGap"));
    this.renderBackground(thisGroup);
    this.positionGroup(thisGroup);
  }
  _enableHoverLink(itemGroup, pieceIndex) {
    itemGroup.on("mouseover", () => onHoverLink("highlight")).on("mouseout", () => onHoverLink("downplay"));
    const onHoverLink = (method) => {
      const visualMapModel = this.visualMapModel;
      visualMapModel.option.hoverLink && this.api.dispatchAction({
        type: method,
        batch: makeHighDownBatch(visualMapModel.findTargetDataIndices(pieceIndex), visualMapModel)
      });
    };
  }
  _getItemAlign() {
    const visualMapModel = this.visualMapModel;
    const modelOption = visualMapModel.option;
    if (modelOption.orient === "vertical") {
      return getItemAlign(visualMapModel, this.api, visualMapModel.itemSize);
    } else {
      let align = modelOption.align;
      if (!align || align === "auto") {
        align = "left";
      }
      return align;
    }
  }
  _renderEndsText(group, text11, itemSize, showLabel, itemAlign) {
    if (!text11) {
      return;
    }
    const itemGroup = new Group_default();
    const textStyleModel = this.visualMapModel.textStyleModel;
    itemGroup.add(new Text_default({
      style: {
        x: showLabel ? itemAlign === "right" ? itemSize[0] : 0 : itemSize[0] / 2,
        y: itemSize[1] / 2,
        verticalAlign: "middle",
        align: showLabel ? itemAlign : "center",
        text: text11,
        font: textStyleModel.getFont(),
        fill: textStyleModel.getTextColor()
      }
    }));
    group.add(itemGroup);
  }
  _getViewData() {
    const visualMapModel = this.visualMapModel;
    const viewPieceList = map2(visualMapModel.getPieceList(), function(piece, index) {
      return {
        piece,
        indexInModelPieceList: index
      };
    });
    let endsText = visualMapModel.get("text");
    const orient = visualMapModel.get("orient");
    const inverse = visualMapModel.get("inverse");
    if (orient === "horizontal" ? inverse : !inverse) {
      viewPieceList.reverse();
    } else if (endsText) {
      endsText = endsText.slice().reverse();
    }
    return {
      viewPieceList,
      endsText
    };
  }
  _createItemSymbol(group, representValue, shapeParam) {
    group.add(createSymbol(this.getControllerVisual(representValue, "symbol"), shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3], this.getControllerVisual(representValue, "color")));
  }
  _onItemClick(piece) {
    const visualMapModel = this.visualMapModel;
    const option = visualMapModel.option;
    const selected = clone2(option.selected);
    const newKey = visualMapModel.getSelectedMapKey(piece);
    if (option.selectedMode === "single") {
      selected[newKey] = true;
      each(selected, function(o, key) {
        selected[key] = key === newKey;
      });
    } else {
      selected[newKey] = !selected[newKey];
    }
    this.api.dispatchAction({
      type: "selectDataRange",
      from: this.uid,
      visualMapId: this.visualMapModel.id,
      selected
    });
  }
}
PiecewiseVisualMapView.type = "visualMap.piecewise";
Component_default2.registerClass(PiecewiseVisualMapView);

// src/component/visualMapPiecewise.ts
registerPreprocessor(preprocessor_default4);

// src/component/visualMap.ts

// node_modules/zrender/src/svg/core.ts
function createElement(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}

// node_modules/zrender/src/svg/graphic.ts
const CMD3 = PathProxy2.CMD;
const NONE = "none";
const mathRound = Math.round;
const mathSin3 = Math.sin;
const mathCos3 = Math.cos;
const PI5 = Math.PI;
const PI26 = Math.PI * 2;
const degree = 180 / PI5;
const EPSILON5 = 0.0001;
function round4(val) {
  return mathRound(val * 10000) / 10000;
}
function isAroundZero2(val) {
  return val < EPSILON5 && val > -EPSILON5;
}
function pathHasFill(style2) {
  const fill = style2.fill;
  return fill != null && fill !== NONE;
}
function pathHasStroke(style2) {
  const stroke = style2.stroke;
  return stroke != null && stroke !== NONE;
}
function reduceNumberString(n, precision) {
  return n > 1 ? +n.toFixed(precision) : +n.toPrecision(precision);
}
function setTransform(svgEl, m2) {
  if (m2) {
    attr(svgEl, "transform", "matrix(" + reduceNumberString(m2[0], 3) + "," + reduceNumberString(m2[1], 3) + "," + reduceNumberString(m2[2], 3) + "," + reduceNumberString(m2[3], 3) + "," + reduceNumberString(m2[4], 4) + "," + reduceNumberString(m2[5], 4) + ")");
  }
}
function attr(el, key, val) {
  if (!val || val.type !== "linear" && val.type !== "radial") {
    el.setAttribute(key, val);
  }
}
function attrXLink(el, key, val) {
  el.setAttributeNS("http://www.w3.org/1999/xlink", key, val);
}
function bindStyle(svgEl, style2, el) {
  const opacity = style2.opacity == null ? 1 : style2.opacity;
  if (pathHasFill(style2)) {
    let fill = style2.fill;
    fill = fill === "transparent" ? NONE : fill;
    attr(svgEl, "fill", fill);
    attr(svgEl, "fill-opacity", (style2.fillOpacity != null ? style2.fillOpacity * opacity : opacity) + "");
  } else {
    attr(svgEl, "fill", NONE);
  }
  if (pathHasStroke(style2)) {
    let stroke = style2.stroke;
    stroke = stroke === "transparent" ? NONE : stroke;
    attr(svgEl, "stroke", stroke);
    const strokeWidth = style2.lineWidth;
    const strokeScale = style2.strokeNoScale ? el.getLineScale() : 1;
    attr(svgEl, "stroke-width", strokeWidth / strokeScale + "");
    attr(svgEl, "paint-order", style2.strokeFirst ? "stroke" : "fill");
    attr(svgEl, "stroke-opacity", (style2.strokeOpacity != null ? style2.strokeOpacity * opacity : opacity) + "");
    const lineDash = style2.lineDash;
    if (lineDash) {
      attr(svgEl, "stroke-dasharray", style2.lineDash.join(","));
      attr(svgEl, "stroke-dashoffset", mathRound(style2.lineDashOffset || 0) + "");
    } else {
      attr(svgEl, "stroke-dasharray", "");
    }
    style2.lineCap && attr(svgEl, "stroke-linecap", style2.lineCap);
    style2.lineJoin && attr(svgEl, "stroke-linejoin", style2.lineJoin);
    style2.miterLimit && attr(svgEl, "stroke-miterlimit", style2.miterLimit + "");
  } else {
    attr(svgEl, "stroke", NONE);
  }
}
function pathDataToString(path2) {
  if (!path2) {
    return "";
  }
  const str = [];
  const data = path2.data;
  const dataLength = path2.len();
  let x;
  let y;
  for (let i = 0; i < dataLength; ) {
    let cmd = data[i++];
    let cmdStr = "";
    let nData = 0;
    switch (cmd) {
      case CMD3.M:
        cmdStr = "M";
        nData = 2;
        break;
      case CMD3.L:
        cmdStr = "L";
        nData = 2;
        break;
      case CMD3.Q:
        cmdStr = "Q";
        nData = 4;
        break;
      case CMD3.C:
        cmdStr = "C";
        nData = 6;
        break;
      case CMD3.A:
        const cx = data[i++];
        const cy = data[i++];
        const rx = data[i++];
        const ry = data[i++];
        const theta = data[i++];
        let dTheta = data[i++];
        const psi = data[i++];
        const clockwise = data[i++];
        const dThetaPositive = Math.abs(dTheta);
        const isCircle = isAroundZero2(dThetaPositive - PI26) || (clockwise ? dTheta >= PI26 : -dTheta >= PI26);
        const unifiedTheta = dTheta > 0 ? dTheta % PI26 : dTheta % PI26 + PI26;
        let large = false;
        if (isCircle) {
          large = true;
        } else if (isAroundZero2(dThetaPositive)) {
          large = false;
        } else {
          large = unifiedTheta >= PI5 === !!clockwise;
        }
        const x0 = round4(cx + rx * mathCos3(theta));
        const y0 = round4(cy + ry * mathSin3(theta));
        if (isCircle) {
          if (clockwise) {
            dTheta = PI26 - 0.0001;
          } else {
            dTheta = -PI26 + 0.0001;
          }
          large = true;
          if (i === 9) {
            str.push("M", x0, y0);
          }
        }
        x = round4(cx + rx * mathCos3(theta + dTheta));
        y = round4(cy + ry * mathSin3(theta + dTheta));
        if (isNaN(x0) || isNaN(y0) || isNaN(rx) || isNaN(ry) || isNaN(psi) || isNaN(degree) || isNaN(x) || isNaN(y)) {
          return "";
        }
        str.push("A", round4(rx), round4(ry), mathRound(psi * degree), +large, +clockwise, x, y);
        break;
      case CMD3.Z:
        cmdStr = "Z";
        break;
      case CMD3.R:
        x = round4(data[i++]);
        y = round4(data[i++]);
        const w = round4(data[i++]);
        const h = round4(data[i++]);
        if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {
          return "";
        }
        str.push("M", x, y, "L", x + w, y, "L", x + w, y + h, "L", x, y + h, "L", x, y);
        break;
    }
    cmdStr && str.push(cmdStr);
    for (let j = 0; j < nData; j++) {
      const val = round4(data[i++]);
      if (isNaN(val)) {
        return "";
      }
      str.push(val);
    }
  }
  return str.join(" ");
}
function wrapSVGBuildPath(el) {
  if (!el.__svgBuildPath) {
    const oldBuildPath = el.buildPath;
    el.__svgBuildPath = el.buildPath = function(path2, shape, inBundle) {
      oldBuildPath.call(this, el.path, shape, inBundle);
      el.__svgPathStr = pathDataToString(el.path);
    };
    if (!el.shapeChanged()) {
      el.__svgPathStr = pathDataToString(el.path);
    }
  }
}
const svgPath = {
  brush(el) {
    const style2 = el.style;
    let svgEl = el.__svgEl;
    if (!svgEl) {
      svgEl = createElement("path");
      el.__svgEl = svgEl;
    }
    if (!el.path) {
      el.createPathProxy();
    }
    const path2 = el.path;
    wrapSVGBuildPath(el);
    if (el.shapeChanged()) {
      path2.beginPath();
      el.buildPath(path2, el.shape);
      el.pathUpdated();
    }
    attr(svgEl, "d", el.__svgPathStr);
    bindStyle(svgEl, style2, el);
    setTransform(svgEl, el.transform);
  }
};
const svgImage = {
  brush(el) {
    const style2 = el.style;
    let image2 = style2.image;
    if (image2 instanceof HTMLImageElement) {
      const src = image2.src;
      image2 = src;
    }
    if (!image2) {
      return;
    }
    const x = style2.x || 0;
    const y = style2.y || 0;
    const dw = style2.width;
    const dh = style2.height;
    let svgEl = el.__svgEl;
    if (!svgEl) {
      svgEl = createElement("image");
      el.__svgEl = svgEl;
    }
    if (image2 !== el.__imageSrc) {
      attrXLink(svgEl, "href", image2);
      el.__imageSrc = image2;
    }
    attr(svgEl, "width", dw + "");
    attr(svgEl, "height", dh + "");
    attr(svgEl, "x", x + "");
    attr(svgEl, "y", y + "");
    setTransform(svgEl, el.transform);
  }
};
const TEXT_ALIGN_TO_ANCHOR = {
  left: "start",
  right: "end",
  center: "middle",
  middle: "middle"
};
function adjustTextY2(y, lineHeight, textBaseline) {
  if (textBaseline === "top") {
    y += lineHeight / 2;
  } else if (textBaseline === "bottom") {
    y -= lineHeight / 2;
  }
  return y;
}
const svgText = {
  brush(el) {
    const style2 = el.style;
    let text11 = style2.text;
    text11 != null && (text11 += "");
    if (!text11) {
      return;
    }
    let textSvgEl = el.__svgEl;
    if (!textSvgEl) {
      textSvgEl = createElement("text");
      el.__svgEl = textSvgEl;
    }
    const font = style2.font || DEFAULT_FONT;
    const textSvgElStyle = textSvgEl.style;
    textSvgElStyle.font = font;
    textSvgEl.textContent = text11;
    bindStyle(textSvgEl, style2, el);
    setTransform(textSvgEl, el.transform);
    const x = style2.x || 0;
    const y = adjustTextY2(style2.y || 0, getLineHeight(font), style2.textBaseline);
    const textAlign = TEXT_ALIGN_TO_ANCHOR[style2.textAlign] || style2.textAlign;
    attr(textSvgEl, "dominant-baseline", "middle");
    attr(textSvgEl, "text-anchor", textAlign);
    attr(textSvgEl, "x", x + "");
    attr(textSvgEl, "y", y + "");
  }
};

// node_modules/zrender/src/core/arrayDiff.ts
function diff(oldArr, newArr, equals) {
  if (!equals) {
    equals = function(a, b) {
      return a === b;
    };
  }
  oldArr = oldArr.slice();
  newArr = newArr.slice();
  var newLen = newArr.length;
  var oldLen = oldArr.length;
  var editLength = 1;
  var maxEditLength = newLen + oldLen;
  var bestPath = [{
    newPos: -1,
    components: []
  }];
  var oldPos = extractCommon(bestPath[0], newArr, oldArr, 0, equals);
  if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
    var indices = [];
    for (let i = 0; i < newArr.length; i++) {
      indices.push(i);
    }
    return [{
      indices,
      count: newArr.length,
      added: false,
      removed: false
    }];
  }
  function execEditLength() {
    for (let diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
      var basePath;
      var addPath = bestPath[diagonalPath - 1];
      var removePath = bestPath[diagonalPath + 1];
      var oldPos2 = (removePath ? removePath.newPos : 0) - diagonalPath;
      if (addPath) {
        bestPath[diagonalPath - 1] = void 0;
      }
      var canAdd = addPath && addPath.newPos + 1 < newLen;
      var canRemove = removePath && 0 <= oldPos2 && oldPos2 < oldLen;
      if (!canAdd && !canRemove) {
        bestPath[diagonalPath] = void 0;
        continue;
      }
      if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
        basePath = clonePath(removePath);
        pushComponent(basePath.components, false, true);
      } else {
        basePath = addPath;
        basePath.newPos++;
        pushComponent(basePath.components, true, false);
      }
      oldPos2 = extractCommon(basePath, newArr, oldArr, diagonalPath, equals);
      if (basePath.newPos + 1 >= newLen && oldPos2 + 1 >= oldLen) {
        return buildValues(basePath.components);
      } else {
        bestPath[diagonalPath] = basePath;
      }
    }
    editLength++;
  }
  while (editLength <= maxEditLength) {
    var ret = execEditLength();
    if (ret) {
      return ret;
    }
  }
}
function extractCommon(basePath, newArr, oldArr, diagonalPath, equals) {
  var newLen = newArr.length;
  var oldLen = oldArr.length;
  var newPos = basePath.newPos;
  var oldPos = newPos - diagonalPath;
  var commonCount = 0;
  while (newPos + 1 < newLen && oldPos + 1 < oldLen && equals(newArr[newPos + 1], oldArr[oldPos + 1])) {
    newPos++;
    oldPos++;
    commonCount++;
  }
  if (commonCount) {
    basePath.components.push({
      count: commonCount,
      added: false,
      removed: false,
      indices: []
    });
  }
  basePath.newPos = newPos;
  return oldPos;
}
function pushComponent(components, added, removed) {
  var last = components[components.length - 1];
  if (last && last.added === added && last.removed === removed) {
    components[components.length - 1] = {
      count: last.count + 1,
      added,
      removed,
      indices: []
    };
  } else {
    components.push({
      count: 1,
      added,
      removed,
      indices: []
    });
  }
}
function buildValues(components) {
  var componentPos = 0;
  var componentLen = components.length;
  var newPos = 0;
  var oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    var component12 = components[componentPos];
    if (!component12.removed) {
      var indices = [];
      for (let i = newPos; i < newPos + component12.count; i++) {
        indices.push(i);
      }
      component12.indices = indices;
      newPos += component12.count;
      if (!component12.added) {
        oldPos += component12.count;
      }
    } else {
      for (let i = oldPos; i < oldPos + component12.count; i++) {
        component12.indices.push(i);
      }
      oldPos += component12.count;
    }
  }
  return components;
}
function clonePath(path2) {
  return {
    newPos: path2.newPos,
    components: path2.components.slice(0)
  };
}
function arrayDiff_default(oldArr, newArr, equal) {
  return diff(oldArr, newArr, equal);
}

// node_modules/zrender/src/svg/helper/Definable.ts
const MARK_UNUSED = "0";
const MARK_USED = "1";
class Definable2 {
  constructor(zrId, svgRoot, tagNames, markLabel, domName) {
    this.nextId = 0;
    this._domName = "_dom";
    this.createElement = createElement;
    this._zrId = zrId;
    this._svgRoot = svgRoot;
    this._tagNames = typeof tagNames === "string" ? [tagNames] : tagNames;
    this._markLabel = markLabel;
    if (domName) {
      this._domName = domName;
    }
  }
  getDefs(isForceCreating) {
    let svgRoot = this._svgRoot;
    let defs = this._svgRoot.getElementsByTagName("defs");
    if (defs.length === 0) {
      if (isForceCreating) {
        let defs2 = svgRoot.insertBefore(this.createElement("defs"), svgRoot.firstChild);
        if (!defs2.contains) {
          defs2.contains = function(el) {
            const children = defs2.children;
            if (!children) {
              return false;
            }
            for (let i = children.length - 1; i >= 0; --i) {
              if (children[i] === el) {
                return true;
              }
            }
            return false;
          };
        }
        return defs2;
      } else {
        return null;
      }
    } else {
      return defs[0];
    }
  }
  doUpdate(target, onUpdate) {
    if (!target) {
      return;
    }
    const defs = this.getDefs(false);
    if (target[this._domName] && defs.contains(target[this._domName])) {
      if (typeof onUpdate === "function") {
        onUpdate(target);
      }
    } else {
      const dom2 = this.add(target);
      if (dom2) {
        target[this._domName] = dom2;
      }
    }
  }
  add(target) {
    return null;
  }
  addDom(dom2) {
    const defs = this.getDefs(true);
    defs.appendChild(dom2);
  }
  removeDom(target) {
    const defs = this.getDefs(false);
    if (defs && target[this._domName]) {
      defs.removeChild(target[this._domName]);
      target[this._domName] = null;
    }
  }
  getDoms() {
    const defs = this.getDefs(false);
    if (!defs) {
      return [];
    }
    let doms = [];
    each(this._tagNames, function(tagName) {
      const tags = defs.getElementsByTagName(tagName);
      doms = doms.concat([].slice.call(tags));
    });
    return doms;
  }
  markAllUnused() {
    const doms = this.getDoms();
    const that = this;
    each(doms, function(dom2) {
      dom2[that._markLabel] = MARK_UNUSED;
    });
  }
  markDomUsed(dom2) {
    if (dom2) {
      dom2[this._markLabel] = MARK_USED;
    }
  }
  removeUnused() {
    const defs = this.getDefs(false);
    if (!defs) {
      return;
    }
    const doms = this.getDoms();
    const that = this;
    each(doms, function(dom2) {
      if (dom2[that._markLabel] !== MARK_USED) {
        defs.removeChild(dom2);
      }
    });
  }
  getSvgProxy(displayable) {
    if (displayable instanceof Path_default) {
      return svgPath;
    } else if (displayable instanceof Image_default) {
      return svgImage;
    } else if (displayable instanceof TSpan_default) {
      return svgText;
    } else {
      return svgPath;
    }
  }
  getSvgElement(displayable) {
    return displayable.__svgEl;
  }
}

// node_modules/zrender/src/svg/helper/GradientManager.ts
function isLinearGradient(value) {
  return value.type === "linear";
}
function isRadialGradient(value) {
  return value.type === "radial";
}
class GradientManager2 extends Definable2 {
  constructor(zrId, svgRoot) {
    super(zrId, svgRoot, ["linearGradient", "radialGradient"], "__gradient_in_use__");
  }
  addWithoutUpdate(svgElement, displayable) {
    if (displayable && displayable.style) {
      const that = this;
      each(["fill", "stroke"], function(fillOrStroke) {
        let value = displayable.style[fillOrStroke];
        if (value && (value.type === "linear" || value.type === "radial")) {
          const gradient = value;
          const defs = that.getDefs(true);
          let dom2;
          if (gradient.__dom) {
            dom2 = gradient.__dom;
            if (!defs.contains(gradient.__dom)) {
              that.addDom(dom2);
            }
          } else {
            dom2 = that.add(gradient);
          }
          that.markUsed(displayable);
          const id = dom2.getAttribute("id");
          svgElement.setAttribute(fillOrStroke, "url(#" + id + ")");
        }
      });
    }
  }
  add(gradient) {
    let dom2;
    if (isLinearGradient(gradient)) {
      dom2 = this.createElement("linearGradient");
    } else if (isRadialGradient(gradient)) {
      dom2 = this.createElement("radialGradient");
    } else {
      logError("Illegal gradient type.");
      return null;
    }
    gradient.id = gradient.id || this.nextId++;
    dom2.setAttribute("id", "zr" + this._zrId + "-gradient-" + gradient.id);
    this.updateDom(gradient, dom2);
    this.addDom(dom2);
    return dom2;
  }
  update(gradient) {
    const that = this;
    this.doUpdate(gradient, function() {
      const type = gradient.type;
      const tagName = gradient.__dom.tagName;
      if (type === "linear" && tagName === "linearGradient" || type === "radial" && tagName === "radialGradient") {
        that.updateDom(gradient, gradient.__dom);
      } else {
        that.removeDom(gradient);
        that.add(gradient);
      }
    });
  }
  updateDom(gradient, dom2) {
    if (isLinearGradient(gradient)) {
      dom2.setAttribute("x1", gradient.x + "");
      dom2.setAttribute("y1", gradient.y + "");
      dom2.setAttribute("x2", gradient.x2 + "");
      dom2.setAttribute("y2", gradient.y2 + "");
    } else if (isRadialGradient(gradient)) {
      dom2.setAttribute("cx", gradient.x + "");
      dom2.setAttribute("cy", gradient.y + "");
      dom2.setAttribute("r", gradient.r + "");
    } else {
      logError("Illegal gradient type.");
      return;
    }
    if (gradient.global) {
      dom2.setAttribute("gradientUnits", "userSpaceOnUse");
    } else {
      dom2.setAttribute("gradientUnits", "objectBoundingBox");
    }
    dom2.innerHTML = "";
    const colors = gradient.colorStops;
    for (let i = 0, len2 = colors.length; i < len2; ++i) {
      const stop2 = this.createElement("stop");
      stop2.setAttribute("offset", colors[i].offset * 100 + "%");
      const color8 = colors[i].color;
      if (color8.indexOf("rgba") > -1) {
        const opacity = parse(color8)[3];
        const hex = toHex(color8);
        stop2.setAttribute("stop-color", "#" + hex);
        stop2.setAttribute("stop-opacity", opacity + "");
      } else {
        stop2.setAttribute("stop-color", colors[i].color);
      }
      dom2.appendChild(stop2);
    }
    gradient.__dom = dom2;
  }
  markUsed(displayable) {
    if (displayable.style) {
      let gradient = displayable.style.fill;
      if (gradient && gradient.__dom) {
        super.markDomUsed(gradient.__dom);
      }
      gradient = displayable.style.stroke;
      if (gradient && gradient.__dom) {
        super.markDomUsed(gradient.__dom);
      }
    }
  }
}

// node_modules/zrender/src/svg/helper/ClippathManager.ts
class ClippathManager2 extends Definable2 {
  constructor(zrId, svgRoot) {
    super(zrId, svgRoot, "clipPath", "__clippath_in_use__");
  }
  update(displayable) {
    const svgEl = this.getSvgElement(displayable);
    if (svgEl) {
      this.updateDom(svgEl, displayable.__clipPaths, false);
    }
    this.markUsed(displayable);
  }
  updateDom(parentEl, clipPaths, isText) {
    if (clipPaths && clipPaths.length > 0) {
      const defs = this.getDefs(true);
      const clipPath = clipPaths[0];
      let clipPathEl;
      let id;
      const domKey = isText ? "_textDom" : "_dom";
      if (clipPath[domKey]) {
        id = clipPath[domKey].getAttribute("id");
        clipPathEl = clipPath[domKey];
        if (!defs.contains(clipPathEl)) {
          defs.appendChild(clipPathEl);
        }
      } else {
        id = "zr" + this._zrId + "-clip-" + this.nextId;
        ++this.nextId;
        clipPathEl = this.createElement("clipPath");
        clipPathEl.setAttribute("id", id);
        defs.appendChild(clipPathEl);
        clipPath[domKey] = clipPathEl;
      }
      const svgProxy = this.getSvgProxy(clipPath);
      if (clipPath.transform && clipPath.parent.invTransform && !isText) {
        const transform = Array.prototype.slice.call(clipPath.transform);
        mul(clipPath.transform, clipPath.parent.invTransform, clipPath.transform);
        svgProxy.brush(clipPath);
        clipPath.transform = transform;
      } else {
        svgProxy.brush(clipPath);
      }
      const pathEl = this.getSvgElement(clipPath);
      clipPathEl.innerHTML = "";
      clipPathEl.appendChild(pathEl.cloneNode());
      parentEl.setAttribute("clip-path", "url(#" + id + ")");
      if (clipPaths.length > 1) {
        this.updateDom(clipPathEl, clipPaths.slice(1), isText);
      }
    } else {
      if (parentEl) {
        parentEl.setAttribute("clip-path", "none");
      }
    }
  }
  markUsed(displayable) {
    if (displayable.__clipPaths) {
      each(displayable.__clipPaths, (clipPath) => {
        if (clipPath._dom) {
          super.markDomUsed(clipPath._dom);
        }
        if (clipPath._textDom) {
          super.markDomUsed(clipPath._textDom);
        }
      });
    }
  }
}

// node_modules/zrender/src/svg/helper/ShadowManager.ts
class ShadowManager2 extends Definable2 {
  constructor(zrId, svgRoot) {
    super(zrId, svgRoot, ["filter"], "__filter_in_use__", "_shadowDom");
  }
  addWithoutUpdate(svgElement, displayable) {
    if (displayable && hasShadow(displayable.style)) {
      let dom2;
      if (displayable._shadowDom) {
        dom2 = displayable._shadowDom;
        const defs = this.getDefs(true);
        if (!defs.contains(displayable._shadowDom)) {
          this.addDom(dom2);
        }
      } else {
        dom2 = this.add(displayable);
      }
      this.markUsed(displayable);
      const id = dom2.getAttribute("id");
      svgElement.style.filter = "url(#" + id + ")";
    }
  }
  add(displayable) {
    const dom2 = this.createElement("filter");
    displayable._shadowDomId = displayable._shadowDomId || this.nextId++;
    dom2.setAttribute("id", "zr" + this._zrId + "-shadow-" + displayable._shadowDomId);
    this.updateDom(displayable, dom2);
    this.addDom(dom2);
    return dom2;
  }
  update(svgElement, displayable) {
    const style2 = displayable.style;
    if (hasShadow(style2)) {
      const that = this;
      super.doUpdate(displayable, function() {
        that.updateDom(displayable, displayable._shadowDom);
      });
    } else {
      this.remove(svgElement, displayable);
    }
  }
  remove(svgElement, displayable) {
    if (displayable._shadowDomId != null) {
      this.removeDom(svgElement);
      svgElement.style.filter = "";
    }
  }
  updateDom(displayable, dom2) {
    const domChildArr = dom2.getElementsByTagName("feDropShadow");
    const domChild = domChildArr.length ? domChildArr[0] : this.createElement("feDropShadow");
    const style2 = displayable.style;
    const scaleX = displayable.scaleX || 1;
    const scaleY = displayable.scaleY || 1;
    let offsetX;
    let offsetY;
    let blur;
    let color8;
    if (style2.shadowBlur || style2.shadowOffsetX || style2.shadowOffsetY) {
      offsetX = style2.shadowOffsetX || 0;
      offsetY = style2.shadowOffsetY || 0;
      blur = style2.shadowBlur;
      color8 = style2.shadowColor;
    } else if (style2.textShadowBlur) {
      offsetX = style2.textShadowOffsetX || 0;
      offsetY = style2.textShadowOffsetY || 0;
      blur = style2.textShadowBlur;
      color8 = style2.textShadowColor;
    } else {
      this.removeDom(dom2);
      return;
    }
    domChild.setAttribute("dx", offsetX / scaleX + "");
    domChild.setAttribute("dy", offsetY / scaleY + "");
    domChild.setAttribute("flood-color", color8);
    const stdDx = blur / 2 / scaleX;
    const stdDy = blur / 2 / scaleY;
    const stdDeviation = stdDx + " " + stdDy;
    domChild.setAttribute("stdDeviation", stdDeviation);
    dom2.setAttribute("x", "-100%");
    dom2.setAttribute("y", "-100%");
    dom2.setAttribute("width", Math.ceil(blur / 2 * 200) + "%");
    dom2.setAttribute("height", Math.ceil(blur / 2 * 200) + "%");
    dom2.appendChild(domChild);
    displayable._shadowDom = dom2;
  }
  markUsed(displayable) {
    if (displayable._shadowDom) {
      super.markDomUsed(displayable._shadowDom);
    }
  }
}
function hasShadow(style2) {
  return style2 && (style2.shadowBlur || style2.shadowOffsetX || style2.shadowOffsetY);
}

// node_modules/zrender/src/svg/Painter.ts
function parseInt102(val) {
  return parseInt(val, 10);
}
function getSvgProxy(el) {
  if (el instanceof Path_default) {
    return svgPath;
  } else if (el instanceof Image_default) {
    return svgImage;
  } else if (el instanceof TSpan_default) {
    return svgText;
  } else {
    return svgPath;
  }
}
function checkParentAvailable(parent, child) {
  return child && parent && child.parentNode !== parent;
}
function insertAfter(parent, child, prevSibling) {
  if (checkParentAvailable(parent, child) && prevSibling) {
    const nextSibling = prevSibling.nextSibling;
    nextSibling ? parent.insertBefore(child, nextSibling) : parent.appendChild(child);
  }
}
function prepend(parent, child) {
  if (checkParentAvailable(parent, child)) {
    const firstChild = parent.firstChild;
    firstChild ? parent.insertBefore(child, firstChild) : parent.appendChild(child);
  }
}
function remove(parent, child) {
  if (child && parent && child.parentNode === parent) {
    parent.removeChild(child);
  }
}
function getSvgElement(displayable) {
  return displayable.__svgEl;
}
class SVGPainter {
  constructor(root, storage2, opts, zrId) {
    this.type = "svg";
    this.refreshHover = createMethodNotSupport("refreshHover");
    this.pathToImage = createMethodNotSupport("pathToImage");
    this.configLayer = createMethodNotSupport("configLayer");
    this.root = root;
    this.storage = storage2;
    this._opts = opts = extend({}, opts || {});
    const svgDom = createElement("svg");
    svgDom.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    svgDom.setAttribute("version", "1.1");
    svgDom.setAttribute("baseProfile", "full");
    svgDom.style.cssText = "user-select:none;position:absolute;left:0;top:0;";
    const bgRoot = createElement("g");
    svgDom.appendChild(bgRoot);
    const svgRoot = createElement("g");
    svgDom.appendChild(svgRoot);
    this._gradientManager = new GradientManager2(zrId, svgRoot);
    this._clipPathManager = new ClippathManager2(zrId, svgRoot);
    this._shadowManager = new ShadowManager2(zrId, svgRoot);
    const viewport = document.createElement("div");
    viewport.style.cssText = "overflow:hidden;position:relative";
    this._svgDom = svgDom;
    this._svgRoot = svgRoot;
    this._backgroundRoot = bgRoot;
    this._viewport = viewport;
    root.appendChild(viewport);
    viewport.appendChild(svgDom);
    this.resize(opts.width, opts.height);
    this._visibleList = [];
  }
  getType() {
    return "svg";
  }
  getViewportRoot() {
    return this._viewport;
  }
  getSvgDom() {
    return this._svgDom;
  }
  getSvgRoot() {
    return this._svgRoot;
  }
  getViewportRootOffset() {
    const viewportRoot = this.getViewportRoot();
    if (viewportRoot) {
      return {
        offsetLeft: viewportRoot.offsetLeft || 0,
        offsetTop: viewportRoot.offsetTop || 0
      };
    }
  }
  refresh() {
    const list = this.storage.getDisplayList(true);
    this._paintList(list);
  }
  setBackgroundColor(backgroundColor) {
    if (this._backgroundRoot && this._backgroundNode) {
      this._backgroundRoot.removeChild(this._backgroundNode);
    }
    const bgNode = createElement("rect");
    bgNode.setAttribute("width", this.getWidth());
    bgNode.setAttribute("height", this.getHeight());
    bgNode.setAttribute("x", 0);
    bgNode.setAttribute("y", 0);
    bgNode.setAttribute("id", 0);
    bgNode.style.fill = backgroundColor;
    this._backgroundRoot.appendChild(bgNode);
    this._backgroundNode = bgNode;
  }
  _paintList(list) {
    this._gradientManager.markAllUnused();
    this._clipPathManager.markAllUnused();
    this._shadowManager.markAllUnused();
    const svgRoot = this._svgRoot;
    const visibleList = this._visibleList;
    const listLen = list.length;
    const newVisibleList = [];
    for (let i = 0; i < listLen; i++) {
      const displayable = list[i];
      const svgProxy = getSvgProxy(displayable);
      const svgElement = getSvgElement(displayable);
      if (!displayable.invisible) {
        if (displayable.__dirty || !svgElement) {
          svgProxy && svgProxy.brush(displayable);
          this._clipPathManager.update(displayable);
          if (displayable.style) {
            this._gradientManager.update(displayable.style.fill);
            this._gradientManager.update(displayable.style.stroke);
            this._shadowManager.update(svgElement, displayable);
          }
          displayable.__dirty = 0;
        }
        if (getSvgElement(displayable)) {
          newVisibleList.push(displayable);
        }
      }
    }
    const diff2 = arrayDiff_default(visibleList, newVisibleList);
    let prevSvgElement;
    for (let i = 0; i < diff2.length; i++) {
      const item = diff2[i];
      if (item.removed) {
        for (let k = 0; k < item.count; k++) {
          const displayable = visibleList[item.indices[k]];
          const svgElement = getSvgElement(displayable);
          remove(svgRoot, svgElement);
        }
      }
    }
    for (let i = 0; i < diff2.length; i++) {
      const item = diff2[i];
      if (item.added) {
        for (let k = 0; k < item.count; k++) {
          const displayable = newVisibleList[item.indices[k]];
          const svgElement = getSvgElement(displayable);
          prevSvgElement ? insertAfter(svgRoot, svgElement, prevSvgElement) : prepend(svgRoot, svgElement);
          prevSvgElement = svgElement || prevSvgElement;
          this._gradientManager.addWithoutUpdate(svgElement, displayable);
          this._shadowManager.addWithoutUpdate(svgElement, displayable);
          this._clipPathManager.markUsed(displayable);
        }
      } else if (!item.removed) {
        for (let k = 0; k < item.count; k++) {
          const displayable = newVisibleList[item.indices[k]];
          const svgElement = getSvgElement(displayable);
          this._gradientManager.markUsed(displayable);
          this._gradientManager.addWithoutUpdate(svgElement, displayable);
          this._shadowManager.markUsed(displayable);
          this._shadowManager.addWithoutUpdate(svgElement, displayable);
          this._clipPathManager.markUsed(displayable);
          prevSvgElement = svgElement || prevSvgElement;
        }
      }
    }
    this._gradientManager.removeUnused();
    this._clipPathManager.removeUnused();
    this._shadowManager.removeUnused();
    this._visibleList = newVisibleList;
  }
  _getDefs(isForceCreating) {
    let svgRoot = this._svgDom;
    let defs = svgRoot.getElementsByTagName("defs");
    if (defs.length === 0) {
      if (isForceCreating) {
        let defs2 = svgRoot.insertBefore(createElement("defs"), svgRoot.firstChild);
        if (!defs2.contains) {
          defs2.contains = function(el) {
            const children = defs2.children;
            if (!children) {
              return false;
            }
            for (let i = children.length - 1; i >= 0; --i) {
              if (children[i] === el) {
                return true;
              }
            }
            return false;
          };
        }
        return defs2;
      } else {
        return null;
      }
    } else {
      return defs[0];
    }
  }
  resize(width, height) {
    const viewport = this._viewport;
    viewport.style.display = "none";
    const opts = this._opts;
    width != null && (opts.width = width);
    height != null && (opts.height = height);
    width = this._getSize(0);
    height = this._getSize(1);
    viewport.style.display = "";
    if (this._width !== width || this._height !== height) {
      this._width = width;
      this._height = height;
      const viewportStyle = viewport.style;
      viewportStyle.width = width + "px";
      viewportStyle.height = height + "px";
      const svgRoot = this._svgDom;
      svgRoot.setAttribute("width", width + "");
      svgRoot.setAttribute("height", height + "");
    }
    if (this._backgroundNode) {
      this._backgroundNode.setAttribute("width", width);
      this._backgroundNode.setAttribute("height", height);
    }
  }
  getWidth() {
    return this._width;
  }
  getHeight() {
    return this._height;
  }
  _getSize(whIdx) {
    const opts = this._opts;
    const wh = ["width", "height"][whIdx];
    const cwh = ["clientWidth", "clientHeight"][whIdx];
    const plt = ["paddingLeft", "paddingTop"][whIdx];
    const prb = ["paddingRight", "paddingBottom"][whIdx];
    if (opts[wh] != null && opts[wh] !== "auto") {
      return parseFloat(opts[wh]);
    }
    const root = this.root;
    const stl = document.defaultView.getComputedStyle(root);
    return (root[cwh] || parseInt102(stl[wh]) || parseInt102(root.style[wh])) - (parseInt102(stl[plt]) || 0) - (parseInt102(stl[prb]) || 0) | 0;
  }
  dispose() {
    this.root.innerHTML = "";
    this._svgRoot = this._backgroundRoot = this._svgDom = this._backgroundNode = this._viewport = this.storage = null;
  }
  clear() {
    if (this._viewport) {
      this.root.removeChild(this._viewport);
    }
  }
  toDataURL() {
    this.refresh();
    const html = encodeURIComponent(this._svgDom.outerHTML.replace(/></g, ">\n\r<"));
    return "data:image/svg+xml;charset=UTF-8," + html;
  }
}
function createMethodNotSupport(method) {
  return function() {
    logError('In SVG mode painter not support method "' + method + '"');
  };
}
const Painter_default2 = SVGPainter;

// node_modules/zrender/src/svg/svg.ts
registerPainter("svg", Painter_default2);

// echarts.all.ts
__export(exports, {
  Axis: () => Axis_default,
  List: () => List_default,
  Model: () => Model_default,
  PRIORITY: () => PRIORITY,
  color: () => color_exports,
  connect: () => connect,
  dataTool: () => dataTool,
  dependencies: () => dependencies,
  disConnect: () => disConnect,
  disconnect: () => disconnect,
  dispose: () => dispose2,
  env: () => env_default,
  extendChartView: () => extendChartView,
  extendComponentModel: () => extendComponentModel,
  extendComponentView: () => extendComponentView,
  extendSeriesModel: () => extendSeriesModel,
  format: () => format_exports,
  getCoordinateSystemDimensions: () => getCoordinateSystemDimensions,
  getInstanceByDom: () => getInstanceByDom,
  getInstanceById: () => getInstanceById,
  getMap: () => getMap,
  graphic: () => graphic74,
  helper: () => helper_exports,
  init: () => init3,
  matrix: () => matrix_exports,
  number: () => number_exports,
  parseGeoJSON: () => parseGeoJson_default,
  parseGeoJson: () => parseGeoJson3,
  registerAction: () => registerAction,
  registerCoordinateSystem: () => registerCoordinateSystem,
  registerLayout: () => registerLayout,
  registerLoading: () => registerLoading,
  registerMap: () => registerMap,
  registerPostUpdate: () => registerPostUpdate,
  registerPreprocessor: () => registerPreprocessor,
  registerProcessor: () => registerProcessor,
  registerTheme: () => registerTheme,
  registerVisual: () => registerVisual,
  setCanvasCreator: () => setCanvasCreator,
  throttle: () => throttle2,
  util: () => ecUtil,
  vector: () => vector_exports,
  version: () => version2,
  zrender: () => zrender_exports
});
//# sourceMappingURL=echarts.js.map

}));